
App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e2c  08040194  08040194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08042fc0  08042fc0  00003fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08042ff8  08042ff8  0000403c  2**0
                  CONTENTS
  4 .ARM          00000000  08042ff8  08042ff8  0000403c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08042ff8  08042ff8  0000403c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08042ff8  08042ff8  00003ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08042ffc  08042ffc  00003ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08043000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000403c  2**0
                  CONTENTS
 10 .bss          000000b0  2000003c  2000003c  0000403c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  0000403c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008e2d  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001749  00000000  00000000  0000ce99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b0  00000000  00000000  0000e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000514  00000000  00000000  0000ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f126  00000000  00000000  0000f1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a57b  00000000  00000000  0002e2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc54e  00000000  00000000  0003884d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f4d9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001968  00000000  00000000  000f4de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000f6748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040194 <__do_global_dtors_aux>:
 8040194:	b510      	push	{r4, lr}
 8040196:	4c05      	ldr	r4, [pc, #20]	@ (80401ac <__do_global_dtors_aux+0x18>)
 8040198:	7823      	ldrb	r3, [r4, #0]
 804019a:	b933      	cbnz	r3, 80401aa <__do_global_dtors_aux+0x16>
 804019c:	4b04      	ldr	r3, [pc, #16]	@ (80401b0 <__do_global_dtors_aux+0x1c>)
 804019e:	b113      	cbz	r3, 80401a6 <__do_global_dtors_aux+0x12>
 80401a0:	4804      	ldr	r0, [pc, #16]	@ (80401b4 <__do_global_dtors_aux+0x20>)
 80401a2:	f3af 8000 	nop.w
 80401a6:	2301      	movs	r3, #1
 80401a8:	7023      	strb	r3, [r4, #0]
 80401aa:	bd10      	pop	{r4, pc}
 80401ac:	2000003c 	.word	0x2000003c
 80401b0:	00000000 	.word	0x00000000
 80401b4:	08042fa8 	.word	0x08042fa8

080401b8 <frame_dummy>:
 80401b8:	b508      	push	{r3, lr}
 80401ba:	4b03      	ldr	r3, [pc, #12]	@ (80401c8 <frame_dummy+0x10>)
 80401bc:	b11b      	cbz	r3, 80401c6 <frame_dummy+0xe>
 80401be:	4903      	ldr	r1, [pc, #12]	@ (80401cc <frame_dummy+0x14>)
 80401c0:	4803      	ldr	r0, [pc, #12]	@ (80401d0 <frame_dummy+0x18>)
 80401c2:	f3af 8000 	nop.w
 80401c6:	bd08      	pop	{r3, pc}
 80401c8:	00000000 	.word	0x00000000
 80401cc:	20000040 	.word	0x20000040
 80401d0:	08042fa8 	.word	0x08042fa8

080401d4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80401d4:	b580      	push	{r7, lr}
 80401d6:	b08a      	sub	sp, #40	@ 0x28
 80401d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80401da:	f107 0314 	add.w	r3, r7, #20
 80401de:	2200      	movs	r2, #0
 80401e0:	601a      	str	r2, [r3, #0]
 80401e2:	605a      	str	r2, [r3, #4]
 80401e4:	609a      	str	r2, [r3, #8]
 80401e6:	60da      	str	r2, [r3, #12]
 80401e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80401ea:	4b4f      	ldr	r3, [pc, #316]	@ (8040328 <MX_GPIO_Init+0x154>)
 80401ec:	695b      	ldr	r3, [r3, #20]
 80401ee:	4a4e      	ldr	r2, [pc, #312]	@ (8040328 <MX_GPIO_Init+0x154>)
 80401f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80401f4:	6153      	str	r3, [r2, #20]
 80401f6:	4b4c      	ldr	r3, [pc, #304]	@ (8040328 <MX_GPIO_Init+0x154>)
 80401f8:	695b      	ldr	r3, [r3, #20]
 80401fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80401fe:	613b      	str	r3, [r7, #16]
 8040200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040202:	4b49      	ldr	r3, [pc, #292]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040204:	695b      	ldr	r3, [r3, #20]
 8040206:	4a48      	ldr	r2, [pc, #288]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040208:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 804020c:	6153      	str	r3, [r2, #20]
 804020e:	4b46      	ldr	r3, [pc, #280]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040210:	695b      	ldr	r3, [r3, #20]
 8040212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8040216:	60fb      	str	r3, [r7, #12]
 8040218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804021a:	4b43      	ldr	r3, [pc, #268]	@ (8040328 <MX_GPIO_Init+0x154>)
 804021c:	695b      	ldr	r3, [r3, #20]
 804021e:	4a42      	ldr	r2, [pc, #264]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8040224:	6153      	str	r3, [r2, #20]
 8040226:	4b40      	ldr	r3, [pc, #256]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040228:	695b      	ldr	r3, [r3, #20]
 804022a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804022e:	60bb      	str	r3, [r7, #8]
 8040230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040232:	4b3d      	ldr	r3, [pc, #244]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040234:	695b      	ldr	r3, [r3, #20]
 8040236:	4a3c      	ldr	r2, [pc, #240]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 804023c:	6153      	str	r3, [r2, #20]
 804023e:	4b3a      	ldr	r3, [pc, #232]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040240:	695b      	ldr	r3, [r3, #20]
 8040242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8040246:	607b      	str	r3, [r7, #4]
 8040248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 804024a:	4b37      	ldr	r3, [pc, #220]	@ (8040328 <MX_GPIO_Init+0x154>)
 804024c:	695b      	ldr	r3, [r3, #20]
 804024e:	4a36      	ldr	r2, [pc, #216]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040250:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8040254:	6153      	str	r3, [r2, #20]
 8040256:	4b34      	ldr	r3, [pc, #208]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040258:	695b      	ldr	r3, [r3, #20]
 804025a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 804025e:	603b      	str	r3, [r7, #0]
 8040260:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8040262:	2200      	movs	r2, #0
 8040264:	2120      	movs	r1, #32
 8040266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 804026a:	f000 fd57 	bl	8040d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 804026e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8040272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8040274:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8040278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804027a:	2300      	movs	r3, #0
 804027c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 804027e:	f107 0314 	add.w	r3, r7, #20
 8040282:	4619      	mov	r1, r3
 8040284:	4829      	ldr	r0, [pc, #164]	@ (804032c <MX_GPIO_Init+0x158>)
 8040286:	f000 fbbf 	bl	8040a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 804028a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 804028e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8040290:	2303      	movs	r3, #3
 8040292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040294:	2300      	movs	r3, #0
 8040296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8040298:	f107 0314 	add.w	r3, r7, #20
 804029c:	4619      	mov	r1, r3
 804029e:	4823      	ldr	r0, [pc, #140]	@ (804032c <MX_GPIO_Init+0x158>)
 80402a0:	f000 fbb2 	bl	8040a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80402a4:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 80402a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80402aa:	2303      	movs	r3, #3
 80402ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80402ae:	2300      	movs	r3, #0
 80402b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80402b2:	f107 0314 	add.w	r3, r7, #20
 80402b6:	4619      	mov	r1, r3
 80402b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80402bc:	f000 fba4 	bl	8040a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80402c0:	2320      	movs	r3, #32
 80402c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80402c4:	2301      	movs	r3, #1
 80402c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80402c8:	2300      	movs	r3, #0
 80402ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80402cc:	2300      	movs	r3, #0
 80402ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80402d0:	f107 0314 	add.w	r3, r7, #20
 80402d4:	4619      	mov	r1, r3
 80402d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80402da:	f000 fb95 	bl	8040a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80402de:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80402e2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80402e4:	2303      	movs	r3, #3
 80402e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80402e8:	2300      	movs	r3, #0
 80402ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80402ec:	f107 0314 	add.w	r3, r7, #20
 80402f0:	4619      	mov	r1, r3
 80402f2:	480f      	ldr	r0, [pc, #60]	@ (8040330 <MX_GPIO_Init+0x15c>)
 80402f4:	f000 fb88 	bl	8040a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80402f8:	2304      	movs	r3, #4
 80402fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80402fc:	2303      	movs	r3, #3
 80402fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040300:	2300      	movs	r3, #0
 8040302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040304:	f107 0314 	add.w	r3, r7, #20
 8040308:	4619      	mov	r1, r3
 804030a:	480a      	ldr	r0, [pc, #40]	@ (8040334 <MX_GPIO_Init+0x160>)
 804030c:	f000 fb7c 	bl	8040a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8040310:	2200      	movs	r2, #0
 8040312:	2100      	movs	r1, #0
 8040314:	2028      	movs	r0, #40	@ 0x28
 8040316:	f000 fb40 	bl	804099a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 804031a:	2028      	movs	r0, #40	@ 0x28
 804031c:	f000 fb59 	bl	80409d2 <HAL_NVIC_EnableIRQ>

}
 8040320:	bf00      	nop
 8040322:	3728      	adds	r7, #40	@ 0x28
 8040324:	46bd      	mov	sp, r7
 8040326:	bd80      	pop	{r7, pc}
 8040328:	40021000 	.word	0x40021000
 804032c:	48000800 	.word	0x48000800
 8040330:	48000400 	.word	0x48000400
 8040334:	48000c00 	.word	0x48000c00

08040338 <HAL_GPIO_EXTI_Callback>:
uint32_t delay = 500;
uint8_t i = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8040338:	b580      	push	{r7, lr}
 804033a:	b082      	sub	sp, #8
 804033c:	af00      	add	r7, sp, #0
 804033e:	4603      	mov	r3, r0
 8040340:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == B1_Pin )
 8040342:	88fb      	ldrh	r3, [r7, #6]
 8040344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8040348:	d122      	bne.n	8040390 <HAL_GPIO_EXTI_Callback+0x58>
	{
		if ( HAL_GetTick() - stamp > 1000 )
 804034a:	f000 fa1b 	bl	8040784 <HAL_GetTick>
 804034e:	4602      	mov	r2, r0
 8040350:	4b11      	ldr	r3, [pc, #68]	@ (8040398 <HAL_GPIO_EXTI_Callback+0x60>)
 8040352:	681b      	ldr	r3, [r3, #0]
 8040354:	1ad3      	subs	r3, r2, r3
 8040356:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 804035a:	d919      	bls.n	8040390 <HAL_GPIO_EXTI_Callback+0x58>
		{
			stamp = HAL_GetTick();
 804035c:	f000 fa12 	bl	8040784 <HAL_GetTick>
 8040360:	4603      	mov	r3, r0
 8040362:	4a0d      	ldr	r2, [pc, #52]	@ (8040398 <HAL_GPIO_EXTI_Callback+0x60>)
 8040364:	6013      	str	r3, [r2, #0]
			//toggle = toggle? 0:1;
			delay = delay_arr[i];
 8040366:	4b0d      	ldr	r3, [pc, #52]	@ (804039c <HAL_GPIO_EXTI_Callback+0x64>)
 8040368:	781b      	ldrb	r3, [r3, #0]
 804036a:	461a      	mov	r2, r3
 804036c:	4b0c      	ldr	r3, [pc, #48]	@ (80403a0 <HAL_GPIO_EXTI_Callback+0x68>)
 804036e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040372:	4a0c      	ldr	r2, [pc, #48]	@ (80403a4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8040374:	6013      	str	r3, [r2, #0]
			i = ( i + 1 ) % size;
 8040376:	4b09      	ldr	r3, [pc, #36]	@ (804039c <HAL_GPIO_EXTI_Callback+0x64>)
 8040378:	781b      	ldrb	r3, [r3, #0]
 804037a:	3301      	adds	r3, #1
 804037c:	4a0a      	ldr	r2, [pc, #40]	@ (80403a8 <HAL_GPIO_EXTI_Callback+0x70>)
 804037e:	7812      	ldrb	r2, [r2, #0]
 8040380:	fb93 f1f2 	sdiv	r1, r3, r2
 8040384:	fb01 f202 	mul.w	r2, r1, r2
 8040388:	1a9b      	subs	r3, r3, r2
 804038a:	b2da      	uxtb	r2, r3
 804038c:	4b03      	ldr	r3, [pc, #12]	@ (804039c <HAL_GPIO_EXTI_Callback+0x64>)
 804038e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8040390:	bf00      	nop
 8040392:	3708      	adds	r7, #8
 8040394:	46bd      	mov	sp, r7
 8040396:	bd80      	pop	{r7, pc}
 8040398:	20000058 	.word	0x20000058
 804039c:	2000005c 	.word	0x2000005c
 80403a0:	20000004 	.word	0x20000004
 80403a4:	2000002c 	.word	0x2000002c
 80403a8:	20000001 	.word	0x20000001

080403ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80403ac:	b580      	push	{r7, lr}
 80403ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80403b0:	f000 f98e 	bl	80406d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80403b4:	f000 f81a 	bl	80403ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80403b8:	f7ff ff0c 	bl	80401d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80403bc:	f000 f8ec 	bl	8040598 <MX_USART2_UART_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80403c0:	b662      	cpsie	i
}
 80403c2:	bf00      	nop

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( toggle )
 80403c4:	4b07      	ldr	r3, [pc, #28]	@ (80403e4 <main+0x38>)
 80403c6:	781b      	ldrb	r3, [r3, #0]
 80403c8:	2b00      	cmp	r3, #0
 80403ca:	d0fb      	beq.n	80403c4 <main+0x18>
	  {
		  HAL_GPIO_TogglePin( LD2_GPIO_Port, LD2_Pin );
 80403cc:	2120      	movs	r1, #32
 80403ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80403d2:	f000 fcbb 	bl	8040d4c <HAL_GPIO_TogglePin>
		  HAL_Delay(delay);
 80403d6:	4b04      	ldr	r3, [pc, #16]	@ (80403e8 <main+0x3c>)
 80403d8:	681b      	ldr	r3, [r3, #0]
 80403da:	4618      	mov	r0, r3
 80403dc:	f000 f9de 	bl	804079c <HAL_Delay>
	  if ( toggle )
 80403e0:	e7f0      	b.n	80403c4 <main+0x18>
 80403e2:	bf00      	nop
 80403e4:	20000000 	.word	0x20000000
 80403e8:	2000002c 	.word	0x2000002c

080403ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80403ec:	b580      	push	{r7, lr}
 80403ee:	b0a6      	sub	sp, #152	@ 0x98
 80403f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80403f2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80403f6:	2228      	movs	r2, #40	@ 0x28
 80403f8:	2100      	movs	r1, #0
 80403fa:	4618      	mov	r0, r3
 80403fc:	f002 fda7 	bl	8042f4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040400:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8040404:	2200      	movs	r2, #0
 8040406:	601a      	str	r2, [r3, #0]
 8040408:	605a      	str	r2, [r3, #4]
 804040a:	609a      	str	r2, [r3, #8]
 804040c:	60da      	str	r2, [r3, #12]
 804040e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040410:	1d3b      	adds	r3, r7, #4
 8040412:	2258      	movs	r2, #88	@ 0x58
 8040414:	2100      	movs	r1, #0
 8040416:	4618      	mov	r0, r3
 8040418:	f002 fd99 	bl	8042f4e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 804041c:	2302      	movs	r3, #2
 804041e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8040420:	2301      	movs	r3, #1
 8040422:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8040424:	2310      	movs	r3, #16
 8040426:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804042a:	2302      	movs	r3, #2
 804042c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8040430:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8040434:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8040438:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 804043c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8040440:	2300      	movs	r3, #0
 8040442:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040446:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 804044a:	4618      	mov	r0, r3
 804044c:	f000 fcb0 	bl	8040db0 <HAL_RCC_OscConfig>
 8040450:	4603      	mov	r3, r0
 8040452:	2b00      	cmp	r3, #0
 8040454:	d001      	beq.n	804045a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8040456:	f000 f827 	bl	80404a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804045a:	230f      	movs	r3, #15
 804045c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 804045e:	2302      	movs	r3, #2
 8040460:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040462:	2300      	movs	r3, #0
 8040464:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8040466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 804046a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 804046c:	2300      	movs	r3, #0
 804046e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8040470:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8040474:	2102      	movs	r1, #2
 8040476:	4618      	mov	r0, r3
 8040478:	f001 fcee 	bl	8041e58 <HAL_RCC_ClockConfig>
 804047c:	4603      	mov	r3, r0
 804047e:	2b00      	cmp	r3, #0
 8040480:	d001      	beq.n	8040486 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8040482:	f000 f811 	bl	80404a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8040486:	2302      	movs	r3, #2
 8040488:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 804048a:	2300      	movs	r3, #0
 804048c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 804048e:	1d3b      	adds	r3, r7, #4
 8040490:	4618      	mov	r0, r3
 8040492:	f001 ff01 	bl	8042298 <HAL_RCCEx_PeriphCLKConfig>
 8040496:	4603      	mov	r3, r0
 8040498:	2b00      	cmp	r3, #0
 804049a:	d001      	beq.n	80404a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 804049c:	f000 f804 	bl	80404a8 <Error_Handler>
  }
}
 80404a0:	bf00      	nop
 80404a2:	3798      	adds	r7, #152	@ 0x98
 80404a4:	46bd      	mov	sp, r7
 80404a6:	bd80      	pop	{r7, pc}

080404a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80404a8:	b480      	push	{r7}
 80404aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80404ac:	b672      	cpsid	i
}
 80404ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80404b0:	bf00      	nop
 80404b2:	e7fd      	b.n	80404b0 <Error_Handler+0x8>

080404b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80404b4:	b580      	push	{r7, lr}
 80404b6:	b082      	sub	sp, #8
 80404b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80404ba:	4b0f      	ldr	r3, [pc, #60]	@ (80404f8 <HAL_MspInit+0x44>)
 80404bc:	699b      	ldr	r3, [r3, #24]
 80404be:	4a0e      	ldr	r2, [pc, #56]	@ (80404f8 <HAL_MspInit+0x44>)
 80404c0:	f043 0301 	orr.w	r3, r3, #1
 80404c4:	6193      	str	r3, [r2, #24]
 80404c6:	4b0c      	ldr	r3, [pc, #48]	@ (80404f8 <HAL_MspInit+0x44>)
 80404c8:	699b      	ldr	r3, [r3, #24]
 80404ca:	f003 0301 	and.w	r3, r3, #1
 80404ce:	607b      	str	r3, [r7, #4]
 80404d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80404d2:	4b09      	ldr	r3, [pc, #36]	@ (80404f8 <HAL_MspInit+0x44>)
 80404d4:	69db      	ldr	r3, [r3, #28]
 80404d6:	4a08      	ldr	r2, [pc, #32]	@ (80404f8 <HAL_MspInit+0x44>)
 80404d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80404dc:	61d3      	str	r3, [r2, #28]
 80404de:	4b06      	ldr	r3, [pc, #24]	@ (80404f8 <HAL_MspInit+0x44>)
 80404e0:	69db      	ldr	r3, [r3, #28]
 80404e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80404e6:	603b      	str	r3, [r7, #0]
 80404e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80404ea:	2007      	movs	r0, #7
 80404ec:	f000 fa4a 	bl	8040984 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80404f0:	bf00      	nop
 80404f2:	3708      	adds	r7, #8
 80404f4:	46bd      	mov	sp, r7
 80404f6:	bd80      	pop	{r7, pc}
 80404f8:	40021000 	.word	0x40021000

080404fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80404fc:	b480      	push	{r7}
 80404fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8040500:	bf00      	nop
 8040502:	e7fd      	b.n	8040500 <NMI_Handler+0x4>

08040504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040504:	b480      	push	{r7}
 8040506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040508:	bf00      	nop
 804050a:	e7fd      	b.n	8040508 <HardFault_Handler+0x4>

0804050c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 804050c:	b480      	push	{r7}
 804050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040510:	bf00      	nop
 8040512:	e7fd      	b.n	8040510 <MemManage_Handler+0x4>

08040514 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040514:	b480      	push	{r7}
 8040516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040518:	bf00      	nop
 804051a:	e7fd      	b.n	8040518 <BusFault_Handler+0x4>

0804051c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 804051c:	b480      	push	{r7}
 804051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040520:	bf00      	nop
 8040522:	e7fd      	b.n	8040520 <UsageFault_Handler+0x4>

08040524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040524:	b480      	push	{r7}
 8040526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040528:	bf00      	nop
 804052a:	46bd      	mov	sp, r7
 804052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040530:	4770      	bx	lr

08040532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040532:	b480      	push	{r7}
 8040534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040536:	bf00      	nop
 8040538:	46bd      	mov	sp, r7
 804053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804053e:	4770      	bx	lr

08040540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040540:	b480      	push	{r7}
 8040542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040544:	bf00      	nop
 8040546:	46bd      	mov	sp, r7
 8040548:	f85d 7b04 	ldr.w	r7, [sp], #4
 804054c:	4770      	bx	lr

0804054e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 804054e:	b580      	push	{r7, lr}
 8040550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040552:	f000 f903 	bl	804075c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040556:	bf00      	nop
 8040558:	bd80      	pop	{r7, pc}

0804055a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 804055a:	b580      	push	{r7, lr}
 804055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 804055e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8040562:	f000 fc0d 	bl	8040d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8040566:	bf00      	nop
 8040568:	bd80      	pop	{r7, pc}
	...

0804056c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 804056c:	b480      	push	{r7}
 804056e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040570:	4b07      	ldr	r3, [pc, #28]	@ (8040590 <SystemInit+0x24>)
 8040572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8040576:	4a06      	ldr	r2, [pc, #24]	@ (8040590 <SystemInit+0x24>)
 8040578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 804057c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8040580:	4b03      	ldr	r3, [pc, #12]	@ (8040590 <SystemInit+0x24>)
 8040582:	4a04      	ldr	r2, [pc, #16]	@ (8040594 <SystemInit+0x28>)
 8040584:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8040586:	bf00      	nop
 8040588:	46bd      	mov	sp, r7
 804058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804058e:	4770      	bx	lr
 8040590:	e000ed00 	.word	0xe000ed00
 8040594:	08040000 	.word	0x08040000

08040598 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8040598:	b580      	push	{r7, lr}
 804059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 804059c:	4b14      	ldr	r3, [pc, #80]	@ (80405f0 <MX_USART2_UART_Init+0x58>)
 804059e:	4a15      	ldr	r2, [pc, #84]	@ (80405f4 <MX_USART2_UART_Init+0x5c>)
 80405a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80405a2:	4b13      	ldr	r3, [pc, #76]	@ (80405f0 <MX_USART2_UART_Init+0x58>)
 80405a4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80405a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80405aa:	4b11      	ldr	r3, [pc, #68]	@ (80405f0 <MX_USART2_UART_Init+0x58>)
 80405ac:	2200      	movs	r2, #0
 80405ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80405b0:	4b0f      	ldr	r3, [pc, #60]	@ (80405f0 <MX_USART2_UART_Init+0x58>)
 80405b2:	2200      	movs	r2, #0
 80405b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80405b6:	4b0e      	ldr	r3, [pc, #56]	@ (80405f0 <MX_USART2_UART_Init+0x58>)
 80405b8:	2200      	movs	r2, #0
 80405ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80405bc:	4b0c      	ldr	r3, [pc, #48]	@ (80405f0 <MX_USART2_UART_Init+0x58>)
 80405be:	220c      	movs	r2, #12
 80405c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80405c2:	4b0b      	ldr	r3, [pc, #44]	@ (80405f0 <MX_USART2_UART_Init+0x58>)
 80405c4:	2200      	movs	r2, #0
 80405c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80405c8:	4b09      	ldr	r3, [pc, #36]	@ (80405f0 <MX_USART2_UART_Init+0x58>)
 80405ca:	2200      	movs	r2, #0
 80405cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80405ce:	4b08      	ldr	r3, [pc, #32]	@ (80405f0 <MX_USART2_UART_Init+0x58>)
 80405d0:	2200      	movs	r2, #0
 80405d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80405d4:	4b06      	ldr	r3, [pc, #24]	@ (80405f0 <MX_USART2_UART_Init+0x58>)
 80405d6:	2200      	movs	r2, #0
 80405d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80405da:	4805      	ldr	r0, [pc, #20]	@ (80405f0 <MX_USART2_UART_Init+0x58>)
 80405dc:	f002 f87a 	bl	80426d4 <HAL_UART_Init>
 80405e0:	4603      	mov	r3, r0
 80405e2:	2b00      	cmp	r3, #0
 80405e4:	d001      	beq.n	80405ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80405e6:	f7ff ff5f 	bl	80404a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80405ea:	bf00      	nop
 80405ec:	bd80      	pop	{r7, pc}
 80405ee:	bf00      	nop
 80405f0:	20000060 	.word	0x20000060
 80405f4:	40004400 	.word	0x40004400

080405f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80405f8:	b580      	push	{r7, lr}
 80405fa:	b08a      	sub	sp, #40	@ 0x28
 80405fc:	af00      	add	r7, sp, #0
 80405fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040600:	f107 0314 	add.w	r3, r7, #20
 8040604:	2200      	movs	r2, #0
 8040606:	601a      	str	r2, [r3, #0]
 8040608:	605a      	str	r2, [r3, #4]
 804060a:	609a      	str	r2, [r3, #8]
 804060c:	60da      	str	r2, [r3, #12]
 804060e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8040610:	687b      	ldr	r3, [r7, #4]
 8040612:	681b      	ldr	r3, [r3, #0]
 8040614:	4a17      	ldr	r2, [pc, #92]	@ (8040674 <HAL_UART_MspInit+0x7c>)
 8040616:	4293      	cmp	r3, r2
 8040618:	d128      	bne.n	804066c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 804061a:	4b17      	ldr	r3, [pc, #92]	@ (8040678 <HAL_UART_MspInit+0x80>)
 804061c:	69db      	ldr	r3, [r3, #28]
 804061e:	4a16      	ldr	r2, [pc, #88]	@ (8040678 <HAL_UART_MspInit+0x80>)
 8040620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8040624:	61d3      	str	r3, [r2, #28]
 8040626:	4b14      	ldr	r3, [pc, #80]	@ (8040678 <HAL_UART_MspInit+0x80>)
 8040628:	69db      	ldr	r3, [r3, #28]
 804062a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804062e:	613b      	str	r3, [r7, #16]
 8040630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040632:	4b11      	ldr	r3, [pc, #68]	@ (8040678 <HAL_UART_MspInit+0x80>)
 8040634:	695b      	ldr	r3, [r3, #20]
 8040636:	4a10      	ldr	r2, [pc, #64]	@ (8040678 <HAL_UART_MspInit+0x80>)
 8040638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804063c:	6153      	str	r3, [r2, #20]
 804063e:	4b0e      	ldr	r3, [pc, #56]	@ (8040678 <HAL_UART_MspInit+0x80>)
 8040640:	695b      	ldr	r3, [r3, #20]
 8040642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8040646:	60fb      	str	r3, [r7, #12]
 8040648:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 804064a:	230c      	movs	r3, #12
 804064c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804064e:	2302      	movs	r3, #2
 8040650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040652:	2300      	movs	r3, #0
 8040654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040656:	2300      	movs	r3, #0
 8040658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 804065a:	2307      	movs	r3, #7
 804065c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804065e:	f107 0314 	add.w	r3, r7, #20
 8040662:	4619      	mov	r1, r3
 8040664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8040668:	f000 f9ce 	bl	8040a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 804066c:	bf00      	nop
 804066e:	3728      	adds	r7, #40	@ 0x28
 8040670:	46bd      	mov	sp, r7
 8040672:	bd80      	pop	{r7, pc}
 8040674:	40004400 	.word	0x40004400
 8040678:	40021000 	.word	0x40021000

0804067c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 804067c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80406b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8040680:	f7ff ff74 	bl	804056c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040684:	480c      	ldr	r0, [pc, #48]	@ (80406b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8040686:	490d      	ldr	r1, [pc, #52]	@ (80406bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8040688:	4a0d      	ldr	r2, [pc, #52]	@ (80406c0 <LoopForever+0xe>)
  movs r3, #0
 804068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 804068c:	e002      	b.n	8040694 <LoopCopyDataInit>

0804068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 804068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040692:	3304      	adds	r3, #4

08040694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040698:	d3f9      	bcc.n	804068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 804069a:	4a0a      	ldr	r2, [pc, #40]	@ (80406c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 804069c:	4c0a      	ldr	r4, [pc, #40]	@ (80406c8 <LoopForever+0x16>)
  movs r3, #0
 804069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80406a0:	e001      	b.n	80406a6 <LoopFillZerobss>

080406a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80406a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80406a4:	3204      	adds	r2, #4

080406a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80406a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80406a8:	d3fb      	bcc.n	80406a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80406aa:	f002 fc59 	bl	8042f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80406ae:	f7ff fe7d 	bl	80403ac <main>

080406b2 <LoopForever>:

LoopForever:
    b LoopForever
 80406b2:	e7fe      	b.n	80406b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80406b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80406b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80406bc:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80406c0:	08043000 	.word	0x08043000
  ldr r2, =_sbss
 80406c4:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80406c8:	200000ec 	.word	0x200000ec

080406cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80406cc:	e7fe      	b.n	80406cc <ADC1_2_IRQHandler>
	...

080406d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80406d0:	b580      	push	{r7, lr}
 80406d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80406d4:	4b08      	ldr	r3, [pc, #32]	@ (80406f8 <HAL_Init+0x28>)
 80406d6:	681b      	ldr	r3, [r3, #0]
 80406d8:	4a07      	ldr	r2, [pc, #28]	@ (80406f8 <HAL_Init+0x28>)
 80406da:	f043 0310 	orr.w	r3, r3, #16
 80406de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80406e0:	2003      	movs	r0, #3
 80406e2:	f000 f94f 	bl	8040984 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80406e6:	2000      	movs	r0, #0
 80406e8:	f000 f808 	bl	80406fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80406ec:	f7ff fee2 	bl	80404b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80406f0:	2300      	movs	r3, #0
}
 80406f2:	4618      	mov	r0, r3
 80406f4:	bd80      	pop	{r7, pc}
 80406f6:	bf00      	nop
 80406f8:	40022000 	.word	0x40022000

080406fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80406fc:	b580      	push	{r7, lr}
 80406fe:	b082      	sub	sp, #8
 8040700:	af00      	add	r7, sp, #0
 8040702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040704:	4b12      	ldr	r3, [pc, #72]	@ (8040750 <HAL_InitTick+0x54>)
 8040706:	681a      	ldr	r2, [r3, #0]
 8040708:	4b12      	ldr	r3, [pc, #72]	@ (8040754 <HAL_InitTick+0x58>)
 804070a:	781b      	ldrb	r3, [r3, #0]
 804070c:	4619      	mov	r1, r3
 804070e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8040712:	fbb3 f3f1 	udiv	r3, r3, r1
 8040716:	fbb2 f3f3 	udiv	r3, r2, r3
 804071a:	4618      	mov	r0, r3
 804071c:	f000 f967 	bl	80409ee <HAL_SYSTICK_Config>
 8040720:	4603      	mov	r3, r0
 8040722:	2b00      	cmp	r3, #0
 8040724:	d001      	beq.n	804072a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040726:	2301      	movs	r3, #1
 8040728:	e00e      	b.n	8040748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 804072a:	687b      	ldr	r3, [r7, #4]
 804072c:	2b0f      	cmp	r3, #15
 804072e:	d80a      	bhi.n	8040746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040730:	2200      	movs	r2, #0
 8040732:	6879      	ldr	r1, [r7, #4]
 8040734:	f04f 30ff 	mov.w	r0, #4294967295
 8040738:	f000 f92f 	bl	804099a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 804073c:	4a06      	ldr	r2, [pc, #24]	@ (8040758 <HAL_InitTick+0x5c>)
 804073e:	687b      	ldr	r3, [r7, #4]
 8040740:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8040742:	2300      	movs	r3, #0
 8040744:	e000      	b.n	8040748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040746:	2301      	movs	r3, #1
}
 8040748:	4618      	mov	r0, r3
 804074a:	3708      	adds	r7, #8
 804074c:	46bd      	mov	sp, r7
 804074e:	bd80      	pop	{r7, pc}
 8040750:	20000030 	.word	0x20000030
 8040754:	20000038 	.word	0x20000038
 8040758:	20000034 	.word	0x20000034

0804075c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 804075c:	b480      	push	{r7}
 804075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040760:	4b06      	ldr	r3, [pc, #24]	@ (804077c <HAL_IncTick+0x20>)
 8040762:	781b      	ldrb	r3, [r3, #0]
 8040764:	461a      	mov	r2, r3
 8040766:	4b06      	ldr	r3, [pc, #24]	@ (8040780 <HAL_IncTick+0x24>)
 8040768:	681b      	ldr	r3, [r3, #0]
 804076a:	4413      	add	r3, r2
 804076c:	4a04      	ldr	r2, [pc, #16]	@ (8040780 <HAL_IncTick+0x24>)
 804076e:	6013      	str	r3, [r2, #0]
}
 8040770:	bf00      	nop
 8040772:	46bd      	mov	sp, r7
 8040774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040778:	4770      	bx	lr
 804077a:	bf00      	nop
 804077c:	20000038 	.word	0x20000038
 8040780:	200000e8 	.word	0x200000e8

08040784 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040784:	b480      	push	{r7}
 8040786:	af00      	add	r7, sp, #0
  return uwTick;  
 8040788:	4b03      	ldr	r3, [pc, #12]	@ (8040798 <HAL_GetTick+0x14>)
 804078a:	681b      	ldr	r3, [r3, #0]
}
 804078c:	4618      	mov	r0, r3
 804078e:	46bd      	mov	sp, r7
 8040790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040794:	4770      	bx	lr
 8040796:	bf00      	nop
 8040798:	200000e8 	.word	0x200000e8

0804079c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 804079c:	b580      	push	{r7, lr}
 804079e:	b084      	sub	sp, #16
 80407a0:	af00      	add	r7, sp, #0
 80407a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80407a4:	f7ff ffee 	bl	8040784 <HAL_GetTick>
 80407a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80407aa:	687b      	ldr	r3, [r7, #4]
 80407ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80407ae:	68fb      	ldr	r3, [r7, #12]
 80407b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80407b4:	d005      	beq.n	80407c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80407b6:	4b0a      	ldr	r3, [pc, #40]	@ (80407e0 <HAL_Delay+0x44>)
 80407b8:	781b      	ldrb	r3, [r3, #0]
 80407ba:	461a      	mov	r2, r3
 80407bc:	68fb      	ldr	r3, [r7, #12]
 80407be:	4413      	add	r3, r2
 80407c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80407c2:	bf00      	nop
 80407c4:	f7ff ffde 	bl	8040784 <HAL_GetTick>
 80407c8:	4602      	mov	r2, r0
 80407ca:	68bb      	ldr	r3, [r7, #8]
 80407cc:	1ad3      	subs	r3, r2, r3
 80407ce:	68fa      	ldr	r2, [r7, #12]
 80407d0:	429a      	cmp	r2, r3
 80407d2:	d8f7      	bhi.n	80407c4 <HAL_Delay+0x28>
  {
  }
}
 80407d4:	bf00      	nop
 80407d6:	bf00      	nop
 80407d8:	3710      	adds	r7, #16
 80407da:	46bd      	mov	sp, r7
 80407dc:	bd80      	pop	{r7, pc}
 80407de:	bf00      	nop
 80407e0:	20000038 	.word	0x20000038

080407e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80407e4:	b480      	push	{r7}
 80407e6:	b085      	sub	sp, #20
 80407e8:	af00      	add	r7, sp, #0
 80407ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80407ec:	687b      	ldr	r3, [r7, #4]
 80407ee:	f003 0307 	and.w	r3, r3, #7
 80407f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80407f4:	4b0c      	ldr	r3, [pc, #48]	@ (8040828 <__NVIC_SetPriorityGrouping+0x44>)
 80407f6:	68db      	ldr	r3, [r3, #12]
 80407f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80407fa:	68ba      	ldr	r2, [r7, #8]
 80407fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8040800:	4013      	ands	r3, r2
 8040802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040804:	68fb      	ldr	r3, [r7, #12]
 8040806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040808:	68bb      	ldr	r3, [r7, #8]
 804080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 804080c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8040810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8040814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040816:	4a04      	ldr	r2, [pc, #16]	@ (8040828 <__NVIC_SetPriorityGrouping+0x44>)
 8040818:	68bb      	ldr	r3, [r7, #8]
 804081a:	60d3      	str	r3, [r2, #12]
}
 804081c:	bf00      	nop
 804081e:	3714      	adds	r7, #20
 8040820:	46bd      	mov	sp, r7
 8040822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040826:	4770      	bx	lr
 8040828:	e000ed00 	.word	0xe000ed00

0804082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 804082c:	b480      	push	{r7}
 804082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040830:	4b04      	ldr	r3, [pc, #16]	@ (8040844 <__NVIC_GetPriorityGrouping+0x18>)
 8040832:	68db      	ldr	r3, [r3, #12]
 8040834:	0a1b      	lsrs	r3, r3, #8
 8040836:	f003 0307 	and.w	r3, r3, #7
}
 804083a:	4618      	mov	r0, r3
 804083c:	46bd      	mov	sp, r7
 804083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040842:	4770      	bx	lr
 8040844:	e000ed00 	.word	0xe000ed00

08040848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040848:	b480      	push	{r7}
 804084a:	b083      	sub	sp, #12
 804084c:	af00      	add	r7, sp, #0
 804084e:	4603      	mov	r3, r0
 8040850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040856:	2b00      	cmp	r3, #0
 8040858:	db0b      	blt.n	8040872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 804085a:	79fb      	ldrb	r3, [r7, #7]
 804085c:	f003 021f 	and.w	r2, r3, #31
 8040860:	4907      	ldr	r1, [pc, #28]	@ (8040880 <__NVIC_EnableIRQ+0x38>)
 8040862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040866:	095b      	lsrs	r3, r3, #5
 8040868:	2001      	movs	r0, #1
 804086a:	fa00 f202 	lsl.w	r2, r0, r2
 804086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8040872:	bf00      	nop
 8040874:	370c      	adds	r7, #12
 8040876:	46bd      	mov	sp, r7
 8040878:	f85d 7b04 	ldr.w	r7, [sp], #4
 804087c:	4770      	bx	lr
 804087e:	bf00      	nop
 8040880:	e000e100 	.word	0xe000e100

08040884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040884:	b480      	push	{r7}
 8040886:	b083      	sub	sp, #12
 8040888:	af00      	add	r7, sp, #0
 804088a:	4603      	mov	r3, r0
 804088c:	6039      	str	r1, [r7, #0]
 804088e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040894:	2b00      	cmp	r3, #0
 8040896:	db0a      	blt.n	80408ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040898:	683b      	ldr	r3, [r7, #0]
 804089a:	b2da      	uxtb	r2, r3
 804089c:	490c      	ldr	r1, [pc, #48]	@ (80408d0 <__NVIC_SetPriority+0x4c>)
 804089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80408a2:	0112      	lsls	r2, r2, #4
 80408a4:	b2d2      	uxtb	r2, r2
 80408a6:	440b      	add	r3, r1
 80408a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80408ac:	e00a      	b.n	80408c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80408ae:	683b      	ldr	r3, [r7, #0]
 80408b0:	b2da      	uxtb	r2, r3
 80408b2:	4908      	ldr	r1, [pc, #32]	@ (80408d4 <__NVIC_SetPriority+0x50>)
 80408b4:	79fb      	ldrb	r3, [r7, #7]
 80408b6:	f003 030f 	and.w	r3, r3, #15
 80408ba:	3b04      	subs	r3, #4
 80408bc:	0112      	lsls	r2, r2, #4
 80408be:	b2d2      	uxtb	r2, r2
 80408c0:	440b      	add	r3, r1
 80408c2:	761a      	strb	r2, [r3, #24]
}
 80408c4:	bf00      	nop
 80408c6:	370c      	adds	r7, #12
 80408c8:	46bd      	mov	sp, r7
 80408ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408ce:	4770      	bx	lr
 80408d0:	e000e100 	.word	0xe000e100
 80408d4:	e000ed00 	.word	0xe000ed00

080408d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80408d8:	b480      	push	{r7}
 80408da:	b089      	sub	sp, #36	@ 0x24
 80408dc:	af00      	add	r7, sp, #0
 80408de:	60f8      	str	r0, [r7, #12]
 80408e0:	60b9      	str	r1, [r7, #8]
 80408e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80408e4:	68fb      	ldr	r3, [r7, #12]
 80408e6:	f003 0307 	and.w	r3, r3, #7
 80408ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80408ec:	69fb      	ldr	r3, [r7, #28]
 80408ee:	f1c3 0307 	rsb	r3, r3, #7
 80408f2:	2b04      	cmp	r3, #4
 80408f4:	bf28      	it	cs
 80408f6:	2304      	movcs	r3, #4
 80408f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80408fa:	69fb      	ldr	r3, [r7, #28]
 80408fc:	3304      	adds	r3, #4
 80408fe:	2b06      	cmp	r3, #6
 8040900:	d902      	bls.n	8040908 <NVIC_EncodePriority+0x30>
 8040902:	69fb      	ldr	r3, [r7, #28]
 8040904:	3b03      	subs	r3, #3
 8040906:	e000      	b.n	804090a <NVIC_EncodePriority+0x32>
 8040908:	2300      	movs	r3, #0
 804090a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804090c:	f04f 32ff 	mov.w	r2, #4294967295
 8040910:	69bb      	ldr	r3, [r7, #24]
 8040912:	fa02 f303 	lsl.w	r3, r2, r3
 8040916:	43da      	mvns	r2, r3
 8040918:	68bb      	ldr	r3, [r7, #8]
 804091a:	401a      	ands	r2, r3
 804091c:	697b      	ldr	r3, [r7, #20]
 804091e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040920:	f04f 31ff 	mov.w	r1, #4294967295
 8040924:	697b      	ldr	r3, [r7, #20]
 8040926:	fa01 f303 	lsl.w	r3, r1, r3
 804092a:	43d9      	mvns	r1, r3
 804092c:	687b      	ldr	r3, [r7, #4]
 804092e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040930:	4313      	orrs	r3, r2
         );
}
 8040932:	4618      	mov	r0, r3
 8040934:	3724      	adds	r7, #36	@ 0x24
 8040936:	46bd      	mov	sp, r7
 8040938:	f85d 7b04 	ldr.w	r7, [sp], #4
 804093c:	4770      	bx	lr
	...

08040940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040940:	b580      	push	{r7, lr}
 8040942:	b082      	sub	sp, #8
 8040944:	af00      	add	r7, sp, #0
 8040946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040948:	687b      	ldr	r3, [r7, #4]
 804094a:	3b01      	subs	r3, #1
 804094c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8040950:	d301      	bcc.n	8040956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040952:	2301      	movs	r3, #1
 8040954:	e00f      	b.n	8040976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040956:	4a0a      	ldr	r2, [pc, #40]	@ (8040980 <SysTick_Config+0x40>)
 8040958:	687b      	ldr	r3, [r7, #4]
 804095a:	3b01      	subs	r3, #1
 804095c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 804095e:	210f      	movs	r1, #15
 8040960:	f04f 30ff 	mov.w	r0, #4294967295
 8040964:	f7ff ff8e 	bl	8040884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040968:	4b05      	ldr	r3, [pc, #20]	@ (8040980 <SysTick_Config+0x40>)
 804096a:	2200      	movs	r2, #0
 804096c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 804096e:	4b04      	ldr	r3, [pc, #16]	@ (8040980 <SysTick_Config+0x40>)
 8040970:	2207      	movs	r2, #7
 8040972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040974:	2300      	movs	r3, #0
}
 8040976:	4618      	mov	r0, r3
 8040978:	3708      	adds	r7, #8
 804097a:	46bd      	mov	sp, r7
 804097c:	bd80      	pop	{r7, pc}
 804097e:	bf00      	nop
 8040980:	e000e010 	.word	0xe000e010

08040984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040984:	b580      	push	{r7, lr}
 8040986:	b082      	sub	sp, #8
 8040988:	af00      	add	r7, sp, #0
 804098a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 804098c:	6878      	ldr	r0, [r7, #4]
 804098e:	f7ff ff29 	bl	80407e4 <__NVIC_SetPriorityGrouping>
}
 8040992:	bf00      	nop
 8040994:	3708      	adds	r7, #8
 8040996:	46bd      	mov	sp, r7
 8040998:	bd80      	pop	{r7, pc}

0804099a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804099a:	b580      	push	{r7, lr}
 804099c:	b086      	sub	sp, #24
 804099e:	af00      	add	r7, sp, #0
 80409a0:	4603      	mov	r3, r0
 80409a2:	60b9      	str	r1, [r7, #8]
 80409a4:	607a      	str	r2, [r7, #4]
 80409a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80409a8:	2300      	movs	r3, #0
 80409aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80409ac:	f7ff ff3e 	bl	804082c <__NVIC_GetPriorityGrouping>
 80409b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80409b2:	687a      	ldr	r2, [r7, #4]
 80409b4:	68b9      	ldr	r1, [r7, #8]
 80409b6:	6978      	ldr	r0, [r7, #20]
 80409b8:	f7ff ff8e 	bl	80408d8 <NVIC_EncodePriority>
 80409bc:	4602      	mov	r2, r0
 80409be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80409c2:	4611      	mov	r1, r2
 80409c4:	4618      	mov	r0, r3
 80409c6:	f7ff ff5d 	bl	8040884 <__NVIC_SetPriority>
}
 80409ca:	bf00      	nop
 80409cc:	3718      	adds	r7, #24
 80409ce:	46bd      	mov	sp, r7
 80409d0:	bd80      	pop	{r7, pc}

080409d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80409d2:	b580      	push	{r7, lr}
 80409d4:	b082      	sub	sp, #8
 80409d6:	af00      	add	r7, sp, #0
 80409d8:	4603      	mov	r3, r0
 80409da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80409dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80409e0:	4618      	mov	r0, r3
 80409e2:	f7ff ff31 	bl	8040848 <__NVIC_EnableIRQ>
}
 80409e6:	bf00      	nop
 80409e8:	3708      	adds	r7, #8
 80409ea:	46bd      	mov	sp, r7
 80409ec:	bd80      	pop	{r7, pc}

080409ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80409ee:	b580      	push	{r7, lr}
 80409f0:	b082      	sub	sp, #8
 80409f2:	af00      	add	r7, sp, #0
 80409f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80409f6:	6878      	ldr	r0, [r7, #4]
 80409f8:	f7ff ffa2 	bl	8040940 <SysTick_Config>
 80409fc:	4603      	mov	r3, r0
}
 80409fe:	4618      	mov	r0, r3
 8040a00:	3708      	adds	r7, #8
 8040a02:	46bd      	mov	sp, r7
 8040a04:	bd80      	pop	{r7, pc}
	...

08040a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040a08:	b480      	push	{r7}
 8040a0a:	b087      	sub	sp, #28
 8040a0c:	af00      	add	r7, sp, #0
 8040a0e:	6078      	str	r0, [r7, #4]
 8040a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8040a12:	2300      	movs	r3, #0
 8040a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8040a16:	e160      	b.n	8040cda <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8040a18:	683b      	ldr	r3, [r7, #0]
 8040a1a:	681a      	ldr	r2, [r3, #0]
 8040a1c:	2101      	movs	r1, #1
 8040a1e:	697b      	ldr	r3, [r7, #20]
 8040a20:	fa01 f303 	lsl.w	r3, r1, r3
 8040a24:	4013      	ands	r3, r2
 8040a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8040a28:	68fb      	ldr	r3, [r7, #12]
 8040a2a:	2b00      	cmp	r3, #0
 8040a2c:	f000 8152 	beq.w	8040cd4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8040a30:	683b      	ldr	r3, [r7, #0]
 8040a32:	685b      	ldr	r3, [r3, #4]
 8040a34:	f003 0303 	and.w	r3, r3, #3
 8040a38:	2b01      	cmp	r3, #1
 8040a3a:	d005      	beq.n	8040a48 <HAL_GPIO_Init+0x40>
 8040a3c:	683b      	ldr	r3, [r7, #0]
 8040a3e:	685b      	ldr	r3, [r3, #4]
 8040a40:	f003 0303 	and.w	r3, r3, #3
 8040a44:	2b02      	cmp	r3, #2
 8040a46:	d130      	bne.n	8040aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040a48:	687b      	ldr	r3, [r7, #4]
 8040a4a:	689b      	ldr	r3, [r3, #8]
 8040a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8040a4e:	697b      	ldr	r3, [r7, #20]
 8040a50:	005b      	lsls	r3, r3, #1
 8040a52:	2203      	movs	r2, #3
 8040a54:	fa02 f303 	lsl.w	r3, r2, r3
 8040a58:	43db      	mvns	r3, r3
 8040a5a:	693a      	ldr	r2, [r7, #16]
 8040a5c:	4013      	ands	r3, r2
 8040a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8040a60:	683b      	ldr	r3, [r7, #0]
 8040a62:	68da      	ldr	r2, [r3, #12]
 8040a64:	697b      	ldr	r3, [r7, #20]
 8040a66:	005b      	lsls	r3, r3, #1
 8040a68:	fa02 f303 	lsl.w	r3, r2, r3
 8040a6c:	693a      	ldr	r2, [r7, #16]
 8040a6e:	4313      	orrs	r3, r2
 8040a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8040a72:	687b      	ldr	r3, [r7, #4]
 8040a74:	693a      	ldr	r2, [r7, #16]
 8040a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040a78:	687b      	ldr	r3, [r7, #4]
 8040a7a:	685b      	ldr	r3, [r3, #4]
 8040a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040a7e:	2201      	movs	r2, #1
 8040a80:	697b      	ldr	r3, [r7, #20]
 8040a82:	fa02 f303 	lsl.w	r3, r2, r3
 8040a86:	43db      	mvns	r3, r3
 8040a88:	693a      	ldr	r2, [r7, #16]
 8040a8a:	4013      	ands	r3, r2
 8040a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040a8e:	683b      	ldr	r3, [r7, #0]
 8040a90:	685b      	ldr	r3, [r3, #4]
 8040a92:	091b      	lsrs	r3, r3, #4
 8040a94:	f003 0201 	and.w	r2, r3, #1
 8040a98:	697b      	ldr	r3, [r7, #20]
 8040a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8040a9e:	693a      	ldr	r2, [r7, #16]
 8040aa0:	4313      	orrs	r3, r2
 8040aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8040aa4:	687b      	ldr	r3, [r7, #4]
 8040aa6:	693a      	ldr	r2, [r7, #16]
 8040aa8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040aaa:	683b      	ldr	r3, [r7, #0]
 8040aac:	685b      	ldr	r3, [r3, #4]
 8040aae:	f003 0303 	and.w	r3, r3, #3
 8040ab2:	2b03      	cmp	r3, #3
 8040ab4:	d017      	beq.n	8040ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8040ab6:	687b      	ldr	r3, [r7, #4]
 8040ab8:	68db      	ldr	r3, [r3, #12]
 8040aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8040abc:	697b      	ldr	r3, [r7, #20]
 8040abe:	005b      	lsls	r3, r3, #1
 8040ac0:	2203      	movs	r2, #3
 8040ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8040ac6:	43db      	mvns	r3, r3
 8040ac8:	693a      	ldr	r2, [r7, #16]
 8040aca:	4013      	ands	r3, r2
 8040acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8040ace:	683b      	ldr	r3, [r7, #0]
 8040ad0:	689a      	ldr	r2, [r3, #8]
 8040ad2:	697b      	ldr	r3, [r7, #20]
 8040ad4:	005b      	lsls	r3, r3, #1
 8040ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8040ada:	693a      	ldr	r2, [r7, #16]
 8040adc:	4313      	orrs	r3, r2
 8040ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8040ae0:	687b      	ldr	r3, [r7, #4]
 8040ae2:	693a      	ldr	r2, [r7, #16]
 8040ae4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040ae6:	683b      	ldr	r3, [r7, #0]
 8040ae8:	685b      	ldr	r3, [r3, #4]
 8040aea:	f003 0303 	and.w	r3, r3, #3
 8040aee:	2b02      	cmp	r3, #2
 8040af0:	d123      	bne.n	8040b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8040af2:	697b      	ldr	r3, [r7, #20]
 8040af4:	08da      	lsrs	r2, r3, #3
 8040af6:	687b      	ldr	r3, [r7, #4]
 8040af8:	3208      	adds	r2, #8
 8040afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8040b00:	697b      	ldr	r3, [r7, #20]
 8040b02:	f003 0307 	and.w	r3, r3, #7
 8040b06:	009b      	lsls	r3, r3, #2
 8040b08:	220f      	movs	r2, #15
 8040b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8040b0e:	43db      	mvns	r3, r3
 8040b10:	693a      	ldr	r2, [r7, #16]
 8040b12:	4013      	ands	r3, r2
 8040b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8040b16:	683b      	ldr	r3, [r7, #0]
 8040b18:	691a      	ldr	r2, [r3, #16]
 8040b1a:	697b      	ldr	r3, [r7, #20]
 8040b1c:	f003 0307 	and.w	r3, r3, #7
 8040b20:	009b      	lsls	r3, r3, #2
 8040b22:	fa02 f303 	lsl.w	r3, r2, r3
 8040b26:	693a      	ldr	r2, [r7, #16]
 8040b28:	4313      	orrs	r3, r2
 8040b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8040b2c:	697b      	ldr	r3, [r7, #20]
 8040b2e:	08da      	lsrs	r2, r3, #3
 8040b30:	687b      	ldr	r3, [r7, #4]
 8040b32:	3208      	adds	r2, #8
 8040b34:	6939      	ldr	r1, [r7, #16]
 8040b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040b3a:	687b      	ldr	r3, [r7, #4]
 8040b3c:	681b      	ldr	r3, [r3, #0]
 8040b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8040b40:	697b      	ldr	r3, [r7, #20]
 8040b42:	005b      	lsls	r3, r3, #1
 8040b44:	2203      	movs	r2, #3
 8040b46:	fa02 f303 	lsl.w	r3, r2, r3
 8040b4a:	43db      	mvns	r3, r3
 8040b4c:	693a      	ldr	r2, [r7, #16]
 8040b4e:	4013      	ands	r3, r2
 8040b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8040b52:	683b      	ldr	r3, [r7, #0]
 8040b54:	685b      	ldr	r3, [r3, #4]
 8040b56:	f003 0203 	and.w	r2, r3, #3
 8040b5a:	697b      	ldr	r3, [r7, #20]
 8040b5c:	005b      	lsls	r3, r3, #1
 8040b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8040b62:	693a      	ldr	r2, [r7, #16]
 8040b64:	4313      	orrs	r3, r2
 8040b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8040b68:	687b      	ldr	r3, [r7, #4]
 8040b6a:	693a      	ldr	r2, [r7, #16]
 8040b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8040b6e:	683b      	ldr	r3, [r7, #0]
 8040b70:	685b      	ldr	r3, [r3, #4]
 8040b72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8040b76:	2b00      	cmp	r3, #0
 8040b78:	f000 80ac 	beq.w	8040cd4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8040cf8 <HAL_GPIO_Init+0x2f0>)
 8040b7e:	699b      	ldr	r3, [r3, #24]
 8040b80:	4a5d      	ldr	r2, [pc, #372]	@ (8040cf8 <HAL_GPIO_Init+0x2f0>)
 8040b82:	f043 0301 	orr.w	r3, r3, #1
 8040b86:	6193      	str	r3, [r2, #24]
 8040b88:	4b5b      	ldr	r3, [pc, #364]	@ (8040cf8 <HAL_GPIO_Init+0x2f0>)
 8040b8a:	699b      	ldr	r3, [r3, #24]
 8040b8c:	f003 0301 	and.w	r3, r3, #1
 8040b90:	60bb      	str	r3, [r7, #8]
 8040b92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8040b94:	4a59      	ldr	r2, [pc, #356]	@ (8040cfc <HAL_GPIO_Init+0x2f4>)
 8040b96:	697b      	ldr	r3, [r7, #20]
 8040b98:	089b      	lsrs	r3, r3, #2
 8040b9a:	3302      	adds	r3, #2
 8040b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8040ba2:	697b      	ldr	r3, [r7, #20]
 8040ba4:	f003 0303 	and.w	r3, r3, #3
 8040ba8:	009b      	lsls	r3, r3, #2
 8040baa:	220f      	movs	r2, #15
 8040bac:	fa02 f303 	lsl.w	r3, r2, r3
 8040bb0:	43db      	mvns	r3, r3
 8040bb2:	693a      	ldr	r2, [r7, #16]
 8040bb4:	4013      	ands	r3, r2
 8040bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8040bb8:	687b      	ldr	r3, [r7, #4]
 8040bba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8040bbe:	d025      	beq.n	8040c0c <HAL_GPIO_Init+0x204>
 8040bc0:	687b      	ldr	r3, [r7, #4]
 8040bc2:	4a4f      	ldr	r2, [pc, #316]	@ (8040d00 <HAL_GPIO_Init+0x2f8>)
 8040bc4:	4293      	cmp	r3, r2
 8040bc6:	d01f      	beq.n	8040c08 <HAL_GPIO_Init+0x200>
 8040bc8:	687b      	ldr	r3, [r7, #4]
 8040bca:	4a4e      	ldr	r2, [pc, #312]	@ (8040d04 <HAL_GPIO_Init+0x2fc>)
 8040bcc:	4293      	cmp	r3, r2
 8040bce:	d019      	beq.n	8040c04 <HAL_GPIO_Init+0x1fc>
 8040bd0:	687b      	ldr	r3, [r7, #4]
 8040bd2:	4a4d      	ldr	r2, [pc, #308]	@ (8040d08 <HAL_GPIO_Init+0x300>)
 8040bd4:	4293      	cmp	r3, r2
 8040bd6:	d013      	beq.n	8040c00 <HAL_GPIO_Init+0x1f8>
 8040bd8:	687b      	ldr	r3, [r7, #4]
 8040bda:	4a4c      	ldr	r2, [pc, #304]	@ (8040d0c <HAL_GPIO_Init+0x304>)
 8040bdc:	4293      	cmp	r3, r2
 8040bde:	d00d      	beq.n	8040bfc <HAL_GPIO_Init+0x1f4>
 8040be0:	687b      	ldr	r3, [r7, #4]
 8040be2:	4a4b      	ldr	r2, [pc, #300]	@ (8040d10 <HAL_GPIO_Init+0x308>)
 8040be4:	4293      	cmp	r3, r2
 8040be6:	d007      	beq.n	8040bf8 <HAL_GPIO_Init+0x1f0>
 8040be8:	687b      	ldr	r3, [r7, #4]
 8040bea:	4a4a      	ldr	r2, [pc, #296]	@ (8040d14 <HAL_GPIO_Init+0x30c>)
 8040bec:	4293      	cmp	r3, r2
 8040bee:	d101      	bne.n	8040bf4 <HAL_GPIO_Init+0x1ec>
 8040bf0:	2306      	movs	r3, #6
 8040bf2:	e00c      	b.n	8040c0e <HAL_GPIO_Init+0x206>
 8040bf4:	2307      	movs	r3, #7
 8040bf6:	e00a      	b.n	8040c0e <HAL_GPIO_Init+0x206>
 8040bf8:	2305      	movs	r3, #5
 8040bfa:	e008      	b.n	8040c0e <HAL_GPIO_Init+0x206>
 8040bfc:	2304      	movs	r3, #4
 8040bfe:	e006      	b.n	8040c0e <HAL_GPIO_Init+0x206>
 8040c00:	2303      	movs	r3, #3
 8040c02:	e004      	b.n	8040c0e <HAL_GPIO_Init+0x206>
 8040c04:	2302      	movs	r3, #2
 8040c06:	e002      	b.n	8040c0e <HAL_GPIO_Init+0x206>
 8040c08:	2301      	movs	r3, #1
 8040c0a:	e000      	b.n	8040c0e <HAL_GPIO_Init+0x206>
 8040c0c:	2300      	movs	r3, #0
 8040c0e:	697a      	ldr	r2, [r7, #20]
 8040c10:	f002 0203 	and.w	r2, r2, #3
 8040c14:	0092      	lsls	r2, r2, #2
 8040c16:	4093      	lsls	r3, r2
 8040c18:	693a      	ldr	r2, [r7, #16]
 8040c1a:	4313      	orrs	r3, r2
 8040c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8040c1e:	4937      	ldr	r1, [pc, #220]	@ (8040cfc <HAL_GPIO_Init+0x2f4>)
 8040c20:	697b      	ldr	r3, [r7, #20]
 8040c22:	089b      	lsrs	r3, r3, #2
 8040c24:	3302      	adds	r3, #2
 8040c26:	693a      	ldr	r2, [r7, #16]
 8040c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8040c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8040d18 <HAL_GPIO_Init+0x310>)
 8040c2e:	689b      	ldr	r3, [r3, #8]
 8040c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040c32:	68fb      	ldr	r3, [r7, #12]
 8040c34:	43db      	mvns	r3, r3
 8040c36:	693a      	ldr	r2, [r7, #16]
 8040c38:	4013      	ands	r3, r2
 8040c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8040c3c:	683b      	ldr	r3, [r7, #0]
 8040c3e:	685b      	ldr	r3, [r3, #4]
 8040c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8040c44:	2b00      	cmp	r3, #0
 8040c46:	d003      	beq.n	8040c50 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8040c48:	693a      	ldr	r2, [r7, #16]
 8040c4a:	68fb      	ldr	r3, [r7, #12]
 8040c4c:	4313      	orrs	r3, r2
 8040c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8040c50:	4a31      	ldr	r2, [pc, #196]	@ (8040d18 <HAL_GPIO_Init+0x310>)
 8040c52:	693b      	ldr	r3, [r7, #16]
 8040c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8040c56:	4b30      	ldr	r3, [pc, #192]	@ (8040d18 <HAL_GPIO_Init+0x310>)
 8040c58:	68db      	ldr	r3, [r3, #12]
 8040c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040c5c:	68fb      	ldr	r3, [r7, #12]
 8040c5e:	43db      	mvns	r3, r3
 8040c60:	693a      	ldr	r2, [r7, #16]
 8040c62:	4013      	ands	r3, r2
 8040c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8040c66:	683b      	ldr	r3, [r7, #0]
 8040c68:	685b      	ldr	r3, [r3, #4]
 8040c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8040c6e:	2b00      	cmp	r3, #0
 8040c70:	d003      	beq.n	8040c7a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8040c72:	693a      	ldr	r2, [r7, #16]
 8040c74:	68fb      	ldr	r3, [r7, #12]
 8040c76:	4313      	orrs	r3, r2
 8040c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8040c7a:	4a27      	ldr	r2, [pc, #156]	@ (8040d18 <HAL_GPIO_Init+0x310>)
 8040c7c:	693b      	ldr	r3, [r7, #16]
 8040c7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8040c80:	4b25      	ldr	r3, [pc, #148]	@ (8040d18 <HAL_GPIO_Init+0x310>)
 8040c82:	685b      	ldr	r3, [r3, #4]
 8040c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040c86:	68fb      	ldr	r3, [r7, #12]
 8040c88:	43db      	mvns	r3, r3
 8040c8a:	693a      	ldr	r2, [r7, #16]
 8040c8c:	4013      	ands	r3, r2
 8040c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8040c90:	683b      	ldr	r3, [r7, #0]
 8040c92:	685b      	ldr	r3, [r3, #4]
 8040c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8040c98:	2b00      	cmp	r3, #0
 8040c9a:	d003      	beq.n	8040ca4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8040c9c:	693a      	ldr	r2, [r7, #16]
 8040c9e:	68fb      	ldr	r3, [r7, #12]
 8040ca0:	4313      	orrs	r3, r2
 8040ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8040ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8040d18 <HAL_GPIO_Init+0x310>)
 8040ca6:	693b      	ldr	r3, [r7, #16]
 8040ca8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8040caa:	4b1b      	ldr	r3, [pc, #108]	@ (8040d18 <HAL_GPIO_Init+0x310>)
 8040cac:	681b      	ldr	r3, [r3, #0]
 8040cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040cb0:	68fb      	ldr	r3, [r7, #12]
 8040cb2:	43db      	mvns	r3, r3
 8040cb4:	693a      	ldr	r2, [r7, #16]
 8040cb6:	4013      	ands	r3, r2
 8040cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8040cba:	683b      	ldr	r3, [r7, #0]
 8040cbc:	685b      	ldr	r3, [r3, #4]
 8040cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8040cc2:	2b00      	cmp	r3, #0
 8040cc4:	d003      	beq.n	8040cce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8040cc6:	693a      	ldr	r2, [r7, #16]
 8040cc8:	68fb      	ldr	r3, [r7, #12]
 8040cca:	4313      	orrs	r3, r2
 8040ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8040cce:	4a12      	ldr	r2, [pc, #72]	@ (8040d18 <HAL_GPIO_Init+0x310>)
 8040cd0:	693b      	ldr	r3, [r7, #16]
 8040cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8040cd4:	697b      	ldr	r3, [r7, #20]
 8040cd6:	3301      	adds	r3, #1
 8040cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8040cda:	683b      	ldr	r3, [r7, #0]
 8040cdc:	681a      	ldr	r2, [r3, #0]
 8040cde:	697b      	ldr	r3, [r7, #20]
 8040ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8040ce4:	2b00      	cmp	r3, #0
 8040ce6:	f47f ae97 	bne.w	8040a18 <HAL_GPIO_Init+0x10>
  }
}
 8040cea:	bf00      	nop
 8040cec:	bf00      	nop
 8040cee:	371c      	adds	r7, #28
 8040cf0:	46bd      	mov	sp, r7
 8040cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cf6:	4770      	bx	lr
 8040cf8:	40021000 	.word	0x40021000
 8040cfc:	40010000 	.word	0x40010000
 8040d00:	48000400 	.word	0x48000400
 8040d04:	48000800 	.word	0x48000800
 8040d08:	48000c00 	.word	0x48000c00
 8040d0c:	48001000 	.word	0x48001000
 8040d10:	48001400 	.word	0x48001400
 8040d14:	48001800 	.word	0x48001800
 8040d18:	40010400 	.word	0x40010400

08040d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040d1c:	b480      	push	{r7}
 8040d1e:	b083      	sub	sp, #12
 8040d20:	af00      	add	r7, sp, #0
 8040d22:	6078      	str	r0, [r7, #4]
 8040d24:	460b      	mov	r3, r1
 8040d26:	807b      	strh	r3, [r7, #2]
 8040d28:	4613      	mov	r3, r2
 8040d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8040d2c:	787b      	ldrb	r3, [r7, #1]
 8040d2e:	2b00      	cmp	r3, #0
 8040d30:	d003      	beq.n	8040d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8040d32:	887a      	ldrh	r2, [r7, #2]
 8040d34:	687b      	ldr	r3, [r7, #4]
 8040d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8040d38:	e002      	b.n	8040d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8040d3a:	887a      	ldrh	r2, [r7, #2]
 8040d3c:	687b      	ldr	r3, [r7, #4]
 8040d3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8040d40:	bf00      	nop
 8040d42:	370c      	adds	r7, #12
 8040d44:	46bd      	mov	sp, r7
 8040d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d4a:	4770      	bx	lr

08040d4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8040d4c:	b480      	push	{r7}
 8040d4e:	b085      	sub	sp, #20
 8040d50:	af00      	add	r7, sp, #0
 8040d52:	6078      	str	r0, [r7, #4]
 8040d54:	460b      	mov	r3, r1
 8040d56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8040d58:	687b      	ldr	r3, [r7, #4]
 8040d5a:	695b      	ldr	r3, [r3, #20]
 8040d5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8040d5e:	887a      	ldrh	r2, [r7, #2]
 8040d60:	68fb      	ldr	r3, [r7, #12]
 8040d62:	4013      	ands	r3, r2
 8040d64:	041a      	lsls	r2, r3, #16
 8040d66:	68fb      	ldr	r3, [r7, #12]
 8040d68:	43d9      	mvns	r1, r3
 8040d6a:	887b      	ldrh	r3, [r7, #2]
 8040d6c:	400b      	ands	r3, r1
 8040d6e:	431a      	orrs	r2, r3
 8040d70:	687b      	ldr	r3, [r7, #4]
 8040d72:	619a      	str	r2, [r3, #24]
}
 8040d74:	bf00      	nop
 8040d76:	3714      	adds	r7, #20
 8040d78:	46bd      	mov	sp, r7
 8040d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d7e:	4770      	bx	lr

08040d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8040d80:	b580      	push	{r7, lr}
 8040d82:	b082      	sub	sp, #8
 8040d84:	af00      	add	r7, sp, #0
 8040d86:	4603      	mov	r3, r0
 8040d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8040d8a:	4b08      	ldr	r3, [pc, #32]	@ (8040dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8040d8c:	695a      	ldr	r2, [r3, #20]
 8040d8e:	88fb      	ldrh	r3, [r7, #6]
 8040d90:	4013      	ands	r3, r2
 8040d92:	2b00      	cmp	r3, #0
 8040d94:	d006      	beq.n	8040da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8040d96:	4a05      	ldr	r2, [pc, #20]	@ (8040dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8040d98:	88fb      	ldrh	r3, [r7, #6]
 8040d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8040d9c:	88fb      	ldrh	r3, [r7, #6]
 8040d9e:	4618      	mov	r0, r3
 8040da0:	f7ff faca 	bl	8040338 <HAL_GPIO_EXTI_Callback>
  }
}
 8040da4:	bf00      	nop
 8040da6:	3708      	adds	r7, #8
 8040da8:	46bd      	mov	sp, r7
 8040daa:	bd80      	pop	{r7, pc}
 8040dac:	40010400 	.word	0x40010400

08040db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8040db0:	b580      	push	{r7, lr}
 8040db2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8040db6:	af00      	add	r7, sp, #0
 8040db8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040dbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040dc0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8040dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040dc6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040dca:	681b      	ldr	r3, [r3, #0]
 8040dcc:	2b00      	cmp	r3, #0
 8040dce:	d102      	bne.n	8040dd6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8040dd0:	2301      	movs	r3, #1
 8040dd2:	f001 b83a 	b.w	8041e4a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8040dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040dda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040dde:	681b      	ldr	r3, [r3, #0]
 8040de0:	681b      	ldr	r3, [r3, #0]
 8040de2:	f003 0301 	and.w	r3, r3, #1
 8040de6:	2b00      	cmp	r3, #0
 8040de8:	f000 816f 	beq.w	80410ca <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8040dec:	4bb5      	ldr	r3, [pc, #724]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040dee:	685b      	ldr	r3, [r3, #4]
 8040df0:	f003 030c 	and.w	r3, r3, #12
 8040df4:	2b04      	cmp	r3, #4
 8040df6:	d00c      	beq.n	8040e12 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8040df8:	4bb2      	ldr	r3, [pc, #712]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040dfa:	685b      	ldr	r3, [r3, #4]
 8040dfc:	f003 030c 	and.w	r3, r3, #12
 8040e00:	2b08      	cmp	r3, #8
 8040e02:	d15c      	bne.n	8040ebe <HAL_RCC_OscConfig+0x10e>
 8040e04:	4baf      	ldr	r3, [pc, #700]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040e06:	685b      	ldr	r3, [r3, #4]
 8040e08:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8040e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8040e10:	d155      	bne.n	8040ebe <HAL_RCC_OscConfig+0x10e>
 8040e12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040e16:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8040e1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8040e1e:	fa93 f3a3 	rbit	r3, r3
 8040e22:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8040e26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8040e2a:	fab3 f383 	clz	r3, r3
 8040e2e:	b2db      	uxtb	r3, r3
 8040e30:	095b      	lsrs	r3, r3, #5
 8040e32:	b2db      	uxtb	r3, r3
 8040e34:	f043 0301 	orr.w	r3, r3, #1
 8040e38:	b2db      	uxtb	r3, r3
 8040e3a:	2b01      	cmp	r3, #1
 8040e3c:	d102      	bne.n	8040e44 <HAL_RCC_OscConfig+0x94>
 8040e3e:	4ba1      	ldr	r3, [pc, #644]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040e40:	681b      	ldr	r3, [r3, #0]
 8040e42:	e015      	b.n	8040e70 <HAL_RCC_OscConfig+0xc0>
 8040e44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040e48:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8040e4c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8040e50:	fa93 f3a3 	rbit	r3, r3
 8040e54:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8040e58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040e5c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8040e60:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8040e64:	fa93 f3a3 	rbit	r3, r3
 8040e68:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8040e6c:	4b95      	ldr	r3, [pc, #596]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8040e70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8040e74:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8040e78:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8040e7c:	fa92 f2a2 	rbit	r2, r2
 8040e80:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8040e84:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8040e88:	fab2 f282 	clz	r2, r2
 8040e8c:	b2d2      	uxtb	r2, r2
 8040e8e:	f042 0220 	orr.w	r2, r2, #32
 8040e92:	b2d2      	uxtb	r2, r2
 8040e94:	f002 021f 	and.w	r2, r2, #31
 8040e98:	2101      	movs	r1, #1
 8040e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8040e9e:	4013      	ands	r3, r2
 8040ea0:	2b00      	cmp	r3, #0
 8040ea2:	f000 8111 	beq.w	80410c8 <HAL_RCC_OscConfig+0x318>
 8040ea6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040eaa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040eae:	681b      	ldr	r3, [r3, #0]
 8040eb0:	685b      	ldr	r3, [r3, #4]
 8040eb2:	2b00      	cmp	r3, #0
 8040eb4:	f040 8108 	bne.w	80410c8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8040eb8:	2301      	movs	r3, #1
 8040eba:	f000 bfc6 	b.w	8041e4a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8040ebe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040ec2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040ec6:	681b      	ldr	r3, [r3, #0]
 8040ec8:	685b      	ldr	r3, [r3, #4]
 8040eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8040ece:	d106      	bne.n	8040ede <HAL_RCC_OscConfig+0x12e>
 8040ed0:	4b7c      	ldr	r3, [pc, #496]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040ed2:	681b      	ldr	r3, [r3, #0]
 8040ed4:	4a7b      	ldr	r2, [pc, #492]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8040eda:	6013      	str	r3, [r2, #0]
 8040edc:	e036      	b.n	8040f4c <HAL_RCC_OscConfig+0x19c>
 8040ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040ee2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040ee6:	681b      	ldr	r3, [r3, #0]
 8040ee8:	685b      	ldr	r3, [r3, #4]
 8040eea:	2b00      	cmp	r3, #0
 8040eec:	d10c      	bne.n	8040f08 <HAL_RCC_OscConfig+0x158>
 8040eee:	4b75      	ldr	r3, [pc, #468]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040ef0:	681b      	ldr	r3, [r3, #0]
 8040ef2:	4a74      	ldr	r2, [pc, #464]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8040ef8:	6013      	str	r3, [r2, #0]
 8040efa:	4b72      	ldr	r3, [pc, #456]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040efc:	681b      	ldr	r3, [r3, #0]
 8040efe:	4a71      	ldr	r2, [pc, #452]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040f00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8040f04:	6013      	str	r3, [r2, #0]
 8040f06:	e021      	b.n	8040f4c <HAL_RCC_OscConfig+0x19c>
 8040f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040f0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040f10:	681b      	ldr	r3, [r3, #0]
 8040f12:	685b      	ldr	r3, [r3, #4]
 8040f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8040f18:	d10c      	bne.n	8040f34 <HAL_RCC_OscConfig+0x184>
 8040f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040f1c:	681b      	ldr	r3, [r3, #0]
 8040f1e:	4a69      	ldr	r2, [pc, #420]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8040f24:	6013      	str	r3, [r2, #0]
 8040f26:	4b67      	ldr	r3, [pc, #412]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040f28:	681b      	ldr	r3, [r3, #0]
 8040f2a:	4a66      	ldr	r2, [pc, #408]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8040f30:	6013      	str	r3, [r2, #0]
 8040f32:	e00b      	b.n	8040f4c <HAL_RCC_OscConfig+0x19c>
 8040f34:	4b63      	ldr	r3, [pc, #396]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040f36:	681b      	ldr	r3, [r3, #0]
 8040f38:	4a62      	ldr	r2, [pc, #392]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8040f3e:	6013      	str	r3, [r2, #0]
 8040f40:	4b60      	ldr	r3, [pc, #384]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040f42:	681b      	ldr	r3, [r3, #0]
 8040f44:	4a5f      	ldr	r2, [pc, #380]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8040f4a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8040f4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040f50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040f54:	681b      	ldr	r3, [r3, #0]
 8040f56:	685b      	ldr	r3, [r3, #4]
 8040f58:	2b00      	cmp	r3, #0
 8040f5a:	d059      	beq.n	8041010 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8040f5c:	f7ff fc12 	bl	8040784 <HAL_GetTick>
 8040f60:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8040f64:	e00a      	b.n	8040f7c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8040f66:	f7ff fc0d 	bl	8040784 <HAL_GetTick>
 8040f6a:	4602      	mov	r2, r0
 8040f6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8040f70:	1ad3      	subs	r3, r2, r3
 8040f72:	2b64      	cmp	r3, #100	@ 0x64
 8040f74:	d902      	bls.n	8040f7c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8040f76:	2303      	movs	r3, #3
 8040f78:	f000 bf67 	b.w	8041e4a <HAL_RCC_OscConfig+0x109a>
 8040f7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040f80:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8040f84:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8040f88:	fa93 f3a3 	rbit	r3, r3
 8040f8c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8040f90:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8040f94:	fab3 f383 	clz	r3, r3
 8040f98:	b2db      	uxtb	r3, r3
 8040f9a:	095b      	lsrs	r3, r3, #5
 8040f9c:	b2db      	uxtb	r3, r3
 8040f9e:	f043 0301 	orr.w	r3, r3, #1
 8040fa2:	b2db      	uxtb	r3, r3
 8040fa4:	2b01      	cmp	r3, #1
 8040fa6:	d102      	bne.n	8040fae <HAL_RCC_OscConfig+0x1fe>
 8040fa8:	4b46      	ldr	r3, [pc, #280]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040faa:	681b      	ldr	r3, [r3, #0]
 8040fac:	e015      	b.n	8040fda <HAL_RCC_OscConfig+0x22a>
 8040fae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040fb2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8040fb6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8040fba:	fa93 f3a3 	rbit	r3, r3
 8040fbe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8040fc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040fc6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8040fca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8040fce:	fa93 f3a3 	rbit	r3, r3
 8040fd2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8040fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 8040fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8040fda:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8040fde:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8040fe2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8040fe6:	fa92 f2a2 	rbit	r2, r2
 8040fea:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8040fee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8040ff2:	fab2 f282 	clz	r2, r2
 8040ff6:	b2d2      	uxtb	r2, r2
 8040ff8:	f042 0220 	orr.w	r2, r2, #32
 8040ffc:	b2d2      	uxtb	r2, r2
 8040ffe:	f002 021f 	and.w	r2, r2, #31
 8041002:	2101      	movs	r1, #1
 8041004:	fa01 f202 	lsl.w	r2, r1, r2
 8041008:	4013      	ands	r3, r2
 804100a:	2b00      	cmp	r3, #0
 804100c:	d0ab      	beq.n	8040f66 <HAL_RCC_OscConfig+0x1b6>
 804100e:	e05c      	b.n	80410ca <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8041010:	f7ff fbb8 	bl	8040784 <HAL_GetTick>
 8041014:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8041018:	e00a      	b.n	8041030 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 804101a:	f7ff fbb3 	bl	8040784 <HAL_GetTick>
 804101e:	4602      	mov	r2, r0
 8041020:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8041024:	1ad3      	subs	r3, r2, r3
 8041026:	2b64      	cmp	r3, #100	@ 0x64
 8041028:	d902      	bls.n	8041030 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 804102a:	2303      	movs	r3, #3
 804102c:	f000 bf0d 	b.w	8041e4a <HAL_RCC_OscConfig+0x109a>
 8041030:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8041034:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041038:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 804103c:	fa93 f3a3 	rbit	r3, r3
 8041040:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8041044:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8041048:	fab3 f383 	clz	r3, r3
 804104c:	b2db      	uxtb	r3, r3
 804104e:	095b      	lsrs	r3, r3, #5
 8041050:	b2db      	uxtb	r3, r3
 8041052:	f043 0301 	orr.w	r3, r3, #1
 8041056:	b2db      	uxtb	r3, r3
 8041058:	2b01      	cmp	r3, #1
 804105a:	d102      	bne.n	8041062 <HAL_RCC_OscConfig+0x2b2>
 804105c:	4b19      	ldr	r3, [pc, #100]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 804105e:	681b      	ldr	r3, [r3, #0]
 8041060:	e015      	b.n	804108e <HAL_RCC_OscConfig+0x2de>
 8041062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8041066:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804106a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 804106e:	fa93 f3a3 	rbit	r3, r3
 8041072:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8041076:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 804107a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 804107e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8041082:	fa93 f3a3 	rbit	r3, r3
 8041086:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 804108a:	4b0e      	ldr	r3, [pc, #56]	@ (80410c4 <HAL_RCC_OscConfig+0x314>)
 804108c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804108e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8041092:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8041096:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 804109a:	fa92 f2a2 	rbit	r2, r2
 804109e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80410a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80410a6:	fab2 f282 	clz	r2, r2
 80410aa:	b2d2      	uxtb	r2, r2
 80410ac:	f042 0220 	orr.w	r2, r2, #32
 80410b0:	b2d2      	uxtb	r2, r2
 80410b2:	f002 021f 	and.w	r2, r2, #31
 80410b6:	2101      	movs	r1, #1
 80410b8:	fa01 f202 	lsl.w	r2, r1, r2
 80410bc:	4013      	ands	r3, r2
 80410be:	2b00      	cmp	r3, #0
 80410c0:	d1ab      	bne.n	804101a <HAL_RCC_OscConfig+0x26a>
 80410c2:	e002      	b.n	80410ca <HAL_RCC_OscConfig+0x31a>
 80410c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80410c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80410ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80410ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80410d2:	681b      	ldr	r3, [r3, #0]
 80410d4:	681b      	ldr	r3, [r3, #0]
 80410d6:	f003 0302 	and.w	r3, r3, #2
 80410da:	2b00      	cmp	r3, #0
 80410dc:	f000 817f 	beq.w	80413de <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80410e0:	4ba7      	ldr	r3, [pc, #668]	@ (8041380 <HAL_RCC_OscConfig+0x5d0>)
 80410e2:	685b      	ldr	r3, [r3, #4]
 80410e4:	f003 030c 	and.w	r3, r3, #12
 80410e8:	2b00      	cmp	r3, #0
 80410ea:	d00c      	beq.n	8041106 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80410ec:	4ba4      	ldr	r3, [pc, #656]	@ (8041380 <HAL_RCC_OscConfig+0x5d0>)
 80410ee:	685b      	ldr	r3, [r3, #4]
 80410f0:	f003 030c 	and.w	r3, r3, #12
 80410f4:	2b08      	cmp	r3, #8
 80410f6:	d173      	bne.n	80411e0 <HAL_RCC_OscConfig+0x430>
 80410f8:	4ba1      	ldr	r3, [pc, #644]	@ (8041380 <HAL_RCC_OscConfig+0x5d0>)
 80410fa:	685b      	ldr	r3, [r3, #4]
 80410fc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8041100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8041104:	d16c      	bne.n	80411e0 <HAL_RCC_OscConfig+0x430>
 8041106:	2302      	movs	r3, #2
 8041108:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804110c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8041110:	fa93 f3a3 	rbit	r3, r3
 8041114:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8041118:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804111c:	fab3 f383 	clz	r3, r3
 8041120:	b2db      	uxtb	r3, r3
 8041122:	095b      	lsrs	r3, r3, #5
 8041124:	b2db      	uxtb	r3, r3
 8041126:	f043 0301 	orr.w	r3, r3, #1
 804112a:	b2db      	uxtb	r3, r3
 804112c:	2b01      	cmp	r3, #1
 804112e:	d102      	bne.n	8041136 <HAL_RCC_OscConfig+0x386>
 8041130:	4b93      	ldr	r3, [pc, #588]	@ (8041380 <HAL_RCC_OscConfig+0x5d0>)
 8041132:	681b      	ldr	r3, [r3, #0]
 8041134:	e013      	b.n	804115e <HAL_RCC_OscConfig+0x3ae>
 8041136:	2302      	movs	r3, #2
 8041138:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804113c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8041140:	fa93 f3a3 	rbit	r3, r3
 8041144:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8041148:	2302      	movs	r3, #2
 804114a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 804114e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8041152:	fa93 f3a3 	rbit	r3, r3
 8041156:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 804115a:	4b89      	ldr	r3, [pc, #548]	@ (8041380 <HAL_RCC_OscConfig+0x5d0>)
 804115c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804115e:	2202      	movs	r2, #2
 8041160:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8041164:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8041168:	fa92 f2a2 	rbit	r2, r2
 804116c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8041170:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8041174:	fab2 f282 	clz	r2, r2
 8041178:	b2d2      	uxtb	r2, r2
 804117a:	f042 0220 	orr.w	r2, r2, #32
 804117e:	b2d2      	uxtb	r2, r2
 8041180:	f002 021f 	and.w	r2, r2, #31
 8041184:	2101      	movs	r1, #1
 8041186:	fa01 f202 	lsl.w	r2, r1, r2
 804118a:	4013      	ands	r3, r2
 804118c:	2b00      	cmp	r3, #0
 804118e:	d00a      	beq.n	80411a6 <HAL_RCC_OscConfig+0x3f6>
 8041190:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041194:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041198:	681b      	ldr	r3, [r3, #0]
 804119a:	68db      	ldr	r3, [r3, #12]
 804119c:	2b01      	cmp	r3, #1
 804119e:	d002      	beq.n	80411a6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80411a0:	2301      	movs	r3, #1
 80411a2:	f000 be52 	b.w	8041e4a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80411a6:	4b76      	ldr	r3, [pc, #472]	@ (8041380 <HAL_RCC_OscConfig+0x5d0>)
 80411a8:	681b      	ldr	r3, [r3, #0]
 80411aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80411ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80411b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80411b6:	681b      	ldr	r3, [r3, #0]
 80411b8:	691b      	ldr	r3, [r3, #16]
 80411ba:	21f8      	movs	r1, #248	@ 0xf8
 80411bc:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80411c0:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80411c4:	fa91 f1a1 	rbit	r1, r1
 80411c8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80411cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80411d0:	fab1 f181 	clz	r1, r1
 80411d4:	b2c9      	uxtb	r1, r1
 80411d6:	408b      	lsls	r3, r1
 80411d8:	4969      	ldr	r1, [pc, #420]	@ (8041380 <HAL_RCC_OscConfig+0x5d0>)
 80411da:	4313      	orrs	r3, r2
 80411dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80411de:	e0fe      	b.n	80413de <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80411e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80411e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80411e8:	681b      	ldr	r3, [r3, #0]
 80411ea:	68db      	ldr	r3, [r3, #12]
 80411ec:	2b00      	cmp	r3, #0
 80411ee:	f000 8088 	beq.w	8041302 <HAL_RCC_OscConfig+0x552>
 80411f2:	2301      	movs	r3, #1
 80411f4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80411f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80411fc:	fa93 f3a3 	rbit	r3, r3
 8041200:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8041204:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8041208:	fab3 f383 	clz	r3, r3
 804120c:	b2db      	uxtb	r3, r3
 804120e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8041212:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8041216:	009b      	lsls	r3, r3, #2
 8041218:	461a      	mov	r2, r3
 804121a:	2301      	movs	r3, #1
 804121c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804121e:	f7ff fab1 	bl	8040784 <HAL_GetTick>
 8041222:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041226:	e00a      	b.n	804123e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8041228:	f7ff faac 	bl	8040784 <HAL_GetTick>
 804122c:	4602      	mov	r2, r0
 804122e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8041232:	1ad3      	subs	r3, r2, r3
 8041234:	2b02      	cmp	r3, #2
 8041236:	d902      	bls.n	804123e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8041238:	2303      	movs	r3, #3
 804123a:	f000 be06 	b.w	8041e4a <HAL_RCC_OscConfig+0x109a>
 804123e:	2302      	movs	r3, #2
 8041240:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041244:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8041248:	fa93 f3a3 	rbit	r3, r3
 804124c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8041250:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041254:	fab3 f383 	clz	r3, r3
 8041258:	b2db      	uxtb	r3, r3
 804125a:	095b      	lsrs	r3, r3, #5
 804125c:	b2db      	uxtb	r3, r3
 804125e:	f043 0301 	orr.w	r3, r3, #1
 8041262:	b2db      	uxtb	r3, r3
 8041264:	2b01      	cmp	r3, #1
 8041266:	d102      	bne.n	804126e <HAL_RCC_OscConfig+0x4be>
 8041268:	4b45      	ldr	r3, [pc, #276]	@ (8041380 <HAL_RCC_OscConfig+0x5d0>)
 804126a:	681b      	ldr	r3, [r3, #0]
 804126c:	e013      	b.n	8041296 <HAL_RCC_OscConfig+0x4e6>
 804126e:	2302      	movs	r3, #2
 8041270:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041274:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8041278:	fa93 f3a3 	rbit	r3, r3
 804127c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8041280:	2302      	movs	r3, #2
 8041282:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8041286:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 804128a:	fa93 f3a3 	rbit	r3, r3
 804128e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8041292:	4b3b      	ldr	r3, [pc, #236]	@ (8041380 <HAL_RCC_OscConfig+0x5d0>)
 8041294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041296:	2202      	movs	r2, #2
 8041298:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 804129c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80412a0:	fa92 f2a2 	rbit	r2, r2
 80412a4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80412a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80412ac:	fab2 f282 	clz	r2, r2
 80412b0:	b2d2      	uxtb	r2, r2
 80412b2:	f042 0220 	orr.w	r2, r2, #32
 80412b6:	b2d2      	uxtb	r2, r2
 80412b8:	f002 021f 	and.w	r2, r2, #31
 80412bc:	2101      	movs	r1, #1
 80412be:	fa01 f202 	lsl.w	r2, r1, r2
 80412c2:	4013      	ands	r3, r2
 80412c4:	2b00      	cmp	r3, #0
 80412c6:	d0af      	beq.n	8041228 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80412c8:	4b2d      	ldr	r3, [pc, #180]	@ (8041380 <HAL_RCC_OscConfig+0x5d0>)
 80412ca:	681b      	ldr	r3, [r3, #0]
 80412cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80412d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80412d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80412d8:	681b      	ldr	r3, [r3, #0]
 80412da:	691b      	ldr	r3, [r3, #16]
 80412dc:	21f8      	movs	r1, #248	@ 0xf8
 80412de:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80412e2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80412e6:	fa91 f1a1 	rbit	r1, r1
 80412ea:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80412ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80412f2:	fab1 f181 	clz	r1, r1
 80412f6:	b2c9      	uxtb	r1, r1
 80412f8:	408b      	lsls	r3, r1
 80412fa:	4921      	ldr	r1, [pc, #132]	@ (8041380 <HAL_RCC_OscConfig+0x5d0>)
 80412fc:	4313      	orrs	r3, r2
 80412fe:	600b      	str	r3, [r1, #0]
 8041300:	e06d      	b.n	80413de <HAL_RCC_OscConfig+0x62e>
 8041302:	2301      	movs	r3, #1
 8041304:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041308:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 804130c:	fa93 f3a3 	rbit	r3, r3
 8041310:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8041314:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041318:	fab3 f383 	clz	r3, r3
 804131c:	b2db      	uxtb	r3, r3
 804131e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8041322:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8041326:	009b      	lsls	r3, r3, #2
 8041328:	461a      	mov	r2, r3
 804132a:	2300      	movs	r3, #0
 804132c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804132e:	f7ff fa29 	bl	8040784 <HAL_GetTick>
 8041332:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8041336:	e00a      	b.n	804134e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8041338:	f7ff fa24 	bl	8040784 <HAL_GetTick>
 804133c:	4602      	mov	r2, r0
 804133e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8041342:	1ad3      	subs	r3, r2, r3
 8041344:	2b02      	cmp	r3, #2
 8041346:	d902      	bls.n	804134e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8041348:	2303      	movs	r3, #3
 804134a:	f000 bd7e 	b.w	8041e4a <HAL_RCC_OscConfig+0x109a>
 804134e:	2302      	movs	r3, #2
 8041350:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041354:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8041358:	fa93 f3a3 	rbit	r3, r3
 804135c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8041360:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8041364:	fab3 f383 	clz	r3, r3
 8041368:	b2db      	uxtb	r3, r3
 804136a:	095b      	lsrs	r3, r3, #5
 804136c:	b2db      	uxtb	r3, r3
 804136e:	f043 0301 	orr.w	r3, r3, #1
 8041372:	b2db      	uxtb	r3, r3
 8041374:	2b01      	cmp	r3, #1
 8041376:	d105      	bne.n	8041384 <HAL_RCC_OscConfig+0x5d4>
 8041378:	4b01      	ldr	r3, [pc, #4]	@ (8041380 <HAL_RCC_OscConfig+0x5d0>)
 804137a:	681b      	ldr	r3, [r3, #0]
 804137c:	e016      	b.n	80413ac <HAL_RCC_OscConfig+0x5fc>
 804137e:	bf00      	nop
 8041380:	40021000 	.word	0x40021000
 8041384:	2302      	movs	r3, #2
 8041386:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804138a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 804138e:	fa93 f3a3 	rbit	r3, r3
 8041392:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8041396:	2302      	movs	r3, #2
 8041398:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 804139c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80413a0:	fa93 f3a3 	rbit	r3, r3
 80413a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80413a8:	4bbf      	ldr	r3, [pc, #764]	@ (80416a8 <HAL_RCC_OscConfig+0x8f8>)
 80413aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80413ac:	2202      	movs	r2, #2
 80413ae:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80413b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80413b6:	fa92 f2a2 	rbit	r2, r2
 80413ba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80413be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80413c2:	fab2 f282 	clz	r2, r2
 80413c6:	b2d2      	uxtb	r2, r2
 80413c8:	f042 0220 	orr.w	r2, r2, #32
 80413cc:	b2d2      	uxtb	r2, r2
 80413ce:	f002 021f 	and.w	r2, r2, #31
 80413d2:	2101      	movs	r1, #1
 80413d4:	fa01 f202 	lsl.w	r2, r1, r2
 80413d8:	4013      	ands	r3, r2
 80413da:	2b00      	cmp	r3, #0
 80413dc:	d1ac      	bne.n	8041338 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80413de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80413e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80413e6:	681b      	ldr	r3, [r3, #0]
 80413e8:	681b      	ldr	r3, [r3, #0]
 80413ea:	f003 0308 	and.w	r3, r3, #8
 80413ee:	2b00      	cmp	r3, #0
 80413f0:	f000 8113 	beq.w	804161a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80413f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80413f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80413fc:	681b      	ldr	r3, [r3, #0]
 80413fe:	695b      	ldr	r3, [r3, #20]
 8041400:	2b00      	cmp	r3, #0
 8041402:	d07c      	beq.n	80414fe <HAL_RCC_OscConfig+0x74e>
 8041404:	2301      	movs	r3, #1
 8041406:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804140a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 804140e:	fa93 f3a3 	rbit	r3, r3
 8041412:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8041416:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804141a:	fab3 f383 	clz	r3, r3
 804141e:	b2db      	uxtb	r3, r3
 8041420:	461a      	mov	r2, r3
 8041422:	4ba2      	ldr	r3, [pc, #648]	@ (80416ac <HAL_RCC_OscConfig+0x8fc>)
 8041424:	4413      	add	r3, r2
 8041426:	009b      	lsls	r3, r3, #2
 8041428:	461a      	mov	r2, r3
 804142a:	2301      	movs	r3, #1
 804142c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804142e:	f7ff f9a9 	bl	8040784 <HAL_GetTick>
 8041432:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8041436:	e00a      	b.n	804144e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8041438:	f7ff f9a4 	bl	8040784 <HAL_GetTick>
 804143c:	4602      	mov	r2, r0
 804143e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8041442:	1ad3      	subs	r3, r2, r3
 8041444:	2b02      	cmp	r3, #2
 8041446:	d902      	bls.n	804144e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8041448:	2303      	movs	r3, #3
 804144a:	f000 bcfe 	b.w	8041e4a <HAL_RCC_OscConfig+0x109a>
 804144e:	2302      	movs	r3, #2
 8041450:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8041458:	fa93 f2a3 	rbit	r2, r3
 804145c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041460:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8041464:	601a      	str	r2, [r3, #0]
 8041466:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804146a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 804146e:	2202      	movs	r2, #2
 8041470:	601a      	str	r2, [r3, #0]
 8041472:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041476:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 804147a:	681b      	ldr	r3, [r3, #0]
 804147c:	fa93 f2a3 	rbit	r2, r3
 8041480:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8041488:	601a      	str	r2, [r3, #0]
 804148a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804148e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8041492:	2202      	movs	r2, #2
 8041494:	601a      	str	r2, [r3, #0]
 8041496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804149a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 804149e:	681b      	ldr	r3, [r3, #0]
 80414a0:	fa93 f2a3 	rbit	r2, r3
 80414a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80414a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80414ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80414ae:	4b7e      	ldr	r3, [pc, #504]	@ (80416a8 <HAL_RCC_OscConfig+0x8f8>)
 80414b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80414b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80414b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80414ba:	2102      	movs	r1, #2
 80414bc:	6019      	str	r1, [r3, #0]
 80414be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80414c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80414c6:	681b      	ldr	r3, [r3, #0]
 80414c8:	fa93 f1a3 	rbit	r1, r3
 80414cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80414d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80414d4:	6019      	str	r1, [r3, #0]
  return result;
 80414d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80414da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80414de:	681b      	ldr	r3, [r3, #0]
 80414e0:	fab3 f383 	clz	r3, r3
 80414e4:	b2db      	uxtb	r3, r3
 80414e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80414ea:	b2db      	uxtb	r3, r3
 80414ec:	f003 031f 	and.w	r3, r3, #31
 80414f0:	2101      	movs	r1, #1
 80414f2:	fa01 f303 	lsl.w	r3, r1, r3
 80414f6:	4013      	ands	r3, r2
 80414f8:	2b00      	cmp	r3, #0
 80414fa:	d09d      	beq.n	8041438 <HAL_RCC_OscConfig+0x688>
 80414fc:	e08d      	b.n	804161a <HAL_RCC_OscConfig+0x86a>
 80414fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041502:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8041506:	2201      	movs	r2, #1
 8041508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804150a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804150e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8041512:	681b      	ldr	r3, [r3, #0]
 8041514:	fa93 f2a3 	rbit	r2, r3
 8041518:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804151c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8041520:	601a      	str	r2, [r3, #0]
  return result;
 8041522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041526:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 804152a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 804152c:	fab3 f383 	clz	r3, r3
 8041530:	b2db      	uxtb	r3, r3
 8041532:	461a      	mov	r2, r3
 8041534:	4b5d      	ldr	r3, [pc, #372]	@ (80416ac <HAL_RCC_OscConfig+0x8fc>)
 8041536:	4413      	add	r3, r2
 8041538:	009b      	lsls	r3, r3, #2
 804153a:	461a      	mov	r2, r3
 804153c:	2300      	movs	r3, #0
 804153e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8041540:	f7ff f920 	bl	8040784 <HAL_GetTick>
 8041544:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041548:	e00a      	b.n	8041560 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804154a:	f7ff f91b 	bl	8040784 <HAL_GetTick>
 804154e:	4602      	mov	r2, r0
 8041550:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8041554:	1ad3      	subs	r3, r2, r3
 8041556:	2b02      	cmp	r3, #2
 8041558:	d902      	bls.n	8041560 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 804155a:	2303      	movs	r3, #3
 804155c:	f000 bc75 	b.w	8041e4a <HAL_RCC_OscConfig+0x109a>
 8041560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041564:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8041568:	2202      	movs	r2, #2
 804156a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804156c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041570:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8041574:	681b      	ldr	r3, [r3, #0]
 8041576:	fa93 f2a3 	rbit	r2, r3
 804157a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804157e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8041582:	601a      	str	r2, [r3, #0]
 8041584:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041588:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 804158c:	2202      	movs	r2, #2
 804158e:	601a      	str	r2, [r3, #0]
 8041590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041594:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8041598:	681b      	ldr	r3, [r3, #0]
 804159a:	fa93 f2a3 	rbit	r2, r3
 804159e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80415a2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80415a6:	601a      	str	r2, [r3, #0]
 80415a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80415ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80415b0:	2202      	movs	r2, #2
 80415b2:	601a      	str	r2, [r3, #0]
 80415b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80415b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80415bc:	681b      	ldr	r3, [r3, #0]
 80415be:	fa93 f2a3 	rbit	r2, r3
 80415c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80415c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80415ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80415cc:	4b36      	ldr	r3, [pc, #216]	@ (80416a8 <HAL_RCC_OscConfig+0x8f8>)
 80415ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80415d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80415d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80415d8:	2102      	movs	r1, #2
 80415da:	6019      	str	r1, [r3, #0]
 80415dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80415e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80415e4:	681b      	ldr	r3, [r3, #0]
 80415e6:	fa93 f1a3 	rbit	r1, r3
 80415ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80415ee:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80415f2:	6019      	str	r1, [r3, #0]
  return result;
 80415f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80415f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80415fc:	681b      	ldr	r3, [r3, #0]
 80415fe:	fab3 f383 	clz	r3, r3
 8041602:	b2db      	uxtb	r3, r3
 8041604:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8041608:	b2db      	uxtb	r3, r3
 804160a:	f003 031f 	and.w	r3, r3, #31
 804160e:	2101      	movs	r1, #1
 8041610:	fa01 f303 	lsl.w	r3, r1, r3
 8041614:	4013      	ands	r3, r2
 8041616:	2b00      	cmp	r3, #0
 8041618:	d197      	bne.n	804154a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804161a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804161e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041622:	681b      	ldr	r3, [r3, #0]
 8041624:	681b      	ldr	r3, [r3, #0]
 8041626:	f003 0304 	and.w	r3, r3, #4
 804162a:	2b00      	cmp	r3, #0
 804162c:	f000 81a5 	beq.w	804197a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041630:	2300      	movs	r3, #0
 8041632:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041636:	4b1c      	ldr	r3, [pc, #112]	@ (80416a8 <HAL_RCC_OscConfig+0x8f8>)
 8041638:	69db      	ldr	r3, [r3, #28]
 804163a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 804163e:	2b00      	cmp	r3, #0
 8041640:	d116      	bne.n	8041670 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041642:	4b19      	ldr	r3, [pc, #100]	@ (80416a8 <HAL_RCC_OscConfig+0x8f8>)
 8041644:	69db      	ldr	r3, [r3, #28]
 8041646:	4a18      	ldr	r2, [pc, #96]	@ (80416a8 <HAL_RCC_OscConfig+0x8f8>)
 8041648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 804164c:	61d3      	str	r3, [r2, #28]
 804164e:	4b16      	ldr	r3, [pc, #88]	@ (80416a8 <HAL_RCC_OscConfig+0x8f8>)
 8041650:	69db      	ldr	r3, [r3, #28]
 8041652:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8041656:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804165a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 804165e:	601a      	str	r2, [r3, #0]
 8041660:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041664:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8041668:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 804166a:	2301      	movs	r3, #1
 804166c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8041670:	4b0f      	ldr	r3, [pc, #60]	@ (80416b0 <HAL_RCC_OscConfig+0x900>)
 8041672:	681b      	ldr	r3, [r3, #0]
 8041674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041678:	2b00      	cmp	r3, #0
 804167a:	d121      	bne.n	80416c0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 804167c:	4b0c      	ldr	r3, [pc, #48]	@ (80416b0 <HAL_RCC_OscConfig+0x900>)
 804167e:	681b      	ldr	r3, [r3, #0]
 8041680:	4a0b      	ldr	r2, [pc, #44]	@ (80416b0 <HAL_RCC_OscConfig+0x900>)
 8041682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8041686:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8041688:	f7ff f87c 	bl	8040784 <HAL_GetTick>
 804168c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8041690:	e010      	b.n	80416b4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041692:	f7ff f877 	bl	8040784 <HAL_GetTick>
 8041696:	4602      	mov	r2, r0
 8041698:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 804169c:	1ad3      	subs	r3, r2, r3
 804169e:	2b64      	cmp	r3, #100	@ 0x64
 80416a0:	d908      	bls.n	80416b4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80416a2:	2303      	movs	r3, #3
 80416a4:	e3d1      	b.n	8041e4a <HAL_RCC_OscConfig+0x109a>
 80416a6:	bf00      	nop
 80416a8:	40021000 	.word	0x40021000
 80416ac:	10908120 	.word	0x10908120
 80416b0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80416b4:	4b8d      	ldr	r3, [pc, #564]	@ (80418ec <HAL_RCC_OscConfig+0xb3c>)
 80416b6:	681b      	ldr	r3, [r3, #0]
 80416b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80416bc:	2b00      	cmp	r3, #0
 80416be:	d0e8      	beq.n	8041692 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80416c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80416c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80416c8:	681b      	ldr	r3, [r3, #0]
 80416ca:	689b      	ldr	r3, [r3, #8]
 80416cc:	2b01      	cmp	r3, #1
 80416ce:	d106      	bne.n	80416de <HAL_RCC_OscConfig+0x92e>
 80416d0:	4b87      	ldr	r3, [pc, #540]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 80416d2:	6a1b      	ldr	r3, [r3, #32]
 80416d4:	4a86      	ldr	r2, [pc, #536]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 80416d6:	f043 0301 	orr.w	r3, r3, #1
 80416da:	6213      	str	r3, [r2, #32]
 80416dc:	e035      	b.n	804174a <HAL_RCC_OscConfig+0x99a>
 80416de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80416e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80416e6:	681b      	ldr	r3, [r3, #0]
 80416e8:	689b      	ldr	r3, [r3, #8]
 80416ea:	2b00      	cmp	r3, #0
 80416ec:	d10c      	bne.n	8041708 <HAL_RCC_OscConfig+0x958>
 80416ee:	4b80      	ldr	r3, [pc, #512]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 80416f0:	6a1b      	ldr	r3, [r3, #32]
 80416f2:	4a7f      	ldr	r2, [pc, #508]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 80416f4:	f023 0301 	bic.w	r3, r3, #1
 80416f8:	6213      	str	r3, [r2, #32]
 80416fa:	4b7d      	ldr	r3, [pc, #500]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 80416fc:	6a1b      	ldr	r3, [r3, #32]
 80416fe:	4a7c      	ldr	r2, [pc, #496]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 8041700:	f023 0304 	bic.w	r3, r3, #4
 8041704:	6213      	str	r3, [r2, #32]
 8041706:	e020      	b.n	804174a <HAL_RCC_OscConfig+0x99a>
 8041708:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804170c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041710:	681b      	ldr	r3, [r3, #0]
 8041712:	689b      	ldr	r3, [r3, #8]
 8041714:	2b05      	cmp	r3, #5
 8041716:	d10c      	bne.n	8041732 <HAL_RCC_OscConfig+0x982>
 8041718:	4b75      	ldr	r3, [pc, #468]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 804171a:	6a1b      	ldr	r3, [r3, #32]
 804171c:	4a74      	ldr	r2, [pc, #464]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 804171e:	f043 0304 	orr.w	r3, r3, #4
 8041722:	6213      	str	r3, [r2, #32]
 8041724:	4b72      	ldr	r3, [pc, #456]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 8041726:	6a1b      	ldr	r3, [r3, #32]
 8041728:	4a71      	ldr	r2, [pc, #452]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 804172a:	f043 0301 	orr.w	r3, r3, #1
 804172e:	6213      	str	r3, [r2, #32]
 8041730:	e00b      	b.n	804174a <HAL_RCC_OscConfig+0x99a>
 8041732:	4b6f      	ldr	r3, [pc, #444]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 8041734:	6a1b      	ldr	r3, [r3, #32]
 8041736:	4a6e      	ldr	r2, [pc, #440]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 8041738:	f023 0301 	bic.w	r3, r3, #1
 804173c:	6213      	str	r3, [r2, #32]
 804173e:	4b6c      	ldr	r3, [pc, #432]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 8041740:	6a1b      	ldr	r3, [r3, #32]
 8041742:	4a6b      	ldr	r2, [pc, #428]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 8041744:	f023 0304 	bic.w	r3, r3, #4
 8041748:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 804174a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804174e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041752:	681b      	ldr	r3, [r3, #0]
 8041754:	689b      	ldr	r3, [r3, #8]
 8041756:	2b00      	cmp	r3, #0
 8041758:	f000 8081 	beq.w	804185e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804175c:	f7ff f812 	bl	8040784 <HAL_GetTick>
 8041760:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041764:	e00b      	b.n	804177e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041766:	f7ff f80d 	bl	8040784 <HAL_GetTick>
 804176a:	4602      	mov	r2, r0
 804176c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8041770:	1ad3      	subs	r3, r2, r3
 8041772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041776:	4293      	cmp	r3, r2
 8041778:	d901      	bls.n	804177e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 804177a:	2303      	movs	r3, #3
 804177c:	e365      	b.n	8041e4a <HAL_RCC_OscConfig+0x109a>
 804177e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041782:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8041786:	2202      	movs	r2, #2
 8041788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804178a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804178e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8041792:	681b      	ldr	r3, [r3, #0]
 8041794:	fa93 f2a3 	rbit	r2, r3
 8041798:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804179c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80417a0:	601a      	str	r2, [r3, #0]
 80417a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80417a6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80417aa:	2202      	movs	r2, #2
 80417ac:	601a      	str	r2, [r3, #0]
 80417ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80417b2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80417b6:	681b      	ldr	r3, [r3, #0]
 80417b8:	fa93 f2a3 	rbit	r2, r3
 80417bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80417c0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80417c4:	601a      	str	r2, [r3, #0]
  return result;
 80417c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80417ca:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80417ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80417d0:	fab3 f383 	clz	r3, r3
 80417d4:	b2db      	uxtb	r3, r3
 80417d6:	095b      	lsrs	r3, r3, #5
 80417d8:	b2db      	uxtb	r3, r3
 80417da:	f043 0302 	orr.w	r3, r3, #2
 80417de:	b2db      	uxtb	r3, r3
 80417e0:	2b02      	cmp	r3, #2
 80417e2:	d102      	bne.n	80417ea <HAL_RCC_OscConfig+0xa3a>
 80417e4:	4b42      	ldr	r3, [pc, #264]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 80417e6:	6a1b      	ldr	r3, [r3, #32]
 80417e8:	e013      	b.n	8041812 <HAL_RCC_OscConfig+0xa62>
 80417ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80417ee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80417f2:	2202      	movs	r2, #2
 80417f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80417f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80417fa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80417fe:	681b      	ldr	r3, [r3, #0]
 8041800:	fa93 f2a3 	rbit	r2, r3
 8041804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041808:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 804180c:	601a      	str	r2, [r3, #0]
 804180e:	4b38      	ldr	r3, [pc, #224]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 8041810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041812:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041816:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 804181a:	2102      	movs	r1, #2
 804181c:	6011      	str	r1, [r2, #0]
 804181e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041822:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8041826:	6812      	ldr	r2, [r2, #0]
 8041828:	fa92 f1a2 	rbit	r1, r2
 804182c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041830:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8041834:	6011      	str	r1, [r2, #0]
  return result;
 8041836:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 804183a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 804183e:	6812      	ldr	r2, [r2, #0]
 8041840:	fab2 f282 	clz	r2, r2
 8041844:	b2d2      	uxtb	r2, r2
 8041846:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 804184a:	b2d2      	uxtb	r2, r2
 804184c:	f002 021f 	and.w	r2, r2, #31
 8041850:	2101      	movs	r1, #1
 8041852:	fa01 f202 	lsl.w	r2, r1, r2
 8041856:	4013      	ands	r3, r2
 8041858:	2b00      	cmp	r3, #0
 804185a:	d084      	beq.n	8041766 <HAL_RCC_OscConfig+0x9b6>
 804185c:	e083      	b.n	8041966 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804185e:	f7fe ff91 	bl	8040784 <HAL_GetTick>
 8041862:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041866:	e00b      	b.n	8041880 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041868:	f7fe ff8c 	bl	8040784 <HAL_GetTick>
 804186c:	4602      	mov	r2, r0
 804186e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8041872:	1ad3      	subs	r3, r2, r3
 8041874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041878:	4293      	cmp	r3, r2
 804187a:	d901      	bls.n	8041880 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 804187c:	2303      	movs	r3, #3
 804187e:	e2e4      	b.n	8041e4a <HAL_RCC_OscConfig+0x109a>
 8041880:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041884:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8041888:	2202      	movs	r2, #2
 804188a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804188c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041890:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8041894:	681b      	ldr	r3, [r3, #0]
 8041896:	fa93 f2a3 	rbit	r2, r3
 804189a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804189e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80418a2:	601a      	str	r2, [r3, #0]
 80418a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80418a8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80418ac:	2202      	movs	r2, #2
 80418ae:	601a      	str	r2, [r3, #0]
 80418b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80418b4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80418b8:	681b      	ldr	r3, [r3, #0]
 80418ba:	fa93 f2a3 	rbit	r2, r3
 80418be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80418c2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80418c6:	601a      	str	r2, [r3, #0]
  return result;
 80418c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80418cc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80418d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80418d2:	fab3 f383 	clz	r3, r3
 80418d6:	b2db      	uxtb	r3, r3
 80418d8:	095b      	lsrs	r3, r3, #5
 80418da:	b2db      	uxtb	r3, r3
 80418dc:	f043 0302 	orr.w	r3, r3, #2
 80418e0:	b2db      	uxtb	r3, r3
 80418e2:	2b02      	cmp	r3, #2
 80418e4:	d106      	bne.n	80418f4 <HAL_RCC_OscConfig+0xb44>
 80418e6:	4b02      	ldr	r3, [pc, #8]	@ (80418f0 <HAL_RCC_OscConfig+0xb40>)
 80418e8:	6a1b      	ldr	r3, [r3, #32]
 80418ea:	e017      	b.n	804191c <HAL_RCC_OscConfig+0xb6c>
 80418ec:	40007000 	.word	0x40007000
 80418f0:	40021000 	.word	0x40021000
 80418f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80418f8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80418fc:	2202      	movs	r2, #2
 80418fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041904:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8041908:	681b      	ldr	r3, [r3, #0]
 804190a:	fa93 f2a3 	rbit	r2, r3
 804190e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041912:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8041916:	601a      	str	r2, [r3, #0]
 8041918:	4bb3      	ldr	r3, [pc, #716]	@ (8041be8 <HAL_RCC_OscConfig+0xe38>)
 804191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804191c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041920:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8041924:	2102      	movs	r1, #2
 8041926:	6011      	str	r1, [r2, #0]
 8041928:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 804192c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8041930:	6812      	ldr	r2, [r2, #0]
 8041932:	fa92 f1a2 	rbit	r1, r2
 8041936:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 804193a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 804193e:	6011      	str	r1, [r2, #0]
  return result;
 8041940:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041944:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8041948:	6812      	ldr	r2, [r2, #0]
 804194a:	fab2 f282 	clz	r2, r2
 804194e:	b2d2      	uxtb	r2, r2
 8041950:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8041954:	b2d2      	uxtb	r2, r2
 8041956:	f002 021f 	and.w	r2, r2, #31
 804195a:	2101      	movs	r1, #1
 804195c:	fa01 f202 	lsl.w	r2, r1, r2
 8041960:	4013      	ands	r3, r2
 8041962:	2b00      	cmp	r3, #0
 8041964:	d180      	bne.n	8041868 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8041966:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 804196a:	2b01      	cmp	r3, #1
 804196c:	d105      	bne.n	804197a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 804196e:	4b9e      	ldr	r3, [pc, #632]	@ (8041be8 <HAL_RCC_OscConfig+0xe38>)
 8041970:	69db      	ldr	r3, [r3, #28]
 8041972:	4a9d      	ldr	r2, [pc, #628]	@ (8041be8 <HAL_RCC_OscConfig+0xe38>)
 8041974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8041978:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 804197a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804197e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041982:	681b      	ldr	r3, [r3, #0]
 8041984:	699b      	ldr	r3, [r3, #24]
 8041986:	2b00      	cmp	r3, #0
 8041988:	f000 825e 	beq.w	8041e48 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 804198c:	4b96      	ldr	r3, [pc, #600]	@ (8041be8 <HAL_RCC_OscConfig+0xe38>)
 804198e:	685b      	ldr	r3, [r3, #4]
 8041990:	f003 030c 	and.w	r3, r3, #12
 8041994:	2b08      	cmp	r3, #8
 8041996:	f000 821f 	beq.w	8041dd8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 804199a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804199e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80419a2:	681b      	ldr	r3, [r3, #0]
 80419a4:	699b      	ldr	r3, [r3, #24]
 80419a6:	2b02      	cmp	r3, #2
 80419a8:	f040 8170 	bne.w	8041c8c <HAL_RCC_OscConfig+0xedc>
 80419ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80419b0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80419b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80419b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80419ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80419be:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80419c2:	681b      	ldr	r3, [r3, #0]
 80419c4:	fa93 f2a3 	rbit	r2, r3
 80419c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80419cc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80419d0:	601a      	str	r2, [r3, #0]
  return result;
 80419d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80419d6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80419da:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80419dc:	fab3 f383 	clz	r3, r3
 80419e0:	b2db      	uxtb	r3, r3
 80419e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80419e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80419ea:	009b      	lsls	r3, r3, #2
 80419ec:	461a      	mov	r2, r3
 80419ee:	2300      	movs	r3, #0
 80419f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80419f2:	f7fe fec7 	bl	8040784 <HAL_GetTick>
 80419f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80419fa:	e009      	b.n	8041a10 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80419fc:	f7fe fec2 	bl	8040784 <HAL_GetTick>
 8041a00:	4602      	mov	r2, r0
 8041a02:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8041a06:	1ad3      	subs	r3, r2, r3
 8041a08:	2b02      	cmp	r3, #2
 8041a0a:	d901      	bls.n	8041a10 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8041a0c:	2303      	movs	r3, #3
 8041a0e:	e21c      	b.n	8041e4a <HAL_RCC_OscConfig+0x109a>
 8041a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a14:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8041a18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a22:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8041a26:	681b      	ldr	r3, [r3, #0]
 8041a28:	fa93 f2a3 	rbit	r2, r3
 8041a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a30:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8041a34:	601a      	str	r2, [r3, #0]
  return result;
 8041a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a3a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8041a3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8041a40:	fab3 f383 	clz	r3, r3
 8041a44:	b2db      	uxtb	r3, r3
 8041a46:	095b      	lsrs	r3, r3, #5
 8041a48:	b2db      	uxtb	r3, r3
 8041a4a:	f043 0301 	orr.w	r3, r3, #1
 8041a4e:	b2db      	uxtb	r3, r3
 8041a50:	2b01      	cmp	r3, #1
 8041a52:	d102      	bne.n	8041a5a <HAL_RCC_OscConfig+0xcaa>
 8041a54:	4b64      	ldr	r3, [pc, #400]	@ (8041be8 <HAL_RCC_OscConfig+0xe38>)
 8041a56:	681b      	ldr	r3, [r3, #0]
 8041a58:	e027      	b.n	8041aaa <HAL_RCC_OscConfig+0xcfa>
 8041a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a5e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8041a62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a6c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8041a70:	681b      	ldr	r3, [r3, #0]
 8041a72:	fa93 f2a3 	rbit	r2, r3
 8041a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a7a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8041a7e:	601a      	str	r2, [r3, #0]
 8041a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a84:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8041a88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041a8c:	601a      	str	r2, [r3, #0]
 8041a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a92:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8041a96:	681b      	ldr	r3, [r3, #0]
 8041a98:	fa93 f2a3 	rbit	r2, r3
 8041a9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041aa0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8041aa4:	601a      	str	r2, [r3, #0]
 8041aa6:	4b50      	ldr	r3, [pc, #320]	@ (8041be8 <HAL_RCC_OscConfig+0xe38>)
 8041aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041aaa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041aae:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8041ab2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8041ab6:	6011      	str	r1, [r2, #0]
 8041ab8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041abc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8041ac0:	6812      	ldr	r2, [r2, #0]
 8041ac2:	fa92 f1a2 	rbit	r1, r2
 8041ac6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041aca:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8041ace:	6011      	str	r1, [r2, #0]
  return result;
 8041ad0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041ad4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8041ad8:	6812      	ldr	r2, [r2, #0]
 8041ada:	fab2 f282 	clz	r2, r2
 8041ade:	b2d2      	uxtb	r2, r2
 8041ae0:	f042 0220 	orr.w	r2, r2, #32
 8041ae4:	b2d2      	uxtb	r2, r2
 8041ae6:	f002 021f 	and.w	r2, r2, #31
 8041aea:	2101      	movs	r1, #1
 8041aec:	fa01 f202 	lsl.w	r2, r1, r2
 8041af0:	4013      	ands	r3, r2
 8041af2:	2b00      	cmp	r3, #0
 8041af4:	d182      	bne.n	80419fc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8041af6:	4b3c      	ldr	r3, [pc, #240]	@ (8041be8 <HAL_RCC_OscConfig+0xe38>)
 8041af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041afa:	f023 020f 	bic.w	r2, r3, #15
 8041afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041b06:	681b      	ldr	r3, [r3, #0]
 8041b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041b0a:	4937      	ldr	r1, [pc, #220]	@ (8041be8 <HAL_RCC_OscConfig+0xe38>)
 8041b0c:	4313      	orrs	r3, r2
 8041b0e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8041b10:	4b35      	ldr	r3, [pc, #212]	@ (8041be8 <HAL_RCC_OscConfig+0xe38>)
 8041b12:	685b      	ldr	r3, [r3, #4]
 8041b14:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8041b18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b1c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041b20:	681b      	ldr	r3, [r3, #0]
 8041b22:	6a19      	ldr	r1, [r3, #32]
 8041b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041b2c:	681b      	ldr	r3, [r3, #0]
 8041b2e:	69db      	ldr	r3, [r3, #28]
 8041b30:	430b      	orrs	r3, r1
 8041b32:	492d      	ldr	r1, [pc, #180]	@ (8041be8 <HAL_RCC_OscConfig+0xe38>)
 8041b34:	4313      	orrs	r3, r2
 8041b36:	604b      	str	r3, [r1, #4]
 8041b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b3c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8041b40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8041b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041b46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b4a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8041b4e:	681b      	ldr	r3, [r3, #0]
 8041b50:	fa93 f2a3 	rbit	r2, r3
 8041b54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b58:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8041b5c:	601a      	str	r2, [r3, #0]
  return result;
 8041b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b62:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8041b66:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041b68:	fab3 f383 	clz	r3, r3
 8041b6c:	b2db      	uxtb	r3, r3
 8041b6e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8041b72:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8041b76:	009b      	lsls	r3, r3, #2
 8041b78:	461a      	mov	r2, r3
 8041b7a:	2301      	movs	r3, #1
 8041b7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8041b7e:	f7fe fe01 	bl	8040784 <HAL_GetTick>
 8041b82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8041b86:	e009      	b.n	8041b9c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041b88:	f7fe fdfc 	bl	8040784 <HAL_GetTick>
 8041b8c:	4602      	mov	r2, r0
 8041b8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8041b92:	1ad3      	subs	r3, r2, r3
 8041b94:	2b02      	cmp	r3, #2
 8041b96:	d901      	bls.n	8041b9c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8041b98:	2303      	movs	r3, #3
 8041b9a:	e156      	b.n	8041e4a <HAL_RCC_OscConfig+0x109a>
 8041b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041ba0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8041ba4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041baa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041bae:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8041bb2:	681b      	ldr	r3, [r3, #0]
 8041bb4:	fa93 f2a3 	rbit	r2, r3
 8041bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041bbc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8041bc0:	601a      	str	r2, [r3, #0]
  return result;
 8041bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041bc6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8041bca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8041bcc:	fab3 f383 	clz	r3, r3
 8041bd0:	b2db      	uxtb	r3, r3
 8041bd2:	095b      	lsrs	r3, r3, #5
 8041bd4:	b2db      	uxtb	r3, r3
 8041bd6:	f043 0301 	orr.w	r3, r3, #1
 8041bda:	b2db      	uxtb	r3, r3
 8041bdc:	2b01      	cmp	r3, #1
 8041bde:	d105      	bne.n	8041bec <HAL_RCC_OscConfig+0xe3c>
 8041be0:	4b01      	ldr	r3, [pc, #4]	@ (8041be8 <HAL_RCC_OscConfig+0xe38>)
 8041be2:	681b      	ldr	r3, [r3, #0]
 8041be4:	e02a      	b.n	8041c3c <HAL_RCC_OscConfig+0xe8c>
 8041be6:	bf00      	nop
 8041be8:	40021000 	.word	0x40021000
 8041bec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041bf0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8041bf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041bfe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8041c02:	681b      	ldr	r3, [r3, #0]
 8041c04:	fa93 f2a3 	rbit	r2, r3
 8041c08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041c0c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8041c10:	601a      	str	r2, [r3, #0]
 8041c12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041c16:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8041c1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041c1e:	601a      	str	r2, [r3, #0]
 8041c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041c24:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8041c28:	681b      	ldr	r3, [r3, #0]
 8041c2a:	fa93 f2a3 	rbit	r2, r3
 8041c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041c32:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8041c36:	601a      	str	r2, [r3, #0]
 8041c38:	4b86      	ldr	r3, [pc, #536]	@ (8041e54 <HAL_RCC_OscConfig+0x10a4>)
 8041c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041c3c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041c40:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8041c44:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8041c48:	6011      	str	r1, [r2, #0]
 8041c4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041c4e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8041c52:	6812      	ldr	r2, [r2, #0]
 8041c54:	fa92 f1a2 	rbit	r1, r2
 8041c58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041c5c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8041c60:	6011      	str	r1, [r2, #0]
  return result;
 8041c62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041c66:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8041c6a:	6812      	ldr	r2, [r2, #0]
 8041c6c:	fab2 f282 	clz	r2, r2
 8041c70:	b2d2      	uxtb	r2, r2
 8041c72:	f042 0220 	orr.w	r2, r2, #32
 8041c76:	b2d2      	uxtb	r2, r2
 8041c78:	f002 021f 	and.w	r2, r2, #31
 8041c7c:	2101      	movs	r1, #1
 8041c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8041c82:	4013      	ands	r3, r2
 8041c84:	2b00      	cmp	r3, #0
 8041c86:	f43f af7f 	beq.w	8041b88 <HAL_RCC_OscConfig+0xdd8>
 8041c8a:	e0dd      	b.n	8041e48 <HAL_RCC_OscConfig+0x1098>
 8041c8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041c90:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8041c94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8041c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041c9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041c9e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8041ca2:	681b      	ldr	r3, [r3, #0]
 8041ca4:	fa93 f2a3 	rbit	r2, r3
 8041ca8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041cac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8041cb0:	601a      	str	r2, [r3, #0]
  return result;
 8041cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041cb6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8041cba:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041cbc:	fab3 f383 	clz	r3, r3
 8041cc0:	b2db      	uxtb	r3, r3
 8041cc2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8041cc6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8041cca:	009b      	lsls	r3, r3, #2
 8041ccc:	461a      	mov	r2, r3
 8041cce:	2300      	movs	r3, #0
 8041cd0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8041cd2:	f7fe fd57 	bl	8040784 <HAL_GetTick>
 8041cd6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8041cda:	e009      	b.n	8041cf0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041cdc:	f7fe fd52 	bl	8040784 <HAL_GetTick>
 8041ce0:	4602      	mov	r2, r0
 8041ce2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8041ce6:	1ad3      	subs	r3, r2, r3
 8041ce8:	2b02      	cmp	r3, #2
 8041cea:	d901      	bls.n	8041cf0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8041cec:	2303      	movs	r3, #3
 8041cee:	e0ac      	b.n	8041e4a <HAL_RCC_OscConfig+0x109a>
 8041cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041cf4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8041cf8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d02:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8041d06:	681b      	ldr	r3, [r3, #0]
 8041d08:	fa93 f2a3 	rbit	r2, r3
 8041d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d10:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8041d14:	601a      	str	r2, [r3, #0]
  return result;
 8041d16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d1a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8041d1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8041d20:	fab3 f383 	clz	r3, r3
 8041d24:	b2db      	uxtb	r3, r3
 8041d26:	095b      	lsrs	r3, r3, #5
 8041d28:	b2db      	uxtb	r3, r3
 8041d2a:	f043 0301 	orr.w	r3, r3, #1
 8041d2e:	b2db      	uxtb	r3, r3
 8041d30:	2b01      	cmp	r3, #1
 8041d32:	d102      	bne.n	8041d3a <HAL_RCC_OscConfig+0xf8a>
 8041d34:	4b47      	ldr	r3, [pc, #284]	@ (8041e54 <HAL_RCC_OscConfig+0x10a4>)
 8041d36:	681b      	ldr	r3, [r3, #0]
 8041d38:	e027      	b.n	8041d8a <HAL_RCC_OscConfig+0xfda>
 8041d3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d3e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8041d42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041d48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d4c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8041d50:	681b      	ldr	r3, [r3, #0]
 8041d52:	fa93 f2a3 	rbit	r2, r3
 8041d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d5a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8041d5e:	601a      	str	r2, [r3, #0]
 8041d60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d64:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8041d68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041d6c:	601a      	str	r2, [r3, #0]
 8041d6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d72:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8041d76:	681b      	ldr	r3, [r3, #0]
 8041d78:	fa93 f2a3 	rbit	r2, r3
 8041d7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d80:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8041d84:	601a      	str	r2, [r3, #0]
 8041d86:	4b33      	ldr	r3, [pc, #204]	@ (8041e54 <HAL_RCC_OscConfig+0x10a4>)
 8041d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041d8a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041d8e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8041d92:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8041d96:	6011      	str	r1, [r2, #0]
 8041d98:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041d9c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8041da0:	6812      	ldr	r2, [r2, #0]
 8041da2:	fa92 f1a2 	rbit	r1, r2
 8041da6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041daa:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8041dae:	6011      	str	r1, [r2, #0]
  return result;
 8041db0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041db4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8041db8:	6812      	ldr	r2, [r2, #0]
 8041dba:	fab2 f282 	clz	r2, r2
 8041dbe:	b2d2      	uxtb	r2, r2
 8041dc0:	f042 0220 	orr.w	r2, r2, #32
 8041dc4:	b2d2      	uxtb	r2, r2
 8041dc6:	f002 021f 	and.w	r2, r2, #31
 8041dca:	2101      	movs	r1, #1
 8041dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8041dd0:	4013      	ands	r3, r2
 8041dd2:	2b00      	cmp	r3, #0
 8041dd4:	d182      	bne.n	8041cdc <HAL_RCC_OscConfig+0xf2c>
 8041dd6:	e037      	b.n	8041e48 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8041dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041ddc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041de0:	681b      	ldr	r3, [r3, #0]
 8041de2:	699b      	ldr	r3, [r3, #24]
 8041de4:	2b01      	cmp	r3, #1
 8041de6:	d101      	bne.n	8041dec <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8041de8:	2301      	movs	r3, #1
 8041dea:	e02e      	b.n	8041e4a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8041dec:	4b19      	ldr	r3, [pc, #100]	@ (8041e54 <HAL_RCC_OscConfig+0x10a4>)
 8041dee:	685b      	ldr	r3, [r3, #4]
 8041df0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8041df4:	4b17      	ldr	r3, [pc, #92]	@ (8041e54 <HAL_RCC_OscConfig+0x10a4>)
 8041df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041df8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8041dfc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8041e00:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8041e04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041e08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041e0c:	681b      	ldr	r3, [r3, #0]
 8041e0e:	69db      	ldr	r3, [r3, #28]
 8041e10:	429a      	cmp	r2, r3
 8041e12:	d117      	bne.n	8041e44 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8041e14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8041e18:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8041e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041e20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041e24:	681b      	ldr	r3, [r3, #0]
 8041e26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8041e28:	429a      	cmp	r2, r3
 8041e2a:	d10b      	bne.n	8041e44 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8041e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8041e30:	f003 020f 	and.w	r2, r3, #15
 8041e34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041e38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041e3c:	681b      	ldr	r3, [r3, #0]
 8041e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8041e40:	429a      	cmp	r2, r3
 8041e42:	d001      	beq.n	8041e48 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8041e44:	2301      	movs	r3, #1
 8041e46:	e000      	b.n	8041e4a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8041e48:	2300      	movs	r3, #0
}
 8041e4a:	4618      	mov	r0, r3
 8041e4c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8041e50:	46bd      	mov	sp, r7
 8041e52:	bd80      	pop	{r7, pc}
 8041e54:	40021000 	.word	0x40021000

08041e58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041e58:	b580      	push	{r7, lr}
 8041e5a:	b09e      	sub	sp, #120	@ 0x78
 8041e5c:	af00      	add	r7, sp, #0
 8041e5e:	6078      	str	r0, [r7, #4]
 8041e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8041e62:	2300      	movs	r3, #0
 8041e64:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8041e66:	687b      	ldr	r3, [r7, #4]
 8041e68:	2b00      	cmp	r3, #0
 8041e6a:	d101      	bne.n	8041e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8041e6c:	2301      	movs	r3, #1
 8041e6e:	e162      	b.n	8042136 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8041e70:	4b90      	ldr	r3, [pc, #576]	@ (80420b4 <HAL_RCC_ClockConfig+0x25c>)
 8041e72:	681b      	ldr	r3, [r3, #0]
 8041e74:	f003 0307 	and.w	r3, r3, #7
 8041e78:	683a      	ldr	r2, [r7, #0]
 8041e7a:	429a      	cmp	r2, r3
 8041e7c:	d910      	bls.n	8041ea0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80420b4 <HAL_RCC_ClockConfig+0x25c>)
 8041e80:	681b      	ldr	r3, [r3, #0]
 8041e82:	f023 0207 	bic.w	r2, r3, #7
 8041e86:	498b      	ldr	r1, [pc, #556]	@ (80420b4 <HAL_RCC_ClockConfig+0x25c>)
 8041e88:	683b      	ldr	r3, [r7, #0]
 8041e8a:	4313      	orrs	r3, r2
 8041e8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041e8e:	4b89      	ldr	r3, [pc, #548]	@ (80420b4 <HAL_RCC_ClockConfig+0x25c>)
 8041e90:	681b      	ldr	r3, [r3, #0]
 8041e92:	f003 0307 	and.w	r3, r3, #7
 8041e96:	683a      	ldr	r2, [r7, #0]
 8041e98:	429a      	cmp	r2, r3
 8041e9a:	d001      	beq.n	8041ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8041e9c:	2301      	movs	r3, #1
 8041e9e:	e14a      	b.n	8042136 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041ea0:	687b      	ldr	r3, [r7, #4]
 8041ea2:	681b      	ldr	r3, [r3, #0]
 8041ea4:	f003 0302 	and.w	r3, r3, #2
 8041ea8:	2b00      	cmp	r3, #0
 8041eaa:	d008      	beq.n	8041ebe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041eac:	4b82      	ldr	r3, [pc, #520]	@ (80420b8 <HAL_RCC_ClockConfig+0x260>)
 8041eae:	685b      	ldr	r3, [r3, #4]
 8041eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8041eb4:	687b      	ldr	r3, [r7, #4]
 8041eb6:	689b      	ldr	r3, [r3, #8]
 8041eb8:	497f      	ldr	r1, [pc, #508]	@ (80420b8 <HAL_RCC_ClockConfig+0x260>)
 8041eba:	4313      	orrs	r3, r2
 8041ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041ebe:	687b      	ldr	r3, [r7, #4]
 8041ec0:	681b      	ldr	r3, [r3, #0]
 8041ec2:	f003 0301 	and.w	r3, r3, #1
 8041ec6:	2b00      	cmp	r3, #0
 8041ec8:	f000 80dc 	beq.w	8042084 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041ecc:	687b      	ldr	r3, [r7, #4]
 8041ece:	685b      	ldr	r3, [r3, #4]
 8041ed0:	2b01      	cmp	r3, #1
 8041ed2:	d13c      	bne.n	8041f4e <HAL_RCC_ClockConfig+0xf6>
 8041ed4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8041ed8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041eda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8041edc:	fa93 f3a3 	rbit	r3, r3
 8041ee0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8041ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041ee4:	fab3 f383 	clz	r3, r3
 8041ee8:	b2db      	uxtb	r3, r3
 8041eea:	095b      	lsrs	r3, r3, #5
 8041eec:	b2db      	uxtb	r3, r3
 8041eee:	f043 0301 	orr.w	r3, r3, #1
 8041ef2:	b2db      	uxtb	r3, r3
 8041ef4:	2b01      	cmp	r3, #1
 8041ef6:	d102      	bne.n	8041efe <HAL_RCC_ClockConfig+0xa6>
 8041ef8:	4b6f      	ldr	r3, [pc, #444]	@ (80420b8 <HAL_RCC_ClockConfig+0x260>)
 8041efa:	681b      	ldr	r3, [r3, #0]
 8041efc:	e00f      	b.n	8041f1e <HAL_RCC_ClockConfig+0xc6>
 8041efe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8041f02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041f04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8041f06:	fa93 f3a3 	rbit	r3, r3
 8041f0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8041f0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8041f10:	663b      	str	r3, [r7, #96]	@ 0x60
 8041f12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8041f14:	fa93 f3a3 	rbit	r3, r3
 8041f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8041f1a:	4b67      	ldr	r3, [pc, #412]	@ (80420b8 <HAL_RCC_ClockConfig+0x260>)
 8041f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041f1e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8041f22:	65ba      	str	r2, [r7, #88]	@ 0x58
 8041f24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8041f26:	fa92 f2a2 	rbit	r2, r2
 8041f2a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8041f2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8041f2e:	fab2 f282 	clz	r2, r2
 8041f32:	b2d2      	uxtb	r2, r2
 8041f34:	f042 0220 	orr.w	r2, r2, #32
 8041f38:	b2d2      	uxtb	r2, r2
 8041f3a:	f002 021f 	and.w	r2, r2, #31
 8041f3e:	2101      	movs	r1, #1
 8041f40:	fa01 f202 	lsl.w	r2, r1, r2
 8041f44:	4013      	ands	r3, r2
 8041f46:	2b00      	cmp	r3, #0
 8041f48:	d17b      	bne.n	8042042 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8041f4a:	2301      	movs	r3, #1
 8041f4c:	e0f3      	b.n	8042136 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8041f4e:	687b      	ldr	r3, [r7, #4]
 8041f50:	685b      	ldr	r3, [r3, #4]
 8041f52:	2b02      	cmp	r3, #2
 8041f54:	d13c      	bne.n	8041fd0 <HAL_RCC_ClockConfig+0x178>
 8041f56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8041f5a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8041f5e:	fa93 f3a3 	rbit	r3, r3
 8041f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8041f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041f66:	fab3 f383 	clz	r3, r3
 8041f6a:	b2db      	uxtb	r3, r3
 8041f6c:	095b      	lsrs	r3, r3, #5
 8041f6e:	b2db      	uxtb	r3, r3
 8041f70:	f043 0301 	orr.w	r3, r3, #1
 8041f74:	b2db      	uxtb	r3, r3
 8041f76:	2b01      	cmp	r3, #1
 8041f78:	d102      	bne.n	8041f80 <HAL_RCC_ClockConfig+0x128>
 8041f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80420b8 <HAL_RCC_ClockConfig+0x260>)
 8041f7c:	681b      	ldr	r3, [r3, #0]
 8041f7e:	e00f      	b.n	8041fa0 <HAL_RCC_ClockConfig+0x148>
 8041f80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8041f84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8041f88:	fa93 f3a3 	rbit	r3, r3
 8041f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8041f8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8041f92:	643b      	str	r3, [r7, #64]	@ 0x40
 8041f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8041f96:	fa93 f3a3 	rbit	r3, r3
 8041f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8041f9c:	4b46      	ldr	r3, [pc, #280]	@ (80420b8 <HAL_RCC_ClockConfig+0x260>)
 8041f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041fa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041fa4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8041fa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8041fa8:	fa92 f2a2 	rbit	r2, r2
 8041fac:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8041fae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8041fb0:	fab2 f282 	clz	r2, r2
 8041fb4:	b2d2      	uxtb	r2, r2
 8041fb6:	f042 0220 	orr.w	r2, r2, #32
 8041fba:	b2d2      	uxtb	r2, r2
 8041fbc:	f002 021f 	and.w	r2, r2, #31
 8041fc0:	2101      	movs	r1, #1
 8041fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8041fc6:	4013      	ands	r3, r2
 8041fc8:	2b00      	cmp	r3, #0
 8041fca:	d13a      	bne.n	8042042 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8041fcc:	2301      	movs	r3, #1
 8041fce:	e0b2      	b.n	8042136 <HAL_RCC_ClockConfig+0x2de>
 8041fd0:	2302      	movs	r3, #2
 8041fd2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8041fd6:	fa93 f3a3 	rbit	r3, r3
 8041fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8041fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041fde:	fab3 f383 	clz	r3, r3
 8041fe2:	b2db      	uxtb	r3, r3
 8041fe4:	095b      	lsrs	r3, r3, #5
 8041fe6:	b2db      	uxtb	r3, r3
 8041fe8:	f043 0301 	orr.w	r3, r3, #1
 8041fec:	b2db      	uxtb	r3, r3
 8041fee:	2b01      	cmp	r3, #1
 8041ff0:	d102      	bne.n	8041ff8 <HAL_RCC_ClockConfig+0x1a0>
 8041ff2:	4b31      	ldr	r3, [pc, #196]	@ (80420b8 <HAL_RCC_ClockConfig+0x260>)
 8041ff4:	681b      	ldr	r3, [r3, #0]
 8041ff6:	e00d      	b.n	8042014 <HAL_RCC_ClockConfig+0x1bc>
 8041ff8:	2302      	movs	r3, #2
 8041ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041ffe:	fa93 f3a3 	rbit	r3, r3
 8042002:	627b      	str	r3, [r7, #36]	@ 0x24
 8042004:	2302      	movs	r3, #2
 8042006:	623b      	str	r3, [r7, #32]
 8042008:	6a3b      	ldr	r3, [r7, #32]
 804200a:	fa93 f3a3 	rbit	r3, r3
 804200e:	61fb      	str	r3, [r7, #28]
 8042010:	4b29      	ldr	r3, [pc, #164]	@ (80420b8 <HAL_RCC_ClockConfig+0x260>)
 8042012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042014:	2202      	movs	r2, #2
 8042016:	61ba      	str	r2, [r7, #24]
 8042018:	69ba      	ldr	r2, [r7, #24]
 804201a:	fa92 f2a2 	rbit	r2, r2
 804201e:	617a      	str	r2, [r7, #20]
  return result;
 8042020:	697a      	ldr	r2, [r7, #20]
 8042022:	fab2 f282 	clz	r2, r2
 8042026:	b2d2      	uxtb	r2, r2
 8042028:	f042 0220 	orr.w	r2, r2, #32
 804202c:	b2d2      	uxtb	r2, r2
 804202e:	f002 021f 	and.w	r2, r2, #31
 8042032:	2101      	movs	r1, #1
 8042034:	fa01 f202 	lsl.w	r2, r1, r2
 8042038:	4013      	ands	r3, r2
 804203a:	2b00      	cmp	r3, #0
 804203c:	d101      	bne.n	8042042 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 804203e:	2301      	movs	r3, #1
 8042040:	e079      	b.n	8042136 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8042042:	4b1d      	ldr	r3, [pc, #116]	@ (80420b8 <HAL_RCC_ClockConfig+0x260>)
 8042044:	685b      	ldr	r3, [r3, #4]
 8042046:	f023 0203 	bic.w	r2, r3, #3
 804204a:	687b      	ldr	r3, [r7, #4]
 804204c:	685b      	ldr	r3, [r3, #4]
 804204e:	491a      	ldr	r1, [pc, #104]	@ (80420b8 <HAL_RCC_ClockConfig+0x260>)
 8042050:	4313      	orrs	r3, r2
 8042052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8042054:	f7fe fb96 	bl	8040784 <HAL_GetTick>
 8042058:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804205a:	e00a      	b.n	8042072 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804205c:	f7fe fb92 	bl	8040784 <HAL_GetTick>
 8042060:	4602      	mov	r2, r0
 8042062:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8042064:	1ad3      	subs	r3, r2, r3
 8042066:	f241 3288 	movw	r2, #5000	@ 0x1388
 804206a:	4293      	cmp	r3, r2
 804206c:	d901      	bls.n	8042072 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 804206e:	2303      	movs	r3, #3
 8042070:	e061      	b.n	8042136 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8042072:	4b11      	ldr	r3, [pc, #68]	@ (80420b8 <HAL_RCC_ClockConfig+0x260>)
 8042074:	685b      	ldr	r3, [r3, #4]
 8042076:	f003 020c 	and.w	r2, r3, #12
 804207a:	687b      	ldr	r3, [r7, #4]
 804207c:	685b      	ldr	r3, [r3, #4]
 804207e:	009b      	lsls	r3, r3, #2
 8042080:	429a      	cmp	r2, r3
 8042082:	d1eb      	bne.n	804205c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8042084:	4b0b      	ldr	r3, [pc, #44]	@ (80420b4 <HAL_RCC_ClockConfig+0x25c>)
 8042086:	681b      	ldr	r3, [r3, #0]
 8042088:	f003 0307 	and.w	r3, r3, #7
 804208c:	683a      	ldr	r2, [r7, #0]
 804208e:	429a      	cmp	r2, r3
 8042090:	d214      	bcs.n	80420bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8042092:	4b08      	ldr	r3, [pc, #32]	@ (80420b4 <HAL_RCC_ClockConfig+0x25c>)
 8042094:	681b      	ldr	r3, [r3, #0]
 8042096:	f023 0207 	bic.w	r2, r3, #7
 804209a:	4906      	ldr	r1, [pc, #24]	@ (80420b4 <HAL_RCC_ClockConfig+0x25c>)
 804209c:	683b      	ldr	r3, [r7, #0]
 804209e:	4313      	orrs	r3, r2
 80420a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80420a2:	4b04      	ldr	r3, [pc, #16]	@ (80420b4 <HAL_RCC_ClockConfig+0x25c>)
 80420a4:	681b      	ldr	r3, [r3, #0]
 80420a6:	f003 0307 	and.w	r3, r3, #7
 80420aa:	683a      	ldr	r2, [r7, #0]
 80420ac:	429a      	cmp	r2, r3
 80420ae:	d005      	beq.n	80420bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80420b0:	2301      	movs	r3, #1
 80420b2:	e040      	b.n	8042136 <HAL_RCC_ClockConfig+0x2de>
 80420b4:	40022000 	.word	0x40022000
 80420b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80420bc:	687b      	ldr	r3, [r7, #4]
 80420be:	681b      	ldr	r3, [r3, #0]
 80420c0:	f003 0304 	and.w	r3, r3, #4
 80420c4:	2b00      	cmp	r3, #0
 80420c6:	d008      	beq.n	80420da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80420c8:	4b1d      	ldr	r3, [pc, #116]	@ (8042140 <HAL_RCC_ClockConfig+0x2e8>)
 80420ca:	685b      	ldr	r3, [r3, #4]
 80420cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80420d0:	687b      	ldr	r3, [r7, #4]
 80420d2:	68db      	ldr	r3, [r3, #12]
 80420d4:	491a      	ldr	r1, [pc, #104]	@ (8042140 <HAL_RCC_ClockConfig+0x2e8>)
 80420d6:	4313      	orrs	r3, r2
 80420d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80420da:	687b      	ldr	r3, [r7, #4]
 80420dc:	681b      	ldr	r3, [r3, #0]
 80420de:	f003 0308 	and.w	r3, r3, #8
 80420e2:	2b00      	cmp	r3, #0
 80420e4:	d009      	beq.n	80420fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80420e6:	4b16      	ldr	r3, [pc, #88]	@ (8042140 <HAL_RCC_ClockConfig+0x2e8>)
 80420e8:	685b      	ldr	r3, [r3, #4]
 80420ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80420ee:	687b      	ldr	r3, [r7, #4]
 80420f0:	691b      	ldr	r3, [r3, #16]
 80420f2:	00db      	lsls	r3, r3, #3
 80420f4:	4912      	ldr	r1, [pc, #72]	@ (8042140 <HAL_RCC_ClockConfig+0x2e8>)
 80420f6:	4313      	orrs	r3, r2
 80420f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80420fa:	f000 f829 	bl	8042150 <HAL_RCC_GetSysClockFreq>
 80420fe:	4601      	mov	r1, r0
 8042100:	4b0f      	ldr	r3, [pc, #60]	@ (8042140 <HAL_RCC_ClockConfig+0x2e8>)
 8042102:	685b      	ldr	r3, [r3, #4]
 8042104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8042108:	22f0      	movs	r2, #240	@ 0xf0
 804210a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804210c:	693a      	ldr	r2, [r7, #16]
 804210e:	fa92 f2a2 	rbit	r2, r2
 8042112:	60fa      	str	r2, [r7, #12]
  return result;
 8042114:	68fa      	ldr	r2, [r7, #12]
 8042116:	fab2 f282 	clz	r2, r2
 804211a:	b2d2      	uxtb	r2, r2
 804211c:	40d3      	lsrs	r3, r2
 804211e:	4a09      	ldr	r2, [pc, #36]	@ (8042144 <HAL_RCC_ClockConfig+0x2ec>)
 8042120:	5cd3      	ldrb	r3, [r2, r3]
 8042122:	fa21 f303 	lsr.w	r3, r1, r3
 8042126:	4a08      	ldr	r2, [pc, #32]	@ (8042148 <HAL_RCC_ClockConfig+0x2f0>)
 8042128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 804212a:	4b08      	ldr	r3, [pc, #32]	@ (804214c <HAL_RCC_ClockConfig+0x2f4>)
 804212c:	681b      	ldr	r3, [r3, #0]
 804212e:	4618      	mov	r0, r3
 8042130:	f7fe fae4 	bl	80406fc <HAL_InitTick>
  
  return HAL_OK;
 8042134:	2300      	movs	r3, #0
}
 8042136:	4618      	mov	r0, r3
 8042138:	3778      	adds	r7, #120	@ 0x78
 804213a:	46bd      	mov	sp, r7
 804213c:	bd80      	pop	{r7, pc}
 804213e:	bf00      	nop
 8042140:	40021000 	.word	0x40021000
 8042144:	08042fc0 	.word	0x08042fc0
 8042148:	20000030 	.word	0x20000030
 804214c:	20000034 	.word	0x20000034

08042150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8042150:	b480      	push	{r7}
 8042152:	b087      	sub	sp, #28
 8042154:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8042156:	2300      	movs	r3, #0
 8042158:	60fb      	str	r3, [r7, #12]
 804215a:	2300      	movs	r3, #0
 804215c:	60bb      	str	r3, [r7, #8]
 804215e:	2300      	movs	r3, #0
 8042160:	617b      	str	r3, [r7, #20]
 8042162:	2300      	movs	r3, #0
 8042164:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8042166:	2300      	movs	r3, #0
 8042168:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 804216a:	4b1f      	ldr	r3, [pc, #124]	@ (80421e8 <HAL_RCC_GetSysClockFreq+0x98>)
 804216c:	685b      	ldr	r3, [r3, #4]
 804216e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8042170:	68fb      	ldr	r3, [r7, #12]
 8042172:	f003 030c 	and.w	r3, r3, #12
 8042176:	2b04      	cmp	r3, #4
 8042178:	d002      	beq.n	8042180 <HAL_RCC_GetSysClockFreq+0x30>
 804217a:	2b08      	cmp	r3, #8
 804217c:	d003      	beq.n	8042186 <HAL_RCC_GetSysClockFreq+0x36>
 804217e:	e029      	b.n	80421d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8042180:	4b1a      	ldr	r3, [pc, #104]	@ (80421ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8042182:	613b      	str	r3, [r7, #16]
      break;
 8042184:	e029      	b.n	80421da <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8042186:	68fb      	ldr	r3, [r7, #12]
 8042188:	0c9b      	lsrs	r3, r3, #18
 804218a:	f003 030f 	and.w	r3, r3, #15
 804218e:	4a18      	ldr	r2, [pc, #96]	@ (80421f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8042190:	5cd3      	ldrb	r3, [r2, r3]
 8042192:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8042194:	4b14      	ldr	r3, [pc, #80]	@ (80421e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8042196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8042198:	f003 030f 	and.w	r3, r3, #15
 804219c:	4a15      	ldr	r2, [pc, #84]	@ (80421f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 804219e:	5cd3      	ldrb	r3, [r2, r3]
 80421a0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80421a2:	68fb      	ldr	r3, [r7, #12]
 80421a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80421a8:	2b00      	cmp	r3, #0
 80421aa:	d008      	beq.n	80421be <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80421ac:	4a0f      	ldr	r2, [pc, #60]	@ (80421ec <HAL_RCC_GetSysClockFreq+0x9c>)
 80421ae:	68bb      	ldr	r3, [r7, #8]
 80421b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80421b4:	687b      	ldr	r3, [r7, #4]
 80421b6:	fb02 f303 	mul.w	r3, r2, r3
 80421ba:	617b      	str	r3, [r7, #20]
 80421bc:	e007      	b.n	80421ce <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80421be:	4a0b      	ldr	r2, [pc, #44]	@ (80421ec <HAL_RCC_GetSysClockFreq+0x9c>)
 80421c0:	68bb      	ldr	r3, [r7, #8]
 80421c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80421c6:	687b      	ldr	r3, [r7, #4]
 80421c8:	fb02 f303 	mul.w	r3, r2, r3
 80421cc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80421ce:	697b      	ldr	r3, [r7, #20]
 80421d0:	613b      	str	r3, [r7, #16]
      break;
 80421d2:	e002      	b.n	80421da <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80421d4:	4b05      	ldr	r3, [pc, #20]	@ (80421ec <HAL_RCC_GetSysClockFreq+0x9c>)
 80421d6:	613b      	str	r3, [r7, #16]
      break;
 80421d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80421da:	693b      	ldr	r3, [r7, #16]
}
 80421dc:	4618      	mov	r0, r3
 80421de:	371c      	adds	r7, #28
 80421e0:	46bd      	mov	sp, r7
 80421e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421e6:	4770      	bx	lr
 80421e8:	40021000 	.word	0x40021000
 80421ec:	007a1200 	.word	0x007a1200
 80421f0:	08042fd8 	.word	0x08042fd8
 80421f4:	08042fe8 	.word	0x08042fe8

080421f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80421f8:	b480      	push	{r7}
 80421fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80421fc:	4b03      	ldr	r3, [pc, #12]	@ (804220c <HAL_RCC_GetHCLKFreq+0x14>)
 80421fe:	681b      	ldr	r3, [r3, #0]
}
 8042200:	4618      	mov	r0, r3
 8042202:	46bd      	mov	sp, r7
 8042204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042208:	4770      	bx	lr
 804220a:	bf00      	nop
 804220c:	20000030 	.word	0x20000030

08042210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8042210:	b580      	push	{r7, lr}
 8042212:	b082      	sub	sp, #8
 8042214:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8042216:	f7ff ffef 	bl	80421f8 <HAL_RCC_GetHCLKFreq>
 804221a:	4601      	mov	r1, r0
 804221c:	4b0b      	ldr	r3, [pc, #44]	@ (804224c <HAL_RCC_GetPCLK1Freq+0x3c>)
 804221e:	685b      	ldr	r3, [r3, #4]
 8042220:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8042224:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8042228:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804222a:	687a      	ldr	r2, [r7, #4]
 804222c:	fa92 f2a2 	rbit	r2, r2
 8042230:	603a      	str	r2, [r7, #0]
  return result;
 8042232:	683a      	ldr	r2, [r7, #0]
 8042234:	fab2 f282 	clz	r2, r2
 8042238:	b2d2      	uxtb	r2, r2
 804223a:	40d3      	lsrs	r3, r2
 804223c:	4a04      	ldr	r2, [pc, #16]	@ (8042250 <HAL_RCC_GetPCLK1Freq+0x40>)
 804223e:	5cd3      	ldrb	r3, [r2, r3]
 8042240:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8042244:	4618      	mov	r0, r3
 8042246:	3708      	adds	r7, #8
 8042248:	46bd      	mov	sp, r7
 804224a:	bd80      	pop	{r7, pc}
 804224c:	40021000 	.word	0x40021000
 8042250:	08042fd0 	.word	0x08042fd0

08042254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8042254:	b580      	push	{r7, lr}
 8042256:	b082      	sub	sp, #8
 8042258:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 804225a:	f7ff ffcd 	bl	80421f8 <HAL_RCC_GetHCLKFreq>
 804225e:	4601      	mov	r1, r0
 8042260:	4b0b      	ldr	r3, [pc, #44]	@ (8042290 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8042262:	685b      	ldr	r3, [r3, #4]
 8042264:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8042268:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 804226c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804226e:	687a      	ldr	r2, [r7, #4]
 8042270:	fa92 f2a2 	rbit	r2, r2
 8042274:	603a      	str	r2, [r7, #0]
  return result;
 8042276:	683a      	ldr	r2, [r7, #0]
 8042278:	fab2 f282 	clz	r2, r2
 804227c:	b2d2      	uxtb	r2, r2
 804227e:	40d3      	lsrs	r3, r2
 8042280:	4a04      	ldr	r2, [pc, #16]	@ (8042294 <HAL_RCC_GetPCLK2Freq+0x40>)
 8042282:	5cd3      	ldrb	r3, [r2, r3]
 8042284:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8042288:	4618      	mov	r0, r3
 804228a:	3708      	adds	r7, #8
 804228c:	46bd      	mov	sp, r7
 804228e:	bd80      	pop	{r7, pc}
 8042290:	40021000 	.word	0x40021000
 8042294:	08042fd0 	.word	0x08042fd0

08042298 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8042298:	b580      	push	{r7, lr}
 804229a:	b092      	sub	sp, #72	@ 0x48
 804229c:	af00      	add	r7, sp, #0
 804229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80422a0:	2300      	movs	r3, #0
 80422a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80422a4:	2300      	movs	r3, #0
 80422a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80422a8:	2300      	movs	r3, #0
 80422aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80422ae:	687b      	ldr	r3, [r7, #4]
 80422b0:	681b      	ldr	r3, [r3, #0]
 80422b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80422b6:	2b00      	cmp	r3, #0
 80422b8:	f000 80d4 	beq.w	8042464 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80422bc:	4b4e      	ldr	r3, [pc, #312]	@ (80423f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80422be:	69db      	ldr	r3, [r3, #28]
 80422c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80422c4:	2b00      	cmp	r3, #0
 80422c6:	d10e      	bne.n	80422e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80422c8:	4b4b      	ldr	r3, [pc, #300]	@ (80423f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80422ca:	69db      	ldr	r3, [r3, #28]
 80422cc:	4a4a      	ldr	r2, [pc, #296]	@ (80423f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80422ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80422d2:	61d3      	str	r3, [r2, #28]
 80422d4:	4b48      	ldr	r3, [pc, #288]	@ (80423f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80422d6:	69db      	ldr	r3, [r3, #28]
 80422d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80422dc:	60bb      	str	r3, [r7, #8]
 80422de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80422e0:	2301      	movs	r3, #1
 80422e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80422e6:	4b45      	ldr	r3, [pc, #276]	@ (80423fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80422e8:	681b      	ldr	r3, [r3, #0]
 80422ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80422ee:	2b00      	cmp	r3, #0
 80422f0:	d118      	bne.n	8042324 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80422f2:	4b42      	ldr	r3, [pc, #264]	@ (80423fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80422f4:	681b      	ldr	r3, [r3, #0]
 80422f6:	4a41      	ldr	r2, [pc, #260]	@ (80423fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80422f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80422fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80422fe:	f7fe fa41 	bl	8040784 <HAL_GetTick>
 8042302:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8042304:	e008      	b.n	8042318 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8042306:	f7fe fa3d 	bl	8040784 <HAL_GetTick>
 804230a:	4602      	mov	r2, r0
 804230c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 804230e:	1ad3      	subs	r3, r2, r3
 8042310:	2b64      	cmp	r3, #100	@ 0x64
 8042312:	d901      	bls.n	8042318 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8042314:	2303      	movs	r3, #3
 8042316:	e1d6      	b.n	80426c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8042318:	4b38      	ldr	r3, [pc, #224]	@ (80423fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 804231a:	681b      	ldr	r3, [r3, #0]
 804231c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8042320:	2b00      	cmp	r3, #0
 8042322:	d0f0      	beq.n	8042306 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8042324:	4b34      	ldr	r3, [pc, #208]	@ (80423f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8042326:	6a1b      	ldr	r3, [r3, #32]
 8042328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 804232c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 804232e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8042330:	2b00      	cmp	r3, #0
 8042332:	f000 8084 	beq.w	804243e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8042336:	687b      	ldr	r3, [r7, #4]
 8042338:	685b      	ldr	r3, [r3, #4]
 804233a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 804233e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8042340:	429a      	cmp	r2, r3
 8042342:	d07c      	beq.n	804243e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8042344:	4b2c      	ldr	r3, [pc, #176]	@ (80423f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8042346:	6a1b      	ldr	r3, [r3, #32]
 8042348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 804234c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 804234e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8042352:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8042354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8042356:	fa93 f3a3 	rbit	r3, r3
 804235a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 804235c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 804235e:	fab3 f383 	clz	r3, r3
 8042362:	b2db      	uxtb	r3, r3
 8042364:	461a      	mov	r2, r3
 8042366:	4b26      	ldr	r3, [pc, #152]	@ (8042400 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8042368:	4413      	add	r3, r2
 804236a:	009b      	lsls	r3, r3, #2
 804236c:	461a      	mov	r2, r3
 804236e:	2301      	movs	r3, #1
 8042370:	6013      	str	r3, [r2, #0]
 8042372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8042376:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8042378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804237a:	fa93 f3a3 	rbit	r3, r3
 804237e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8042380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8042382:	fab3 f383 	clz	r3, r3
 8042386:	b2db      	uxtb	r3, r3
 8042388:	461a      	mov	r2, r3
 804238a:	4b1d      	ldr	r3, [pc, #116]	@ (8042400 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 804238c:	4413      	add	r3, r2
 804238e:	009b      	lsls	r3, r3, #2
 8042390:	461a      	mov	r2, r3
 8042392:	2300      	movs	r3, #0
 8042394:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8042396:	4a18      	ldr	r2, [pc, #96]	@ (80423f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8042398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804239a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 804239c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804239e:	f003 0301 	and.w	r3, r3, #1
 80423a2:	2b00      	cmp	r3, #0
 80423a4:	d04b      	beq.n	804243e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80423a6:	f7fe f9ed 	bl	8040784 <HAL_GetTick>
 80423aa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80423ac:	e00a      	b.n	80423c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80423ae:	f7fe f9e9 	bl	8040784 <HAL_GetTick>
 80423b2:	4602      	mov	r2, r0
 80423b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80423b6:	1ad3      	subs	r3, r2, r3
 80423b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80423bc:	4293      	cmp	r3, r2
 80423be:	d901      	bls.n	80423c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80423c0:	2303      	movs	r3, #3
 80423c2:	e180      	b.n	80426c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80423c4:	2302      	movs	r3, #2
 80423c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80423c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80423ca:	fa93 f3a3 	rbit	r3, r3
 80423ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80423d0:	2302      	movs	r3, #2
 80423d2:	623b      	str	r3, [r7, #32]
 80423d4:	6a3b      	ldr	r3, [r7, #32]
 80423d6:	fa93 f3a3 	rbit	r3, r3
 80423da:	61fb      	str	r3, [r7, #28]
  return result;
 80423dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80423de:	fab3 f383 	clz	r3, r3
 80423e2:	b2db      	uxtb	r3, r3
 80423e4:	095b      	lsrs	r3, r3, #5
 80423e6:	b2db      	uxtb	r3, r3
 80423e8:	f043 0302 	orr.w	r3, r3, #2
 80423ec:	b2db      	uxtb	r3, r3
 80423ee:	2b02      	cmp	r3, #2
 80423f0:	d108      	bne.n	8042404 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80423f2:	4b01      	ldr	r3, [pc, #4]	@ (80423f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80423f4:	6a1b      	ldr	r3, [r3, #32]
 80423f6:	e00d      	b.n	8042414 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80423f8:	40021000 	.word	0x40021000
 80423fc:	40007000 	.word	0x40007000
 8042400:	10908100 	.word	0x10908100
 8042404:	2302      	movs	r3, #2
 8042406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8042408:	69bb      	ldr	r3, [r7, #24]
 804240a:	fa93 f3a3 	rbit	r3, r3
 804240e:	617b      	str	r3, [r7, #20]
 8042410:	4b9a      	ldr	r3, [pc, #616]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042414:	2202      	movs	r2, #2
 8042416:	613a      	str	r2, [r7, #16]
 8042418:	693a      	ldr	r2, [r7, #16]
 804241a:	fa92 f2a2 	rbit	r2, r2
 804241e:	60fa      	str	r2, [r7, #12]
  return result;
 8042420:	68fa      	ldr	r2, [r7, #12]
 8042422:	fab2 f282 	clz	r2, r2
 8042426:	b2d2      	uxtb	r2, r2
 8042428:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 804242c:	b2d2      	uxtb	r2, r2
 804242e:	f002 021f 	and.w	r2, r2, #31
 8042432:	2101      	movs	r1, #1
 8042434:	fa01 f202 	lsl.w	r2, r1, r2
 8042438:	4013      	ands	r3, r2
 804243a:	2b00      	cmp	r3, #0
 804243c:	d0b7      	beq.n	80423ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 804243e:	4b8f      	ldr	r3, [pc, #572]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042440:	6a1b      	ldr	r3, [r3, #32]
 8042442:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8042446:	687b      	ldr	r3, [r7, #4]
 8042448:	685b      	ldr	r3, [r3, #4]
 804244a:	498c      	ldr	r1, [pc, #560]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804244c:	4313      	orrs	r3, r2
 804244e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8042450:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8042454:	2b01      	cmp	r3, #1
 8042456:	d105      	bne.n	8042464 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8042458:	4b88      	ldr	r3, [pc, #544]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804245a:	69db      	ldr	r3, [r3, #28]
 804245c:	4a87      	ldr	r2, [pc, #540]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804245e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8042462:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8042464:	687b      	ldr	r3, [r7, #4]
 8042466:	681b      	ldr	r3, [r3, #0]
 8042468:	f003 0301 	and.w	r3, r3, #1
 804246c:	2b00      	cmp	r3, #0
 804246e:	d008      	beq.n	8042482 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8042470:	4b82      	ldr	r3, [pc, #520]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042474:	f023 0203 	bic.w	r2, r3, #3
 8042478:	687b      	ldr	r3, [r7, #4]
 804247a:	689b      	ldr	r3, [r3, #8]
 804247c:	497f      	ldr	r1, [pc, #508]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804247e:	4313      	orrs	r3, r2
 8042480:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8042482:	687b      	ldr	r3, [r7, #4]
 8042484:	681b      	ldr	r3, [r3, #0]
 8042486:	f003 0302 	and.w	r3, r3, #2
 804248a:	2b00      	cmp	r3, #0
 804248c:	d008      	beq.n	80424a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 804248e:	4b7b      	ldr	r3, [pc, #492]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042492:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8042496:	687b      	ldr	r3, [r7, #4]
 8042498:	68db      	ldr	r3, [r3, #12]
 804249a:	4978      	ldr	r1, [pc, #480]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804249c:	4313      	orrs	r3, r2
 804249e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80424a0:	687b      	ldr	r3, [r7, #4]
 80424a2:	681b      	ldr	r3, [r3, #0]
 80424a4:	f003 0304 	and.w	r3, r3, #4
 80424a8:	2b00      	cmp	r3, #0
 80424aa:	d008      	beq.n	80424be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80424ac:	4b73      	ldr	r3, [pc, #460]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80424ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80424b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80424b4:	687b      	ldr	r3, [r7, #4]
 80424b6:	691b      	ldr	r3, [r3, #16]
 80424b8:	4970      	ldr	r1, [pc, #448]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80424ba:	4313      	orrs	r3, r2
 80424bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80424be:	687b      	ldr	r3, [r7, #4]
 80424c0:	681b      	ldr	r3, [r3, #0]
 80424c2:	f003 0320 	and.w	r3, r3, #32
 80424c6:	2b00      	cmp	r3, #0
 80424c8:	d008      	beq.n	80424dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80424ca:	4b6c      	ldr	r3, [pc, #432]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80424cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80424ce:	f023 0210 	bic.w	r2, r3, #16
 80424d2:	687b      	ldr	r3, [r7, #4]
 80424d4:	69db      	ldr	r3, [r3, #28]
 80424d6:	4969      	ldr	r1, [pc, #420]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80424d8:	4313      	orrs	r3, r2
 80424da:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80424dc:	687b      	ldr	r3, [r7, #4]
 80424de:	681b      	ldr	r3, [r3, #0]
 80424e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80424e4:	2b00      	cmp	r3, #0
 80424e6:	d008      	beq.n	80424fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80424e8:	4b64      	ldr	r3, [pc, #400]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80424ea:	685b      	ldr	r3, [r3, #4]
 80424ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80424f0:	687b      	ldr	r3, [r7, #4]
 80424f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80424f4:	4961      	ldr	r1, [pc, #388]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80424f6:	4313      	orrs	r3, r2
 80424f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80424fa:	687b      	ldr	r3, [r7, #4]
 80424fc:	681b      	ldr	r3, [r3, #0]
 80424fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8042502:	2b00      	cmp	r3, #0
 8042504:	d008      	beq.n	8042518 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8042506:	4b5d      	ldr	r3, [pc, #372]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804250a:	f023 0220 	bic.w	r2, r3, #32
 804250e:	687b      	ldr	r3, [r7, #4]
 8042510:	6a1b      	ldr	r3, [r3, #32]
 8042512:	495a      	ldr	r1, [pc, #360]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042514:	4313      	orrs	r3, r2
 8042516:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8042518:	687b      	ldr	r3, [r7, #4]
 804251a:	681b      	ldr	r3, [r3, #0]
 804251c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8042520:	2b00      	cmp	r3, #0
 8042522:	d008      	beq.n	8042536 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8042524:	4b55      	ldr	r3, [pc, #340]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042528:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 804252c:	687b      	ldr	r3, [r7, #4]
 804252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042530:	4952      	ldr	r1, [pc, #328]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042532:	4313      	orrs	r3, r2
 8042534:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8042536:	687b      	ldr	r3, [r7, #4]
 8042538:	681b      	ldr	r3, [r3, #0]
 804253a:	f003 0308 	and.w	r3, r3, #8
 804253e:	2b00      	cmp	r3, #0
 8042540:	d008      	beq.n	8042554 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8042542:	4b4e      	ldr	r3, [pc, #312]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042546:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 804254a:	687b      	ldr	r3, [r7, #4]
 804254c:	695b      	ldr	r3, [r3, #20]
 804254e:	494b      	ldr	r1, [pc, #300]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042550:	4313      	orrs	r3, r2
 8042552:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8042554:	687b      	ldr	r3, [r7, #4]
 8042556:	681b      	ldr	r3, [r3, #0]
 8042558:	f003 0310 	and.w	r3, r3, #16
 804255c:	2b00      	cmp	r3, #0
 804255e:	d008      	beq.n	8042572 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8042560:	4b46      	ldr	r3, [pc, #280]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042564:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8042568:	687b      	ldr	r3, [r7, #4]
 804256a:	699b      	ldr	r3, [r3, #24]
 804256c:	4943      	ldr	r1, [pc, #268]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804256e:	4313      	orrs	r3, r2
 8042570:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8042572:	687b      	ldr	r3, [r7, #4]
 8042574:	681b      	ldr	r3, [r3, #0]
 8042576:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 804257a:	2b00      	cmp	r3, #0
 804257c:	d008      	beq.n	8042590 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 804257e:	4b3f      	ldr	r3, [pc, #252]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042580:	685b      	ldr	r3, [r3, #4]
 8042582:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8042586:	687b      	ldr	r3, [r7, #4]
 8042588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804258a:	493c      	ldr	r1, [pc, #240]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804258c:	4313      	orrs	r3, r2
 804258e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8042590:	687b      	ldr	r3, [r7, #4]
 8042592:	681b      	ldr	r3, [r3, #0]
 8042594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8042598:	2b00      	cmp	r3, #0
 804259a:	d008      	beq.n	80425ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 804259c:	4b37      	ldr	r3, [pc, #220]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80425a0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80425a4:	687b      	ldr	r3, [r7, #4]
 80425a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80425a8:	4934      	ldr	r1, [pc, #208]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80425aa:	4313      	orrs	r3, r2
 80425ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80425ae:	687b      	ldr	r3, [r7, #4]
 80425b0:	681b      	ldr	r3, [r3, #0]
 80425b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80425b6:	2b00      	cmp	r3, #0
 80425b8:	d008      	beq.n	80425cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80425ba:	4b30      	ldr	r3, [pc, #192]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80425bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80425be:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80425c2:	687b      	ldr	r3, [r7, #4]
 80425c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80425c6:	492d      	ldr	r1, [pc, #180]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80425c8:	4313      	orrs	r3, r2
 80425ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80425cc:	687b      	ldr	r3, [r7, #4]
 80425ce:	681b      	ldr	r3, [r3, #0]
 80425d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80425d4:	2b00      	cmp	r3, #0
 80425d6:	d008      	beq.n	80425ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80425d8:	4b28      	ldr	r3, [pc, #160]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80425da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80425dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80425e0:	687b      	ldr	r3, [r7, #4]
 80425e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80425e4:	4925      	ldr	r1, [pc, #148]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80425e6:	4313      	orrs	r3, r2
 80425e8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80425ea:	687b      	ldr	r3, [r7, #4]
 80425ec:	681b      	ldr	r3, [r3, #0]
 80425ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80425f2:	2b00      	cmp	r3, #0
 80425f4:	d008      	beq.n	8042608 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80425f6:	4b21      	ldr	r3, [pc, #132]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80425f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80425fa:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80425fe:	687b      	ldr	r3, [r7, #4]
 8042600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8042602:	491e      	ldr	r1, [pc, #120]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042604:	4313      	orrs	r3, r2
 8042606:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8042608:	687b      	ldr	r3, [r7, #4]
 804260a:	681b      	ldr	r3, [r3, #0]
 804260c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8042610:	2b00      	cmp	r3, #0
 8042612:	d008      	beq.n	8042626 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8042614:	4b19      	ldr	r3, [pc, #100]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042618:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 804261c:	687b      	ldr	r3, [r7, #4]
 804261e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8042620:	4916      	ldr	r1, [pc, #88]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042622:	4313      	orrs	r3, r2
 8042624:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8042626:	687b      	ldr	r3, [r7, #4]
 8042628:	681b      	ldr	r3, [r3, #0]
 804262a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 804262e:	2b00      	cmp	r3, #0
 8042630:	d008      	beq.n	8042644 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8042632:	4b12      	ldr	r3, [pc, #72]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042636:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 804263a:	687b      	ldr	r3, [r7, #4]
 804263c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804263e:	490f      	ldr	r1, [pc, #60]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042640:	4313      	orrs	r3, r2
 8042642:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8042644:	687b      	ldr	r3, [r7, #4]
 8042646:	681b      	ldr	r3, [r3, #0]
 8042648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 804264c:	2b00      	cmp	r3, #0
 804264e:	d008      	beq.n	8042662 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8042650:	4b0a      	ldr	r3, [pc, #40]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042654:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8042658:	687b      	ldr	r3, [r7, #4]
 804265a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 804265c:	4907      	ldr	r1, [pc, #28]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804265e:	4313      	orrs	r3, r2
 8042660:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8042662:	687b      	ldr	r3, [r7, #4]
 8042664:	681b      	ldr	r3, [r3, #0]
 8042666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 804266a:	2b00      	cmp	r3, #0
 804266c:	d00c      	beq.n	8042688 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 804266e:	4b03      	ldr	r3, [pc, #12]	@ (804267c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042672:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8042676:	687b      	ldr	r3, [r7, #4]
 8042678:	e002      	b.n	8042680 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 804267a:	bf00      	nop
 804267c:	40021000 	.word	0x40021000
 8042680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8042682:	4913      	ldr	r1, [pc, #76]	@ (80426d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8042684:	4313      	orrs	r3, r2
 8042686:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8042688:	687b      	ldr	r3, [r7, #4]
 804268a:	681b      	ldr	r3, [r3, #0]
 804268c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8042690:	2b00      	cmp	r3, #0
 8042692:	d008      	beq.n	80426a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8042694:	4b0e      	ldr	r3, [pc, #56]	@ (80426d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8042696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042698:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 804269c:	687b      	ldr	r3, [r7, #4]
 804269e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80426a0:	490b      	ldr	r1, [pc, #44]	@ (80426d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80426a2:	4313      	orrs	r3, r2
 80426a4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80426a6:	687b      	ldr	r3, [r7, #4]
 80426a8:	681b      	ldr	r3, [r3, #0]
 80426aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80426ae:	2b00      	cmp	r3, #0
 80426b0:	d008      	beq.n	80426c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80426b2:	4b07      	ldr	r3, [pc, #28]	@ (80426d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80426b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80426b6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80426ba:	687b      	ldr	r3, [r7, #4]
 80426bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80426be:	4904      	ldr	r1, [pc, #16]	@ (80426d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80426c0:	4313      	orrs	r3, r2
 80426c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80426c4:	2300      	movs	r3, #0
}
 80426c6:	4618      	mov	r0, r3
 80426c8:	3748      	adds	r7, #72	@ 0x48
 80426ca:	46bd      	mov	sp, r7
 80426cc:	bd80      	pop	{r7, pc}
 80426ce:	bf00      	nop
 80426d0:	40021000 	.word	0x40021000

080426d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80426d4:	b580      	push	{r7, lr}
 80426d6:	b082      	sub	sp, #8
 80426d8:	af00      	add	r7, sp, #0
 80426da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80426dc:	687b      	ldr	r3, [r7, #4]
 80426de:	2b00      	cmp	r3, #0
 80426e0:	d101      	bne.n	80426e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80426e2:	2301      	movs	r3, #1
 80426e4:	e040      	b.n	8042768 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80426e6:	687b      	ldr	r3, [r7, #4]
 80426e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80426ea:	2b00      	cmp	r3, #0
 80426ec:	d106      	bne.n	80426fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80426ee:	687b      	ldr	r3, [r7, #4]
 80426f0:	2200      	movs	r2, #0
 80426f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80426f6:	6878      	ldr	r0, [r7, #4]
 80426f8:	f7fd ff7e 	bl	80405f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80426fc:	687b      	ldr	r3, [r7, #4]
 80426fe:	2224      	movs	r2, #36	@ 0x24
 8042700:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8042702:	687b      	ldr	r3, [r7, #4]
 8042704:	681b      	ldr	r3, [r3, #0]
 8042706:	681a      	ldr	r2, [r3, #0]
 8042708:	687b      	ldr	r3, [r7, #4]
 804270a:	681b      	ldr	r3, [r3, #0]
 804270c:	f022 0201 	bic.w	r2, r2, #1
 8042710:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8042712:	687b      	ldr	r3, [r7, #4]
 8042714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042716:	2b00      	cmp	r3, #0
 8042718:	d002      	beq.n	8042720 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 804271a:	6878      	ldr	r0, [r7, #4]
 804271c:	f000 f9fc 	bl	8042b18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8042720:	6878      	ldr	r0, [r7, #4]
 8042722:	f000 f825 	bl	8042770 <UART_SetConfig>
 8042726:	4603      	mov	r3, r0
 8042728:	2b01      	cmp	r3, #1
 804272a:	d101      	bne.n	8042730 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 804272c:	2301      	movs	r3, #1
 804272e:	e01b      	b.n	8042768 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8042730:	687b      	ldr	r3, [r7, #4]
 8042732:	681b      	ldr	r3, [r3, #0]
 8042734:	685a      	ldr	r2, [r3, #4]
 8042736:	687b      	ldr	r3, [r7, #4]
 8042738:	681b      	ldr	r3, [r3, #0]
 804273a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 804273e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8042740:	687b      	ldr	r3, [r7, #4]
 8042742:	681b      	ldr	r3, [r3, #0]
 8042744:	689a      	ldr	r2, [r3, #8]
 8042746:	687b      	ldr	r3, [r7, #4]
 8042748:	681b      	ldr	r3, [r3, #0]
 804274a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 804274e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8042750:	687b      	ldr	r3, [r7, #4]
 8042752:	681b      	ldr	r3, [r3, #0]
 8042754:	681a      	ldr	r2, [r3, #0]
 8042756:	687b      	ldr	r3, [r7, #4]
 8042758:	681b      	ldr	r3, [r3, #0]
 804275a:	f042 0201 	orr.w	r2, r2, #1
 804275e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8042760:	6878      	ldr	r0, [r7, #4]
 8042762:	f000 fa7b 	bl	8042c5c <UART_CheckIdleState>
 8042766:	4603      	mov	r3, r0
}
 8042768:	4618      	mov	r0, r3
 804276a:	3708      	adds	r7, #8
 804276c:	46bd      	mov	sp, r7
 804276e:	bd80      	pop	{r7, pc}

08042770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8042770:	b580      	push	{r7, lr}
 8042772:	b088      	sub	sp, #32
 8042774:	af00      	add	r7, sp, #0
 8042776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8042778:	2300      	movs	r3, #0
 804277a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 804277c:	687b      	ldr	r3, [r7, #4]
 804277e:	689a      	ldr	r2, [r3, #8]
 8042780:	687b      	ldr	r3, [r7, #4]
 8042782:	691b      	ldr	r3, [r3, #16]
 8042784:	431a      	orrs	r2, r3
 8042786:	687b      	ldr	r3, [r7, #4]
 8042788:	695b      	ldr	r3, [r3, #20]
 804278a:	431a      	orrs	r2, r3
 804278c:	687b      	ldr	r3, [r7, #4]
 804278e:	69db      	ldr	r3, [r3, #28]
 8042790:	4313      	orrs	r3, r2
 8042792:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8042794:	687b      	ldr	r3, [r7, #4]
 8042796:	681b      	ldr	r3, [r3, #0]
 8042798:	681a      	ldr	r2, [r3, #0]
 804279a:	4b92      	ldr	r3, [pc, #584]	@ (80429e4 <UART_SetConfig+0x274>)
 804279c:	4013      	ands	r3, r2
 804279e:	687a      	ldr	r2, [r7, #4]
 80427a0:	6812      	ldr	r2, [r2, #0]
 80427a2:	6979      	ldr	r1, [r7, #20]
 80427a4:	430b      	orrs	r3, r1
 80427a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80427a8:	687b      	ldr	r3, [r7, #4]
 80427aa:	681b      	ldr	r3, [r3, #0]
 80427ac:	685b      	ldr	r3, [r3, #4]
 80427ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80427b2:	687b      	ldr	r3, [r7, #4]
 80427b4:	68da      	ldr	r2, [r3, #12]
 80427b6:	687b      	ldr	r3, [r7, #4]
 80427b8:	681b      	ldr	r3, [r3, #0]
 80427ba:	430a      	orrs	r2, r1
 80427bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80427be:	687b      	ldr	r3, [r7, #4]
 80427c0:	699b      	ldr	r3, [r3, #24]
 80427c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80427c4:	687b      	ldr	r3, [r7, #4]
 80427c6:	6a1b      	ldr	r3, [r3, #32]
 80427c8:	697a      	ldr	r2, [r7, #20]
 80427ca:	4313      	orrs	r3, r2
 80427cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80427ce:	687b      	ldr	r3, [r7, #4]
 80427d0:	681b      	ldr	r3, [r3, #0]
 80427d2:	689b      	ldr	r3, [r3, #8]
 80427d4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80427d8:	687b      	ldr	r3, [r7, #4]
 80427da:	681b      	ldr	r3, [r3, #0]
 80427dc:	697a      	ldr	r2, [r7, #20]
 80427de:	430a      	orrs	r2, r1
 80427e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80427e2:	687b      	ldr	r3, [r7, #4]
 80427e4:	681b      	ldr	r3, [r3, #0]
 80427e6:	4a80      	ldr	r2, [pc, #512]	@ (80429e8 <UART_SetConfig+0x278>)
 80427e8:	4293      	cmp	r3, r2
 80427ea:	d120      	bne.n	804282e <UART_SetConfig+0xbe>
 80427ec:	4b7f      	ldr	r3, [pc, #508]	@ (80429ec <UART_SetConfig+0x27c>)
 80427ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80427f0:	f003 0303 	and.w	r3, r3, #3
 80427f4:	2b03      	cmp	r3, #3
 80427f6:	d817      	bhi.n	8042828 <UART_SetConfig+0xb8>
 80427f8:	a201      	add	r2, pc, #4	@ (adr r2, 8042800 <UART_SetConfig+0x90>)
 80427fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80427fe:	bf00      	nop
 8042800:	08042811 	.word	0x08042811
 8042804:	0804281d 	.word	0x0804281d
 8042808:	08042823 	.word	0x08042823
 804280c:	08042817 	.word	0x08042817
 8042810:	2301      	movs	r3, #1
 8042812:	77fb      	strb	r3, [r7, #31]
 8042814:	e0b5      	b.n	8042982 <UART_SetConfig+0x212>
 8042816:	2302      	movs	r3, #2
 8042818:	77fb      	strb	r3, [r7, #31]
 804281a:	e0b2      	b.n	8042982 <UART_SetConfig+0x212>
 804281c:	2304      	movs	r3, #4
 804281e:	77fb      	strb	r3, [r7, #31]
 8042820:	e0af      	b.n	8042982 <UART_SetConfig+0x212>
 8042822:	2308      	movs	r3, #8
 8042824:	77fb      	strb	r3, [r7, #31]
 8042826:	e0ac      	b.n	8042982 <UART_SetConfig+0x212>
 8042828:	2310      	movs	r3, #16
 804282a:	77fb      	strb	r3, [r7, #31]
 804282c:	e0a9      	b.n	8042982 <UART_SetConfig+0x212>
 804282e:	687b      	ldr	r3, [r7, #4]
 8042830:	681b      	ldr	r3, [r3, #0]
 8042832:	4a6f      	ldr	r2, [pc, #444]	@ (80429f0 <UART_SetConfig+0x280>)
 8042834:	4293      	cmp	r3, r2
 8042836:	d124      	bne.n	8042882 <UART_SetConfig+0x112>
 8042838:	4b6c      	ldr	r3, [pc, #432]	@ (80429ec <UART_SetConfig+0x27c>)
 804283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804283c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8042840:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8042844:	d011      	beq.n	804286a <UART_SetConfig+0xfa>
 8042846:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 804284a:	d817      	bhi.n	804287c <UART_SetConfig+0x10c>
 804284c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8042850:	d011      	beq.n	8042876 <UART_SetConfig+0x106>
 8042852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8042856:	d811      	bhi.n	804287c <UART_SetConfig+0x10c>
 8042858:	2b00      	cmp	r3, #0
 804285a:	d003      	beq.n	8042864 <UART_SetConfig+0xf4>
 804285c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042860:	d006      	beq.n	8042870 <UART_SetConfig+0x100>
 8042862:	e00b      	b.n	804287c <UART_SetConfig+0x10c>
 8042864:	2300      	movs	r3, #0
 8042866:	77fb      	strb	r3, [r7, #31]
 8042868:	e08b      	b.n	8042982 <UART_SetConfig+0x212>
 804286a:	2302      	movs	r3, #2
 804286c:	77fb      	strb	r3, [r7, #31]
 804286e:	e088      	b.n	8042982 <UART_SetConfig+0x212>
 8042870:	2304      	movs	r3, #4
 8042872:	77fb      	strb	r3, [r7, #31]
 8042874:	e085      	b.n	8042982 <UART_SetConfig+0x212>
 8042876:	2308      	movs	r3, #8
 8042878:	77fb      	strb	r3, [r7, #31]
 804287a:	e082      	b.n	8042982 <UART_SetConfig+0x212>
 804287c:	2310      	movs	r3, #16
 804287e:	77fb      	strb	r3, [r7, #31]
 8042880:	e07f      	b.n	8042982 <UART_SetConfig+0x212>
 8042882:	687b      	ldr	r3, [r7, #4]
 8042884:	681b      	ldr	r3, [r3, #0]
 8042886:	4a5b      	ldr	r2, [pc, #364]	@ (80429f4 <UART_SetConfig+0x284>)
 8042888:	4293      	cmp	r3, r2
 804288a:	d124      	bne.n	80428d6 <UART_SetConfig+0x166>
 804288c:	4b57      	ldr	r3, [pc, #348]	@ (80429ec <UART_SetConfig+0x27c>)
 804288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042890:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8042894:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8042898:	d011      	beq.n	80428be <UART_SetConfig+0x14e>
 804289a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 804289e:	d817      	bhi.n	80428d0 <UART_SetConfig+0x160>
 80428a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80428a4:	d011      	beq.n	80428ca <UART_SetConfig+0x15a>
 80428a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80428aa:	d811      	bhi.n	80428d0 <UART_SetConfig+0x160>
 80428ac:	2b00      	cmp	r3, #0
 80428ae:	d003      	beq.n	80428b8 <UART_SetConfig+0x148>
 80428b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80428b4:	d006      	beq.n	80428c4 <UART_SetConfig+0x154>
 80428b6:	e00b      	b.n	80428d0 <UART_SetConfig+0x160>
 80428b8:	2300      	movs	r3, #0
 80428ba:	77fb      	strb	r3, [r7, #31]
 80428bc:	e061      	b.n	8042982 <UART_SetConfig+0x212>
 80428be:	2302      	movs	r3, #2
 80428c0:	77fb      	strb	r3, [r7, #31]
 80428c2:	e05e      	b.n	8042982 <UART_SetConfig+0x212>
 80428c4:	2304      	movs	r3, #4
 80428c6:	77fb      	strb	r3, [r7, #31]
 80428c8:	e05b      	b.n	8042982 <UART_SetConfig+0x212>
 80428ca:	2308      	movs	r3, #8
 80428cc:	77fb      	strb	r3, [r7, #31]
 80428ce:	e058      	b.n	8042982 <UART_SetConfig+0x212>
 80428d0:	2310      	movs	r3, #16
 80428d2:	77fb      	strb	r3, [r7, #31]
 80428d4:	e055      	b.n	8042982 <UART_SetConfig+0x212>
 80428d6:	687b      	ldr	r3, [r7, #4]
 80428d8:	681b      	ldr	r3, [r3, #0]
 80428da:	4a47      	ldr	r2, [pc, #284]	@ (80429f8 <UART_SetConfig+0x288>)
 80428dc:	4293      	cmp	r3, r2
 80428de:	d124      	bne.n	804292a <UART_SetConfig+0x1ba>
 80428e0:	4b42      	ldr	r3, [pc, #264]	@ (80429ec <UART_SetConfig+0x27c>)
 80428e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80428e4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80428e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80428ec:	d011      	beq.n	8042912 <UART_SetConfig+0x1a2>
 80428ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80428f2:	d817      	bhi.n	8042924 <UART_SetConfig+0x1b4>
 80428f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80428f8:	d011      	beq.n	804291e <UART_SetConfig+0x1ae>
 80428fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80428fe:	d811      	bhi.n	8042924 <UART_SetConfig+0x1b4>
 8042900:	2b00      	cmp	r3, #0
 8042902:	d003      	beq.n	804290c <UART_SetConfig+0x19c>
 8042904:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8042908:	d006      	beq.n	8042918 <UART_SetConfig+0x1a8>
 804290a:	e00b      	b.n	8042924 <UART_SetConfig+0x1b4>
 804290c:	2300      	movs	r3, #0
 804290e:	77fb      	strb	r3, [r7, #31]
 8042910:	e037      	b.n	8042982 <UART_SetConfig+0x212>
 8042912:	2302      	movs	r3, #2
 8042914:	77fb      	strb	r3, [r7, #31]
 8042916:	e034      	b.n	8042982 <UART_SetConfig+0x212>
 8042918:	2304      	movs	r3, #4
 804291a:	77fb      	strb	r3, [r7, #31]
 804291c:	e031      	b.n	8042982 <UART_SetConfig+0x212>
 804291e:	2308      	movs	r3, #8
 8042920:	77fb      	strb	r3, [r7, #31]
 8042922:	e02e      	b.n	8042982 <UART_SetConfig+0x212>
 8042924:	2310      	movs	r3, #16
 8042926:	77fb      	strb	r3, [r7, #31]
 8042928:	e02b      	b.n	8042982 <UART_SetConfig+0x212>
 804292a:	687b      	ldr	r3, [r7, #4]
 804292c:	681b      	ldr	r3, [r3, #0]
 804292e:	4a33      	ldr	r2, [pc, #204]	@ (80429fc <UART_SetConfig+0x28c>)
 8042930:	4293      	cmp	r3, r2
 8042932:	d124      	bne.n	804297e <UART_SetConfig+0x20e>
 8042934:	4b2d      	ldr	r3, [pc, #180]	@ (80429ec <UART_SetConfig+0x27c>)
 8042936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042938:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 804293c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8042940:	d011      	beq.n	8042966 <UART_SetConfig+0x1f6>
 8042942:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8042946:	d817      	bhi.n	8042978 <UART_SetConfig+0x208>
 8042948:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 804294c:	d011      	beq.n	8042972 <UART_SetConfig+0x202>
 804294e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8042952:	d811      	bhi.n	8042978 <UART_SetConfig+0x208>
 8042954:	2b00      	cmp	r3, #0
 8042956:	d003      	beq.n	8042960 <UART_SetConfig+0x1f0>
 8042958:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 804295c:	d006      	beq.n	804296c <UART_SetConfig+0x1fc>
 804295e:	e00b      	b.n	8042978 <UART_SetConfig+0x208>
 8042960:	2300      	movs	r3, #0
 8042962:	77fb      	strb	r3, [r7, #31]
 8042964:	e00d      	b.n	8042982 <UART_SetConfig+0x212>
 8042966:	2302      	movs	r3, #2
 8042968:	77fb      	strb	r3, [r7, #31]
 804296a:	e00a      	b.n	8042982 <UART_SetConfig+0x212>
 804296c:	2304      	movs	r3, #4
 804296e:	77fb      	strb	r3, [r7, #31]
 8042970:	e007      	b.n	8042982 <UART_SetConfig+0x212>
 8042972:	2308      	movs	r3, #8
 8042974:	77fb      	strb	r3, [r7, #31]
 8042976:	e004      	b.n	8042982 <UART_SetConfig+0x212>
 8042978:	2310      	movs	r3, #16
 804297a:	77fb      	strb	r3, [r7, #31]
 804297c:	e001      	b.n	8042982 <UART_SetConfig+0x212>
 804297e:	2310      	movs	r3, #16
 8042980:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8042982:	687b      	ldr	r3, [r7, #4]
 8042984:	69db      	ldr	r3, [r3, #28]
 8042986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 804298a:	d16b      	bne.n	8042a64 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 804298c:	7ffb      	ldrb	r3, [r7, #31]
 804298e:	2b08      	cmp	r3, #8
 8042990:	d838      	bhi.n	8042a04 <UART_SetConfig+0x294>
 8042992:	a201      	add	r2, pc, #4	@ (adr r2, 8042998 <UART_SetConfig+0x228>)
 8042994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042998:	080429bd 	.word	0x080429bd
 804299c:	080429c5 	.word	0x080429c5
 80429a0:	080429cd 	.word	0x080429cd
 80429a4:	08042a05 	.word	0x08042a05
 80429a8:	080429d3 	.word	0x080429d3
 80429ac:	08042a05 	.word	0x08042a05
 80429b0:	08042a05 	.word	0x08042a05
 80429b4:	08042a05 	.word	0x08042a05
 80429b8:	080429db 	.word	0x080429db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80429bc:	f7ff fc28 	bl	8042210 <HAL_RCC_GetPCLK1Freq>
 80429c0:	61b8      	str	r0, [r7, #24]
        break;
 80429c2:	e024      	b.n	8042a0e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80429c4:	f7ff fc46 	bl	8042254 <HAL_RCC_GetPCLK2Freq>
 80429c8:	61b8      	str	r0, [r7, #24]
        break;
 80429ca:	e020      	b.n	8042a0e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80429cc:	4b0c      	ldr	r3, [pc, #48]	@ (8042a00 <UART_SetConfig+0x290>)
 80429ce:	61bb      	str	r3, [r7, #24]
        break;
 80429d0:	e01d      	b.n	8042a0e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80429d2:	f7ff fbbd 	bl	8042150 <HAL_RCC_GetSysClockFreq>
 80429d6:	61b8      	str	r0, [r7, #24]
        break;
 80429d8:	e019      	b.n	8042a0e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80429da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80429de:	61bb      	str	r3, [r7, #24]
        break;
 80429e0:	e015      	b.n	8042a0e <UART_SetConfig+0x29e>
 80429e2:	bf00      	nop
 80429e4:	efff69f3 	.word	0xefff69f3
 80429e8:	40013800 	.word	0x40013800
 80429ec:	40021000 	.word	0x40021000
 80429f0:	40004400 	.word	0x40004400
 80429f4:	40004800 	.word	0x40004800
 80429f8:	40004c00 	.word	0x40004c00
 80429fc:	40005000 	.word	0x40005000
 8042a00:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8042a04:	2300      	movs	r3, #0
 8042a06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8042a08:	2301      	movs	r3, #1
 8042a0a:	77bb      	strb	r3, [r7, #30]
        break;
 8042a0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8042a0e:	69bb      	ldr	r3, [r7, #24]
 8042a10:	2b00      	cmp	r3, #0
 8042a12:	d073      	beq.n	8042afc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8042a14:	69bb      	ldr	r3, [r7, #24]
 8042a16:	005a      	lsls	r2, r3, #1
 8042a18:	687b      	ldr	r3, [r7, #4]
 8042a1a:	685b      	ldr	r3, [r3, #4]
 8042a1c:	085b      	lsrs	r3, r3, #1
 8042a1e:	441a      	add	r2, r3
 8042a20:	687b      	ldr	r3, [r7, #4]
 8042a22:	685b      	ldr	r3, [r3, #4]
 8042a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8042a28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042a2a:	693b      	ldr	r3, [r7, #16]
 8042a2c:	2b0f      	cmp	r3, #15
 8042a2e:	d916      	bls.n	8042a5e <UART_SetConfig+0x2ee>
 8042a30:	693b      	ldr	r3, [r7, #16]
 8042a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042a36:	d212      	bcs.n	8042a5e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8042a38:	693b      	ldr	r3, [r7, #16]
 8042a3a:	b29b      	uxth	r3, r3
 8042a3c:	f023 030f 	bic.w	r3, r3, #15
 8042a40:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8042a42:	693b      	ldr	r3, [r7, #16]
 8042a44:	085b      	lsrs	r3, r3, #1
 8042a46:	b29b      	uxth	r3, r3
 8042a48:	f003 0307 	and.w	r3, r3, #7
 8042a4c:	b29a      	uxth	r2, r3
 8042a4e:	89fb      	ldrh	r3, [r7, #14]
 8042a50:	4313      	orrs	r3, r2
 8042a52:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8042a54:	687b      	ldr	r3, [r7, #4]
 8042a56:	681b      	ldr	r3, [r3, #0]
 8042a58:	89fa      	ldrh	r2, [r7, #14]
 8042a5a:	60da      	str	r2, [r3, #12]
 8042a5c:	e04e      	b.n	8042afc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8042a5e:	2301      	movs	r3, #1
 8042a60:	77bb      	strb	r3, [r7, #30]
 8042a62:	e04b      	b.n	8042afc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8042a64:	7ffb      	ldrb	r3, [r7, #31]
 8042a66:	2b08      	cmp	r3, #8
 8042a68:	d827      	bhi.n	8042aba <UART_SetConfig+0x34a>
 8042a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8042a70 <UART_SetConfig+0x300>)
 8042a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042a70:	08042a95 	.word	0x08042a95
 8042a74:	08042a9d 	.word	0x08042a9d
 8042a78:	08042aa5 	.word	0x08042aa5
 8042a7c:	08042abb 	.word	0x08042abb
 8042a80:	08042aab 	.word	0x08042aab
 8042a84:	08042abb 	.word	0x08042abb
 8042a88:	08042abb 	.word	0x08042abb
 8042a8c:	08042abb 	.word	0x08042abb
 8042a90:	08042ab3 	.word	0x08042ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042a94:	f7ff fbbc 	bl	8042210 <HAL_RCC_GetPCLK1Freq>
 8042a98:	61b8      	str	r0, [r7, #24]
        break;
 8042a9a:	e013      	b.n	8042ac4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042a9c:	f7ff fbda 	bl	8042254 <HAL_RCC_GetPCLK2Freq>
 8042aa0:	61b8      	str	r0, [r7, #24]
        break;
 8042aa2:	e00f      	b.n	8042ac4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8042b14 <UART_SetConfig+0x3a4>)
 8042aa6:	61bb      	str	r3, [r7, #24]
        break;
 8042aa8:	e00c      	b.n	8042ac4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042aaa:	f7ff fb51 	bl	8042150 <HAL_RCC_GetSysClockFreq>
 8042aae:	61b8      	str	r0, [r7, #24]
        break;
 8042ab0:	e008      	b.n	8042ac4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042ab6:	61bb      	str	r3, [r7, #24]
        break;
 8042ab8:	e004      	b.n	8042ac4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8042aba:	2300      	movs	r3, #0
 8042abc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8042abe:	2301      	movs	r3, #1
 8042ac0:	77bb      	strb	r3, [r7, #30]
        break;
 8042ac2:	bf00      	nop
    }

    if (pclk != 0U)
 8042ac4:	69bb      	ldr	r3, [r7, #24]
 8042ac6:	2b00      	cmp	r3, #0
 8042ac8:	d018      	beq.n	8042afc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8042aca:	687b      	ldr	r3, [r7, #4]
 8042acc:	685b      	ldr	r3, [r3, #4]
 8042ace:	085a      	lsrs	r2, r3, #1
 8042ad0:	69bb      	ldr	r3, [r7, #24]
 8042ad2:	441a      	add	r2, r3
 8042ad4:	687b      	ldr	r3, [r7, #4]
 8042ad6:	685b      	ldr	r3, [r3, #4]
 8042ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8042adc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042ade:	693b      	ldr	r3, [r7, #16]
 8042ae0:	2b0f      	cmp	r3, #15
 8042ae2:	d909      	bls.n	8042af8 <UART_SetConfig+0x388>
 8042ae4:	693b      	ldr	r3, [r7, #16]
 8042ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042aea:	d205      	bcs.n	8042af8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8042aec:	693b      	ldr	r3, [r7, #16]
 8042aee:	b29a      	uxth	r2, r3
 8042af0:	687b      	ldr	r3, [r7, #4]
 8042af2:	681b      	ldr	r3, [r3, #0]
 8042af4:	60da      	str	r2, [r3, #12]
 8042af6:	e001      	b.n	8042afc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8042af8:	2301      	movs	r3, #1
 8042afa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8042afc:	687b      	ldr	r3, [r7, #4]
 8042afe:	2200      	movs	r2, #0
 8042b00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8042b02:	687b      	ldr	r3, [r7, #4]
 8042b04:	2200      	movs	r2, #0
 8042b06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8042b08:	7fbb      	ldrb	r3, [r7, #30]
}
 8042b0a:	4618      	mov	r0, r3
 8042b0c:	3720      	adds	r7, #32
 8042b0e:	46bd      	mov	sp, r7
 8042b10:	bd80      	pop	{r7, pc}
 8042b12:	bf00      	nop
 8042b14:	007a1200 	.word	0x007a1200

08042b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8042b18:	b480      	push	{r7}
 8042b1a:	b083      	sub	sp, #12
 8042b1c:	af00      	add	r7, sp, #0
 8042b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8042b20:	687b      	ldr	r3, [r7, #4]
 8042b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042b24:	f003 0308 	and.w	r3, r3, #8
 8042b28:	2b00      	cmp	r3, #0
 8042b2a:	d00a      	beq.n	8042b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8042b2c:	687b      	ldr	r3, [r7, #4]
 8042b2e:	681b      	ldr	r3, [r3, #0]
 8042b30:	685b      	ldr	r3, [r3, #4]
 8042b32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8042b36:	687b      	ldr	r3, [r7, #4]
 8042b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8042b3a:	687b      	ldr	r3, [r7, #4]
 8042b3c:	681b      	ldr	r3, [r3, #0]
 8042b3e:	430a      	orrs	r2, r1
 8042b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8042b42:	687b      	ldr	r3, [r7, #4]
 8042b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042b46:	f003 0301 	and.w	r3, r3, #1
 8042b4a:	2b00      	cmp	r3, #0
 8042b4c:	d00a      	beq.n	8042b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8042b4e:	687b      	ldr	r3, [r7, #4]
 8042b50:	681b      	ldr	r3, [r3, #0]
 8042b52:	685b      	ldr	r3, [r3, #4]
 8042b54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8042b58:	687b      	ldr	r3, [r7, #4]
 8042b5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8042b5c:	687b      	ldr	r3, [r7, #4]
 8042b5e:	681b      	ldr	r3, [r3, #0]
 8042b60:	430a      	orrs	r2, r1
 8042b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8042b64:	687b      	ldr	r3, [r7, #4]
 8042b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042b68:	f003 0302 	and.w	r3, r3, #2
 8042b6c:	2b00      	cmp	r3, #0
 8042b6e:	d00a      	beq.n	8042b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8042b70:	687b      	ldr	r3, [r7, #4]
 8042b72:	681b      	ldr	r3, [r3, #0]
 8042b74:	685b      	ldr	r3, [r3, #4]
 8042b76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8042b7a:	687b      	ldr	r3, [r7, #4]
 8042b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8042b7e:	687b      	ldr	r3, [r7, #4]
 8042b80:	681b      	ldr	r3, [r3, #0]
 8042b82:	430a      	orrs	r2, r1
 8042b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8042b86:	687b      	ldr	r3, [r7, #4]
 8042b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042b8a:	f003 0304 	and.w	r3, r3, #4
 8042b8e:	2b00      	cmp	r3, #0
 8042b90:	d00a      	beq.n	8042ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8042b92:	687b      	ldr	r3, [r7, #4]
 8042b94:	681b      	ldr	r3, [r3, #0]
 8042b96:	685b      	ldr	r3, [r3, #4]
 8042b98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8042b9c:	687b      	ldr	r3, [r7, #4]
 8042b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8042ba0:	687b      	ldr	r3, [r7, #4]
 8042ba2:	681b      	ldr	r3, [r3, #0]
 8042ba4:	430a      	orrs	r2, r1
 8042ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8042ba8:	687b      	ldr	r3, [r7, #4]
 8042baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042bac:	f003 0310 	and.w	r3, r3, #16
 8042bb0:	2b00      	cmp	r3, #0
 8042bb2:	d00a      	beq.n	8042bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8042bb4:	687b      	ldr	r3, [r7, #4]
 8042bb6:	681b      	ldr	r3, [r3, #0]
 8042bb8:	689b      	ldr	r3, [r3, #8]
 8042bba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8042bbe:	687b      	ldr	r3, [r7, #4]
 8042bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8042bc2:	687b      	ldr	r3, [r7, #4]
 8042bc4:	681b      	ldr	r3, [r3, #0]
 8042bc6:	430a      	orrs	r2, r1
 8042bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8042bca:	687b      	ldr	r3, [r7, #4]
 8042bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042bce:	f003 0320 	and.w	r3, r3, #32
 8042bd2:	2b00      	cmp	r3, #0
 8042bd4:	d00a      	beq.n	8042bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8042bd6:	687b      	ldr	r3, [r7, #4]
 8042bd8:	681b      	ldr	r3, [r3, #0]
 8042bda:	689b      	ldr	r3, [r3, #8]
 8042bdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8042be0:	687b      	ldr	r3, [r7, #4]
 8042be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8042be4:	687b      	ldr	r3, [r7, #4]
 8042be6:	681b      	ldr	r3, [r3, #0]
 8042be8:	430a      	orrs	r2, r1
 8042bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8042bec:	687b      	ldr	r3, [r7, #4]
 8042bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8042bf4:	2b00      	cmp	r3, #0
 8042bf6:	d01a      	beq.n	8042c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8042bf8:	687b      	ldr	r3, [r7, #4]
 8042bfa:	681b      	ldr	r3, [r3, #0]
 8042bfc:	685b      	ldr	r3, [r3, #4]
 8042bfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8042c02:	687b      	ldr	r3, [r7, #4]
 8042c04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8042c06:	687b      	ldr	r3, [r7, #4]
 8042c08:	681b      	ldr	r3, [r3, #0]
 8042c0a:	430a      	orrs	r2, r1
 8042c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8042c0e:	687b      	ldr	r3, [r7, #4]
 8042c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8042c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8042c16:	d10a      	bne.n	8042c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8042c18:	687b      	ldr	r3, [r7, #4]
 8042c1a:	681b      	ldr	r3, [r3, #0]
 8042c1c:	685b      	ldr	r3, [r3, #4]
 8042c1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8042c22:	687b      	ldr	r3, [r7, #4]
 8042c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8042c26:	687b      	ldr	r3, [r7, #4]
 8042c28:	681b      	ldr	r3, [r3, #0]
 8042c2a:	430a      	orrs	r2, r1
 8042c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8042c2e:	687b      	ldr	r3, [r7, #4]
 8042c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8042c36:	2b00      	cmp	r3, #0
 8042c38:	d00a      	beq.n	8042c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8042c3a:	687b      	ldr	r3, [r7, #4]
 8042c3c:	681b      	ldr	r3, [r3, #0]
 8042c3e:	685b      	ldr	r3, [r3, #4]
 8042c40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8042c44:	687b      	ldr	r3, [r7, #4]
 8042c46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8042c48:	687b      	ldr	r3, [r7, #4]
 8042c4a:	681b      	ldr	r3, [r3, #0]
 8042c4c:	430a      	orrs	r2, r1
 8042c4e:	605a      	str	r2, [r3, #4]
  }
}
 8042c50:	bf00      	nop
 8042c52:	370c      	adds	r7, #12
 8042c54:	46bd      	mov	sp, r7
 8042c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c5a:	4770      	bx	lr

08042c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8042c5c:	b580      	push	{r7, lr}
 8042c5e:	b098      	sub	sp, #96	@ 0x60
 8042c60:	af02      	add	r7, sp, #8
 8042c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042c64:	687b      	ldr	r3, [r7, #4]
 8042c66:	2200      	movs	r2, #0
 8042c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8042c6c:	f7fd fd8a 	bl	8040784 <HAL_GetTick>
 8042c70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8042c72:	687b      	ldr	r3, [r7, #4]
 8042c74:	681b      	ldr	r3, [r3, #0]
 8042c76:	681b      	ldr	r3, [r3, #0]
 8042c78:	f003 0308 	and.w	r3, r3, #8
 8042c7c:	2b08      	cmp	r3, #8
 8042c7e:	d12e      	bne.n	8042cde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042c80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8042c84:	9300      	str	r3, [sp, #0]
 8042c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8042c88:	2200      	movs	r2, #0
 8042c8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8042c8e:	6878      	ldr	r0, [r7, #4]
 8042c90:	f000 f88c 	bl	8042dac <UART_WaitOnFlagUntilTimeout>
 8042c94:	4603      	mov	r3, r0
 8042c96:	2b00      	cmp	r3, #0
 8042c98:	d021      	beq.n	8042cde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8042c9a:	687b      	ldr	r3, [r7, #4]
 8042c9c:	681b      	ldr	r3, [r3, #0]
 8042c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8042ca2:	e853 3f00 	ldrex	r3, [r3]
 8042ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8042ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8042caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8042cae:	653b      	str	r3, [r7, #80]	@ 0x50
 8042cb0:	687b      	ldr	r3, [r7, #4]
 8042cb2:	681b      	ldr	r3, [r3, #0]
 8042cb4:	461a      	mov	r2, r3
 8042cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8042cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8042cba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042cbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8042cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8042cc0:	e841 2300 	strex	r3, r2, [r1]
 8042cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8042cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8042cc8:	2b00      	cmp	r3, #0
 8042cca:	d1e6      	bne.n	8042c9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8042ccc:	687b      	ldr	r3, [r7, #4]
 8042cce:	2220      	movs	r2, #32
 8042cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8042cd2:	687b      	ldr	r3, [r7, #4]
 8042cd4:	2200      	movs	r2, #0
 8042cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042cda:	2303      	movs	r3, #3
 8042cdc:	e062      	b.n	8042da4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8042cde:	687b      	ldr	r3, [r7, #4]
 8042ce0:	681b      	ldr	r3, [r3, #0]
 8042ce2:	681b      	ldr	r3, [r3, #0]
 8042ce4:	f003 0304 	and.w	r3, r3, #4
 8042ce8:	2b04      	cmp	r3, #4
 8042cea:	d149      	bne.n	8042d80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042cec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8042cf0:	9300      	str	r3, [sp, #0]
 8042cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8042cf4:	2200      	movs	r2, #0
 8042cf6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8042cfa:	6878      	ldr	r0, [r7, #4]
 8042cfc:	f000 f856 	bl	8042dac <UART_WaitOnFlagUntilTimeout>
 8042d00:	4603      	mov	r3, r0
 8042d02:	2b00      	cmp	r3, #0
 8042d04:	d03c      	beq.n	8042d80 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8042d06:	687b      	ldr	r3, [r7, #4]
 8042d08:	681b      	ldr	r3, [r3, #0]
 8042d0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042d0e:	e853 3f00 	ldrex	r3, [r3]
 8042d12:	623b      	str	r3, [r7, #32]
   return(result);
 8042d14:	6a3b      	ldr	r3, [r7, #32]
 8042d16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8042d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8042d1c:	687b      	ldr	r3, [r7, #4]
 8042d1e:	681b      	ldr	r3, [r3, #0]
 8042d20:	461a      	mov	r2, r3
 8042d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8042d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8042d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8042d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8042d2c:	e841 2300 	strex	r3, r2, [r1]
 8042d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8042d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8042d34:	2b00      	cmp	r3, #0
 8042d36:	d1e6      	bne.n	8042d06 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042d38:	687b      	ldr	r3, [r7, #4]
 8042d3a:	681b      	ldr	r3, [r3, #0]
 8042d3c:	3308      	adds	r3, #8
 8042d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042d40:	693b      	ldr	r3, [r7, #16]
 8042d42:	e853 3f00 	ldrex	r3, [r3]
 8042d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8042d48:	68fb      	ldr	r3, [r7, #12]
 8042d4a:	f023 0301 	bic.w	r3, r3, #1
 8042d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8042d50:	687b      	ldr	r3, [r7, #4]
 8042d52:	681b      	ldr	r3, [r3, #0]
 8042d54:	3308      	adds	r3, #8
 8042d56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8042d58:	61fa      	str	r2, [r7, #28]
 8042d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042d5c:	69b9      	ldr	r1, [r7, #24]
 8042d5e:	69fa      	ldr	r2, [r7, #28]
 8042d60:	e841 2300 	strex	r3, r2, [r1]
 8042d64:	617b      	str	r3, [r7, #20]
   return(result);
 8042d66:	697b      	ldr	r3, [r7, #20]
 8042d68:	2b00      	cmp	r3, #0
 8042d6a:	d1e5      	bne.n	8042d38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8042d6c:	687b      	ldr	r3, [r7, #4]
 8042d6e:	2220      	movs	r2, #32
 8042d70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8042d74:	687b      	ldr	r3, [r7, #4]
 8042d76:	2200      	movs	r2, #0
 8042d78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042d7c:	2303      	movs	r3, #3
 8042d7e:	e011      	b.n	8042da4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8042d80:	687b      	ldr	r3, [r7, #4]
 8042d82:	2220      	movs	r2, #32
 8042d84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8042d86:	687b      	ldr	r3, [r7, #4]
 8042d88:	2220      	movs	r2, #32
 8042d8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042d8e:	687b      	ldr	r3, [r7, #4]
 8042d90:	2200      	movs	r2, #0
 8042d92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8042d94:	687b      	ldr	r3, [r7, #4]
 8042d96:	2200      	movs	r2, #0
 8042d98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8042d9a:	687b      	ldr	r3, [r7, #4]
 8042d9c:	2200      	movs	r2, #0
 8042d9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8042da2:	2300      	movs	r3, #0
}
 8042da4:	4618      	mov	r0, r3
 8042da6:	3758      	adds	r7, #88	@ 0x58
 8042da8:	46bd      	mov	sp, r7
 8042daa:	bd80      	pop	{r7, pc}

08042dac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8042dac:	b580      	push	{r7, lr}
 8042dae:	b084      	sub	sp, #16
 8042db0:	af00      	add	r7, sp, #0
 8042db2:	60f8      	str	r0, [r7, #12]
 8042db4:	60b9      	str	r1, [r7, #8]
 8042db6:	603b      	str	r3, [r7, #0]
 8042db8:	4613      	mov	r3, r2
 8042dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042dbc:	e04f      	b.n	8042e5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042dbe:	69bb      	ldr	r3, [r7, #24]
 8042dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042dc4:	d04b      	beq.n	8042e5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042dc6:	f7fd fcdd 	bl	8040784 <HAL_GetTick>
 8042dca:	4602      	mov	r2, r0
 8042dcc:	683b      	ldr	r3, [r7, #0]
 8042dce:	1ad3      	subs	r3, r2, r3
 8042dd0:	69ba      	ldr	r2, [r7, #24]
 8042dd2:	429a      	cmp	r2, r3
 8042dd4:	d302      	bcc.n	8042ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8042dd6:	69bb      	ldr	r3, [r7, #24]
 8042dd8:	2b00      	cmp	r3, #0
 8042dda:	d101      	bne.n	8042de0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8042ddc:	2303      	movs	r3, #3
 8042dde:	e04e      	b.n	8042e7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8042de0:	68fb      	ldr	r3, [r7, #12]
 8042de2:	681b      	ldr	r3, [r3, #0]
 8042de4:	681b      	ldr	r3, [r3, #0]
 8042de6:	f003 0304 	and.w	r3, r3, #4
 8042dea:	2b00      	cmp	r3, #0
 8042dec:	d037      	beq.n	8042e5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8042dee:	68bb      	ldr	r3, [r7, #8]
 8042df0:	2b80      	cmp	r3, #128	@ 0x80
 8042df2:	d034      	beq.n	8042e5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8042df4:	68bb      	ldr	r3, [r7, #8]
 8042df6:	2b40      	cmp	r3, #64	@ 0x40
 8042df8:	d031      	beq.n	8042e5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8042dfa:	68fb      	ldr	r3, [r7, #12]
 8042dfc:	681b      	ldr	r3, [r3, #0]
 8042dfe:	69db      	ldr	r3, [r3, #28]
 8042e00:	f003 0308 	and.w	r3, r3, #8
 8042e04:	2b08      	cmp	r3, #8
 8042e06:	d110      	bne.n	8042e2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8042e08:	68fb      	ldr	r3, [r7, #12]
 8042e0a:	681b      	ldr	r3, [r3, #0]
 8042e0c:	2208      	movs	r2, #8
 8042e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8042e10:	68f8      	ldr	r0, [r7, #12]
 8042e12:	f000 f838 	bl	8042e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8042e16:	68fb      	ldr	r3, [r7, #12]
 8042e18:	2208      	movs	r2, #8
 8042e1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042e1e:	68fb      	ldr	r3, [r7, #12]
 8042e20:	2200      	movs	r2, #0
 8042e22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8042e26:	2301      	movs	r3, #1
 8042e28:	e029      	b.n	8042e7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8042e2a:	68fb      	ldr	r3, [r7, #12]
 8042e2c:	681b      	ldr	r3, [r3, #0]
 8042e2e:	69db      	ldr	r3, [r3, #28]
 8042e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8042e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8042e38:	d111      	bne.n	8042e5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042e3a:	68fb      	ldr	r3, [r7, #12]
 8042e3c:	681b      	ldr	r3, [r3, #0]
 8042e3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8042e42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8042e44:	68f8      	ldr	r0, [r7, #12]
 8042e46:	f000 f81e 	bl	8042e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8042e4a:	68fb      	ldr	r3, [r7, #12]
 8042e4c:	2220      	movs	r2, #32
 8042e4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042e52:	68fb      	ldr	r3, [r7, #12]
 8042e54:	2200      	movs	r2, #0
 8042e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8042e5a:	2303      	movs	r3, #3
 8042e5c:	e00f      	b.n	8042e7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042e5e:	68fb      	ldr	r3, [r7, #12]
 8042e60:	681b      	ldr	r3, [r3, #0]
 8042e62:	69da      	ldr	r2, [r3, #28]
 8042e64:	68bb      	ldr	r3, [r7, #8]
 8042e66:	4013      	ands	r3, r2
 8042e68:	68ba      	ldr	r2, [r7, #8]
 8042e6a:	429a      	cmp	r2, r3
 8042e6c:	bf0c      	ite	eq
 8042e6e:	2301      	moveq	r3, #1
 8042e70:	2300      	movne	r3, #0
 8042e72:	b2db      	uxtb	r3, r3
 8042e74:	461a      	mov	r2, r3
 8042e76:	79fb      	ldrb	r3, [r7, #7]
 8042e78:	429a      	cmp	r2, r3
 8042e7a:	d0a0      	beq.n	8042dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8042e7c:	2300      	movs	r3, #0
}
 8042e7e:	4618      	mov	r0, r3
 8042e80:	3710      	adds	r7, #16
 8042e82:	46bd      	mov	sp, r7
 8042e84:	bd80      	pop	{r7, pc}

08042e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8042e86:	b480      	push	{r7}
 8042e88:	b095      	sub	sp, #84	@ 0x54
 8042e8a:	af00      	add	r7, sp, #0
 8042e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8042e8e:	687b      	ldr	r3, [r7, #4]
 8042e90:	681b      	ldr	r3, [r3, #0]
 8042e92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8042e96:	e853 3f00 	ldrex	r3, [r3]
 8042e9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8042e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8042e9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8042ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8042ea4:	687b      	ldr	r3, [r7, #4]
 8042ea6:	681b      	ldr	r3, [r3, #0]
 8042ea8:	461a      	mov	r2, r3
 8042eaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8042eac:	643b      	str	r3, [r7, #64]	@ 0x40
 8042eae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042eb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8042eb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8042eb4:	e841 2300 	strex	r3, r2, [r1]
 8042eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8042eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8042ebc:	2b00      	cmp	r3, #0
 8042ebe:	d1e6      	bne.n	8042e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042ec0:	687b      	ldr	r3, [r7, #4]
 8042ec2:	681b      	ldr	r3, [r3, #0]
 8042ec4:	3308      	adds	r3, #8
 8042ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042ec8:	6a3b      	ldr	r3, [r7, #32]
 8042eca:	e853 3f00 	ldrex	r3, [r3]
 8042ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8042ed0:	69fb      	ldr	r3, [r7, #28]
 8042ed2:	f023 0301 	bic.w	r3, r3, #1
 8042ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8042ed8:	687b      	ldr	r3, [r7, #4]
 8042eda:	681b      	ldr	r3, [r3, #0]
 8042edc:	3308      	adds	r3, #8
 8042ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8042ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8042ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042ee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8042ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8042ee8:	e841 2300 	strex	r3, r2, [r1]
 8042eec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8042eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042ef0:	2b00      	cmp	r3, #0
 8042ef2:	d1e5      	bne.n	8042ec0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042ef4:	687b      	ldr	r3, [r7, #4]
 8042ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8042ef8:	2b01      	cmp	r3, #1
 8042efa:	d118      	bne.n	8042f2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042efc:	687b      	ldr	r3, [r7, #4]
 8042efe:	681b      	ldr	r3, [r3, #0]
 8042f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042f02:	68fb      	ldr	r3, [r7, #12]
 8042f04:	e853 3f00 	ldrex	r3, [r3]
 8042f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8042f0a:	68bb      	ldr	r3, [r7, #8]
 8042f0c:	f023 0310 	bic.w	r3, r3, #16
 8042f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8042f12:	687b      	ldr	r3, [r7, #4]
 8042f14:	681b      	ldr	r3, [r3, #0]
 8042f16:	461a      	mov	r2, r3
 8042f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8042f1a:	61bb      	str	r3, [r7, #24]
 8042f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042f1e:	6979      	ldr	r1, [r7, #20]
 8042f20:	69ba      	ldr	r2, [r7, #24]
 8042f22:	e841 2300 	strex	r3, r2, [r1]
 8042f26:	613b      	str	r3, [r7, #16]
   return(result);
 8042f28:	693b      	ldr	r3, [r7, #16]
 8042f2a:	2b00      	cmp	r3, #0
 8042f2c:	d1e6      	bne.n	8042efc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8042f2e:	687b      	ldr	r3, [r7, #4]
 8042f30:	2220      	movs	r2, #32
 8042f32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042f36:	687b      	ldr	r3, [r7, #4]
 8042f38:	2200      	movs	r2, #0
 8042f3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8042f3c:	687b      	ldr	r3, [r7, #4]
 8042f3e:	2200      	movs	r2, #0
 8042f40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8042f42:	bf00      	nop
 8042f44:	3754      	adds	r7, #84	@ 0x54
 8042f46:	46bd      	mov	sp, r7
 8042f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f4c:	4770      	bx	lr

08042f4e <memset>:
 8042f4e:	4402      	add	r2, r0
 8042f50:	4603      	mov	r3, r0
 8042f52:	4293      	cmp	r3, r2
 8042f54:	d100      	bne.n	8042f58 <memset+0xa>
 8042f56:	4770      	bx	lr
 8042f58:	f803 1b01 	strb.w	r1, [r3], #1
 8042f5c:	e7f9      	b.n	8042f52 <memset+0x4>
	...

08042f60 <__libc_init_array>:
 8042f60:	b570      	push	{r4, r5, r6, lr}
 8042f62:	4d0d      	ldr	r5, [pc, #52]	@ (8042f98 <__libc_init_array+0x38>)
 8042f64:	4c0d      	ldr	r4, [pc, #52]	@ (8042f9c <__libc_init_array+0x3c>)
 8042f66:	1b64      	subs	r4, r4, r5
 8042f68:	10a4      	asrs	r4, r4, #2
 8042f6a:	2600      	movs	r6, #0
 8042f6c:	42a6      	cmp	r6, r4
 8042f6e:	d109      	bne.n	8042f84 <__libc_init_array+0x24>
 8042f70:	4d0b      	ldr	r5, [pc, #44]	@ (8042fa0 <__libc_init_array+0x40>)
 8042f72:	4c0c      	ldr	r4, [pc, #48]	@ (8042fa4 <__libc_init_array+0x44>)
 8042f74:	f000 f818 	bl	8042fa8 <_init>
 8042f78:	1b64      	subs	r4, r4, r5
 8042f7a:	10a4      	asrs	r4, r4, #2
 8042f7c:	2600      	movs	r6, #0
 8042f7e:	42a6      	cmp	r6, r4
 8042f80:	d105      	bne.n	8042f8e <__libc_init_array+0x2e>
 8042f82:	bd70      	pop	{r4, r5, r6, pc}
 8042f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8042f88:	4798      	blx	r3
 8042f8a:	3601      	adds	r6, #1
 8042f8c:	e7ee      	b.n	8042f6c <__libc_init_array+0xc>
 8042f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8042f92:	4798      	blx	r3
 8042f94:	3601      	adds	r6, #1
 8042f96:	e7f2      	b.n	8042f7e <__libc_init_array+0x1e>
 8042f98:	08042ff8 	.word	0x08042ff8
 8042f9c:	08042ff8 	.word	0x08042ff8
 8042fa0:	08042ff8 	.word	0x08042ff8
 8042fa4:	08042ffc 	.word	0x08042ffc

08042fa8 <_init>:
 8042fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042faa:	bf00      	nop
 8042fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042fae:	bc08      	pop	{r3}
 8042fb0:	469e      	mov	lr, r3
 8042fb2:	4770      	bx	lr

08042fb4 <_fini>:
 8042fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042fb6:	bf00      	nop
 8042fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042fba:	bc08      	pop	{r3}
 8042fbc:	469e      	mov	lr, r3
 8042fbe:	4770      	bx	lr

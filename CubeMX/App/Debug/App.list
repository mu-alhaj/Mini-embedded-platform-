
App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003018  08040194  08040194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080431ac  080431ac  000041ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080431e4  080431e4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080431e4  080431e4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080431e4  080431e4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080431e4  080431e4  000041e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080431e8  080431e8  000041e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080431ec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000017c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000910f  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019dc  00000000  00000000  0000e14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  0000fb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000562  00000000  00000000  00010248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f609  00000000  00000000  000107aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b7f5  00000000  00000000  0002fdb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf9ea  00000000  00000000  0003b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000faf92  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ab0  00000000  00000000  000fafd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000fca88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040194 <__do_global_dtors_aux>:
 8040194:	b510      	push	{r4, lr}
 8040196:	4c05      	ldr	r4, [pc, #20]	@ (80401ac <__do_global_dtors_aux+0x18>)
 8040198:	7823      	ldrb	r3, [r4, #0]
 804019a:	b933      	cbnz	r3, 80401aa <__do_global_dtors_aux+0x16>
 804019c:	4b04      	ldr	r3, [pc, #16]	@ (80401b0 <__do_global_dtors_aux+0x1c>)
 804019e:	b113      	cbz	r3, 80401a6 <__do_global_dtors_aux+0x12>
 80401a0:	4804      	ldr	r0, [pc, #16]	@ (80401b4 <__do_global_dtors_aux+0x20>)
 80401a2:	f3af 8000 	nop.w
 80401a6:	2301      	movs	r3, #1
 80401a8:	7023      	strb	r3, [r4, #0]
 80401aa:	bd10      	pop	{r4, pc}
 80401ac:	2000000c 	.word	0x2000000c
 80401b0:	00000000 	.word	0x00000000
 80401b4:	08043194 	.word	0x08043194

080401b8 <frame_dummy>:
 80401b8:	b508      	push	{r3, lr}
 80401ba:	4b03      	ldr	r3, [pc, #12]	@ (80401c8 <frame_dummy+0x10>)
 80401bc:	b11b      	cbz	r3, 80401c6 <frame_dummy+0xe>
 80401be:	4903      	ldr	r1, [pc, #12]	@ (80401cc <frame_dummy+0x14>)
 80401c0:	4803      	ldr	r0, [pc, #12]	@ (80401d0 <frame_dummy+0x18>)
 80401c2:	f3af 8000 	nop.w
 80401c6:	bd08      	pop	{r3, pc}
 80401c8:	00000000 	.word	0x00000000
 80401cc:	20000010 	.word	0x20000010
 80401d0:	08043194 	.word	0x08043194

080401d4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80401d4:	b580      	push	{r7, lr}
 80401d6:	b08a      	sub	sp, #40	@ 0x28
 80401d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80401da:	f107 0314 	add.w	r3, r7, #20
 80401de:	2200      	movs	r2, #0
 80401e0:	601a      	str	r2, [r3, #0]
 80401e2:	605a      	str	r2, [r3, #4]
 80401e4:	609a      	str	r2, [r3, #8]
 80401e6:	60da      	str	r2, [r3, #12]
 80401e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80401ea:	4b4f      	ldr	r3, [pc, #316]	@ (8040328 <MX_GPIO_Init+0x154>)
 80401ec:	695b      	ldr	r3, [r3, #20]
 80401ee:	4a4e      	ldr	r2, [pc, #312]	@ (8040328 <MX_GPIO_Init+0x154>)
 80401f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80401f4:	6153      	str	r3, [r2, #20]
 80401f6:	4b4c      	ldr	r3, [pc, #304]	@ (8040328 <MX_GPIO_Init+0x154>)
 80401f8:	695b      	ldr	r3, [r3, #20]
 80401fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80401fe:	613b      	str	r3, [r7, #16]
 8040200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040202:	4b49      	ldr	r3, [pc, #292]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040204:	695b      	ldr	r3, [r3, #20]
 8040206:	4a48      	ldr	r2, [pc, #288]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040208:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 804020c:	6153      	str	r3, [r2, #20]
 804020e:	4b46      	ldr	r3, [pc, #280]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040210:	695b      	ldr	r3, [r3, #20]
 8040212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8040216:	60fb      	str	r3, [r7, #12]
 8040218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804021a:	4b43      	ldr	r3, [pc, #268]	@ (8040328 <MX_GPIO_Init+0x154>)
 804021c:	695b      	ldr	r3, [r3, #20]
 804021e:	4a42      	ldr	r2, [pc, #264]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8040224:	6153      	str	r3, [r2, #20]
 8040226:	4b40      	ldr	r3, [pc, #256]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040228:	695b      	ldr	r3, [r3, #20]
 804022a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804022e:	60bb      	str	r3, [r7, #8]
 8040230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040232:	4b3d      	ldr	r3, [pc, #244]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040234:	695b      	ldr	r3, [r3, #20]
 8040236:	4a3c      	ldr	r2, [pc, #240]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 804023c:	6153      	str	r3, [r2, #20]
 804023e:	4b3a      	ldr	r3, [pc, #232]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040240:	695b      	ldr	r3, [r3, #20]
 8040242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8040246:	607b      	str	r3, [r7, #4]
 8040248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 804024a:	4b37      	ldr	r3, [pc, #220]	@ (8040328 <MX_GPIO_Init+0x154>)
 804024c:	695b      	ldr	r3, [r3, #20]
 804024e:	4a36      	ldr	r2, [pc, #216]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040250:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8040254:	6153      	str	r3, [r2, #20]
 8040256:	4b34      	ldr	r3, [pc, #208]	@ (8040328 <MX_GPIO_Init+0x154>)
 8040258:	695b      	ldr	r3, [r3, #20]
 804025a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 804025e:	603b      	str	r3, [r7, #0]
 8040260:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8040262:	2200      	movs	r2, #0
 8040264:	2120      	movs	r1, #32
 8040266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 804026a:	f000 fcfb 	bl	8040c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 804026e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8040272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8040274:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8040278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804027a:	2300      	movs	r3, #0
 804027c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 804027e:	f107 0314 	add.w	r3, r7, #20
 8040282:	4619      	mov	r1, r3
 8040284:	4829      	ldr	r0, [pc, #164]	@ (804032c <MX_GPIO_Init+0x158>)
 8040286:	f000 fb63 	bl	8040950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 804028a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 804028e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8040290:	2303      	movs	r3, #3
 8040292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040294:	2300      	movs	r3, #0
 8040296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8040298:	f107 0314 	add.w	r3, r7, #20
 804029c:	4619      	mov	r1, r3
 804029e:	4823      	ldr	r0, [pc, #140]	@ (804032c <MX_GPIO_Init+0x158>)
 80402a0:	f000 fb56 	bl	8040950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80402a4:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 80402a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80402aa:	2303      	movs	r3, #3
 80402ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80402ae:	2300      	movs	r3, #0
 80402b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80402b2:	f107 0314 	add.w	r3, r7, #20
 80402b6:	4619      	mov	r1, r3
 80402b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80402bc:	f000 fb48 	bl	8040950 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80402c0:	2320      	movs	r3, #32
 80402c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80402c4:	2301      	movs	r3, #1
 80402c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80402c8:	2300      	movs	r3, #0
 80402ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80402cc:	2300      	movs	r3, #0
 80402ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80402d0:	f107 0314 	add.w	r3, r7, #20
 80402d4:	4619      	mov	r1, r3
 80402d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80402da:	f000 fb39 	bl	8040950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80402de:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80402e2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80402e4:	2303      	movs	r3, #3
 80402e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80402e8:	2300      	movs	r3, #0
 80402ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80402ec:	f107 0314 	add.w	r3, r7, #20
 80402f0:	4619      	mov	r1, r3
 80402f2:	480f      	ldr	r0, [pc, #60]	@ (8040330 <MX_GPIO_Init+0x15c>)
 80402f4:	f000 fb2c 	bl	8040950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80402f8:	2304      	movs	r3, #4
 80402fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80402fc:	2303      	movs	r3, #3
 80402fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040300:	2300      	movs	r3, #0
 8040302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040304:	f107 0314 	add.w	r3, r7, #20
 8040308:	4619      	mov	r1, r3
 804030a:	480a      	ldr	r0, [pc, #40]	@ (8040334 <MX_GPIO_Init+0x160>)
 804030c:	f000 fb20 	bl	8040950 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8040310:	2200      	movs	r2, #0
 8040312:	2100      	movs	r1, #0
 8040314:	2028      	movs	r0, #40	@ 0x28
 8040316:	f000 fae4 	bl	80408e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 804031a:	2028      	movs	r0, #40	@ 0x28
 804031c:	f000 fafd 	bl	804091a <HAL_NVIC_EnableIRQ>

}
 8040320:	bf00      	nop
 8040322:	3728      	adds	r7, #40	@ 0x28
 8040324:	46bd      	mov	sp, r7
 8040326:	bd80      	pop	{r7, pc}
 8040328:	40021000 	.word	0x40021000
 804032c:	48000800 	.word	0x48000800
 8040330:	48000400 	.word	0x48000400
 8040334:	48000c00 	.word	0x48000c00

08040338 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8040338:	b480      	push	{r7}
 804033a:	b083      	sub	sp, #12
 804033c:	af00      	add	r7, sp, #0
 804033e:	4603      	mov	r3, r0
 8040340:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == B1_Pin )
	{
		// do something.
	}
}
 8040342:	bf00      	nop
 8040344:	370c      	adds	r7, #12
 8040346:	46bd      	mov	sp, r7
 8040348:	f85d 7b04 	ldr.w	r7, [sp], #4
 804034c:	4770      	bx	lr
	...

08040350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040350:	b580      	push	{r7, lr}
 8040352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040354:	f000 f984 	bl	8040660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040358:	f000 f810 	bl	804037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 804035c:	f7ff ff3a 	bl	80401d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8040360:	f000 f8e2 	bl	8040528 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  scheduler_init();
 8040364:	f002 fdb0 	bl	8042ec8 <scheduler_init>
  scheduler_addTask( 50, led_run );
 8040368:	4903      	ldr	r1, [pc, #12]	@ (8040378 <main+0x28>)
 804036a:	2032      	movs	r0, #50	@ 0x32
 804036c:	f002 fe06 	bl	8042f7c <scheduler_addTask>
  scheduler_run();
 8040370:	f002 fe42 	bl	8042ff8 <scheduler_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8040374:	bf00      	nop
 8040376:	e7fd      	b.n	8040374 <main+0x24>
 8040378:	08042eb5 	.word	0x08042eb5

0804037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 804037c:	b580      	push	{r7, lr}
 804037e:	b0a6      	sub	sp, #152	@ 0x98
 8040380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040382:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8040386:	2228      	movs	r2, #40	@ 0x28
 8040388:	2100      	movs	r1, #0
 804038a:	4618      	mov	r0, r3
 804038c:	f002 fed6 	bl	804313c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040390:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8040394:	2200      	movs	r2, #0
 8040396:	601a      	str	r2, [r3, #0]
 8040398:	605a      	str	r2, [r3, #4]
 804039a:	609a      	str	r2, [r3, #8]
 804039c:	60da      	str	r2, [r3, #12]
 804039e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80403a0:	1d3b      	adds	r3, r7, #4
 80403a2:	2258      	movs	r2, #88	@ 0x58
 80403a4:	2100      	movs	r1, #0
 80403a6:	4618      	mov	r0, r3
 80403a8:	f002 fec8 	bl	804313c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80403ac:	2302      	movs	r3, #2
 80403ae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80403b0:	2301      	movs	r3, #1
 80403b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80403b4:	2310      	movs	r3, #16
 80403b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80403ba:	2302      	movs	r3, #2
 80403bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80403c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80403c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80403c8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80403cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80403d0:	2300      	movs	r3, #0
 80403d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80403d6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80403da:	4618      	mov	r0, r3
 80403dc:	f000 fc8c 	bl	8040cf8 <HAL_RCC_OscConfig>
 80403e0:	4603      	mov	r3, r0
 80403e2:	2b00      	cmp	r3, #0
 80403e4:	d001      	beq.n	80403ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80403e6:	f000 f827 	bl	8040438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80403ea:	230f      	movs	r3, #15
 80403ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80403ee:	2302      	movs	r3, #2
 80403f0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80403f2:	2300      	movs	r3, #0
 80403f4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80403f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80403fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80403fc:	2300      	movs	r3, #0
 80403fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8040400:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8040404:	2102      	movs	r1, #2
 8040406:	4618      	mov	r0, r3
 8040408:	f001 fcca 	bl	8041da0 <HAL_RCC_ClockConfig>
 804040c:	4603      	mov	r3, r0
 804040e:	2b00      	cmp	r3, #0
 8040410:	d001      	beq.n	8040416 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8040412:	f000 f811 	bl	8040438 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8040416:	2302      	movs	r3, #2
 8040418:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 804041a:	2300      	movs	r3, #0
 804041c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 804041e:	1d3b      	adds	r3, r7, #4
 8040420:	4618      	mov	r0, r3
 8040422:	f001 fedd 	bl	80421e0 <HAL_RCCEx_PeriphCLKConfig>
 8040426:	4603      	mov	r3, r0
 8040428:	2b00      	cmp	r3, #0
 804042a:	d001      	beq.n	8040430 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 804042c:	f000 f804 	bl	8040438 <Error_Handler>
  }
}
 8040430:	bf00      	nop
 8040432:	3798      	adds	r7, #152	@ 0x98
 8040434:	46bd      	mov	sp, r7
 8040436:	bd80      	pop	{r7, pc}

08040438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040438:	b480      	push	{r7}
 804043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 804043c:	b672      	cpsid	i
}
 804043e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040440:	bf00      	nop
 8040442:	e7fd      	b.n	8040440 <Error_Handler+0x8>

08040444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040444:	b580      	push	{r7, lr}
 8040446:	b082      	sub	sp, #8
 8040448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804044a:	4b0f      	ldr	r3, [pc, #60]	@ (8040488 <HAL_MspInit+0x44>)
 804044c:	699b      	ldr	r3, [r3, #24]
 804044e:	4a0e      	ldr	r2, [pc, #56]	@ (8040488 <HAL_MspInit+0x44>)
 8040450:	f043 0301 	orr.w	r3, r3, #1
 8040454:	6193      	str	r3, [r2, #24]
 8040456:	4b0c      	ldr	r3, [pc, #48]	@ (8040488 <HAL_MspInit+0x44>)
 8040458:	699b      	ldr	r3, [r3, #24]
 804045a:	f003 0301 	and.w	r3, r3, #1
 804045e:	607b      	str	r3, [r7, #4]
 8040460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040462:	4b09      	ldr	r3, [pc, #36]	@ (8040488 <HAL_MspInit+0x44>)
 8040464:	69db      	ldr	r3, [r3, #28]
 8040466:	4a08      	ldr	r2, [pc, #32]	@ (8040488 <HAL_MspInit+0x44>)
 8040468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 804046c:	61d3      	str	r3, [r2, #28]
 804046e:	4b06      	ldr	r3, [pc, #24]	@ (8040488 <HAL_MspInit+0x44>)
 8040470:	69db      	ldr	r3, [r3, #28]
 8040472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8040476:	603b      	str	r3, [r7, #0]
 8040478:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 804047a:	2007      	movs	r0, #7
 804047c:	f000 fa26 	bl	80408cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040480:	bf00      	nop
 8040482:	3708      	adds	r7, #8
 8040484:	46bd      	mov	sp, r7
 8040486:	bd80      	pop	{r7, pc}
 8040488:	40021000 	.word	0x40021000

0804048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 804048c:	b480      	push	{r7}
 804048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8040490:	bf00      	nop
 8040492:	e7fd      	b.n	8040490 <NMI_Handler+0x4>

08040494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040494:	b480      	push	{r7}
 8040496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040498:	bf00      	nop
 804049a:	e7fd      	b.n	8040498 <HardFault_Handler+0x4>

0804049c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 804049c:	b480      	push	{r7}
 804049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80404a0:	bf00      	nop
 80404a2:	e7fd      	b.n	80404a0 <MemManage_Handler+0x4>

080404a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80404a4:	b480      	push	{r7}
 80404a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80404a8:	bf00      	nop
 80404aa:	e7fd      	b.n	80404a8 <BusFault_Handler+0x4>

080404ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80404ac:	b480      	push	{r7}
 80404ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80404b0:	bf00      	nop
 80404b2:	e7fd      	b.n	80404b0 <UsageFault_Handler+0x4>

080404b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80404b4:	b480      	push	{r7}
 80404b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80404b8:	bf00      	nop
 80404ba:	46bd      	mov	sp, r7
 80404bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80404c0:	4770      	bx	lr

080404c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80404c2:	b480      	push	{r7}
 80404c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80404c6:	bf00      	nop
 80404c8:	46bd      	mov	sp, r7
 80404ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80404ce:	4770      	bx	lr

080404d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80404d0:	b480      	push	{r7}
 80404d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80404d4:	bf00      	nop
 80404d6:	46bd      	mov	sp, r7
 80404d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80404dc:	4770      	bx	lr

080404de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80404de:	b580      	push	{r7, lr}
 80404e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80404e2:	f000 f903 	bl	80406ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80404e6:	bf00      	nop
 80404e8:	bd80      	pop	{r7, pc}

080404ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80404ea:	b580      	push	{r7, lr}
 80404ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80404ee:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80404f2:	f000 fbe9 	bl	8040cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80404f6:	bf00      	nop
 80404f8:	bd80      	pop	{r7, pc}
	...

080404fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80404fc:	b480      	push	{r7}
 80404fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040500:	4b07      	ldr	r3, [pc, #28]	@ (8040520 <SystemInit+0x24>)
 8040502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8040506:	4a06      	ldr	r2, [pc, #24]	@ (8040520 <SystemInit+0x24>)
 8040508:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 804050c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8040510:	4b03      	ldr	r3, [pc, #12]	@ (8040520 <SystemInit+0x24>)
 8040512:	4a04      	ldr	r2, [pc, #16]	@ (8040524 <SystemInit+0x28>)
 8040514:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8040516:	bf00      	nop
 8040518:	46bd      	mov	sp, r7
 804051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804051e:	4770      	bx	lr
 8040520:	e000ed00 	.word	0xe000ed00
 8040524:	08040000 	.word	0x08040000

08040528 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8040528:	b580      	push	{r7, lr}
 804052a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 804052c:	4b14      	ldr	r3, [pc, #80]	@ (8040580 <MX_USART2_UART_Init+0x58>)
 804052e:	4a15      	ldr	r2, [pc, #84]	@ (8040584 <MX_USART2_UART_Init+0x5c>)
 8040530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8040532:	4b13      	ldr	r3, [pc, #76]	@ (8040580 <MX_USART2_UART_Init+0x58>)
 8040534:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8040538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 804053a:	4b11      	ldr	r3, [pc, #68]	@ (8040580 <MX_USART2_UART_Init+0x58>)
 804053c:	2200      	movs	r2, #0
 804053e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8040540:	4b0f      	ldr	r3, [pc, #60]	@ (8040580 <MX_USART2_UART_Init+0x58>)
 8040542:	2200      	movs	r2, #0
 8040544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8040546:	4b0e      	ldr	r3, [pc, #56]	@ (8040580 <MX_USART2_UART_Init+0x58>)
 8040548:	2200      	movs	r2, #0
 804054a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 804054c:	4b0c      	ldr	r3, [pc, #48]	@ (8040580 <MX_USART2_UART_Init+0x58>)
 804054e:	220c      	movs	r2, #12
 8040550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040552:	4b0b      	ldr	r3, [pc, #44]	@ (8040580 <MX_USART2_UART_Init+0x58>)
 8040554:	2200      	movs	r2, #0
 8040556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8040558:	4b09      	ldr	r3, [pc, #36]	@ (8040580 <MX_USART2_UART_Init+0x58>)
 804055a:	2200      	movs	r2, #0
 804055c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 804055e:	4b08      	ldr	r3, [pc, #32]	@ (8040580 <MX_USART2_UART_Init+0x58>)
 8040560:	2200      	movs	r2, #0
 8040562:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040564:	4b06      	ldr	r3, [pc, #24]	@ (8040580 <MX_USART2_UART_Init+0x58>)
 8040566:	2200      	movs	r2, #0
 8040568:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 804056a:	4805      	ldr	r0, [pc, #20]	@ (8040580 <MX_USART2_UART_Init+0x58>)
 804056c:	f002 f856 	bl	804261c <HAL_UART_Init>
 8040570:	4603      	mov	r3, r0
 8040572:	2b00      	cmp	r3, #0
 8040574:	d001      	beq.n	804057a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8040576:	f7ff ff5f 	bl	8040438 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 804057a:	bf00      	nop
 804057c:	bd80      	pop	{r7, pc}
 804057e:	bf00      	nop
 8040580:	20000028 	.word	0x20000028
 8040584:	40004400 	.word	0x40004400

08040588 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8040588:	b580      	push	{r7, lr}
 804058a:	b08a      	sub	sp, #40	@ 0x28
 804058c:	af00      	add	r7, sp, #0
 804058e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040590:	f107 0314 	add.w	r3, r7, #20
 8040594:	2200      	movs	r2, #0
 8040596:	601a      	str	r2, [r3, #0]
 8040598:	605a      	str	r2, [r3, #4]
 804059a:	609a      	str	r2, [r3, #8]
 804059c:	60da      	str	r2, [r3, #12]
 804059e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80405a0:	687b      	ldr	r3, [r7, #4]
 80405a2:	681b      	ldr	r3, [r3, #0]
 80405a4:	4a17      	ldr	r2, [pc, #92]	@ (8040604 <HAL_UART_MspInit+0x7c>)
 80405a6:	4293      	cmp	r3, r2
 80405a8:	d128      	bne.n	80405fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80405aa:	4b17      	ldr	r3, [pc, #92]	@ (8040608 <HAL_UART_MspInit+0x80>)
 80405ac:	69db      	ldr	r3, [r3, #28]
 80405ae:	4a16      	ldr	r2, [pc, #88]	@ (8040608 <HAL_UART_MspInit+0x80>)
 80405b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80405b4:	61d3      	str	r3, [r2, #28]
 80405b6:	4b14      	ldr	r3, [pc, #80]	@ (8040608 <HAL_UART_MspInit+0x80>)
 80405b8:	69db      	ldr	r3, [r3, #28]
 80405ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80405be:	613b      	str	r3, [r7, #16]
 80405c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80405c2:	4b11      	ldr	r3, [pc, #68]	@ (8040608 <HAL_UART_MspInit+0x80>)
 80405c4:	695b      	ldr	r3, [r3, #20]
 80405c6:	4a10      	ldr	r2, [pc, #64]	@ (8040608 <HAL_UART_MspInit+0x80>)
 80405c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80405cc:	6153      	str	r3, [r2, #20]
 80405ce:	4b0e      	ldr	r3, [pc, #56]	@ (8040608 <HAL_UART_MspInit+0x80>)
 80405d0:	695b      	ldr	r3, [r3, #20]
 80405d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80405d6:	60fb      	str	r3, [r7, #12]
 80405d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80405da:	230c      	movs	r3, #12
 80405dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80405de:	2302      	movs	r3, #2
 80405e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80405e2:	2300      	movs	r3, #0
 80405e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80405e6:	2300      	movs	r3, #0
 80405e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80405ea:	2307      	movs	r3, #7
 80405ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80405ee:	f107 0314 	add.w	r3, r7, #20
 80405f2:	4619      	mov	r1, r3
 80405f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80405f8:	f000 f9aa 	bl	8040950 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80405fc:	bf00      	nop
 80405fe:	3728      	adds	r7, #40	@ 0x28
 8040600:	46bd      	mov	sp, r7
 8040602:	bd80      	pop	{r7, pc}
 8040604:	40004400 	.word	0x40004400
 8040608:	40021000 	.word	0x40021000

0804060c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 804060c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8040644 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8040610:	f7ff ff74 	bl	80404fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040614:	480c      	ldr	r0, [pc, #48]	@ (8040648 <LoopForever+0x6>)
  ldr r1, =_edata
 8040616:	490d      	ldr	r1, [pc, #52]	@ (804064c <LoopForever+0xa>)
  ldr r2, =_sidata
 8040618:	4a0d      	ldr	r2, [pc, #52]	@ (8040650 <LoopForever+0xe>)
  movs r3, #0
 804061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 804061c:	e002      	b.n	8040624 <LoopCopyDataInit>

0804061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 804061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040622:	3304      	adds	r3, #4

08040624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040628:	d3f9      	bcc.n	804061e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 804062a:	4a0a      	ldr	r2, [pc, #40]	@ (8040654 <LoopForever+0x12>)
  ldr r4, =_ebss
 804062c:	4c0a      	ldr	r4, [pc, #40]	@ (8040658 <LoopForever+0x16>)
  movs r3, #0
 804062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040630:	e001      	b.n	8040636 <LoopFillZerobss>

08040632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040634:	3204      	adds	r2, #4

08040636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040638:	d3fb      	bcc.n	8040632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 804063a:	f002 fd87 	bl	804314c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 804063e:	f7ff fe87 	bl	8040350 <main>

08040642 <LoopForever>:

LoopForever:
    b LoopForever
 8040642:	e7fe      	b.n	8040642 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8040644:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8040648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 804064c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8040650:	080431ec 	.word	0x080431ec
  ldr r2, =_sbss
 8040654:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8040658:	20000188 	.word	0x20000188

0804065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 804065c:	e7fe      	b.n	804065c <ADC1_2_IRQHandler>
	...

08040660 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040660:	b580      	push	{r7, lr}
 8040662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8040664:	4b08      	ldr	r3, [pc, #32]	@ (8040688 <HAL_Init+0x28>)
 8040666:	681b      	ldr	r3, [r3, #0]
 8040668:	4a07      	ldr	r2, [pc, #28]	@ (8040688 <HAL_Init+0x28>)
 804066a:	f043 0310 	orr.w	r3, r3, #16
 804066e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040670:	2003      	movs	r0, #3
 8040672:	f000 f92b 	bl	80408cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040676:	2000      	movs	r0, #0
 8040678:	f000 f808 	bl	804068c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 804067c:	f7ff fee2 	bl	8040444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040680:	2300      	movs	r3, #0
}
 8040682:	4618      	mov	r0, r3
 8040684:	bd80      	pop	{r7, pc}
 8040686:	bf00      	nop
 8040688:	40022000 	.word	0x40022000

0804068c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 804068c:	b580      	push	{r7, lr}
 804068e:	b082      	sub	sp, #8
 8040690:	af00      	add	r7, sp, #0
 8040692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040694:	4b12      	ldr	r3, [pc, #72]	@ (80406e0 <HAL_InitTick+0x54>)
 8040696:	681a      	ldr	r2, [r3, #0]
 8040698:	4b12      	ldr	r3, [pc, #72]	@ (80406e4 <HAL_InitTick+0x58>)
 804069a:	781b      	ldrb	r3, [r3, #0]
 804069c:	4619      	mov	r1, r3
 804069e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80406a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80406a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80406aa:	4618      	mov	r0, r3
 80406ac:	f000 f943 	bl	8040936 <HAL_SYSTICK_Config>
 80406b0:	4603      	mov	r3, r0
 80406b2:	2b00      	cmp	r3, #0
 80406b4:	d001      	beq.n	80406ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80406b6:	2301      	movs	r3, #1
 80406b8:	e00e      	b.n	80406d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80406ba:	687b      	ldr	r3, [r7, #4]
 80406bc:	2b0f      	cmp	r3, #15
 80406be:	d80a      	bhi.n	80406d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80406c0:	2200      	movs	r2, #0
 80406c2:	6879      	ldr	r1, [r7, #4]
 80406c4:	f04f 30ff 	mov.w	r0, #4294967295
 80406c8:	f000 f90b 	bl	80408e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80406cc:	4a06      	ldr	r2, [pc, #24]	@ (80406e8 <HAL_InitTick+0x5c>)
 80406ce:	687b      	ldr	r3, [r7, #4]
 80406d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80406d2:	2300      	movs	r3, #0
 80406d4:	e000      	b.n	80406d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80406d6:	2301      	movs	r3, #1
}
 80406d8:	4618      	mov	r0, r3
 80406da:	3708      	adds	r7, #8
 80406dc:	46bd      	mov	sp, r7
 80406de:	bd80      	pop	{r7, pc}
 80406e0:	20000000 	.word	0x20000000
 80406e4:	20000008 	.word	0x20000008
 80406e8:	20000004 	.word	0x20000004

080406ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80406ec:	b480      	push	{r7}
 80406ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80406f0:	4b06      	ldr	r3, [pc, #24]	@ (804070c <HAL_IncTick+0x20>)
 80406f2:	781b      	ldrb	r3, [r3, #0]
 80406f4:	461a      	mov	r2, r3
 80406f6:	4b06      	ldr	r3, [pc, #24]	@ (8040710 <HAL_IncTick+0x24>)
 80406f8:	681b      	ldr	r3, [r3, #0]
 80406fa:	4413      	add	r3, r2
 80406fc:	4a04      	ldr	r2, [pc, #16]	@ (8040710 <HAL_IncTick+0x24>)
 80406fe:	6013      	str	r3, [r2, #0]
}
 8040700:	bf00      	nop
 8040702:	46bd      	mov	sp, r7
 8040704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040708:	4770      	bx	lr
 804070a:	bf00      	nop
 804070c:	20000008 	.word	0x20000008
 8040710:	200000b0 	.word	0x200000b0

08040714 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040714:	b480      	push	{r7}
 8040716:	af00      	add	r7, sp, #0
  return uwTick;  
 8040718:	4b03      	ldr	r3, [pc, #12]	@ (8040728 <HAL_GetTick+0x14>)
 804071a:	681b      	ldr	r3, [r3, #0]
}
 804071c:	4618      	mov	r0, r3
 804071e:	46bd      	mov	sp, r7
 8040720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040724:	4770      	bx	lr
 8040726:	bf00      	nop
 8040728:	200000b0 	.word	0x200000b0

0804072c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 804072c:	b480      	push	{r7}
 804072e:	b085      	sub	sp, #20
 8040730:	af00      	add	r7, sp, #0
 8040732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040734:	687b      	ldr	r3, [r7, #4]
 8040736:	f003 0307 	and.w	r3, r3, #7
 804073a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 804073c:	4b0c      	ldr	r3, [pc, #48]	@ (8040770 <__NVIC_SetPriorityGrouping+0x44>)
 804073e:	68db      	ldr	r3, [r3, #12]
 8040740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040742:	68ba      	ldr	r2, [r7, #8]
 8040744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8040748:	4013      	ands	r3, r2
 804074a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 804074c:	68fb      	ldr	r3, [r7, #12]
 804074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040750:	68bb      	ldr	r3, [r7, #8]
 8040752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8040758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804075c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804075e:	4a04      	ldr	r2, [pc, #16]	@ (8040770 <__NVIC_SetPriorityGrouping+0x44>)
 8040760:	68bb      	ldr	r3, [r7, #8]
 8040762:	60d3      	str	r3, [r2, #12]
}
 8040764:	bf00      	nop
 8040766:	3714      	adds	r7, #20
 8040768:	46bd      	mov	sp, r7
 804076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804076e:	4770      	bx	lr
 8040770:	e000ed00 	.word	0xe000ed00

08040774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040774:	b480      	push	{r7}
 8040776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040778:	4b04      	ldr	r3, [pc, #16]	@ (804078c <__NVIC_GetPriorityGrouping+0x18>)
 804077a:	68db      	ldr	r3, [r3, #12]
 804077c:	0a1b      	lsrs	r3, r3, #8
 804077e:	f003 0307 	and.w	r3, r3, #7
}
 8040782:	4618      	mov	r0, r3
 8040784:	46bd      	mov	sp, r7
 8040786:	f85d 7b04 	ldr.w	r7, [sp], #4
 804078a:	4770      	bx	lr
 804078c:	e000ed00 	.word	0xe000ed00

08040790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040790:	b480      	push	{r7}
 8040792:	b083      	sub	sp, #12
 8040794:	af00      	add	r7, sp, #0
 8040796:	4603      	mov	r3, r0
 8040798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 804079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804079e:	2b00      	cmp	r3, #0
 80407a0:	db0b      	blt.n	80407ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80407a2:	79fb      	ldrb	r3, [r7, #7]
 80407a4:	f003 021f 	and.w	r2, r3, #31
 80407a8:	4907      	ldr	r1, [pc, #28]	@ (80407c8 <__NVIC_EnableIRQ+0x38>)
 80407aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80407ae:	095b      	lsrs	r3, r3, #5
 80407b0:	2001      	movs	r0, #1
 80407b2:	fa00 f202 	lsl.w	r2, r0, r2
 80407b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80407ba:	bf00      	nop
 80407bc:	370c      	adds	r7, #12
 80407be:	46bd      	mov	sp, r7
 80407c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407c4:	4770      	bx	lr
 80407c6:	bf00      	nop
 80407c8:	e000e100 	.word	0xe000e100

080407cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80407cc:	b480      	push	{r7}
 80407ce:	b083      	sub	sp, #12
 80407d0:	af00      	add	r7, sp, #0
 80407d2:	4603      	mov	r3, r0
 80407d4:	6039      	str	r1, [r7, #0]
 80407d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80407d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80407dc:	2b00      	cmp	r3, #0
 80407de:	db0a      	blt.n	80407f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80407e0:	683b      	ldr	r3, [r7, #0]
 80407e2:	b2da      	uxtb	r2, r3
 80407e4:	490c      	ldr	r1, [pc, #48]	@ (8040818 <__NVIC_SetPriority+0x4c>)
 80407e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80407ea:	0112      	lsls	r2, r2, #4
 80407ec:	b2d2      	uxtb	r2, r2
 80407ee:	440b      	add	r3, r1
 80407f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80407f4:	e00a      	b.n	804080c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80407f6:	683b      	ldr	r3, [r7, #0]
 80407f8:	b2da      	uxtb	r2, r3
 80407fa:	4908      	ldr	r1, [pc, #32]	@ (804081c <__NVIC_SetPriority+0x50>)
 80407fc:	79fb      	ldrb	r3, [r7, #7]
 80407fe:	f003 030f 	and.w	r3, r3, #15
 8040802:	3b04      	subs	r3, #4
 8040804:	0112      	lsls	r2, r2, #4
 8040806:	b2d2      	uxtb	r2, r2
 8040808:	440b      	add	r3, r1
 804080a:	761a      	strb	r2, [r3, #24]
}
 804080c:	bf00      	nop
 804080e:	370c      	adds	r7, #12
 8040810:	46bd      	mov	sp, r7
 8040812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040816:	4770      	bx	lr
 8040818:	e000e100 	.word	0xe000e100
 804081c:	e000ed00 	.word	0xe000ed00

08040820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040820:	b480      	push	{r7}
 8040822:	b089      	sub	sp, #36	@ 0x24
 8040824:	af00      	add	r7, sp, #0
 8040826:	60f8      	str	r0, [r7, #12]
 8040828:	60b9      	str	r1, [r7, #8]
 804082a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 804082c:	68fb      	ldr	r3, [r7, #12]
 804082e:	f003 0307 	and.w	r3, r3, #7
 8040832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040834:	69fb      	ldr	r3, [r7, #28]
 8040836:	f1c3 0307 	rsb	r3, r3, #7
 804083a:	2b04      	cmp	r3, #4
 804083c:	bf28      	it	cs
 804083e:	2304      	movcs	r3, #4
 8040840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040842:	69fb      	ldr	r3, [r7, #28]
 8040844:	3304      	adds	r3, #4
 8040846:	2b06      	cmp	r3, #6
 8040848:	d902      	bls.n	8040850 <NVIC_EncodePriority+0x30>
 804084a:	69fb      	ldr	r3, [r7, #28]
 804084c:	3b03      	subs	r3, #3
 804084e:	e000      	b.n	8040852 <NVIC_EncodePriority+0x32>
 8040850:	2300      	movs	r3, #0
 8040852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040854:	f04f 32ff 	mov.w	r2, #4294967295
 8040858:	69bb      	ldr	r3, [r7, #24]
 804085a:	fa02 f303 	lsl.w	r3, r2, r3
 804085e:	43da      	mvns	r2, r3
 8040860:	68bb      	ldr	r3, [r7, #8]
 8040862:	401a      	ands	r2, r3
 8040864:	697b      	ldr	r3, [r7, #20]
 8040866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040868:	f04f 31ff 	mov.w	r1, #4294967295
 804086c:	697b      	ldr	r3, [r7, #20]
 804086e:	fa01 f303 	lsl.w	r3, r1, r3
 8040872:	43d9      	mvns	r1, r3
 8040874:	687b      	ldr	r3, [r7, #4]
 8040876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040878:	4313      	orrs	r3, r2
         );
}
 804087a:	4618      	mov	r0, r3
 804087c:	3724      	adds	r7, #36	@ 0x24
 804087e:	46bd      	mov	sp, r7
 8040880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040884:	4770      	bx	lr
	...

08040888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040888:	b580      	push	{r7, lr}
 804088a:	b082      	sub	sp, #8
 804088c:	af00      	add	r7, sp, #0
 804088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040890:	687b      	ldr	r3, [r7, #4]
 8040892:	3b01      	subs	r3, #1
 8040894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8040898:	d301      	bcc.n	804089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 804089a:	2301      	movs	r3, #1
 804089c:	e00f      	b.n	80408be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 804089e:	4a0a      	ldr	r2, [pc, #40]	@ (80408c8 <SysTick_Config+0x40>)
 80408a0:	687b      	ldr	r3, [r7, #4]
 80408a2:	3b01      	subs	r3, #1
 80408a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80408a6:	210f      	movs	r1, #15
 80408a8:	f04f 30ff 	mov.w	r0, #4294967295
 80408ac:	f7ff ff8e 	bl	80407cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80408b0:	4b05      	ldr	r3, [pc, #20]	@ (80408c8 <SysTick_Config+0x40>)
 80408b2:	2200      	movs	r2, #0
 80408b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80408b6:	4b04      	ldr	r3, [pc, #16]	@ (80408c8 <SysTick_Config+0x40>)
 80408b8:	2207      	movs	r2, #7
 80408ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80408bc:	2300      	movs	r3, #0
}
 80408be:	4618      	mov	r0, r3
 80408c0:	3708      	adds	r7, #8
 80408c2:	46bd      	mov	sp, r7
 80408c4:	bd80      	pop	{r7, pc}
 80408c6:	bf00      	nop
 80408c8:	e000e010 	.word	0xe000e010

080408cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80408cc:	b580      	push	{r7, lr}
 80408ce:	b082      	sub	sp, #8
 80408d0:	af00      	add	r7, sp, #0
 80408d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80408d4:	6878      	ldr	r0, [r7, #4]
 80408d6:	f7ff ff29 	bl	804072c <__NVIC_SetPriorityGrouping>
}
 80408da:	bf00      	nop
 80408dc:	3708      	adds	r7, #8
 80408de:	46bd      	mov	sp, r7
 80408e0:	bd80      	pop	{r7, pc}

080408e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80408e2:	b580      	push	{r7, lr}
 80408e4:	b086      	sub	sp, #24
 80408e6:	af00      	add	r7, sp, #0
 80408e8:	4603      	mov	r3, r0
 80408ea:	60b9      	str	r1, [r7, #8]
 80408ec:	607a      	str	r2, [r7, #4]
 80408ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80408f0:	2300      	movs	r3, #0
 80408f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80408f4:	f7ff ff3e 	bl	8040774 <__NVIC_GetPriorityGrouping>
 80408f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80408fa:	687a      	ldr	r2, [r7, #4]
 80408fc:	68b9      	ldr	r1, [r7, #8]
 80408fe:	6978      	ldr	r0, [r7, #20]
 8040900:	f7ff ff8e 	bl	8040820 <NVIC_EncodePriority>
 8040904:	4602      	mov	r2, r0
 8040906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804090a:	4611      	mov	r1, r2
 804090c:	4618      	mov	r0, r3
 804090e:	f7ff ff5d 	bl	80407cc <__NVIC_SetPriority>
}
 8040912:	bf00      	nop
 8040914:	3718      	adds	r7, #24
 8040916:	46bd      	mov	sp, r7
 8040918:	bd80      	pop	{r7, pc}

0804091a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 804091a:	b580      	push	{r7, lr}
 804091c:	b082      	sub	sp, #8
 804091e:	af00      	add	r7, sp, #0
 8040920:	4603      	mov	r3, r0
 8040922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040928:	4618      	mov	r0, r3
 804092a:	f7ff ff31 	bl	8040790 <__NVIC_EnableIRQ>
}
 804092e:	bf00      	nop
 8040930:	3708      	adds	r7, #8
 8040932:	46bd      	mov	sp, r7
 8040934:	bd80      	pop	{r7, pc}

08040936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040936:	b580      	push	{r7, lr}
 8040938:	b082      	sub	sp, #8
 804093a:	af00      	add	r7, sp, #0
 804093c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 804093e:	6878      	ldr	r0, [r7, #4]
 8040940:	f7ff ffa2 	bl	8040888 <SysTick_Config>
 8040944:	4603      	mov	r3, r0
}
 8040946:	4618      	mov	r0, r3
 8040948:	3708      	adds	r7, #8
 804094a:	46bd      	mov	sp, r7
 804094c:	bd80      	pop	{r7, pc}
	...

08040950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040950:	b480      	push	{r7}
 8040952:	b087      	sub	sp, #28
 8040954:	af00      	add	r7, sp, #0
 8040956:	6078      	str	r0, [r7, #4]
 8040958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 804095a:	2300      	movs	r3, #0
 804095c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 804095e:	e160      	b.n	8040c22 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8040960:	683b      	ldr	r3, [r7, #0]
 8040962:	681a      	ldr	r2, [r3, #0]
 8040964:	2101      	movs	r1, #1
 8040966:	697b      	ldr	r3, [r7, #20]
 8040968:	fa01 f303 	lsl.w	r3, r1, r3
 804096c:	4013      	ands	r3, r2
 804096e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8040970:	68fb      	ldr	r3, [r7, #12]
 8040972:	2b00      	cmp	r3, #0
 8040974:	f000 8152 	beq.w	8040c1c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8040978:	683b      	ldr	r3, [r7, #0]
 804097a:	685b      	ldr	r3, [r3, #4]
 804097c:	f003 0303 	and.w	r3, r3, #3
 8040980:	2b01      	cmp	r3, #1
 8040982:	d005      	beq.n	8040990 <HAL_GPIO_Init+0x40>
 8040984:	683b      	ldr	r3, [r7, #0]
 8040986:	685b      	ldr	r3, [r3, #4]
 8040988:	f003 0303 	and.w	r3, r3, #3
 804098c:	2b02      	cmp	r3, #2
 804098e:	d130      	bne.n	80409f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040990:	687b      	ldr	r3, [r7, #4]
 8040992:	689b      	ldr	r3, [r3, #8]
 8040994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8040996:	697b      	ldr	r3, [r7, #20]
 8040998:	005b      	lsls	r3, r3, #1
 804099a:	2203      	movs	r2, #3
 804099c:	fa02 f303 	lsl.w	r3, r2, r3
 80409a0:	43db      	mvns	r3, r3
 80409a2:	693a      	ldr	r2, [r7, #16]
 80409a4:	4013      	ands	r3, r2
 80409a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80409a8:	683b      	ldr	r3, [r7, #0]
 80409aa:	68da      	ldr	r2, [r3, #12]
 80409ac:	697b      	ldr	r3, [r7, #20]
 80409ae:	005b      	lsls	r3, r3, #1
 80409b0:	fa02 f303 	lsl.w	r3, r2, r3
 80409b4:	693a      	ldr	r2, [r7, #16]
 80409b6:	4313      	orrs	r3, r2
 80409b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80409ba:	687b      	ldr	r3, [r7, #4]
 80409bc:	693a      	ldr	r2, [r7, #16]
 80409be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80409c0:	687b      	ldr	r3, [r7, #4]
 80409c2:	685b      	ldr	r3, [r3, #4]
 80409c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80409c6:	2201      	movs	r2, #1
 80409c8:	697b      	ldr	r3, [r7, #20]
 80409ca:	fa02 f303 	lsl.w	r3, r2, r3
 80409ce:	43db      	mvns	r3, r3
 80409d0:	693a      	ldr	r2, [r7, #16]
 80409d2:	4013      	ands	r3, r2
 80409d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80409d6:	683b      	ldr	r3, [r7, #0]
 80409d8:	685b      	ldr	r3, [r3, #4]
 80409da:	091b      	lsrs	r3, r3, #4
 80409dc:	f003 0201 	and.w	r2, r3, #1
 80409e0:	697b      	ldr	r3, [r7, #20]
 80409e2:	fa02 f303 	lsl.w	r3, r2, r3
 80409e6:	693a      	ldr	r2, [r7, #16]
 80409e8:	4313      	orrs	r3, r2
 80409ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80409ec:	687b      	ldr	r3, [r7, #4]
 80409ee:	693a      	ldr	r2, [r7, #16]
 80409f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80409f2:	683b      	ldr	r3, [r7, #0]
 80409f4:	685b      	ldr	r3, [r3, #4]
 80409f6:	f003 0303 	and.w	r3, r3, #3
 80409fa:	2b03      	cmp	r3, #3
 80409fc:	d017      	beq.n	8040a2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80409fe:	687b      	ldr	r3, [r7, #4]
 8040a00:	68db      	ldr	r3, [r3, #12]
 8040a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8040a04:	697b      	ldr	r3, [r7, #20]
 8040a06:	005b      	lsls	r3, r3, #1
 8040a08:	2203      	movs	r2, #3
 8040a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8040a0e:	43db      	mvns	r3, r3
 8040a10:	693a      	ldr	r2, [r7, #16]
 8040a12:	4013      	ands	r3, r2
 8040a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8040a16:	683b      	ldr	r3, [r7, #0]
 8040a18:	689a      	ldr	r2, [r3, #8]
 8040a1a:	697b      	ldr	r3, [r7, #20]
 8040a1c:	005b      	lsls	r3, r3, #1
 8040a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8040a22:	693a      	ldr	r2, [r7, #16]
 8040a24:	4313      	orrs	r3, r2
 8040a26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8040a28:	687b      	ldr	r3, [r7, #4]
 8040a2a:	693a      	ldr	r2, [r7, #16]
 8040a2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040a2e:	683b      	ldr	r3, [r7, #0]
 8040a30:	685b      	ldr	r3, [r3, #4]
 8040a32:	f003 0303 	and.w	r3, r3, #3
 8040a36:	2b02      	cmp	r3, #2
 8040a38:	d123      	bne.n	8040a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8040a3a:	697b      	ldr	r3, [r7, #20]
 8040a3c:	08da      	lsrs	r2, r3, #3
 8040a3e:	687b      	ldr	r3, [r7, #4]
 8040a40:	3208      	adds	r2, #8
 8040a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8040a48:	697b      	ldr	r3, [r7, #20]
 8040a4a:	f003 0307 	and.w	r3, r3, #7
 8040a4e:	009b      	lsls	r3, r3, #2
 8040a50:	220f      	movs	r2, #15
 8040a52:	fa02 f303 	lsl.w	r3, r2, r3
 8040a56:	43db      	mvns	r3, r3
 8040a58:	693a      	ldr	r2, [r7, #16]
 8040a5a:	4013      	ands	r3, r2
 8040a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8040a5e:	683b      	ldr	r3, [r7, #0]
 8040a60:	691a      	ldr	r2, [r3, #16]
 8040a62:	697b      	ldr	r3, [r7, #20]
 8040a64:	f003 0307 	and.w	r3, r3, #7
 8040a68:	009b      	lsls	r3, r3, #2
 8040a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8040a6e:	693a      	ldr	r2, [r7, #16]
 8040a70:	4313      	orrs	r3, r2
 8040a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8040a74:	697b      	ldr	r3, [r7, #20]
 8040a76:	08da      	lsrs	r2, r3, #3
 8040a78:	687b      	ldr	r3, [r7, #4]
 8040a7a:	3208      	adds	r2, #8
 8040a7c:	6939      	ldr	r1, [r7, #16]
 8040a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040a82:	687b      	ldr	r3, [r7, #4]
 8040a84:	681b      	ldr	r3, [r3, #0]
 8040a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8040a88:	697b      	ldr	r3, [r7, #20]
 8040a8a:	005b      	lsls	r3, r3, #1
 8040a8c:	2203      	movs	r2, #3
 8040a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8040a92:	43db      	mvns	r3, r3
 8040a94:	693a      	ldr	r2, [r7, #16]
 8040a96:	4013      	ands	r3, r2
 8040a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8040a9a:	683b      	ldr	r3, [r7, #0]
 8040a9c:	685b      	ldr	r3, [r3, #4]
 8040a9e:	f003 0203 	and.w	r2, r3, #3
 8040aa2:	697b      	ldr	r3, [r7, #20]
 8040aa4:	005b      	lsls	r3, r3, #1
 8040aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8040aaa:	693a      	ldr	r2, [r7, #16]
 8040aac:	4313      	orrs	r3, r2
 8040aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8040ab0:	687b      	ldr	r3, [r7, #4]
 8040ab2:	693a      	ldr	r2, [r7, #16]
 8040ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8040ab6:	683b      	ldr	r3, [r7, #0]
 8040ab8:	685b      	ldr	r3, [r3, #4]
 8040aba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8040abe:	2b00      	cmp	r3, #0
 8040ac0:	f000 80ac 	beq.w	8040c1c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040ac4:	4b5e      	ldr	r3, [pc, #376]	@ (8040c40 <HAL_GPIO_Init+0x2f0>)
 8040ac6:	699b      	ldr	r3, [r3, #24]
 8040ac8:	4a5d      	ldr	r2, [pc, #372]	@ (8040c40 <HAL_GPIO_Init+0x2f0>)
 8040aca:	f043 0301 	orr.w	r3, r3, #1
 8040ace:	6193      	str	r3, [r2, #24]
 8040ad0:	4b5b      	ldr	r3, [pc, #364]	@ (8040c40 <HAL_GPIO_Init+0x2f0>)
 8040ad2:	699b      	ldr	r3, [r3, #24]
 8040ad4:	f003 0301 	and.w	r3, r3, #1
 8040ad8:	60bb      	str	r3, [r7, #8]
 8040ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8040adc:	4a59      	ldr	r2, [pc, #356]	@ (8040c44 <HAL_GPIO_Init+0x2f4>)
 8040ade:	697b      	ldr	r3, [r7, #20]
 8040ae0:	089b      	lsrs	r3, r3, #2
 8040ae2:	3302      	adds	r3, #2
 8040ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8040aea:	697b      	ldr	r3, [r7, #20]
 8040aec:	f003 0303 	and.w	r3, r3, #3
 8040af0:	009b      	lsls	r3, r3, #2
 8040af2:	220f      	movs	r2, #15
 8040af4:	fa02 f303 	lsl.w	r3, r2, r3
 8040af8:	43db      	mvns	r3, r3
 8040afa:	693a      	ldr	r2, [r7, #16]
 8040afc:	4013      	ands	r3, r2
 8040afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8040b00:	687b      	ldr	r3, [r7, #4]
 8040b02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8040b06:	d025      	beq.n	8040b54 <HAL_GPIO_Init+0x204>
 8040b08:	687b      	ldr	r3, [r7, #4]
 8040b0a:	4a4f      	ldr	r2, [pc, #316]	@ (8040c48 <HAL_GPIO_Init+0x2f8>)
 8040b0c:	4293      	cmp	r3, r2
 8040b0e:	d01f      	beq.n	8040b50 <HAL_GPIO_Init+0x200>
 8040b10:	687b      	ldr	r3, [r7, #4]
 8040b12:	4a4e      	ldr	r2, [pc, #312]	@ (8040c4c <HAL_GPIO_Init+0x2fc>)
 8040b14:	4293      	cmp	r3, r2
 8040b16:	d019      	beq.n	8040b4c <HAL_GPIO_Init+0x1fc>
 8040b18:	687b      	ldr	r3, [r7, #4]
 8040b1a:	4a4d      	ldr	r2, [pc, #308]	@ (8040c50 <HAL_GPIO_Init+0x300>)
 8040b1c:	4293      	cmp	r3, r2
 8040b1e:	d013      	beq.n	8040b48 <HAL_GPIO_Init+0x1f8>
 8040b20:	687b      	ldr	r3, [r7, #4]
 8040b22:	4a4c      	ldr	r2, [pc, #304]	@ (8040c54 <HAL_GPIO_Init+0x304>)
 8040b24:	4293      	cmp	r3, r2
 8040b26:	d00d      	beq.n	8040b44 <HAL_GPIO_Init+0x1f4>
 8040b28:	687b      	ldr	r3, [r7, #4]
 8040b2a:	4a4b      	ldr	r2, [pc, #300]	@ (8040c58 <HAL_GPIO_Init+0x308>)
 8040b2c:	4293      	cmp	r3, r2
 8040b2e:	d007      	beq.n	8040b40 <HAL_GPIO_Init+0x1f0>
 8040b30:	687b      	ldr	r3, [r7, #4]
 8040b32:	4a4a      	ldr	r2, [pc, #296]	@ (8040c5c <HAL_GPIO_Init+0x30c>)
 8040b34:	4293      	cmp	r3, r2
 8040b36:	d101      	bne.n	8040b3c <HAL_GPIO_Init+0x1ec>
 8040b38:	2306      	movs	r3, #6
 8040b3a:	e00c      	b.n	8040b56 <HAL_GPIO_Init+0x206>
 8040b3c:	2307      	movs	r3, #7
 8040b3e:	e00a      	b.n	8040b56 <HAL_GPIO_Init+0x206>
 8040b40:	2305      	movs	r3, #5
 8040b42:	e008      	b.n	8040b56 <HAL_GPIO_Init+0x206>
 8040b44:	2304      	movs	r3, #4
 8040b46:	e006      	b.n	8040b56 <HAL_GPIO_Init+0x206>
 8040b48:	2303      	movs	r3, #3
 8040b4a:	e004      	b.n	8040b56 <HAL_GPIO_Init+0x206>
 8040b4c:	2302      	movs	r3, #2
 8040b4e:	e002      	b.n	8040b56 <HAL_GPIO_Init+0x206>
 8040b50:	2301      	movs	r3, #1
 8040b52:	e000      	b.n	8040b56 <HAL_GPIO_Init+0x206>
 8040b54:	2300      	movs	r3, #0
 8040b56:	697a      	ldr	r2, [r7, #20]
 8040b58:	f002 0203 	and.w	r2, r2, #3
 8040b5c:	0092      	lsls	r2, r2, #2
 8040b5e:	4093      	lsls	r3, r2
 8040b60:	693a      	ldr	r2, [r7, #16]
 8040b62:	4313      	orrs	r3, r2
 8040b64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8040b66:	4937      	ldr	r1, [pc, #220]	@ (8040c44 <HAL_GPIO_Init+0x2f4>)
 8040b68:	697b      	ldr	r3, [r7, #20]
 8040b6a:	089b      	lsrs	r3, r3, #2
 8040b6c:	3302      	adds	r3, #2
 8040b6e:	693a      	ldr	r2, [r7, #16]
 8040b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8040b74:	4b3a      	ldr	r3, [pc, #232]	@ (8040c60 <HAL_GPIO_Init+0x310>)
 8040b76:	689b      	ldr	r3, [r3, #8]
 8040b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b7a:	68fb      	ldr	r3, [r7, #12]
 8040b7c:	43db      	mvns	r3, r3
 8040b7e:	693a      	ldr	r2, [r7, #16]
 8040b80:	4013      	ands	r3, r2
 8040b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8040b84:	683b      	ldr	r3, [r7, #0]
 8040b86:	685b      	ldr	r3, [r3, #4]
 8040b88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8040b8c:	2b00      	cmp	r3, #0
 8040b8e:	d003      	beq.n	8040b98 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8040b90:	693a      	ldr	r2, [r7, #16]
 8040b92:	68fb      	ldr	r3, [r7, #12]
 8040b94:	4313      	orrs	r3, r2
 8040b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8040b98:	4a31      	ldr	r2, [pc, #196]	@ (8040c60 <HAL_GPIO_Init+0x310>)
 8040b9a:	693b      	ldr	r3, [r7, #16]
 8040b9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8040b9e:	4b30      	ldr	r3, [pc, #192]	@ (8040c60 <HAL_GPIO_Init+0x310>)
 8040ba0:	68db      	ldr	r3, [r3, #12]
 8040ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040ba4:	68fb      	ldr	r3, [r7, #12]
 8040ba6:	43db      	mvns	r3, r3
 8040ba8:	693a      	ldr	r2, [r7, #16]
 8040baa:	4013      	ands	r3, r2
 8040bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8040bae:	683b      	ldr	r3, [r7, #0]
 8040bb0:	685b      	ldr	r3, [r3, #4]
 8040bb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8040bb6:	2b00      	cmp	r3, #0
 8040bb8:	d003      	beq.n	8040bc2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8040bba:	693a      	ldr	r2, [r7, #16]
 8040bbc:	68fb      	ldr	r3, [r7, #12]
 8040bbe:	4313      	orrs	r3, r2
 8040bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8040bc2:	4a27      	ldr	r2, [pc, #156]	@ (8040c60 <HAL_GPIO_Init+0x310>)
 8040bc4:	693b      	ldr	r3, [r7, #16]
 8040bc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8040bc8:	4b25      	ldr	r3, [pc, #148]	@ (8040c60 <HAL_GPIO_Init+0x310>)
 8040bca:	685b      	ldr	r3, [r3, #4]
 8040bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040bce:	68fb      	ldr	r3, [r7, #12]
 8040bd0:	43db      	mvns	r3, r3
 8040bd2:	693a      	ldr	r2, [r7, #16]
 8040bd4:	4013      	ands	r3, r2
 8040bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8040bd8:	683b      	ldr	r3, [r7, #0]
 8040bda:	685b      	ldr	r3, [r3, #4]
 8040bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8040be0:	2b00      	cmp	r3, #0
 8040be2:	d003      	beq.n	8040bec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8040be4:	693a      	ldr	r2, [r7, #16]
 8040be6:	68fb      	ldr	r3, [r7, #12]
 8040be8:	4313      	orrs	r3, r2
 8040bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8040bec:	4a1c      	ldr	r2, [pc, #112]	@ (8040c60 <HAL_GPIO_Init+0x310>)
 8040bee:	693b      	ldr	r3, [r7, #16]
 8040bf0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8040bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8040c60 <HAL_GPIO_Init+0x310>)
 8040bf4:	681b      	ldr	r3, [r3, #0]
 8040bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040bf8:	68fb      	ldr	r3, [r7, #12]
 8040bfa:	43db      	mvns	r3, r3
 8040bfc:	693a      	ldr	r2, [r7, #16]
 8040bfe:	4013      	ands	r3, r2
 8040c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8040c02:	683b      	ldr	r3, [r7, #0]
 8040c04:	685b      	ldr	r3, [r3, #4]
 8040c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8040c0a:	2b00      	cmp	r3, #0
 8040c0c:	d003      	beq.n	8040c16 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8040c0e:	693a      	ldr	r2, [r7, #16]
 8040c10:	68fb      	ldr	r3, [r7, #12]
 8040c12:	4313      	orrs	r3, r2
 8040c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8040c16:	4a12      	ldr	r2, [pc, #72]	@ (8040c60 <HAL_GPIO_Init+0x310>)
 8040c18:	693b      	ldr	r3, [r7, #16]
 8040c1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8040c1c:	697b      	ldr	r3, [r7, #20]
 8040c1e:	3301      	adds	r3, #1
 8040c20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8040c22:	683b      	ldr	r3, [r7, #0]
 8040c24:	681a      	ldr	r2, [r3, #0]
 8040c26:	697b      	ldr	r3, [r7, #20]
 8040c28:	fa22 f303 	lsr.w	r3, r2, r3
 8040c2c:	2b00      	cmp	r3, #0
 8040c2e:	f47f ae97 	bne.w	8040960 <HAL_GPIO_Init+0x10>
  }
}
 8040c32:	bf00      	nop
 8040c34:	bf00      	nop
 8040c36:	371c      	adds	r7, #28
 8040c38:	46bd      	mov	sp, r7
 8040c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c3e:	4770      	bx	lr
 8040c40:	40021000 	.word	0x40021000
 8040c44:	40010000 	.word	0x40010000
 8040c48:	48000400 	.word	0x48000400
 8040c4c:	48000800 	.word	0x48000800
 8040c50:	48000c00 	.word	0x48000c00
 8040c54:	48001000 	.word	0x48001000
 8040c58:	48001400 	.word	0x48001400
 8040c5c:	48001800 	.word	0x48001800
 8040c60:	40010400 	.word	0x40010400

08040c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040c64:	b480      	push	{r7}
 8040c66:	b083      	sub	sp, #12
 8040c68:	af00      	add	r7, sp, #0
 8040c6a:	6078      	str	r0, [r7, #4]
 8040c6c:	460b      	mov	r3, r1
 8040c6e:	807b      	strh	r3, [r7, #2]
 8040c70:	4613      	mov	r3, r2
 8040c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8040c74:	787b      	ldrb	r3, [r7, #1]
 8040c76:	2b00      	cmp	r3, #0
 8040c78:	d003      	beq.n	8040c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8040c7a:	887a      	ldrh	r2, [r7, #2]
 8040c7c:	687b      	ldr	r3, [r7, #4]
 8040c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8040c80:	e002      	b.n	8040c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8040c82:	887a      	ldrh	r2, [r7, #2]
 8040c84:	687b      	ldr	r3, [r7, #4]
 8040c86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8040c88:	bf00      	nop
 8040c8a:	370c      	adds	r7, #12
 8040c8c:	46bd      	mov	sp, r7
 8040c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c92:	4770      	bx	lr

08040c94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8040c94:	b480      	push	{r7}
 8040c96:	b085      	sub	sp, #20
 8040c98:	af00      	add	r7, sp, #0
 8040c9a:	6078      	str	r0, [r7, #4]
 8040c9c:	460b      	mov	r3, r1
 8040c9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8040ca0:	687b      	ldr	r3, [r7, #4]
 8040ca2:	695b      	ldr	r3, [r3, #20]
 8040ca4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8040ca6:	887a      	ldrh	r2, [r7, #2]
 8040ca8:	68fb      	ldr	r3, [r7, #12]
 8040caa:	4013      	ands	r3, r2
 8040cac:	041a      	lsls	r2, r3, #16
 8040cae:	68fb      	ldr	r3, [r7, #12]
 8040cb0:	43d9      	mvns	r1, r3
 8040cb2:	887b      	ldrh	r3, [r7, #2]
 8040cb4:	400b      	ands	r3, r1
 8040cb6:	431a      	orrs	r2, r3
 8040cb8:	687b      	ldr	r3, [r7, #4]
 8040cba:	619a      	str	r2, [r3, #24]
}
 8040cbc:	bf00      	nop
 8040cbe:	3714      	adds	r7, #20
 8040cc0:	46bd      	mov	sp, r7
 8040cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cc6:	4770      	bx	lr

08040cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8040cc8:	b580      	push	{r7, lr}
 8040cca:	b082      	sub	sp, #8
 8040ccc:	af00      	add	r7, sp, #0
 8040cce:	4603      	mov	r3, r0
 8040cd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8040cd2:	4b08      	ldr	r3, [pc, #32]	@ (8040cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8040cd4:	695a      	ldr	r2, [r3, #20]
 8040cd6:	88fb      	ldrh	r3, [r7, #6]
 8040cd8:	4013      	ands	r3, r2
 8040cda:	2b00      	cmp	r3, #0
 8040cdc:	d006      	beq.n	8040cec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8040cde:	4a05      	ldr	r2, [pc, #20]	@ (8040cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8040ce0:	88fb      	ldrh	r3, [r7, #6]
 8040ce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8040ce4:	88fb      	ldrh	r3, [r7, #6]
 8040ce6:	4618      	mov	r0, r3
 8040ce8:	f7ff fb26 	bl	8040338 <HAL_GPIO_EXTI_Callback>
  }
}
 8040cec:	bf00      	nop
 8040cee:	3708      	adds	r7, #8
 8040cf0:	46bd      	mov	sp, r7
 8040cf2:	bd80      	pop	{r7, pc}
 8040cf4:	40010400 	.word	0x40010400

08040cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8040cf8:	b580      	push	{r7, lr}
 8040cfa:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8040cfe:	af00      	add	r7, sp, #0
 8040d00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040d04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040d08:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8040d0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040d0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040d12:	681b      	ldr	r3, [r3, #0]
 8040d14:	2b00      	cmp	r3, #0
 8040d16:	d102      	bne.n	8040d1e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8040d18:	2301      	movs	r3, #1
 8040d1a:	f001 b83a 	b.w	8041d92 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8040d1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040d22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040d26:	681b      	ldr	r3, [r3, #0]
 8040d28:	681b      	ldr	r3, [r3, #0]
 8040d2a:	f003 0301 	and.w	r3, r3, #1
 8040d2e:	2b00      	cmp	r3, #0
 8040d30:	f000 816f 	beq.w	8041012 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8040d34:	4bb5      	ldr	r3, [pc, #724]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040d36:	685b      	ldr	r3, [r3, #4]
 8040d38:	f003 030c 	and.w	r3, r3, #12
 8040d3c:	2b04      	cmp	r3, #4
 8040d3e:	d00c      	beq.n	8040d5a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8040d40:	4bb2      	ldr	r3, [pc, #712]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040d42:	685b      	ldr	r3, [r3, #4]
 8040d44:	f003 030c 	and.w	r3, r3, #12
 8040d48:	2b08      	cmp	r3, #8
 8040d4a:	d15c      	bne.n	8040e06 <HAL_RCC_OscConfig+0x10e>
 8040d4c:	4baf      	ldr	r3, [pc, #700]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040d4e:	685b      	ldr	r3, [r3, #4]
 8040d50:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8040d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8040d58:	d155      	bne.n	8040e06 <HAL_RCC_OscConfig+0x10e>
 8040d5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040d5e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8040d62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8040d66:	fa93 f3a3 	rbit	r3, r3
 8040d6a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8040d6e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8040d72:	fab3 f383 	clz	r3, r3
 8040d76:	b2db      	uxtb	r3, r3
 8040d78:	095b      	lsrs	r3, r3, #5
 8040d7a:	b2db      	uxtb	r3, r3
 8040d7c:	f043 0301 	orr.w	r3, r3, #1
 8040d80:	b2db      	uxtb	r3, r3
 8040d82:	2b01      	cmp	r3, #1
 8040d84:	d102      	bne.n	8040d8c <HAL_RCC_OscConfig+0x94>
 8040d86:	4ba1      	ldr	r3, [pc, #644]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040d88:	681b      	ldr	r3, [r3, #0]
 8040d8a:	e015      	b.n	8040db8 <HAL_RCC_OscConfig+0xc0>
 8040d8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040d90:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8040d94:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8040d98:	fa93 f3a3 	rbit	r3, r3
 8040d9c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8040da0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040da4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8040da8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8040dac:	fa93 f3a3 	rbit	r3, r3
 8040db0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8040db4:	4b95      	ldr	r3, [pc, #596]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8040db8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8040dbc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8040dc0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8040dc4:	fa92 f2a2 	rbit	r2, r2
 8040dc8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8040dcc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8040dd0:	fab2 f282 	clz	r2, r2
 8040dd4:	b2d2      	uxtb	r2, r2
 8040dd6:	f042 0220 	orr.w	r2, r2, #32
 8040dda:	b2d2      	uxtb	r2, r2
 8040ddc:	f002 021f 	and.w	r2, r2, #31
 8040de0:	2101      	movs	r1, #1
 8040de2:	fa01 f202 	lsl.w	r2, r1, r2
 8040de6:	4013      	ands	r3, r2
 8040de8:	2b00      	cmp	r3, #0
 8040dea:	f000 8111 	beq.w	8041010 <HAL_RCC_OscConfig+0x318>
 8040dee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040df2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040df6:	681b      	ldr	r3, [r3, #0]
 8040df8:	685b      	ldr	r3, [r3, #4]
 8040dfa:	2b00      	cmp	r3, #0
 8040dfc:	f040 8108 	bne.w	8041010 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8040e00:	2301      	movs	r3, #1
 8040e02:	f000 bfc6 	b.w	8041d92 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8040e06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040e0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040e0e:	681b      	ldr	r3, [r3, #0]
 8040e10:	685b      	ldr	r3, [r3, #4]
 8040e12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8040e16:	d106      	bne.n	8040e26 <HAL_RCC_OscConfig+0x12e>
 8040e18:	4b7c      	ldr	r3, [pc, #496]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e1a:	681b      	ldr	r3, [r3, #0]
 8040e1c:	4a7b      	ldr	r2, [pc, #492]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8040e22:	6013      	str	r3, [r2, #0]
 8040e24:	e036      	b.n	8040e94 <HAL_RCC_OscConfig+0x19c>
 8040e26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040e2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040e2e:	681b      	ldr	r3, [r3, #0]
 8040e30:	685b      	ldr	r3, [r3, #4]
 8040e32:	2b00      	cmp	r3, #0
 8040e34:	d10c      	bne.n	8040e50 <HAL_RCC_OscConfig+0x158>
 8040e36:	4b75      	ldr	r3, [pc, #468]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e38:	681b      	ldr	r3, [r3, #0]
 8040e3a:	4a74      	ldr	r2, [pc, #464]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8040e40:	6013      	str	r3, [r2, #0]
 8040e42:	4b72      	ldr	r3, [pc, #456]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e44:	681b      	ldr	r3, [r3, #0]
 8040e46:	4a71      	ldr	r2, [pc, #452]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8040e4c:	6013      	str	r3, [r2, #0]
 8040e4e:	e021      	b.n	8040e94 <HAL_RCC_OscConfig+0x19c>
 8040e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040e54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040e58:	681b      	ldr	r3, [r3, #0]
 8040e5a:	685b      	ldr	r3, [r3, #4]
 8040e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8040e60:	d10c      	bne.n	8040e7c <HAL_RCC_OscConfig+0x184>
 8040e62:	4b6a      	ldr	r3, [pc, #424]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e64:	681b      	ldr	r3, [r3, #0]
 8040e66:	4a69      	ldr	r2, [pc, #420]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8040e6c:	6013      	str	r3, [r2, #0]
 8040e6e:	4b67      	ldr	r3, [pc, #412]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e70:	681b      	ldr	r3, [r3, #0]
 8040e72:	4a66      	ldr	r2, [pc, #408]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8040e78:	6013      	str	r3, [r2, #0]
 8040e7a:	e00b      	b.n	8040e94 <HAL_RCC_OscConfig+0x19c>
 8040e7c:	4b63      	ldr	r3, [pc, #396]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e7e:	681b      	ldr	r3, [r3, #0]
 8040e80:	4a62      	ldr	r2, [pc, #392]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8040e86:	6013      	str	r3, [r2, #0]
 8040e88:	4b60      	ldr	r3, [pc, #384]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e8a:	681b      	ldr	r3, [r3, #0]
 8040e8c:	4a5f      	ldr	r2, [pc, #380]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8040e92:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8040e94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8040e98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8040e9c:	681b      	ldr	r3, [r3, #0]
 8040e9e:	685b      	ldr	r3, [r3, #4]
 8040ea0:	2b00      	cmp	r3, #0
 8040ea2:	d059      	beq.n	8040f58 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8040ea4:	f7ff fc36 	bl	8040714 <HAL_GetTick>
 8040ea8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8040eac:	e00a      	b.n	8040ec4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8040eae:	f7ff fc31 	bl	8040714 <HAL_GetTick>
 8040eb2:	4602      	mov	r2, r0
 8040eb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8040eb8:	1ad3      	subs	r3, r2, r3
 8040eba:	2b64      	cmp	r3, #100	@ 0x64
 8040ebc:	d902      	bls.n	8040ec4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8040ebe:	2303      	movs	r3, #3
 8040ec0:	f000 bf67 	b.w	8041d92 <HAL_RCC_OscConfig+0x109a>
 8040ec4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040ec8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8040ecc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8040ed0:	fa93 f3a3 	rbit	r3, r3
 8040ed4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8040ed8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8040edc:	fab3 f383 	clz	r3, r3
 8040ee0:	b2db      	uxtb	r3, r3
 8040ee2:	095b      	lsrs	r3, r3, #5
 8040ee4:	b2db      	uxtb	r3, r3
 8040ee6:	f043 0301 	orr.w	r3, r3, #1
 8040eea:	b2db      	uxtb	r3, r3
 8040eec:	2b01      	cmp	r3, #1
 8040eee:	d102      	bne.n	8040ef6 <HAL_RCC_OscConfig+0x1fe>
 8040ef0:	4b46      	ldr	r3, [pc, #280]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040ef2:	681b      	ldr	r3, [r3, #0]
 8040ef4:	e015      	b.n	8040f22 <HAL_RCC_OscConfig+0x22a>
 8040ef6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040efa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8040efe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8040f02:	fa93 f3a3 	rbit	r3, r3
 8040f06:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8040f0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040f0e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8040f12:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8040f16:	fa93 f3a3 	rbit	r3, r3
 8040f1a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8040f1e:	4b3b      	ldr	r3, [pc, #236]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8040f22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8040f26:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8040f2a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8040f2e:	fa92 f2a2 	rbit	r2, r2
 8040f32:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8040f36:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8040f3a:	fab2 f282 	clz	r2, r2
 8040f3e:	b2d2      	uxtb	r2, r2
 8040f40:	f042 0220 	orr.w	r2, r2, #32
 8040f44:	b2d2      	uxtb	r2, r2
 8040f46:	f002 021f 	and.w	r2, r2, #31
 8040f4a:	2101      	movs	r1, #1
 8040f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8040f50:	4013      	ands	r3, r2
 8040f52:	2b00      	cmp	r3, #0
 8040f54:	d0ab      	beq.n	8040eae <HAL_RCC_OscConfig+0x1b6>
 8040f56:	e05c      	b.n	8041012 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8040f58:	f7ff fbdc 	bl	8040714 <HAL_GetTick>
 8040f5c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8040f60:	e00a      	b.n	8040f78 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8040f62:	f7ff fbd7 	bl	8040714 <HAL_GetTick>
 8040f66:	4602      	mov	r2, r0
 8040f68:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8040f6c:	1ad3      	subs	r3, r2, r3
 8040f6e:	2b64      	cmp	r3, #100	@ 0x64
 8040f70:	d902      	bls.n	8040f78 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8040f72:	2303      	movs	r3, #3
 8040f74:	f000 bf0d 	b.w	8041d92 <HAL_RCC_OscConfig+0x109a>
 8040f78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040f7c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8040f80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8040f84:	fa93 f3a3 	rbit	r3, r3
 8040f88:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8040f8c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8040f90:	fab3 f383 	clz	r3, r3
 8040f94:	b2db      	uxtb	r3, r3
 8040f96:	095b      	lsrs	r3, r3, #5
 8040f98:	b2db      	uxtb	r3, r3
 8040f9a:	f043 0301 	orr.w	r3, r3, #1
 8040f9e:	b2db      	uxtb	r3, r3
 8040fa0:	2b01      	cmp	r3, #1
 8040fa2:	d102      	bne.n	8040faa <HAL_RCC_OscConfig+0x2b2>
 8040fa4:	4b19      	ldr	r3, [pc, #100]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040fa6:	681b      	ldr	r3, [r3, #0]
 8040fa8:	e015      	b.n	8040fd6 <HAL_RCC_OscConfig+0x2de>
 8040faa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040fae:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8040fb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8040fb6:	fa93 f3a3 	rbit	r3, r3
 8040fba:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8040fbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8040fc2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8040fc6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8040fca:	fa93 f3a3 	rbit	r3, r3
 8040fce:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8040fd2:	4b0e      	ldr	r3, [pc, #56]	@ (804100c <HAL_RCC_OscConfig+0x314>)
 8040fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8040fd6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8040fda:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8040fde:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8040fe2:	fa92 f2a2 	rbit	r2, r2
 8040fe6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8040fea:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8040fee:	fab2 f282 	clz	r2, r2
 8040ff2:	b2d2      	uxtb	r2, r2
 8040ff4:	f042 0220 	orr.w	r2, r2, #32
 8040ff8:	b2d2      	uxtb	r2, r2
 8040ffa:	f002 021f 	and.w	r2, r2, #31
 8040ffe:	2101      	movs	r1, #1
 8041000:	fa01 f202 	lsl.w	r2, r1, r2
 8041004:	4013      	ands	r3, r2
 8041006:	2b00      	cmp	r3, #0
 8041008:	d1ab      	bne.n	8040f62 <HAL_RCC_OscConfig+0x26a>
 804100a:	e002      	b.n	8041012 <HAL_RCC_OscConfig+0x31a>
 804100c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041016:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 804101a:	681b      	ldr	r3, [r3, #0]
 804101c:	681b      	ldr	r3, [r3, #0]
 804101e:	f003 0302 	and.w	r3, r3, #2
 8041022:	2b00      	cmp	r3, #0
 8041024:	f000 817f 	beq.w	8041326 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8041028:	4ba7      	ldr	r3, [pc, #668]	@ (80412c8 <HAL_RCC_OscConfig+0x5d0>)
 804102a:	685b      	ldr	r3, [r3, #4]
 804102c:	f003 030c 	and.w	r3, r3, #12
 8041030:	2b00      	cmp	r3, #0
 8041032:	d00c      	beq.n	804104e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8041034:	4ba4      	ldr	r3, [pc, #656]	@ (80412c8 <HAL_RCC_OscConfig+0x5d0>)
 8041036:	685b      	ldr	r3, [r3, #4]
 8041038:	f003 030c 	and.w	r3, r3, #12
 804103c:	2b08      	cmp	r3, #8
 804103e:	d173      	bne.n	8041128 <HAL_RCC_OscConfig+0x430>
 8041040:	4ba1      	ldr	r3, [pc, #644]	@ (80412c8 <HAL_RCC_OscConfig+0x5d0>)
 8041042:	685b      	ldr	r3, [r3, #4]
 8041044:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8041048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 804104c:	d16c      	bne.n	8041128 <HAL_RCC_OscConfig+0x430>
 804104e:	2302      	movs	r3, #2
 8041050:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041054:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8041058:	fa93 f3a3 	rbit	r3, r3
 804105c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8041060:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041064:	fab3 f383 	clz	r3, r3
 8041068:	b2db      	uxtb	r3, r3
 804106a:	095b      	lsrs	r3, r3, #5
 804106c:	b2db      	uxtb	r3, r3
 804106e:	f043 0301 	orr.w	r3, r3, #1
 8041072:	b2db      	uxtb	r3, r3
 8041074:	2b01      	cmp	r3, #1
 8041076:	d102      	bne.n	804107e <HAL_RCC_OscConfig+0x386>
 8041078:	4b93      	ldr	r3, [pc, #588]	@ (80412c8 <HAL_RCC_OscConfig+0x5d0>)
 804107a:	681b      	ldr	r3, [r3, #0]
 804107c:	e013      	b.n	80410a6 <HAL_RCC_OscConfig+0x3ae>
 804107e:	2302      	movs	r3, #2
 8041080:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041084:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8041088:	fa93 f3a3 	rbit	r3, r3
 804108c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8041090:	2302      	movs	r3, #2
 8041092:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8041096:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 804109a:	fa93 f3a3 	rbit	r3, r3
 804109e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80410a2:	4b89      	ldr	r3, [pc, #548]	@ (80412c8 <HAL_RCC_OscConfig+0x5d0>)
 80410a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80410a6:	2202      	movs	r2, #2
 80410a8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80410ac:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80410b0:	fa92 f2a2 	rbit	r2, r2
 80410b4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80410b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80410bc:	fab2 f282 	clz	r2, r2
 80410c0:	b2d2      	uxtb	r2, r2
 80410c2:	f042 0220 	orr.w	r2, r2, #32
 80410c6:	b2d2      	uxtb	r2, r2
 80410c8:	f002 021f 	and.w	r2, r2, #31
 80410cc:	2101      	movs	r1, #1
 80410ce:	fa01 f202 	lsl.w	r2, r1, r2
 80410d2:	4013      	ands	r3, r2
 80410d4:	2b00      	cmp	r3, #0
 80410d6:	d00a      	beq.n	80410ee <HAL_RCC_OscConfig+0x3f6>
 80410d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80410dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80410e0:	681b      	ldr	r3, [r3, #0]
 80410e2:	68db      	ldr	r3, [r3, #12]
 80410e4:	2b01      	cmp	r3, #1
 80410e6:	d002      	beq.n	80410ee <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80410e8:	2301      	movs	r3, #1
 80410ea:	f000 be52 	b.w	8041d92 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80410ee:	4b76      	ldr	r3, [pc, #472]	@ (80412c8 <HAL_RCC_OscConfig+0x5d0>)
 80410f0:	681b      	ldr	r3, [r3, #0]
 80410f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80410f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80410fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80410fe:	681b      	ldr	r3, [r3, #0]
 8041100:	691b      	ldr	r3, [r3, #16]
 8041102:	21f8      	movs	r1, #248	@ 0xf8
 8041104:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041108:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 804110c:	fa91 f1a1 	rbit	r1, r1
 8041110:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8041114:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8041118:	fab1 f181 	clz	r1, r1
 804111c:	b2c9      	uxtb	r1, r1
 804111e:	408b      	lsls	r3, r1
 8041120:	4969      	ldr	r1, [pc, #420]	@ (80412c8 <HAL_RCC_OscConfig+0x5d0>)
 8041122:	4313      	orrs	r3, r2
 8041124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041126:	e0fe      	b.n	8041326 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8041128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804112c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041130:	681b      	ldr	r3, [r3, #0]
 8041132:	68db      	ldr	r3, [r3, #12]
 8041134:	2b00      	cmp	r3, #0
 8041136:	f000 8088 	beq.w	804124a <HAL_RCC_OscConfig+0x552>
 804113a:	2301      	movs	r3, #1
 804113c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041140:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8041144:	fa93 f3a3 	rbit	r3, r3
 8041148:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 804114c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8041150:	fab3 f383 	clz	r3, r3
 8041154:	b2db      	uxtb	r3, r3
 8041156:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 804115a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 804115e:	009b      	lsls	r3, r3, #2
 8041160:	461a      	mov	r2, r3
 8041162:	2301      	movs	r3, #1
 8041164:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8041166:	f7ff fad5 	bl	8040714 <HAL_GetTick>
 804116a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804116e:	e00a      	b.n	8041186 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8041170:	f7ff fad0 	bl	8040714 <HAL_GetTick>
 8041174:	4602      	mov	r2, r0
 8041176:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 804117a:	1ad3      	subs	r3, r2, r3
 804117c:	2b02      	cmp	r3, #2
 804117e:	d902      	bls.n	8041186 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8041180:	2303      	movs	r3, #3
 8041182:	f000 be06 	b.w	8041d92 <HAL_RCC_OscConfig+0x109a>
 8041186:	2302      	movs	r3, #2
 8041188:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804118c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8041190:	fa93 f3a3 	rbit	r3, r3
 8041194:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8041198:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804119c:	fab3 f383 	clz	r3, r3
 80411a0:	b2db      	uxtb	r3, r3
 80411a2:	095b      	lsrs	r3, r3, #5
 80411a4:	b2db      	uxtb	r3, r3
 80411a6:	f043 0301 	orr.w	r3, r3, #1
 80411aa:	b2db      	uxtb	r3, r3
 80411ac:	2b01      	cmp	r3, #1
 80411ae:	d102      	bne.n	80411b6 <HAL_RCC_OscConfig+0x4be>
 80411b0:	4b45      	ldr	r3, [pc, #276]	@ (80412c8 <HAL_RCC_OscConfig+0x5d0>)
 80411b2:	681b      	ldr	r3, [r3, #0]
 80411b4:	e013      	b.n	80411de <HAL_RCC_OscConfig+0x4e6>
 80411b6:	2302      	movs	r3, #2
 80411b8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80411bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80411c0:	fa93 f3a3 	rbit	r3, r3
 80411c4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80411c8:	2302      	movs	r3, #2
 80411ca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80411ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80411d2:	fa93 f3a3 	rbit	r3, r3
 80411d6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80411da:	4b3b      	ldr	r3, [pc, #236]	@ (80412c8 <HAL_RCC_OscConfig+0x5d0>)
 80411dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80411de:	2202      	movs	r2, #2
 80411e0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80411e4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80411e8:	fa92 f2a2 	rbit	r2, r2
 80411ec:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80411f0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80411f4:	fab2 f282 	clz	r2, r2
 80411f8:	b2d2      	uxtb	r2, r2
 80411fa:	f042 0220 	orr.w	r2, r2, #32
 80411fe:	b2d2      	uxtb	r2, r2
 8041200:	f002 021f 	and.w	r2, r2, #31
 8041204:	2101      	movs	r1, #1
 8041206:	fa01 f202 	lsl.w	r2, r1, r2
 804120a:	4013      	ands	r3, r2
 804120c:	2b00      	cmp	r3, #0
 804120e:	d0af      	beq.n	8041170 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041210:	4b2d      	ldr	r3, [pc, #180]	@ (80412c8 <HAL_RCC_OscConfig+0x5d0>)
 8041212:	681b      	ldr	r3, [r3, #0]
 8041214:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8041218:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804121c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041220:	681b      	ldr	r3, [r3, #0]
 8041222:	691b      	ldr	r3, [r3, #16]
 8041224:	21f8      	movs	r1, #248	@ 0xf8
 8041226:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804122a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 804122e:	fa91 f1a1 	rbit	r1, r1
 8041232:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8041236:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 804123a:	fab1 f181 	clz	r1, r1
 804123e:	b2c9      	uxtb	r1, r1
 8041240:	408b      	lsls	r3, r1
 8041242:	4921      	ldr	r1, [pc, #132]	@ (80412c8 <HAL_RCC_OscConfig+0x5d0>)
 8041244:	4313      	orrs	r3, r2
 8041246:	600b      	str	r3, [r1, #0]
 8041248:	e06d      	b.n	8041326 <HAL_RCC_OscConfig+0x62e>
 804124a:	2301      	movs	r3, #1
 804124c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041250:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8041254:	fa93 f3a3 	rbit	r3, r3
 8041258:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 804125c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041260:	fab3 f383 	clz	r3, r3
 8041264:	b2db      	uxtb	r3, r3
 8041266:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 804126a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 804126e:	009b      	lsls	r3, r3, #2
 8041270:	461a      	mov	r2, r3
 8041272:	2300      	movs	r3, #0
 8041274:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8041276:	f7ff fa4d 	bl	8040714 <HAL_GetTick>
 804127a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804127e:	e00a      	b.n	8041296 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8041280:	f7ff fa48 	bl	8040714 <HAL_GetTick>
 8041284:	4602      	mov	r2, r0
 8041286:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 804128a:	1ad3      	subs	r3, r2, r3
 804128c:	2b02      	cmp	r3, #2
 804128e:	d902      	bls.n	8041296 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8041290:	2303      	movs	r3, #3
 8041292:	f000 bd7e 	b.w	8041d92 <HAL_RCC_OscConfig+0x109a>
 8041296:	2302      	movs	r3, #2
 8041298:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804129c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80412a0:	fa93 f3a3 	rbit	r3, r3
 80412a4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80412a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80412ac:	fab3 f383 	clz	r3, r3
 80412b0:	b2db      	uxtb	r3, r3
 80412b2:	095b      	lsrs	r3, r3, #5
 80412b4:	b2db      	uxtb	r3, r3
 80412b6:	f043 0301 	orr.w	r3, r3, #1
 80412ba:	b2db      	uxtb	r3, r3
 80412bc:	2b01      	cmp	r3, #1
 80412be:	d105      	bne.n	80412cc <HAL_RCC_OscConfig+0x5d4>
 80412c0:	4b01      	ldr	r3, [pc, #4]	@ (80412c8 <HAL_RCC_OscConfig+0x5d0>)
 80412c2:	681b      	ldr	r3, [r3, #0]
 80412c4:	e016      	b.n	80412f4 <HAL_RCC_OscConfig+0x5fc>
 80412c6:	bf00      	nop
 80412c8:	40021000 	.word	0x40021000
 80412cc:	2302      	movs	r3, #2
 80412ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80412d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80412d6:	fa93 f3a3 	rbit	r3, r3
 80412da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80412de:	2302      	movs	r3, #2
 80412e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80412e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80412e8:	fa93 f3a3 	rbit	r3, r3
 80412ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80412f0:	4bbf      	ldr	r3, [pc, #764]	@ (80415f0 <HAL_RCC_OscConfig+0x8f8>)
 80412f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80412f4:	2202      	movs	r2, #2
 80412f6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80412fa:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80412fe:	fa92 f2a2 	rbit	r2, r2
 8041302:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8041306:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 804130a:	fab2 f282 	clz	r2, r2
 804130e:	b2d2      	uxtb	r2, r2
 8041310:	f042 0220 	orr.w	r2, r2, #32
 8041314:	b2d2      	uxtb	r2, r2
 8041316:	f002 021f 	and.w	r2, r2, #31
 804131a:	2101      	movs	r1, #1
 804131c:	fa01 f202 	lsl.w	r2, r1, r2
 8041320:	4013      	ands	r3, r2
 8041322:	2b00      	cmp	r3, #0
 8041324:	d1ac      	bne.n	8041280 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8041326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804132a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 804132e:	681b      	ldr	r3, [r3, #0]
 8041330:	681b      	ldr	r3, [r3, #0]
 8041332:	f003 0308 	and.w	r3, r3, #8
 8041336:	2b00      	cmp	r3, #0
 8041338:	f000 8113 	beq.w	8041562 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 804133c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041340:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041344:	681b      	ldr	r3, [r3, #0]
 8041346:	695b      	ldr	r3, [r3, #20]
 8041348:	2b00      	cmp	r3, #0
 804134a:	d07c      	beq.n	8041446 <HAL_RCC_OscConfig+0x74e>
 804134c:	2301      	movs	r3, #1
 804134e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8041356:	fa93 f3a3 	rbit	r3, r3
 804135a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 804135e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8041362:	fab3 f383 	clz	r3, r3
 8041366:	b2db      	uxtb	r3, r3
 8041368:	461a      	mov	r2, r3
 804136a:	4ba2      	ldr	r3, [pc, #648]	@ (80415f4 <HAL_RCC_OscConfig+0x8fc>)
 804136c:	4413      	add	r3, r2
 804136e:	009b      	lsls	r3, r3, #2
 8041370:	461a      	mov	r2, r3
 8041372:	2301      	movs	r3, #1
 8041374:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8041376:	f7ff f9cd 	bl	8040714 <HAL_GetTick>
 804137a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804137e:	e00a      	b.n	8041396 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8041380:	f7ff f9c8 	bl	8040714 <HAL_GetTick>
 8041384:	4602      	mov	r2, r0
 8041386:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 804138a:	1ad3      	subs	r3, r2, r3
 804138c:	2b02      	cmp	r3, #2
 804138e:	d902      	bls.n	8041396 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8041390:	2303      	movs	r3, #3
 8041392:	f000 bcfe 	b.w	8041d92 <HAL_RCC_OscConfig+0x109a>
 8041396:	2302      	movs	r3, #2
 8041398:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804139c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80413a0:	fa93 f2a3 	rbit	r2, r3
 80413a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80413a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80413ac:	601a      	str	r2, [r3, #0]
 80413ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80413b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80413b6:	2202      	movs	r2, #2
 80413b8:	601a      	str	r2, [r3, #0]
 80413ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80413be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80413c2:	681b      	ldr	r3, [r3, #0]
 80413c4:	fa93 f2a3 	rbit	r2, r3
 80413c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80413cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80413d0:	601a      	str	r2, [r3, #0]
 80413d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80413d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80413da:	2202      	movs	r2, #2
 80413dc:	601a      	str	r2, [r3, #0]
 80413de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80413e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80413e6:	681b      	ldr	r3, [r3, #0]
 80413e8:	fa93 f2a3 	rbit	r2, r3
 80413ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80413f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80413f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80413f6:	4b7e      	ldr	r3, [pc, #504]	@ (80415f0 <HAL_RCC_OscConfig+0x8f8>)
 80413f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80413fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80413fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8041402:	2102      	movs	r1, #2
 8041404:	6019      	str	r1, [r3, #0]
 8041406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804140a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 804140e:	681b      	ldr	r3, [r3, #0]
 8041410:	fa93 f1a3 	rbit	r1, r3
 8041414:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041418:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 804141c:	6019      	str	r1, [r3, #0]
  return result;
 804141e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041422:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8041426:	681b      	ldr	r3, [r3, #0]
 8041428:	fab3 f383 	clz	r3, r3
 804142c:	b2db      	uxtb	r3, r3
 804142e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8041432:	b2db      	uxtb	r3, r3
 8041434:	f003 031f 	and.w	r3, r3, #31
 8041438:	2101      	movs	r1, #1
 804143a:	fa01 f303 	lsl.w	r3, r1, r3
 804143e:	4013      	ands	r3, r2
 8041440:	2b00      	cmp	r3, #0
 8041442:	d09d      	beq.n	8041380 <HAL_RCC_OscConfig+0x688>
 8041444:	e08d      	b.n	8041562 <HAL_RCC_OscConfig+0x86a>
 8041446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804144a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 804144e:	2201      	movs	r2, #1
 8041450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041456:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 804145a:	681b      	ldr	r3, [r3, #0]
 804145c:	fa93 f2a3 	rbit	r2, r3
 8041460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041464:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8041468:	601a      	str	r2, [r3, #0]
  return result;
 804146a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804146e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8041472:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041474:	fab3 f383 	clz	r3, r3
 8041478:	b2db      	uxtb	r3, r3
 804147a:	461a      	mov	r2, r3
 804147c:	4b5d      	ldr	r3, [pc, #372]	@ (80415f4 <HAL_RCC_OscConfig+0x8fc>)
 804147e:	4413      	add	r3, r2
 8041480:	009b      	lsls	r3, r3, #2
 8041482:	461a      	mov	r2, r3
 8041484:	2300      	movs	r3, #0
 8041486:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8041488:	f7ff f944 	bl	8040714 <HAL_GetTick>
 804148c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041490:	e00a      	b.n	80414a8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8041492:	f7ff f93f 	bl	8040714 <HAL_GetTick>
 8041496:	4602      	mov	r2, r0
 8041498:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 804149c:	1ad3      	subs	r3, r2, r3
 804149e:	2b02      	cmp	r3, #2
 80414a0:	d902      	bls.n	80414a8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80414a2:	2303      	movs	r3, #3
 80414a4:	f000 bc75 	b.w	8041d92 <HAL_RCC_OscConfig+0x109a>
 80414a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80414ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80414b0:	2202      	movs	r2, #2
 80414b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80414b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80414b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80414bc:	681b      	ldr	r3, [r3, #0]
 80414be:	fa93 f2a3 	rbit	r2, r3
 80414c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80414c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80414ca:	601a      	str	r2, [r3, #0]
 80414cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80414d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80414d4:	2202      	movs	r2, #2
 80414d6:	601a      	str	r2, [r3, #0]
 80414d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80414dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80414e0:	681b      	ldr	r3, [r3, #0]
 80414e2:	fa93 f2a3 	rbit	r2, r3
 80414e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80414ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80414ee:	601a      	str	r2, [r3, #0]
 80414f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80414f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80414f8:	2202      	movs	r2, #2
 80414fa:	601a      	str	r2, [r3, #0]
 80414fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041500:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8041504:	681b      	ldr	r3, [r3, #0]
 8041506:	fa93 f2a3 	rbit	r2, r3
 804150a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804150e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8041512:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041514:	4b36      	ldr	r3, [pc, #216]	@ (80415f0 <HAL_RCC_OscConfig+0x8f8>)
 8041516:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8041518:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804151c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8041520:	2102      	movs	r1, #2
 8041522:	6019      	str	r1, [r3, #0]
 8041524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041528:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 804152c:	681b      	ldr	r3, [r3, #0]
 804152e:	fa93 f1a3 	rbit	r1, r3
 8041532:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041536:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 804153a:	6019      	str	r1, [r3, #0]
  return result;
 804153c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041540:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8041544:	681b      	ldr	r3, [r3, #0]
 8041546:	fab3 f383 	clz	r3, r3
 804154a:	b2db      	uxtb	r3, r3
 804154c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8041550:	b2db      	uxtb	r3, r3
 8041552:	f003 031f 	and.w	r3, r3, #31
 8041556:	2101      	movs	r1, #1
 8041558:	fa01 f303 	lsl.w	r3, r1, r3
 804155c:	4013      	ands	r3, r2
 804155e:	2b00      	cmp	r3, #0
 8041560:	d197      	bne.n	8041492 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041566:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 804156a:	681b      	ldr	r3, [r3, #0]
 804156c:	681b      	ldr	r3, [r3, #0]
 804156e:	f003 0304 	and.w	r3, r3, #4
 8041572:	2b00      	cmp	r3, #0
 8041574:	f000 81a5 	beq.w	80418c2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041578:	2300      	movs	r3, #0
 804157a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 804157e:	4b1c      	ldr	r3, [pc, #112]	@ (80415f0 <HAL_RCC_OscConfig+0x8f8>)
 8041580:	69db      	ldr	r3, [r3, #28]
 8041582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8041586:	2b00      	cmp	r3, #0
 8041588:	d116      	bne.n	80415b8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804158a:	4b19      	ldr	r3, [pc, #100]	@ (80415f0 <HAL_RCC_OscConfig+0x8f8>)
 804158c:	69db      	ldr	r3, [r3, #28]
 804158e:	4a18      	ldr	r2, [pc, #96]	@ (80415f0 <HAL_RCC_OscConfig+0x8f8>)
 8041590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8041594:	61d3      	str	r3, [r2, #28]
 8041596:	4b16      	ldr	r3, [pc, #88]	@ (80415f0 <HAL_RCC_OscConfig+0x8f8>)
 8041598:	69db      	ldr	r3, [r3, #28]
 804159a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 804159e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80415a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80415a6:	601a      	str	r2, [r3, #0]
 80415a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80415ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80415b0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80415b2:	2301      	movs	r3, #1
 80415b4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80415b8:	4b0f      	ldr	r3, [pc, #60]	@ (80415f8 <HAL_RCC_OscConfig+0x900>)
 80415ba:	681b      	ldr	r3, [r3, #0]
 80415bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80415c0:	2b00      	cmp	r3, #0
 80415c2:	d121      	bne.n	8041608 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80415c4:	4b0c      	ldr	r3, [pc, #48]	@ (80415f8 <HAL_RCC_OscConfig+0x900>)
 80415c6:	681b      	ldr	r3, [r3, #0]
 80415c8:	4a0b      	ldr	r2, [pc, #44]	@ (80415f8 <HAL_RCC_OscConfig+0x900>)
 80415ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80415ce:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80415d0:	f7ff f8a0 	bl	8040714 <HAL_GetTick>
 80415d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80415d8:	e010      	b.n	80415fc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80415da:	f7ff f89b 	bl	8040714 <HAL_GetTick>
 80415de:	4602      	mov	r2, r0
 80415e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80415e4:	1ad3      	subs	r3, r2, r3
 80415e6:	2b64      	cmp	r3, #100	@ 0x64
 80415e8:	d908      	bls.n	80415fc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80415ea:	2303      	movs	r3, #3
 80415ec:	e3d1      	b.n	8041d92 <HAL_RCC_OscConfig+0x109a>
 80415ee:	bf00      	nop
 80415f0:	40021000 	.word	0x40021000
 80415f4:	10908120 	.word	0x10908120
 80415f8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80415fc:	4b8d      	ldr	r3, [pc, #564]	@ (8041834 <HAL_RCC_OscConfig+0xb3c>)
 80415fe:	681b      	ldr	r3, [r3, #0]
 8041600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041604:	2b00      	cmp	r3, #0
 8041606:	d0e8      	beq.n	80415da <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8041608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804160c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041610:	681b      	ldr	r3, [r3, #0]
 8041612:	689b      	ldr	r3, [r3, #8]
 8041614:	2b01      	cmp	r3, #1
 8041616:	d106      	bne.n	8041626 <HAL_RCC_OscConfig+0x92e>
 8041618:	4b87      	ldr	r3, [pc, #540]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 804161a:	6a1b      	ldr	r3, [r3, #32]
 804161c:	4a86      	ldr	r2, [pc, #536]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 804161e:	f043 0301 	orr.w	r3, r3, #1
 8041622:	6213      	str	r3, [r2, #32]
 8041624:	e035      	b.n	8041692 <HAL_RCC_OscConfig+0x99a>
 8041626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804162a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 804162e:	681b      	ldr	r3, [r3, #0]
 8041630:	689b      	ldr	r3, [r3, #8]
 8041632:	2b00      	cmp	r3, #0
 8041634:	d10c      	bne.n	8041650 <HAL_RCC_OscConfig+0x958>
 8041636:	4b80      	ldr	r3, [pc, #512]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 8041638:	6a1b      	ldr	r3, [r3, #32]
 804163a:	4a7f      	ldr	r2, [pc, #508]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 804163c:	f023 0301 	bic.w	r3, r3, #1
 8041640:	6213      	str	r3, [r2, #32]
 8041642:	4b7d      	ldr	r3, [pc, #500]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 8041644:	6a1b      	ldr	r3, [r3, #32]
 8041646:	4a7c      	ldr	r2, [pc, #496]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 8041648:	f023 0304 	bic.w	r3, r3, #4
 804164c:	6213      	str	r3, [r2, #32]
 804164e:	e020      	b.n	8041692 <HAL_RCC_OscConfig+0x99a>
 8041650:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041654:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041658:	681b      	ldr	r3, [r3, #0]
 804165a:	689b      	ldr	r3, [r3, #8]
 804165c:	2b05      	cmp	r3, #5
 804165e:	d10c      	bne.n	804167a <HAL_RCC_OscConfig+0x982>
 8041660:	4b75      	ldr	r3, [pc, #468]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 8041662:	6a1b      	ldr	r3, [r3, #32]
 8041664:	4a74      	ldr	r2, [pc, #464]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 8041666:	f043 0304 	orr.w	r3, r3, #4
 804166a:	6213      	str	r3, [r2, #32]
 804166c:	4b72      	ldr	r3, [pc, #456]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 804166e:	6a1b      	ldr	r3, [r3, #32]
 8041670:	4a71      	ldr	r2, [pc, #452]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 8041672:	f043 0301 	orr.w	r3, r3, #1
 8041676:	6213      	str	r3, [r2, #32]
 8041678:	e00b      	b.n	8041692 <HAL_RCC_OscConfig+0x99a>
 804167a:	4b6f      	ldr	r3, [pc, #444]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 804167c:	6a1b      	ldr	r3, [r3, #32]
 804167e:	4a6e      	ldr	r2, [pc, #440]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 8041680:	f023 0301 	bic.w	r3, r3, #1
 8041684:	6213      	str	r3, [r2, #32]
 8041686:	4b6c      	ldr	r3, [pc, #432]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 8041688:	6a1b      	ldr	r3, [r3, #32]
 804168a:	4a6b      	ldr	r2, [pc, #428]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 804168c:	f023 0304 	bic.w	r3, r3, #4
 8041690:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8041692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041696:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 804169a:	681b      	ldr	r3, [r3, #0]
 804169c:	689b      	ldr	r3, [r3, #8]
 804169e:	2b00      	cmp	r3, #0
 80416a0:	f000 8081 	beq.w	80417a6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80416a4:	f7ff f836 	bl	8040714 <HAL_GetTick>
 80416a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80416ac:	e00b      	b.n	80416c6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80416ae:	f7ff f831 	bl	8040714 <HAL_GetTick>
 80416b2:	4602      	mov	r2, r0
 80416b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80416b8:	1ad3      	subs	r3, r2, r3
 80416ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80416be:	4293      	cmp	r3, r2
 80416c0:	d901      	bls.n	80416c6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80416c2:	2303      	movs	r3, #3
 80416c4:	e365      	b.n	8041d92 <HAL_RCC_OscConfig+0x109a>
 80416c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80416ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80416ce:	2202      	movs	r2, #2
 80416d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80416d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80416d6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80416da:	681b      	ldr	r3, [r3, #0]
 80416dc:	fa93 f2a3 	rbit	r2, r3
 80416e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80416e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80416e8:	601a      	str	r2, [r3, #0]
 80416ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80416ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80416f2:	2202      	movs	r2, #2
 80416f4:	601a      	str	r2, [r3, #0]
 80416f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80416fa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80416fe:	681b      	ldr	r3, [r3, #0]
 8041700:	fa93 f2a3 	rbit	r2, r3
 8041704:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041708:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 804170c:	601a      	str	r2, [r3, #0]
  return result;
 804170e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041712:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8041716:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041718:	fab3 f383 	clz	r3, r3
 804171c:	b2db      	uxtb	r3, r3
 804171e:	095b      	lsrs	r3, r3, #5
 8041720:	b2db      	uxtb	r3, r3
 8041722:	f043 0302 	orr.w	r3, r3, #2
 8041726:	b2db      	uxtb	r3, r3
 8041728:	2b02      	cmp	r3, #2
 804172a:	d102      	bne.n	8041732 <HAL_RCC_OscConfig+0xa3a>
 804172c:	4b42      	ldr	r3, [pc, #264]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 804172e:	6a1b      	ldr	r3, [r3, #32]
 8041730:	e013      	b.n	804175a <HAL_RCC_OscConfig+0xa62>
 8041732:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041736:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 804173a:	2202      	movs	r2, #2
 804173c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804173e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041742:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8041746:	681b      	ldr	r3, [r3, #0]
 8041748:	fa93 f2a3 	rbit	r2, r3
 804174c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041750:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8041754:	601a      	str	r2, [r3, #0]
 8041756:	4b38      	ldr	r3, [pc, #224]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 8041758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804175a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 804175e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8041762:	2102      	movs	r1, #2
 8041764:	6011      	str	r1, [r2, #0]
 8041766:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 804176a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 804176e:	6812      	ldr	r2, [r2, #0]
 8041770:	fa92 f1a2 	rbit	r1, r2
 8041774:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041778:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 804177c:	6011      	str	r1, [r2, #0]
  return result;
 804177e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041782:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8041786:	6812      	ldr	r2, [r2, #0]
 8041788:	fab2 f282 	clz	r2, r2
 804178c:	b2d2      	uxtb	r2, r2
 804178e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8041792:	b2d2      	uxtb	r2, r2
 8041794:	f002 021f 	and.w	r2, r2, #31
 8041798:	2101      	movs	r1, #1
 804179a:	fa01 f202 	lsl.w	r2, r1, r2
 804179e:	4013      	ands	r3, r2
 80417a0:	2b00      	cmp	r3, #0
 80417a2:	d084      	beq.n	80416ae <HAL_RCC_OscConfig+0x9b6>
 80417a4:	e083      	b.n	80418ae <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80417a6:	f7fe ffb5 	bl	8040714 <HAL_GetTick>
 80417aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80417ae:	e00b      	b.n	80417c8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80417b0:	f7fe ffb0 	bl	8040714 <HAL_GetTick>
 80417b4:	4602      	mov	r2, r0
 80417b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80417ba:	1ad3      	subs	r3, r2, r3
 80417bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80417c0:	4293      	cmp	r3, r2
 80417c2:	d901      	bls.n	80417c8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80417c4:	2303      	movs	r3, #3
 80417c6:	e2e4      	b.n	8041d92 <HAL_RCC_OscConfig+0x109a>
 80417c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80417cc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80417d0:	2202      	movs	r2, #2
 80417d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80417d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80417d8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80417dc:	681b      	ldr	r3, [r3, #0]
 80417de:	fa93 f2a3 	rbit	r2, r3
 80417e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80417e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80417ea:	601a      	str	r2, [r3, #0]
 80417ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80417f0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80417f4:	2202      	movs	r2, #2
 80417f6:	601a      	str	r2, [r3, #0]
 80417f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80417fc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8041800:	681b      	ldr	r3, [r3, #0]
 8041802:	fa93 f2a3 	rbit	r2, r3
 8041806:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804180a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 804180e:	601a      	str	r2, [r3, #0]
  return result;
 8041810:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041814:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8041818:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804181a:	fab3 f383 	clz	r3, r3
 804181e:	b2db      	uxtb	r3, r3
 8041820:	095b      	lsrs	r3, r3, #5
 8041822:	b2db      	uxtb	r3, r3
 8041824:	f043 0302 	orr.w	r3, r3, #2
 8041828:	b2db      	uxtb	r3, r3
 804182a:	2b02      	cmp	r3, #2
 804182c:	d106      	bne.n	804183c <HAL_RCC_OscConfig+0xb44>
 804182e:	4b02      	ldr	r3, [pc, #8]	@ (8041838 <HAL_RCC_OscConfig+0xb40>)
 8041830:	6a1b      	ldr	r3, [r3, #32]
 8041832:	e017      	b.n	8041864 <HAL_RCC_OscConfig+0xb6c>
 8041834:	40007000 	.word	0x40007000
 8041838:	40021000 	.word	0x40021000
 804183c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041840:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8041844:	2202      	movs	r2, #2
 8041846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804184c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8041850:	681b      	ldr	r3, [r3, #0]
 8041852:	fa93 f2a3 	rbit	r2, r3
 8041856:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804185a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 804185e:	601a      	str	r2, [r3, #0]
 8041860:	4bb3      	ldr	r3, [pc, #716]	@ (8041b30 <HAL_RCC_OscConfig+0xe38>)
 8041862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041864:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041868:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 804186c:	2102      	movs	r1, #2
 804186e:	6011      	str	r1, [r2, #0]
 8041870:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041874:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8041878:	6812      	ldr	r2, [r2, #0]
 804187a:	fa92 f1a2 	rbit	r1, r2
 804187e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041882:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8041886:	6011      	str	r1, [r2, #0]
  return result;
 8041888:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 804188c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8041890:	6812      	ldr	r2, [r2, #0]
 8041892:	fab2 f282 	clz	r2, r2
 8041896:	b2d2      	uxtb	r2, r2
 8041898:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 804189c:	b2d2      	uxtb	r2, r2
 804189e:	f002 021f 	and.w	r2, r2, #31
 80418a2:	2101      	movs	r1, #1
 80418a4:	fa01 f202 	lsl.w	r2, r1, r2
 80418a8:	4013      	ands	r3, r2
 80418aa:	2b00      	cmp	r3, #0
 80418ac:	d180      	bne.n	80417b0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80418ae:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80418b2:	2b01      	cmp	r3, #1
 80418b4:	d105      	bne.n	80418c2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80418b6:	4b9e      	ldr	r3, [pc, #632]	@ (8041b30 <HAL_RCC_OscConfig+0xe38>)
 80418b8:	69db      	ldr	r3, [r3, #28]
 80418ba:	4a9d      	ldr	r2, [pc, #628]	@ (8041b30 <HAL_RCC_OscConfig+0xe38>)
 80418bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80418c0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80418c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80418c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80418ca:	681b      	ldr	r3, [r3, #0]
 80418cc:	699b      	ldr	r3, [r3, #24]
 80418ce:	2b00      	cmp	r3, #0
 80418d0:	f000 825e 	beq.w	8041d90 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80418d4:	4b96      	ldr	r3, [pc, #600]	@ (8041b30 <HAL_RCC_OscConfig+0xe38>)
 80418d6:	685b      	ldr	r3, [r3, #4]
 80418d8:	f003 030c 	and.w	r3, r3, #12
 80418dc:	2b08      	cmp	r3, #8
 80418de:	f000 821f 	beq.w	8041d20 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80418e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80418e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80418ea:	681b      	ldr	r3, [r3, #0]
 80418ec:	699b      	ldr	r3, [r3, #24]
 80418ee:	2b02      	cmp	r3, #2
 80418f0:	f040 8170 	bne.w	8041bd4 <HAL_RCC_OscConfig+0xedc>
 80418f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80418f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80418fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8041900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041902:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041906:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 804190a:	681b      	ldr	r3, [r3, #0]
 804190c:	fa93 f2a3 	rbit	r2, r3
 8041910:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041914:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8041918:	601a      	str	r2, [r3, #0]
  return result;
 804191a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804191e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8041922:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041924:	fab3 f383 	clz	r3, r3
 8041928:	b2db      	uxtb	r3, r3
 804192a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 804192e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8041932:	009b      	lsls	r3, r3, #2
 8041934:	461a      	mov	r2, r3
 8041936:	2300      	movs	r3, #0
 8041938:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804193a:	f7fe feeb 	bl	8040714 <HAL_GetTick>
 804193e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8041942:	e009      	b.n	8041958 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041944:	f7fe fee6 	bl	8040714 <HAL_GetTick>
 8041948:	4602      	mov	r2, r0
 804194a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 804194e:	1ad3      	subs	r3, r2, r3
 8041950:	2b02      	cmp	r3, #2
 8041952:	d901      	bls.n	8041958 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8041954:	2303      	movs	r3, #3
 8041956:	e21c      	b.n	8041d92 <HAL_RCC_OscConfig+0x109a>
 8041958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804195c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8041960:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 804196a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 804196e:	681b      	ldr	r3, [r3, #0]
 8041970:	fa93 f2a3 	rbit	r2, r3
 8041974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041978:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 804197c:	601a      	str	r2, [r3, #0]
  return result;
 804197e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041982:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8041986:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8041988:	fab3 f383 	clz	r3, r3
 804198c:	b2db      	uxtb	r3, r3
 804198e:	095b      	lsrs	r3, r3, #5
 8041990:	b2db      	uxtb	r3, r3
 8041992:	f043 0301 	orr.w	r3, r3, #1
 8041996:	b2db      	uxtb	r3, r3
 8041998:	2b01      	cmp	r3, #1
 804199a:	d102      	bne.n	80419a2 <HAL_RCC_OscConfig+0xcaa>
 804199c:	4b64      	ldr	r3, [pc, #400]	@ (8041b30 <HAL_RCC_OscConfig+0xe38>)
 804199e:	681b      	ldr	r3, [r3, #0]
 80419a0:	e027      	b.n	80419f2 <HAL_RCC_OscConfig+0xcfa>
 80419a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80419a6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80419aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80419ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80419b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80419b4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80419b8:	681b      	ldr	r3, [r3, #0]
 80419ba:	fa93 f2a3 	rbit	r2, r3
 80419be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80419c2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80419c6:	601a      	str	r2, [r3, #0]
 80419c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80419cc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80419d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80419d4:	601a      	str	r2, [r3, #0]
 80419d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80419da:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80419de:	681b      	ldr	r3, [r3, #0]
 80419e0:	fa93 f2a3 	rbit	r2, r3
 80419e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80419e8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80419ec:	601a      	str	r2, [r3, #0]
 80419ee:	4b50      	ldr	r3, [pc, #320]	@ (8041b30 <HAL_RCC_OscConfig+0xe38>)
 80419f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80419f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80419f6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80419fa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80419fe:	6011      	str	r1, [r2, #0]
 8041a00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041a04:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8041a08:	6812      	ldr	r2, [r2, #0]
 8041a0a:	fa92 f1a2 	rbit	r1, r2
 8041a0e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041a12:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8041a16:	6011      	str	r1, [r2, #0]
  return result;
 8041a18:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041a1c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8041a20:	6812      	ldr	r2, [r2, #0]
 8041a22:	fab2 f282 	clz	r2, r2
 8041a26:	b2d2      	uxtb	r2, r2
 8041a28:	f042 0220 	orr.w	r2, r2, #32
 8041a2c:	b2d2      	uxtb	r2, r2
 8041a2e:	f002 021f 	and.w	r2, r2, #31
 8041a32:	2101      	movs	r1, #1
 8041a34:	fa01 f202 	lsl.w	r2, r1, r2
 8041a38:	4013      	ands	r3, r2
 8041a3a:	2b00      	cmp	r3, #0
 8041a3c:	d182      	bne.n	8041944 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8041a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8041b30 <HAL_RCC_OscConfig+0xe38>)
 8041a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041a42:	f023 020f 	bic.w	r2, r3, #15
 8041a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041a4e:	681b      	ldr	r3, [r3, #0]
 8041a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041a52:	4937      	ldr	r1, [pc, #220]	@ (8041b30 <HAL_RCC_OscConfig+0xe38>)
 8041a54:	4313      	orrs	r3, r2
 8041a56:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8041a58:	4b35      	ldr	r3, [pc, #212]	@ (8041b30 <HAL_RCC_OscConfig+0xe38>)
 8041a5a:	685b      	ldr	r3, [r3, #4]
 8041a5c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8041a60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041a68:	681b      	ldr	r3, [r3, #0]
 8041a6a:	6a19      	ldr	r1, [r3, #32]
 8041a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041a74:	681b      	ldr	r3, [r3, #0]
 8041a76:	69db      	ldr	r3, [r3, #28]
 8041a78:	430b      	orrs	r3, r1
 8041a7a:	492d      	ldr	r1, [pc, #180]	@ (8041b30 <HAL_RCC_OscConfig+0xe38>)
 8041a7c:	4313      	orrs	r3, r2
 8041a7e:	604b      	str	r3, [r1, #4]
 8041a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a84:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8041a88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8041a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041a92:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8041a96:	681b      	ldr	r3, [r3, #0]
 8041a98:	fa93 f2a3 	rbit	r2, r3
 8041a9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041aa0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8041aa4:	601a      	str	r2, [r3, #0]
  return result;
 8041aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041aaa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8041aae:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041ab0:	fab3 f383 	clz	r3, r3
 8041ab4:	b2db      	uxtb	r3, r3
 8041ab6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8041aba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8041abe:	009b      	lsls	r3, r3, #2
 8041ac0:	461a      	mov	r2, r3
 8041ac2:	2301      	movs	r3, #1
 8041ac4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8041ac6:	f7fe fe25 	bl	8040714 <HAL_GetTick>
 8041aca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8041ace:	e009      	b.n	8041ae4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041ad0:	f7fe fe20 	bl	8040714 <HAL_GetTick>
 8041ad4:	4602      	mov	r2, r0
 8041ad6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8041ada:	1ad3      	subs	r3, r2, r3
 8041adc:	2b02      	cmp	r3, #2
 8041ade:	d901      	bls.n	8041ae4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8041ae0:	2303      	movs	r3, #3
 8041ae2:	e156      	b.n	8041d92 <HAL_RCC_OscConfig+0x109a>
 8041ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041ae8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8041aec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041af0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041af2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041af6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8041afa:	681b      	ldr	r3, [r3, #0]
 8041afc:	fa93 f2a3 	rbit	r2, r3
 8041b00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b04:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8041b08:	601a      	str	r2, [r3, #0]
  return result;
 8041b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b0e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8041b12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8041b14:	fab3 f383 	clz	r3, r3
 8041b18:	b2db      	uxtb	r3, r3
 8041b1a:	095b      	lsrs	r3, r3, #5
 8041b1c:	b2db      	uxtb	r3, r3
 8041b1e:	f043 0301 	orr.w	r3, r3, #1
 8041b22:	b2db      	uxtb	r3, r3
 8041b24:	2b01      	cmp	r3, #1
 8041b26:	d105      	bne.n	8041b34 <HAL_RCC_OscConfig+0xe3c>
 8041b28:	4b01      	ldr	r3, [pc, #4]	@ (8041b30 <HAL_RCC_OscConfig+0xe38>)
 8041b2a:	681b      	ldr	r3, [r3, #0]
 8041b2c:	e02a      	b.n	8041b84 <HAL_RCC_OscConfig+0xe8c>
 8041b2e:	bf00      	nop
 8041b30:	40021000 	.word	0x40021000
 8041b34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b38:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8041b3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041b42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b46:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8041b4a:	681b      	ldr	r3, [r3, #0]
 8041b4c:	fa93 f2a3 	rbit	r2, r3
 8041b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b54:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8041b58:	601a      	str	r2, [r3, #0]
 8041b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b5e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8041b62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041b66:	601a      	str	r2, [r3, #0]
 8041b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b6c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8041b70:	681b      	ldr	r3, [r3, #0]
 8041b72:	fa93 f2a3 	rbit	r2, r3
 8041b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041b7a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8041b7e:	601a      	str	r2, [r3, #0]
 8041b80:	4b86      	ldr	r3, [pc, #536]	@ (8041d9c <HAL_RCC_OscConfig+0x10a4>)
 8041b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041b84:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041b88:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8041b8c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8041b90:	6011      	str	r1, [r2, #0]
 8041b92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041b96:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8041b9a:	6812      	ldr	r2, [r2, #0]
 8041b9c:	fa92 f1a2 	rbit	r1, r2
 8041ba0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041ba4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8041ba8:	6011      	str	r1, [r2, #0]
  return result;
 8041baa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041bae:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8041bb2:	6812      	ldr	r2, [r2, #0]
 8041bb4:	fab2 f282 	clz	r2, r2
 8041bb8:	b2d2      	uxtb	r2, r2
 8041bba:	f042 0220 	orr.w	r2, r2, #32
 8041bbe:	b2d2      	uxtb	r2, r2
 8041bc0:	f002 021f 	and.w	r2, r2, #31
 8041bc4:	2101      	movs	r1, #1
 8041bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8041bca:	4013      	ands	r3, r2
 8041bcc:	2b00      	cmp	r3, #0
 8041bce:	f43f af7f 	beq.w	8041ad0 <HAL_RCC_OscConfig+0xdd8>
 8041bd2:	e0dd      	b.n	8041d90 <HAL_RCC_OscConfig+0x1098>
 8041bd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041bd8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8041bdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8041be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041be2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041be6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8041bea:	681b      	ldr	r3, [r3, #0]
 8041bec:	fa93 f2a3 	rbit	r2, r3
 8041bf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041bf4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8041bf8:	601a      	str	r2, [r3, #0]
  return result;
 8041bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041bfe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8041c02:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041c04:	fab3 f383 	clz	r3, r3
 8041c08:	b2db      	uxtb	r3, r3
 8041c0a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8041c0e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8041c12:	009b      	lsls	r3, r3, #2
 8041c14:	461a      	mov	r2, r3
 8041c16:	2300      	movs	r3, #0
 8041c18:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8041c1a:	f7fe fd7b 	bl	8040714 <HAL_GetTick>
 8041c1e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8041c22:	e009      	b.n	8041c38 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041c24:	f7fe fd76 	bl	8040714 <HAL_GetTick>
 8041c28:	4602      	mov	r2, r0
 8041c2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8041c2e:	1ad3      	subs	r3, r2, r3
 8041c30:	2b02      	cmp	r3, #2
 8041c32:	d901      	bls.n	8041c38 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8041c34:	2303      	movs	r3, #3
 8041c36:	e0ac      	b.n	8041d92 <HAL_RCC_OscConfig+0x109a>
 8041c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041c3c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8041c40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041c4a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8041c4e:	681b      	ldr	r3, [r3, #0]
 8041c50:	fa93 f2a3 	rbit	r2, r3
 8041c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041c58:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8041c5c:	601a      	str	r2, [r3, #0]
  return result;
 8041c5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041c62:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8041c66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8041c68:	fab3 f383 	clz	r3, r3
 8041c6c:	b2db      	uxtb	r3, r3
 8041c6e:	095b      	lsrs	r3, r3, #5
 8041c70:	b2db      	uxtb	r3, r3
 8041c72:	f043 0301 	orr.w	r3, r3, #1
 8041c76:	b2db      	uxtb	r3, r3
 8041c78:	2b01      	cmp	r3, #1
 8041c7a:	d102      	bne.n	8041c82 <HAL_RCC_OscConfig+0xf8a>
 8041c7c:	4b47      	ldr	r3, [pc, #284]	@ (8041d9c <HAL_RCC_OscConfig+0x10a4>)
 8041c7e:	681b      	ldr	r3, [r3, #0]
 8041c80:	e027      	b.n	8041cd2 <HAL_RCC_OscConfig+0xfda>
 8041c82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041c86:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8041c8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041c8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041c94:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8041c98:	681b      	ldr	r3, [r3, #0]
 8041c9a:	fa93 f2a3 	rbit	r2, r3
 8041c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041ca2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8041ca6:	601a      	str	r2, [r3, #0]
 8041ca8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041cac:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8041cb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041cb4:	601a      	str	r2, [r3, #0]
 8041cb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041cba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8041cbe:	681b      	ldr	r3, [r3, #0]
 8041cc0:	fa93 f2a3 	rbit	r2, r3
 8041cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041cc8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8041ccc:	601a      	str	r2, [r3, #0]
 8041cce:	4b33      	ldr	r3, [pc, #204]	@ (8041d9c <HAL_RCC_OscConfig+0x10a4>)
 8041cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041cd2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041cd6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8041cda:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8041cde:	6011      	str	r1, [r2, #0]
 8041ce0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041ce4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8041ce8:	6812      	ldr	r2, [r2, #0]
 8041cea:	fa92 f1a2 	rbit	r1, r2
 8041cee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041cf2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8041cf6:	6011      	str	r1, [r2, #0]
  return result;
 8041cf8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8041cfc:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8041d00:	6812      	ldr	r2, [r2, #0]
 8041d02:	fab2 f282 	clz	r2, r2
 8041d06:	b2d2      	uxtb	r2, r2
 8041d08:	f042 0220 	orr.w	r2, r2, #32
 8041d0c:	b2d2      	uxtb	r2, r2
 8041d0e:	f002 021f 	and.w	r2, r2, #31
 8041d12:	2101      	movs	r1, #1
 8041d14:	fa01 f202 	lsl.w	r2, r1, r2
 8041d18:	4013      	ands	r3, r2
 8041d1a:	2b00      	cmp	r3, #0
 8041d1c:	d182      	bne.n	8041c24 <HAL_RCC_OscConfig+0xf2c>
 8041d1e:	e037      	b.n	8041d90 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8041d20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041d28:	681b      	ldr	r3, [r3, #0]
 8041d2a:	699b      	ldr	r3, [r3, #24]
 8041d2c:	2b01      	cmp	r3, #1
 8041d2e:	d101      	bne.n	8041d34 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8041d30:	2301      	movs	r3, #1
 8041d32:	e02e      	b.n	8041d92 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8041d34:	4b19      	ldr	r3, [pc, #100]	@ (8041d9c <HAL_RCC_OscConfig+0x10a4>)
 8041d36:	685b      	ldr	r3, [r3, #4]
 8041d38:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8041d3c:	4b17      	ldr	r3, [pc, #92]	@ (8041d9c <HAL_RCC_OscConfig+0x10a4>)
 8041d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041d40:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8041d44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8041d48:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8041d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041d54:	681b      	ldr	r3, [r3, #0]
 8041d56:	69db      	ldr	r3, [r3, #28]
 8041d58:	429a      	cmp	r2, r3
 8041d5a:	d117      	bne.n	8041d8c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8041d5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8041d60:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8041d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041d6c:	681b      	ldr	r3, [r3, #0]
 8041d6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8041d70:	429a      	cmp	r2, r3
 8041d72:	d10b      	bne.n	8041d8c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8041d74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8041d78:	f003 020f 	and.w	r2, r3, #15
 8041d7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8041d80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8041d84:	681b      	ldr	r3, [r3, #0]
 8041d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8041d88:	429a      	cmp	r2, r3
 8041d8a:	d001      	beq.n	8041d90 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8041d8c:	2301      	movs	r3, #1
 8041d8e:	e000      	b.n	8041d92 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8041d90:	2300      	movs	r3, #0
}
 8041d92:	4618      	mov	r0, r3
 8041d94:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8041d98:	46bd      	mov	sp, r7
 8041d9a:	bd80      	pop	{r7, pc}
 8041d9c:	40021000 	.word	0x40021000

08041da0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041da0:	b580      	push	{r7, lr}
 8041da2:	b09e      	sub	sp, #120	@ 0x78
 8041da4:	af00      	add	r7, sp, #0
 8041da6:	6078      	str	r0, [r7, #4]
 8041da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8041daa:	2300      	movs	r3, #0
 8041dac:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8041dae:	687b      	ldr	r3, [r7, #4]
 8041db0:	2b00      	cmp	r3, #0
 8041db2:	d101      	bne.n	8041db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8041db4:	2301      	movs	r3, #1
 8041db6:	e162      	b.n	804207e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8041db8:	4b90      	ldr	r3, [pc, #576]	@ (8041ffc <HAL_RCC_ClockConfig+0x25c>)
 8041dba:	681b      	ldr	r3, [r3, #0]
 8041dbc:	f003 0307 	and.w	r3, r3, #7
 8041dc0:	683a      	ldr	r2, [r7, #0]
 8041dc2:	429a      	cmp	r2, r3
 8041dc4:	d910      	bls.n	8041de8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8041ffc <HAL_RCC_ClockConfig+0x25c>)
 8041dc8:	681b      	ldr	r3, [r3, #0]
 8041dca:	f023 0207 	bic.w	r2, r3, #7
 8041dce:	498b      	ldr	r1, [pc, #556]	@ (8041ffc <HAL_RCC_ClockConfig+0x25c>)
 8041dd0:	683b      	ldr	r3, [r7, #0]
 8041dd2:	4313      	orrs	r3, r2
 8041dd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041dd6:	4b89      	ldr	r3, [pc, #548]	@ (8041ffc <HAL_RCC_ClockConfig+0x25c>)
 8041dd8:	681b      	ldr	r3, [r3, #0]
 8041dda:	f003 0307 	and.w	r3, r3, #7
 8041dde:	683a      	ldr	r2, [r7, #0]
 8041de0:	429a      	cmp	r2, r3
 8041de2:	d001      	beq.n	8041de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8041de4:	2301      	movs	r3, #1
 8041de6:	e14a      	b.n	804207e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041de8:	687b      	ldr	r3, [r7, #4]
 8041dea:	681b      	ldr	r3, [r3, #0]
 8041dec:	f003 0302 	and.w	r3, r3, #2
 8041df0:	2b00      	cmp	r3, #0
 8041df2:	d008      	beq.n	8041e06 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041df4:	4b82      	ldr	r3, [pc, #520]	@ (8042000 <HAL_RCC_ClockConfig+0x260>)
 8041df6:	685b      	ldr	r3, [r3, #4]
 8041df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8041dfc:	687b      	ldr	r3, [r7, #4]
 8041dfe:	689b      	ldr	r3, [r3, #8]
 8041e00:	497f      	ldr	r1, [pc, #508]	@ (8042000 <HAL_RCC_ClockConfig+0x260>)
 8041e02:	4313      	orrs	r3, r2
 8041e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041e06:	687b      	ldr	r3, [r7, #4]
 8041e08:	681b      	ldr	r3, [r3, #0]
 8041e0a:	f003 0301 	and.w	r3, r3, #1
 8041e0e:	2b00      	cmp	r3, #0
 8041e10:	f000 80dc 	beq.w	8041fcc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041e14:	687b      	ldr	r3, [r7, #4]
 8041e16:	685b      	ldr	r3, [r3, #4]
 8041e18:	2b01      	cmp	r3, #1
 8041e1a:	d13c      	bne.n	8041e96 <HAL_RCC_ClockConfig+0xf6>
 8041e1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8041e20:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8041e24:	fa93 f3a3 	rbit	r3, r3
 8041e28:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8041e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041e2c:	fab3 f383 	clz	r3, r3
 8041e30:	b2db      	uxtb	r3, r3
 8041e32:	095b      	lsrs	r3, r3, #5
 8041e34:	b2db      	uxtb	r3, r3
 8041e36:	f043 0301 	orr.w	r3, r3, #1
 8041e3a:	b2db      	uxtb	r3, r3
 8041e3c:	2b01      	cmp	r3, #1
 8041e3e:	d102      	bne.n	8041e46 <HAL_RCC_ClockConfig+0xa6>
 8041e40:	4b6f      	ldr	r3, [pc, #444]	@ (8042000 <HAL_RCC_ClockConfig+0x260>)
 8041e42:	681b      	ldr	r3, [r3, #0]
 8041e44:	e00f      	b.n	8041e66 <HAL_RCC_ClockConfig+0xc6>
 8041e46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8041e4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041e4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8041e4e:	fa93 f3a3 	rbit	r3, r3
 8041e52:	667b      	str	r3, [r7, #100]	@ 0x64
 8041e54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8041e58:	663b      	str	r3, [r7, #96]	@ 0x60
 8041e5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8041e5c:	fa93 f3a3 	rbit	r3, r3
 8041e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8041e62:	4b67      	ldr	r3, [pc, #412]	@ (8042000 <HAL_RCC_ClockConfig+0x260>)
 8041e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041e66:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8041e6a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8041e6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8041e6e:	fa92 f2a2 	rbit	r2, r2
 8041e72:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8041e74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8041e76:	fab2 f282 	clz	r2, r2
 8041e7a:	b2d2      	uxtb	r2, r2
 8041e7c:	f042 0220 	orr.w	r2, r2, #32
 8041e80:	b2d2      	uxtb	r2, r2
 8041e82:	f002 021f 	and.w	r2, r2, #31
 8041e86:	2101      	movs	r1, #1
 8041e88:	fa01 f202 	lsl.w	r2, r1, r2
 8041e8c:	4013      	ands	r3, r2
 8041e8e:	2b00      	cmp	r3, #0
 8041e90:	d17b      	bne.n	8041f8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8041e92:	2301      	movs	r3, #1
 8041e94:	e0f3      	b.n	804207e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8041e96:	687b      	ldr	r3, [r7, #4]
 8041e98:	685b      	ldr	r3, [r3, #4]
 8041e9a:	2b02      	cmp	r3, #2
 8041e9c:	d13c      	bne.n	8041f18 <HAL_RCC_ClockConfig+0x178>
 8041e9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8041ea2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041ea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8041ea6:	fa93 f3a3 	rbit	r3, r3
 8041eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8041eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041eae:	fab3 f383 	clz	r3, r3
 8041eb2:	b2db      	uxtb	r3, r3
 8041eb4:	095b      	lsrs	r3, r3, #5
 8041eb6:	b2db      	uxtb	r3, r3
 8041eb8:	f043 0301 	orr.w	r3, r3, #1
 8041ebc:	b2db      	uxtb	r3, r3
 8041ebe:	2b01      	cmp	r3, #1
 8041ec0:	d102      	bne.n	8041ec8 <HAL_RCC_ClockConfig+0x128>
 8041ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8042000 <HAL_RCC_ClockConfig+0x260>)
 8041ec4:	681b      	ldr	r3, [r3, #0]
 8041ec6:	e00f      	b.n	8041ee8 <HAL_RCC_ClockConfig+0x148>
 8041ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8041ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8041ed0:	fa93 f3a3 	rbit	r3, r3
 8041ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8041ed6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8041eda:	643b      	str	r3, [r7, #64]	@ 0x40
 8041edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8041ede:	fa93 f3a3 	rbit	r3, r3
 8041ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8041ee4:	4b46      	ldr	r3, [pc, #280]	@ (8042000 <HAL_RCC_ClockConfig+0x260>)
 8041ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041ee8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8041eec:	63ba      	str	r2, [r7, #56]	@ 0x38
 8041eee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8041ef0:	fa92 f2a2 	rbit	r2, r2
 8041ef4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8041ef6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8041ef8:	fab2 f282 	clz	r2, r2
 8041efc:	b2d2      	uxtb	r2, r2
 8041efe:	f042 0220 	orr.w	r2, r2, #32
 8041f02:	b2d2      	uxtb	r2, r2
 8041f04:	f002 021f 	and.w	r2, r2, #31
 8041f08:	2101      	movs	r1, #1
 8041f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8041f0e:	4013      	ands	r3, r2
 8041f10:	2b00      	cmp	r3, #0
 8041f12:	d13a      	bne.n	8041f8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8041f14:	2301      	movs	r3, #1
 8041f16:	e0b2      	b.n	804207e <HAL_RCC_ClockConfig+0x2de>
 8041f18:	2302      	movs	r3, #2
 8041f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8041f1e:	fa93 f3a3 	rbit	r3, r3
 8041f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8041f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041f26:	fab3 f383 	clz	r3, r3
 8041f2a:	b2db      	uxtb	r3, r3
 8041f2c:	095b      	lsrs	r3, r3, #5
 8041f2e:	b2db      	uxtb	r3, r3
 8041f30:	f043 0301 	orr.w	r3, r3, #1
 8041f34:	b2db      	uxtb	r3, r3
 8041f36:	2b01      	cmp	r3, #1
 8041f38:	d102      	bne.n	8041f40 <HAL_RCC_ClockConfig+0x1a0>
 8041f3a:	4b31      	ldr	r3, [pc, #196]	@ (8042000 <HAL_RCC_ClockConfig+0x260>)
 8041f3c:	681b      	ldr	r3, [r3, #0]
 8041f3e:	e00d      	b.n	8041f5c <HAL_RCC_ClockConfig+0x1bc>
 8041f40:	2302      	movs	r3, #2
 8041f42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041f46:	fa93 f3a3 	rbit	r3, r3
 8041f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8041f4c:	2302      	movs	r3, #2
 8041f4e:	623b      	str	r3, [r7, #32]
 8041f50:	6a3b      	ldr	r3, [r7, #32]
 8041f52:	fa93 f3a3 	rbit	r3, r3
 8041f56:	61fb      	str	r3, [r7, #28]
 8041f58:	4b29      	ldr	r3, [pc, #164]	@ (8042000 <HAL_RCC_ClockConfig+0x260>)
 8041f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041f5c:	2202      	movs	r2, #2
 8041f5e:	61ba      	str	r2, [r7, #24]
 8041f60:	69ba      	ldr	r2, [r7, #24]
 8041f62:	fa92 f2a2 	rbit	r2, r2
 8041f66:	617a      	str	r2, [r7, #20]
  return result;
 8041f68:	697a      	ldr	r2, [r7, #20]
 8041f6a:	fab2 f282 	clz	r2, r2
 8041f6e:	b2d2      	uxtb	r2, r2
 8041f70:	f042 0220 	orr.w	r2, r2, #32
 8041f74:	b2d2      	uxtb	r2, r2
 8041f76:	f002 021f 	and.w	r2, r2, #31
 8041f7a:	2101      	movs	r1, #1
 8041f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8041f80:	4013      	ands	r3, r2
 8041f82:	2b00      	cmp	r3, #0
 8041f84:	d101      	bne.n	8041f8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8041f86:	2301      	movs	r3, #1
 8041f88:	e079      	b.n	804207e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8041f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8042000 <HAL_RCC_ClockConfig+0x260>)
 8041f8c:	685b      	ldr	r3, [r3, #4]
 8041f8e:	f023 0203 	bic.w	r2, r3, #3
 8041f92:	687b      	ldr	r3, [r7, #4]
 8041f94:	685b      	ldr	r3, [r3, #4]
 8041f96:	491a      	ldr	r1, [pc, #104]	@ (8042000 <HAL_RCC_ClockConfig+0x260>)
 8041f98:	4313      	orrs	r3, r2
 8041f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8041f9c:	f7fe fbba 	bl	8040714 <HAL_GetTick>
 8041fa0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041fa2:	e00a      	b.n	8041fba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041fa4:	f7fe fbb6 	bl	8040714 <HAL_GetTick>
 8041fa8:	4602      	mov	r2, r0
 8041faa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8041fac:	1ad3      	subs	r3, r2, r3
 8041fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041fb2:	4293      	cmp	r3, r2
 8041fb4:	d901      	bls.n	8041fba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8041fb6:	2303      	movs	r3, #3
 8041fb8:	e061      	b.n	804207e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041fba:	4b11      	ldr	r3, [pc, #68]	@ (8042000 <HAL_RCC_ClockConfig+0x260>)
 8041fbc:	685b      	ldr	r3, [r3, #4]
 8041fbe:	f003 020c 	and.w	r2, r3, #12
 8041fc2:	687b      	ldr	r3, [r7, #4]
 8041fc4:	685b      	ldr	r3, [r3, #4]
 8041fc6:	009b      	lsls	r3, r3, #2
 8041fc8:	429a      	cmp	r2, r3
 8041fca:	d1eb      	bne.n	8041fa4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8041fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8041ffc <HAL_RCC_ClockConfig+0x25c>)
 8041fce:	681b      	ldr	r3, [r3, #0]
 8041fd0:	f003 0307 	and.w	r3, r3, #7
 8041fd4:	683a      	ldr	r2, [r7, #0]
 8041fd6:	429a      	cmp	r2, r3
 8041fd8:	d214      	bcs.n	8042004 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041fda:	4b08      	ldr	r3, [pc, #32]	@ (8041ffc <HAL_RCC_ClockConfig+0x25c>)
 8041fdc:	681b      	ldr	r3, [r3, #0]
 8041fde:	f023 0207 	bic.w	r2, r3, #7
 8041fe2:	4906      	ldr	r1, [pc, #24]	@ (8041ffc <HAL_RCC_ClockConfig+0x25c>)
 8041fe4:	683b      	ldr	r3, [r7, #0]
 8041fe6:	4313      	orrs	r3, r2
 8041fe8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041fea:	4b04      	ldr	r3, [pc, #16]	@ (8041ffc <HAL_RCC_ClockConfig+0x25c>)
 8041fec:	681b      	ldr	r3, [r3, #0]
 8041fee:	f003 0307 	and.w	r3, r3, #7
 8041ff2:	683a      	ldr	r2, [r7, #0]
 8041ff4:	429a      	cmp	r2, r3
 8041ff6:	d005      	beq.n	8042004 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8041ff8:	2301      	movs	r3, #1
 8041ffa:	e040      	b.n	804207e <HAL_RCC_ClockConfig+0x2de>
 8041ffc:	40022000 	.word	0x40022000
 8042000:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8042004:	687b      	ldr	r3, [r7, #4]
 8042006:	681b      	ldr	r3, [r3, #0]
 8042008:	f003 0304 	and.w	r3, r3, #4
 804200c:	2b00      	cmp	r3, #0
 804200e:	d008      	beq.n	8042022 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8042010:	4b1d      	ldr	r3, [pc, #116]	@ (8042088 <HAL_RCC_ClockConfig+0x2e8>)
 8042012:	685b      	ldr	r3, [r3, #4]
 8042014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8042018:	687b      	ldr	r3, [r7, #4]
 804201a:	68db      	ldr	r3, [r3, #12]
 804201c:	491a      	ldr	r1, [pc, #104]	@ (8042088 <HAL_RCC_ClockConfig+0x2e8>)
 804201e:	4313      	orrs	r3, r2
 8042020:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8042022:	687b      	ldr	r3, [r7, #4]
 8042024:	681b      	ldr	r3, [r3, #0]
 8042026:	f003 0308 	and.w	r3, r3, #8
 804202a:	2b00      	cmp	r3, #0
 804202c:	d009      	beq.n	8042042 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 804202e:	4b16      	ldr	r3, [pc, #88]	@ (8042088 <HAL_RCC_ClockConfig+0x2e8>)
 8042030:	685b      	ldr	r3, [r3, #4]
 8042032:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8042036:	687b      	ldr	r3, [r7, #4]
 8042038:	691b      	ldr	r3, [r3, #16]
 804203a:	00db      	lsls	r3, r3, #3
 804203c:	4912      	ldr	r1, [pc, #72]	@ (8042088 <HAL_RCC_ClockConfig+0x2e8>)
 804203e:	4313      	orrs	r3, r2
 8042040:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8042042:	f000 f829 	bl	8042098 <HAL_RCC_GetSysClockFreq>
 8042046:	4601      	mov	r1, r0
 8042048:	4b0f      	ldr	r3, [pc, #60]	@ (8042088 <HAL_RCC_ClockConfig+0x2e8>)
 804204a:	685b      	ldr	r3, [r3, #4]
 804204c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8042050:	22f0      	movs	r2, #240	@ 0xf0
 8042052:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8042054:	693a      	ldr	r2, [r7, #16]
 8042056:	fa92 f2a2 	rbit	r2, r2
 804205a:	60fa      	str	r2, [r7, #12]
  return result;
 804205c:	68fa      	ldr	r2, [r7, #12]
 804205e:	fab2 f282 	clz	r2, r2
 8042062:	b2d2      	uxtb	r2, r2
 8042064:	40d3      	lsrs	r3, r2
 8042066:	4a09      	ldr	r2, [pc, #36]	@ (804208c <HAL_RCC_ClockConfig+0x2ec>)
 8042068:	5cd3      	ldrb	r3, [r2, r3]
 804206a:	fa21 f303 	lsr.w	r3, r1, r3
 804206e:	4a08      	ldr	r2, [pc, #32]	@ (8042090 <HAL_RCC_ClockConfig+0x2f0>)
 8042070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8042072:	4b08      	ldr	r3, [pc, #32]	@ (8042094 <HAL_RCC_ClockConfig+0x2f4>)
 8042074:	681b      	ldr	r3, [r3, #0]
 8042076:	4618      	mov	r0, r3
 8042078:	f7fe fb08 	bl	804068c <HAL_InitTick>
  
  return HAL_OK;
 804207c:	2300      	movs	r3, #0
}
 804207e:	4618      	mov	r0, r3
 8042080:	3778      	adds	r7, #120	@ 0x78
 8042082:	46bd      	mov	sp, r7
 8042084:	bd80      	pop	{r7, pc}
 8042086:	bf00      	nop
 8042088:	40021000 	.word	0x40021000
 804208c:	080431ac 	.word	0x080431ac
 8042090:	20000000 	.word	0x20000000
 8042094:	20000004 	.word	0x20000004

08042098 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8042098:	b480      	push	{r7}
 804209a:	b087      	sub	sp, #28
 804209c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 804209e:	2300      	movs	r3, #0
 80420a0:	60fb      	str	r3, [r7, #12]
 80420a2:	2300      	movs	r3, #0
 80420a4:	60bb      	str	r3, [r7, #8]
 80420a6:	2300      	movs	r3, #0
 80420a8:	617b      	str	r3, [r7, #20]
 80420aa:	2300      	movs	r3, #0
 80420ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80420ae:	2300      	movs	r3, #0
 80420b0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80420b2:	4b1f      	ldr	r3, [pc, #124]	@ (8042130 <HAL_RCC_GetSysClockFreq+0x98>)
 80420b4:	685b      	ldr	r3, [r3, #4]
 80420b6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80420b8:	68fb      	ldr	r3, [r7, #12]
 80420ba:	f003 030c 	and.w	r3, r3, #12
 80420be:	2b04      	cmp	r3, #4
 80420c0:	d002      	beq.n	80420c8 <HAL_RCC_GetSysClockFreq+0x30>
 80420c2:	2b08      	cmp	r3, #8
 80420c4:	d003      	beq.n	80420ce <HAL_RCC_GetSysClockFreq+0x36>
 80420c6:	e029      	b.n	804211c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80420c8:	4b1a      	ldr	r3, [pc, #104]	@ (8042134 <HAL_RCC_GetSysClockFreq+0x9c>)
 80420ca:	613b      	str	r3, [r7, #16]
      break;
 80420cc:	e029      	b.n	8042122 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80420ce:	68fb      	ldr	r3, [r7, #12]
 80420d0:	0c9b      	lsrs	r3, r3, #18
 80420d2:	f003 030f 	and.w	r3, r3, #15
 80420d6:	4a18      	ldr	r2, [pc, #96]	@ (8042138 <HAL_RCC_GetSysClockFreq+0xa0>)
 80420d8:	5cd3      	ldrb	r3, [r2, r3]
 80420da:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80420dc:	4b14      	ldr	r3, [pc, #80]	@ (8042130 <HAL_RCC_GetSysClockFreq+0x98>)
 80420de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80420e0:	f003 030f 	and.w	r3, r3, #15
 80420e4:	4a15      	ldr	r2, [pc, #84]	@ (804213c <HAL_RCC_GetSysClockFreq+0xa4>)
 80420e6:	5cd3      	ldrb	r3, [r2, r3]
 80420e8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80420ea:	68fb      	ldr	r3, [r7, #12]
 80420ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80420f0:	2b00      	cmp	r3, #0
 80420f2:	d008      	beq.n	8042106 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80420f4:	4a0f      	ldr	r2, [pc, #60]	@ (8042134 <HAL_RCC_GetSysClockFreq+0x9c>)
 80420f6:	68bb      	ldr	r3, [r7, #8]
 80420f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80420fc:	687b      	ldr	r3, [r7, #4]
 80420fe:	fb02 f303 	mul.w	r3, r2, r3
 8042102:	617b      	str	r3, [r7, #20]
 8042104:	e007      	b.n	8042116 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8042106:	4a0b      	ldr	r2, [pc, #44]	@ (8042134 <HAL_RCC_GetSysClockFreq+0x9c>)
 8042108:	68bb      	ldr	r3, [r7, #8]
 804210a:	fbb2 f2f3 	udiv	r2, r2, r3
 804210e:	687b      	ldr	r3, [r7, #4]
 8042110:	fb02 f303 	mul.w	r3, r2, r3
 8042114:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8042116:	697b      	ldr	r3, [r7, #20]
 8042118:	613b      	str	r3, [r7, #16]
      break;
 804211a:	e002      	b.n	8042122 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 804211c:	4b05      	ldr	r3, [pc, #20]	@ (8042134 <HAL_RCC_GetSysClockFreq+0x9c>)
 804211e:	613b      	str	r3, [r7, #16]
      break;
 8042120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8042122:	693b      	ldr	r3, [r7, #16]
}
 8042124:	4618      	mov	r0, r3
 8042126:	371c      	adds	r7, #28
 8042128:	46bd      	mov	sp, r7
 804212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804212e:	4770      	bx	lr
 8042130:	40021000 	.word	0x40021000
 8042134:	007a1200 	.word	0x007a1200
 8042138:	080431c4 	.word	0x080431c4
 804213c:	080431d4 	.word	0x080431d4

08042140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8042140:	b480      	push	{r7}
 8042142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8042144:	4b03      	ldr	r3, [pc, #12]	@ (8042154 <HAL_RCC_GetHCLKFreq+0x14>)
 8042146:	681b      	ldr	r3, [r3, #0]
}
 8042148:	4618      	mov	r0, r3
 804214a:	46bd      	mov	sp, r7
 804214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042150:	4770      	bx	lr
 8042152:	bf00      	nop
 8042154:	20000000 	.word	0x20000000

08042158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8042158:	b580      	push	{r7, lr}
 804215a:	b082      	sub	sp, #8
 804215c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 804215e:	f7ff ffef 	bl	8042140 <HAL_RCC_GetHCLKFreq>
 8042162:	4601      	mov	r1, r0
 8042164:	4b0b      	ldr	r3, [pc, #44]	@ (8042194 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8042166:	685b      	ldr	r3, [r3, #4]
 8042168:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 804216c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8042170:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8042172:	687a      	ldr	r2, [r7, #4]
 8042174:	fa92 f2a2 	rbit	r2, r2
 8042178:	603a      	str	r2, [r7, #0]
  return result;
 804217a:	683a      	ldr	r2, [r7, #0]
 804217c:	fab2 f282 	clz	r2, r2
 8042180:	b2d2      	uxtb	r2, r2
 8042182:	40d3      	lsrs	r3, r2
 8042184:	4a04      	ldr	r2, [pc, #16]	@ (8042198 <HAL_RCC_GetPCLK1Freq+0x40>)
 8042186:	5cd3      	ldrb	r3, [r2, r3]
 8042188:	fa21 f303 	lsr.w	r3, r1, r3
}    
 804218c:	4618      	mov	r0, r3
 804218e:	3708      	adds	r7, #8
 8042190:	46bd      	mov	sp, r7
 8042192:	bd80      	pop	{r7, pc}
 8042194:	40021000 	.word	0x40021000
 8042198:	080431bc 	.word	0x080431bc

0804219c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 804219c:	b580      	push	{r7, lr}
 804219e:	b082      	sub	sp, #8
 80421a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80421a2:	f7ff ffcd 	bl	8042140 <HAL_RCC_GetHCLKFreq>
 80421a6:	4601      	mov	r1, r0
 80421a8:	4b0b      	ldr	r3, [pc, #44]	@ (80421d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80421aa:	685b      	ldr	r3, [r3, #4]
 80421ac:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80421b0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80421b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80421b6:	687a      	ldr	r2, [r7, #4]
 80421b8:	fa92 f2a2 	rbit	r2, r2
 80421bc:	603a      	str	r2, [r7, #0]
  return result;
 80421be:	683a      	ldr	r2, [r7, #0]
 80421c0:	fab2 f282 	clz	r2, r2
 80421c4:	b2d2      	uxtb	r2, r2
 80421c6:	40d3      	lsrs	r3, r2
 80421c8:	4a04      	ldr	r2, [pc, #16]	@ (80421dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80421ca:	5cd3      	ldrb	r3, [r2, r3]
 80421cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80421d0:	4618      	mov	r0, r3
 80421d2:	3708      	adds	r7, #8
 80421d4:	46bd      	mov	sp, r7
 80421d6:	bd80      	pop	{r7, pc}
 80421d8:	40021000 	.word	0x40021000
 80421dc:	080431bc 	.word	0x080431bc

080421e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80421e0:	b580      	push	{r7, lr}
 80421e2:	b092      	sub	sp, #72	@ 0x48
 80421e4:	af00      	add	r7, sp, #0
 80421e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80421e8:	2300      	movs	r3, #0
 80421ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80421ec:	2300      	movs	r3, #0
 80421ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80421f0:	2300      	movs	r3, #0
 80421f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80421f6:	687b      	ldr	r3, [r7, #4]
 80421f8:	681b      	ldr	r3, [r3, #0]
 80421fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80421fe:	2b00      	cmp	r3, #0
 8042200:	f000 80d4 	beq.w	80423ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8042204:	4b4e      	ldr	r3, [pc, #312]	@ (8042340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8042206:	69db      	ldr	r3, [r3, #28]
 8042208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 804220c:	2b00      	cmp	r3, #0
 804220e:	d10e      	bne.n	804222e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8042210:	4b4b      	ldr	r3, [pc, #300]	@ (8042340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8042212:	69db      	ldr	r3, [r3, #28]
 8042214:	4a4a      	ldr	r2, [pc, #296]	@ (8042340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8042216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 804221a:	61d3      	str	r3, [r2, #28]
 804221c:	4b48      	ldr	r3, [pc, #288]	@ (8042340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 804221e:	69db      	ldr	r3, [r3, #28]
 8042220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8042224:	60bb      	str	r3, [r7, #8]
 8042226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8042228:	2301      	movs	r3, #1
 804222a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 804222e:	4b45      	ldr	r3, [pc, #276]	@ (8042344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8042230:	681b      	ldr	r3, [r3, #0]
 8042232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8042236:	2b00      	cmp	r3, #0
 8042238:	d118      	bne.n	804226c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 804223a:	4b42      	ldr	r3, [pc, #264]	@ (8042344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 804223c:	681b      	ldr	r3, [r3, #0]
 804223e:	4a41      	ldr	r2, [pc, #260]	@ (8042344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8042240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8042244:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8042246:	f7fe fa65 	bl	8040714 <HAL_GetTick>
 804224a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 804224c:	e008      	b.n	8042260 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804224e:	f7fe fa61 	bl	8040714 <HAL_GetTick>
 8042252:	4602      	mov	r2, r0
 8042254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8042256:	1ad3      	subs	r3, r2, r3
 8042258:	2b64      	cmp	r3, #100	@ 0x64
 804225a:	d901      	bls.n	8042260 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 804225c:	2303      	movs	r3, #3
 804225e:	e1d6      	b.n	804260e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8042260:	4b38      	ldr	r3, [pc, #224]	@ (8042344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8042262:	681b      	ldr	r3, [r3, #0]
 8042264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8042268:	2b00      	cmp	r3, #0
 804226a:	d0f0      	beq.n	804224e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 804226c:	4b34      	ldr	r3, [pc, #208]	@ (8042340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 804226e:	6a1b      	ldr	r3, [r3, #32]
 8042270:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8042274:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8042276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8042278:	2b00      	cmp	r3, #0
 804227a:	f000 8084 	beq.w	8042386 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 804227e:	687b      	ldr	r3, [r7, #4]
 8042280:	685b      	ldr	r3, [r3, #4]
 8042282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8042286:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8042288:	429a      	cmp	r2, r3
 804228a:	d07c      	beq.n	8042386 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 804228c:	4b2c      	ldr	r3, [pc, #176]	@ (8042340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 804228e:	6a1b      	ldr	r3, [r3, #32]
 8042290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8042294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8042296:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 804229a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804229c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 804229e:	fa93 f3a3 	rbit	r3, r3
 80422a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80422a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80422a6:	fab3 f383 	clz	r3, r3
 80422aa:	b2db      	uxtb	r3, r3
 80422ac:	461a      	mov	r2, r3
 80422ae:	4b26      	ldr	r3, [pc, #152]	@ (8042348 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80422b0:	4413      	add	r3, r2
 80422b2:	009b      	lsls	r3, r3, #2
 80422b4:	461a      	mov	r2, r3
 80422b6:	2301      	movs	r3, #1
 80422b8:	6013      	str	r3, [r2, #0]
 80422ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80422be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80422c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80422c2:	fa93 f3a3 	rbit	r3, r3
 80422c6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80422c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80422ca:	fab3 f383 	clz	r3, r3
 80422ce:	b2db      	uxtb	r3, r3
 80422d0:	461a      	mov	r2, r3
 80422d2:	4b1d      	ldr	r3, [pc, #116]	@ (8042348 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80422d4:	4413      	add	r3, r2
 80422d6:	009b      	lsls	r3, r3, #2
 80422d8:	461a      	mov	r2, r3
 80422da:	2300      	movs	r3, #0
 80422dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80422de:	4a18      	ldr	r2, [pc, #96]	@ (8042340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80422e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80422e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80422e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80422e6:	f003 0301 	and.w	r3, r3, #1
 80422ea:	2b00      	cmp	r3, #0
 80422ec:	d04b      	beq.n	8042386 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80422ee:	f7fe fa11 	bl	8040714 <HAL_GetTick>
 80422f2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80422f4:	e00a      	b.n	804230c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80422f6:	f7fe fa0d 	bl	8040714 <HAL_GetTick>
 80422fa:	4602      	mov	r2, r0
 80422fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80422fe:	1ad3      	subs	r3, r2, r3
 8042300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8042304:	4293      	cmp	r3, r2
 8042306:	d901      	bls.n	804230c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8042308:	2303      	movs	r3, #3
 804230a:	e180      	b.n	804260e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 804230c:	2302      	movs	r3, #2
 804230e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8042310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8042312:	fa93 f3a3 	rbit	r3, r3
 8042316:	627b      	str	r3, [r7, #36]	@ 0x24
 8042318:	2302      	movs	r3, #2
 804231a:	623b      	str	r3, [r7, #32]
 804231c:	6a3b      	ldr	r3, [r7, #32]
 804231e:	fa93 f3a3 	rbit	r3, r3
 8042322:	61fb      	str	r3, [r7, #28]
  return result;
 8042324:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8042326:	fab3 f383 	clz	r3, r3
 804232a:	b2db      	uxtb	r3, r3
 804232c:	095b      	lsrs	r3, r3, #5
 804232e:	b2db      	uxtb	r3, r3
 8042330:	f043 0302 	orr.w	r3, r3, #2
 8042334:	b2db      	uxtb	r3, r3
 8042336:	2b02      	cmp	r3, #2
 8042338:	d108      	bne.n	804234c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 804233a:	4b01      	ldr	r3, [pc, #4]	@ (8042340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 804233c:	6a1b      	ldr	r3, [r3, #32]
 804233e:	e00d      	b.n	804235c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8042340:	40021000 	.word	0x40021000
 8042344:	40007000 	.word	0x40007000
 8042348:	10908100 	.word	0x10908100
 804234c:	2302      	movs	r3, #2
 804234e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8042350:	69bb      	ldr	r3, [r7, #24]
 8042352:	fa93 f3a3 	rbit	r3, r3
 8042356:	617b      	str	r3, [r7, #20]
 8042358:	4b9a      	ldr	r3, [pc, #616]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804235c:	2202      	movs	r2, #2
 804235e:	613a      	str	r2, [r7, #16]
 8042360:	693a      	ldr	r2, [r7, #16]
 8042362:	fa92 f2a2 	rbit	r2, r2
 8042366:	60fa      	str	r2, [r7, #12]
  return result;
 8042368:	68fa      	ldr	r2, [r7, #12]
 804236a:	fab2 f282 	clz	r2, r2
 804236e:	b2d2      	uxtb	r2, r2
 8042370:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8042374:	b2d2      	uxtb	r2, r2
 8042376:	f002 021f 	and.w	r2, r2, #31
 804237a:	2101      	movs	r1, #1
 804237c:	fa01 f202 	lsl.w	r2, r1, r2
 8042380:	4013      	ands	r3, r2
 8042382:	2b00      	cmp	r3, #0
 8042384:	d0b7      	beq.n	80422f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8042386:	4b8f      	ldr	r3, [pc, #572]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042388:	6a1b      	ldr	r3, [r3, #32]
 804238a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 804238e:	687b      	ldr	r3, [r7, #4]
 8042390:	685b      	ldr	r3, [r3, #4]
 8042392:	498c      	ldr	r1, [pc, #560]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042394:	4313      	orrs	r3, r2
 8042396:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8042398:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 804239c:	2b01      	cmp	r3, #1
 804239e:	d105      	bne.n	80423ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80423a0:	4b88      	ldr	r3, [pc, #544]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80423a2:	69db      	ldr	r3, [r3, #28]
 80423a4:	4a87      	ldr	r2, [pc, #540]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80423a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80423aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80423ac:	687b      	ldr	r3, [r7, #4]
 80423ae:	681b      	ldr	r3, [r3, #0]
 80423b0:	f003 0301 	and.w	r3, r3, #1
 80423b4:	2b00      	cmp	r3, #0
 80423b6:	d008      	beq.n	80423ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80423b8:	4b82      	ldr	r3, [pc, #520]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80423ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80423bc:	f023 0203 	bic.w	r2, r3, #3
 80423c0:	687b      	ldr	r3, [r7, #4]
 80423c2:	689b      	ldr	r3, [r3, #8]
 80423c4:	497f      	ldr	r1, [pc, #508]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80423c6:	4313      	orrs	r3, r2
 80423c8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80423ca:	687b      	ldr	r3, [r7, #4]
 80423cc:	681b      	ldr	r3, [r3, #0]
 80423ce:	f003 0302 	and.w	r3, r3, #2
 80423d2:	2b00      	cmp	r3, #0
 80423d4:	d008      	beq.n	80423e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80423d6:	4b7b      	ldr	r3, [pc, #492]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80423d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80423da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80423de:	687b      	ldr	r3, [r7, #4]
 80423e0:	68db      	ldr	r3, [r3, #12]
 80423e2:	4978      	ldr	r1, [pc, #480]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80423e4:	4313      	orrs	r3, r2
 80423e6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80423e8:	687b      	ldr	r3, [r7, #4]
 80423ea:	681b      	ldr	r3, [r3, #0]
 80423ec:	f003 0304 	and.w	r3, r3, #4
 80423f0:	2b00      	cmp	r3, #0
 80423f2:	d008      	beq.n	8042406 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80423f4:	4b73      	ldr	r3, [pc, #460]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80423f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80423f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80423fc:	687b      	ldr	r3, [r7, #4]
 80423fe:	691b      	ldr	r3, [r3, #16]
 8042400:	4970      	ldr	r1, [pc, #448]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042402:	4313      	orrs	r3, r2
 8042404:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8042406:	687b      	ldr	r3, [r7, #4]
 8042408:	681b      	ldr	r3, [r3, #0]
 804240a:	f003 0320 	and.w	r3, r3, #32
 804240e:	2b00      	cmp	r3, #0
 8042410:	d008      	beq.n	8042424 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8042412:	4b6c      	ldr	r3, [pc, #432]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042416:	f023 0210 	bic.w	r2, r3, #16
 804241a:	687b      	ldr	r3, [r7, #4]
 804241c:	69db      	ldr	r3, [r3, #28]
 804241e:	4969      	ldr	r1, [pc, #420]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042420:	4313      	orrs	r3, r2
 8042422:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8042424:	687b      	ldr	r3, [r7, #4]
 8042426:	681b      	ldr	r3, [r3, #0]
 8042428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804242c:	2b00      	cmp	r3, #0
 804242e:	d008      	beq.n	8042442 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8042430:	4b64      	ldr	r3, [pc, #400]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042432:	685b      	ldr	r3, [r3, #4]
 8042434:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8042438:	687b      	ldr	r3, [r7, #4]
 804243a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804243c:	4961      	ldr	r1, [pc, #388]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804243e:	4313      	orrs	r3, r2
 8042440:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8042442:	687b      	ldr	r3, [r7, #4]
 8042444:	681b      	ldr	r3, [r3, #0]
 8042446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 804244a:	2b00      	cmp	r3, #0
 804244c:	d008      	beq.n	8042460 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 804244e:	4b5d      	ldr	r3, [pc, #372]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042452:	f023 0220 	bic.w	r2, r3, #32
 8042456:	687b      	ldr	r3, [r7, #4]
 8042458:	6a1b      	ldr	r3, [r3, #32]
 804245a:	495a      	ldr	r1, [pc, #360]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804245c:	4313      	orrs	r3, r2
 804245e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8042460:	687b      	ldr	r3, [r7, #4]
 8042462:	681b      	ldr	r3, [r3, #0]
 8042464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8042468:	2b00      	cmp	r3, #0
 804246a:	d008      	beq.n	804247e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 804246c:	4b55      	ldr	r3, [pc, #340]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804246e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042470:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8042474:	687b      	ldr	r3, [r7, #4]
 8042476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042478:	4952      	ldr	r1, [pc, #328]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804247a:	4313      	orrs	r3, r2
 804247c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 804247e:	687b      	ldr	r3, [r7, #4]
 8042480:	681b      	ldr	r3, [r3, #0]
 8042482:	f003 0308 	and.w	r3, r3, #8
 8042486:	2b00      	cmp	r3, #0
 8042488:	d008      	beq.n	804249c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 804248a:	4b4e      	ldr	r3, [pc, #312]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804248e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8042492:	687b      	ldr	r3, [r7, #4]
 8042494:	695b      	ldr	r3, [r3, #20]
 8042496:	494b      	ldr	r1, [pc, #300]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042498:	4313      	orrs	r3, r2
 804249a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 804249c:	687b      	ldr	r3, [r7, #4]
 804249e:	681b      	ldr	r3, [r3, #0]
 80424a0:	f003 0310 	and.w	r3, r3, #16
 80424a4:	2b00      	cmp	r3, #0
 80424a6:	d008      	beq.n	80424ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80424a8:	4b46      	ldr	r3, [pc, #280]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80424aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80424ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80424b0:	687b      	ldr	r3, [r7, #4]
 80424b2:	699b      	ldr	r3, [r3, #24]
 80424b4:	4943      	ldr	r1, [pc, #268]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80424b6:	4313      	orrs	r3, r2
 80424b8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80424ba:	687b      	ldr	r3, [r7, #4]
 80424bc:	681b      	ldr	r3, [r3, #0]
 80424be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80424c2:	2b00      	cmp	r3, #0
 80424c4:	d008      	beq.n	80424d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80424c6:	4b3f      	ldr	r3, [pc, #252]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80424c8:	685b      	ldr	r3, [r3, #4]
 80424ca:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80424ce:	687b      	ldr	r3, [r7, #4]
 80424d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80424d2:	493c      	ldr	r1, [pc, #240]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80424d4:	4313      	orrs	r3, r2
 80424d6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80424d8:	687b      	ldr	r3, [r7, #4]
 80424da:	681b      	ldr	r3, [r3, #0]
 80424dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80424e0:	2b00      	cmp	r3, #0
 80424e2:	d008      	beq.n	80424f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80424e4:	4b37      	ldr	r3, [pc, #220]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80424e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80424e8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80424ec:	687b      	ldr	r3, [r7, #4]
 80424ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80424f0:	4934      	ldr	r1, [pc, #208]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80424f2:	4313      	orrs	r3, r2
 80424f4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80424f6:	687b      	ldr	r3, [r7, #4]
 80424f8:	681b      	ldr	r3, [r3, #0]
 80424fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80424fe:	2b00      	cmp	r3, #0
 8042500:	d008      	beq.n	8042514 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8042502:	4b30      	ldr	r3, [pc, #192]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8042506:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 804250a:	687b      	ldr	r3, [r7, #4]
 804250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804250e:	492d      	ldr	r1, [pc, #180]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042510:	4313      	orrs	r3, r2
 8042512:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8042514:	687b      	ldr	r3, [r7, #4]
 8042516:	681b      	ldr	r3, [r3, #0]
 8042518:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 804251c:	2b00      	cmp	r3, #0
 804251e:	d008      	beq.n	8042532 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8042520:	4b28      	ldr	r3, [pc, #160]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042524:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8042528:	687b      	ldr	r3, [r7, #4]
 804252a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 804252c:	4925      	ldr	r1, [pc, #148]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804252e:	4313      	orrs	r3, r2
 8042530:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8042532:	687b      	ldr	r3, [r7, #4]
 8042534:	681b      	ldr	r3, [r3, #0]
 8042536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 804253a:	2b00      	cmp	r3, #0
 804253c:	d008      	beq.n	8042550 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 804253e:	4b21      	ldr	r3, [pc, #132]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042542:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8042546:	687b      	ldr	r3, [r7, #4]
 8042548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804254a:	491e      	ldr	r1, [pc, #120]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804254c:	4313      	orrs	r3, r2
 804254e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8042550:	687b      	ldr	r3, [r7, #4]
 8042552:	681b      	ldr	r3, [r3, #0]
 8042554:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8042558:	2b00      	cmp	r3, #0
 804255a:	d008      	beq.n	804256e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 804255c:	4b19      	ldr	r3, [pc, #100]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804255e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042560:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8042564:	687b      	ldr	r3, [r7, #4]
 8042566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8042568:	4916      	ldr	r1, [pc, #88]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804256a:	4313      	orrs	r3, r2
 804256c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 804256e:	687b      	ldr	r3, [r7, #4]
 8042570:	681b      	ldr	r3, [r3, #0]
 8042572:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8042576:	2b00      	cmp	r3, #0
 8042578:	d008      	beq.n	804258c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 804257a:	4b12      	ldr	r3, [pc, #72]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804257e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8042582:	687b      	ldr	r3, [r7, #4]
 8042584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042586:	490f      	ldr	r1, [pc, #60]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8042588:	4313      	orrs	r3, r2
 804258a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 804258c:	687b      	ldr	r3, [r7, #4]
 804258e:	681b      	ldr	r3, [r3, #0]
 8042590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8042594:	2b00      	cmp	r3, #0
 8042596:	d008      	beq.n	80425aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8042598:	4b0a      	ldr	r3, [pc, #40]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 804259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804259c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80425a0:	687b      	ldr	r3, [r7, #4]
 80425a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80425a4:	4907      	ldr	r1, [pc, #28]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80425a6:	4313      	orrs	r3, r2
 80425a8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80425aa:	687b      	ldr	r3, [r7, #4]
 80425ac:	681b      	ldr	r3, [r3, #0]
 80425ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80425b2:	2b00      	cmp	r3, #0
 80425b4:	d00c      	beq.n	80425d0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80425b6:	4b03      	ldr	r3, [pc, #12]	@ (80425c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80425b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80425ba:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80425be:	687b      	ldr	r3, [r7, #4]
 80425c0:	e002      	b.n	80425c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80425c2:	bf00      	nop
 80425c4:	40021000 	.word	0x40021000
 80425c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80425ca:	4913      	ldr	r1, [pc, #76]	@ (8042618 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80425cc:	4313      	orrs	r3, r2
 80425ce:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80425d0:	687b      	ldr	r3, [r7, #4]
 80425d2:	681b      	ldr	r3, [r3, #0]
 80425d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80425d8:	2b00      	cmp	r3, #0
 80425da:	d008      	beq.n	80425ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80425dc:	4b0e      	ldr	r3, [pc, #56]	@ (8042618 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80425de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80425e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80425e4:	687b      	ldr	r3, [r7, #4]
 80425e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80425e8:	490b      	ldr	r1, [pc, #44]	@ (8042618 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80425ea:	4313      	orrs	r3, r2
 80425ec:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80425ee:	687b      	ldr	r3, [r7, #4]
 80425f0:	681b      	ldr	r3, [r3, #0]
 80425f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80425f6:	2b00      	cmp	r3, #0
 80425f8:	d008      	beq.n	804260c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80425fa:	4b07      	ldr	r3, [pc, #28]	@ (8042618 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80425fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80425fe:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8042602:	687b      	ldr	r3, [r7, #4]
 8042604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8042606:	4904      	ldr	r1, [pc, #16]	@ (8042618 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8042608:	4313      	orrs	r3, r2
 804260a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 804260c:	2300      	movs	r3, #0
}
 804260e:	4618      	mov	r0, r3
 8042610:	3748      	adds	r7, #72	@ 0x48
 8042612:	46bd      	mov	sp, r7
 8042614:	bd80      	pop	{r7, pc}
 8042616:	bf00      	nop
 8042618:	40021000 	.word	0x40021000

0804261c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 804261c:	b580      	push	{r7, lr}
 804261e:	b082      	sub	sp, #8
 8042620:	af00      	add	r7, sp, #0
 8042622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8042624:	687b      	ldr	r3, [r7, #4]
 8042626:	2b00      	cmp	r3, #0
 8042628:	d101      	bne.n	804262e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 804262a:	2301      	movs	r3, #1
 804262c:	e040      	b.n	80426b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 804262e:	687b      	ldr	r3, [r7, #4]
 8042630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8042632:	2b00      	cmp	r3, #0
 8042634:	d106      	bne.n	8042644 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8042636:	687b      	ldr	r3, [r7, #4]
 8042638:	2200      	movs	r2, #0
 804263a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804263e:	6878      	ldr	r0, [r7, #4]
 8042640:	f7fd ffa2 	bl	8040588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8042644:	687b      	ldr	r3, [r7, #4]
 8042646:	2224      	movs	r2, #36	@ 0x24
 8042648:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 804264a:	687b      	ldr	r3, [r7, #4]
 804264c:	681b      	ldr	r3, [r3, #0]
 804264e:	681a      	ldr	r2, [r3, #0]
 8042650:	687b      	ldr	r3, [r7, #4]
 8042652:	681b      	ldr	r3, [r3, #0]
 8042654:	f022 0201 	bic.w	r2, r2, #1
 8042658:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 804265a:	687b      	ldr	r3, [r7, #4]
 804265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804265e:	2b00      	cmp	r3, #0
 8042660:	d002      	beq.n	8042668 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8042662:	6878      	ldr	r0, [r7, #4]
 8042664:	f000 f9fc 	bl	8042a60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8042668:	6878      	ldr	r0, [r7, #4]
 804266a:	f000 f825 	bl	80426b8 <UART_SetConfig>
 804266e:	4603      	mov	r3, r0
 8042670:	2b01      	cmp	r3, #1
 8042672:	d101      	bne.n	8042678 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8042674:	2301      	movs	r3, #1
 8042676:	e01b      	b.n	80426b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8042678:	687b      	ldr	r3, [r7, #4]
 804267a:	681b      	ldr	r3, [r3, #0]
 804267c:	685a      	ldr	r2, [r3, #4]
 804267e:	687b      	ldr	r3, [r7, #4]
 8042680:	681b      	ldr	r3, [r3, #0]
 8042682:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8042686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8042688:	687b      	ldr	r3, [r7, #4]
 804268a:	681b      	ldr	r3, [r3, #0]
 804268c:	689a      	ldr	r2, [r3, #8]
 804268e:	687b      	ldr	r3, [r7, #4]
 8042690:	681b      	ldr	r3, [r3, #0]
 8042692:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8042696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8042698:	687b      	ldr	r3, [r7, #4]
 804269a:	681b      	ldr	r3, [r3, #0]
 804269c:	681a      	ldr	r2, [r3, #0]
 804269e:	687b      	ldr	r3, [r7, #4]
 80426a0:	681b      	ldr	r3, [r3, #0]
 80426a2:	f042 0201 	orr.w	r2, r2, #1
 80426a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80426a8:	6878      	ldr	r0, [r7, #4]
 80426aa:	f000 fa7b 	bl	8042ba4 <UART_CheckIdleState>
 80426ae:	4603      	mov	r3, r0
}
 80426b0:	4618      	mov	r0, r3
 80426b2:	3708      	adds	r7, #8
 80426b4:	46bd      	mov	sp, r7
 80426b6:	bd80      	pop	{r7, pc}

080426b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80426b8:	b580      	push	{r7, lr}
 80426ba:	b088      	sub	sp, #32
 80426bc:	af00      	add	r7, sp, #0
 80426be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80426c0:	2300      	movs	r3, #0
 80426c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80426c4:	687b      	ldr	r3, [r7, #4]
 80426c6:	689a      	ldr	r2, [r3, #8]
 80426c8:	687b      	ldr	r3, [r7, #4]
 80426ca:	691b      	ldr	r3, [r3, #16]
 80426cc:	431a      	orrs	r2, r3
 80426ce:	687b      	ldr	r3, [r7, #4]
 80426d0:	695b      	ldr	r3, [r3, #20]
 80426d2:	431a      	orrs	r2, r3
 80426d4:	687b      	ldr	r3, [r7, #4]
 80426d6:	69db      	ldr	r3, [r3, #28]
 80426d8:	4313      	orrs	r3, r2
 80426da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80426dc:	687b      	ldr	r3, [r7, #4]
 80426de:	681b      	ldr	r3, [r3, #0]
 80426e0:	681a      	ldr	r2, [r3, #0]
 80426e2:	4b92      	ldr	r3, [pc, #584]	@ (804292c <UART_SetConfig+0x274>)
 80426e4:	4013      	ands	r3, r2
 80426e6:	687a      	ldr	r2, [r7, #4]
 80426e8:	6812      	ldr	r2, [r2, #0]
 80426ea:	6979      	ldr	r1, [r7, #20]
 80426ec:	430b      	orrs	r3, r1
 80426ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80426f0:	687b      	ldr	r3, [r7, #4]
 80426f2:	681b      	ldr	r3, [r3, #0]
 80426f4:	685b      	ldr	r3, [r3, #4]
 80426f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80426fa:	687b      	ldr	r3, [r7, #4]
 80426fc:	68da      	ldr	r2, [r3, #12]
 80426fe:	687b      	ldr	r3, [r7, #4]
 8042700:	681b      	ldr	r3, [r3, #0]
 8042702:	430a      	orrs	r2, r1
 8042704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8042706:	687b      	ldr	r3, [r7, #4]
 8042708:	699b      	ldr	r3, [r3, #24]
 804270a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 804270c:	687b      	ldr	r3, [r7, #4]
 804270e:	6a1b      	ldr	r3, [r3, #32]
 8042710:	697a      	ldr	r2, [r7, #20]
 8042712:	4313      	orrs	r3, r2
 8042714:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8042716:	687b      	ldr	r3, [r7, #4]
 8042718:	681b      	ldr	r3, [r3, #0]
 804271a:	689b      	ldr	r3, [r3, #8]
 804271c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8042720:	687b      	ldr	r3, [r7, #4]
 8042722:	681b      	ldr	r3, [r3, #0]
 8042724:	697a      	ldr	r2, [r7, #20]
 8042726:	430a      	orrs	r2, r1
 8042728:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 804272a:	687b      	ldr	r3, [r7, #4]
 804272c:	681b      	ldr	r3, [r3, #0]
 804272e:	4a80      	ldr	r2, [pc, #512]	@ (8042930 <UART_SetConfig+0x278>)
 8042730:	4293      	cmp	r3, r2
 8042732:	d120      	bne.n	8042776 <UART_SetConfig+0xbe>
 8042734:	4b7f      	ldr	r3, [pc, #508]	@ (8042934 <UART_SetConfig+0x27c>)
 8042736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042738:	f003 0303 	and.w	r3, r3, #3
 804273c:	2b03      	cmp	r3, #3
 804273e:	d817      	bhi.n	8042770 <UART_SetConfig+0xb8>
 8042740:	a201      	add	r2, pc, #4	@ (adr r2, 8042748 <UART_SetConfig+0x90>)
 8042742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042746:	bf00      	nop
 8042748:	08042759 	.word	0x08042759
 804274c:	08042765 	.word	0x08042765
 8042750:	0804276b 	.word	0x0804276b
 8042754:	0804275f 	.word	0x0804275f
 8042758:	2301      	movs	r3, #1
 804275a:	77fb      	strb	r3, [r7, #31]
 804275c:	e0b5      	b.n	80428ca <UART_SetConfig+0x212>
 804275e:	2302      	movs	r3, #2
 8042760:	77fb      	strb	r3, [r7, #31]
 8042762:	e0b2      	b.n	80428ca <UART_SetConfig+0x212>
 8042764:	2304      	movs	r3, #4
 8042766:	77fb      	strb	r3, [r7, #31]
 8042768:	e0af      	b.n	80428ca <UART_SetConfig+0x212>
 804276a:	2308      	movs	r3, #8
 804276c:	77fb      	strb	r3, [r7, #31]
 804276e:	e0ac      	b.n	80428ca <UART_SetConfig+0x212>
 8042770:	2310      	movs	r3, #16
 8042772:	77fb      	strb	r3, [r7, #31]
 8042774:	e0a9      	b.n	80428ca <UART_SetConfig+0x212>
 8042776:	687b      	ldr	r3, [r7, #4]
 8042778:	681b      	ldr	r3, [r3, #0]
 804277a:	4a6f      	ldr	r2, [pc, #444]	@ (8042938 <UART_SetConfig+0x280>)
 804277c:	4293      	cmp	r3, r2
 804277e:	d124      	bne.n	80427ca <UART_SetConfig+0x112>
 8042780:	4b6c      	ldr	r3, [pc, #432]	@ (8042934 <UART_SetConfig+0x27c>)
 8042782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042784:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8042788:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 804278c:	d011      	beq.n	80427b2 <UART_SetConfig+0xfa>
 804278e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8042792:	d817      	bhi.n	80427c4 <UART_SetConfig+0x10c>
 8042794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8042798:	d011      	beq.n	80427be <UART_SetConfig+0x106>
 804279a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 804279e:	d811      	bhi.n	80427c4 <UART_SetConfig+0x10c>
 80427a0:	2b00      	cmp	r3, #0
 80427a2:	d003      	beq.n	80427ac <UART_SetConfig+0xf4>
 80427a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80427a8:	d006      	beq.n	80427b8 <UART_SetConfig+0x100>
 80427aa:	e00b      	b.n	80427c4 <UART_SetConfig+0x10c>
 80427ac:	2300      	movs	r3, #0
 80427ae:	77fb      	strb	r3, [r7, #31]
 80427b0:	e08b      	b.n	80428ca <UART_SetConfig+0x212>
 80427b2:	2302      	movs	r3, #2
 80427b4:	77fb      	strb	r3, [r7, #31]
 80427b6:	e088      	b.n	80428ca <UART_SetConfig+0x212>
 80427b8:	2304      	movs	r3, #4
 80427ba:	77fb      	strb	r3, [r7, #31]
 80427bc:	e085      	b.n	80428ca <UART_SetConfig+0x212>
 80427be:	2308      	movs	r3, #8
 80427c0:	77fb      	strb	r3, [r7, #31]
 80427c2:	e082      	b.n	80428ca <UART_SetConfig+0x212>
 80427c4:	2310      	movs	r3, #16
 80427c6:	77fb      	strb	r3, [r7, #31]
 80427c8:	e07f      	b.n	80428ca <UART_SetConfig+0x212>
 80427ca:	687b      	ldr	r3, [r7, #4]
 80427cc:	681b      	ldr	r3, [r3, #0]
 80427ce:	4a5b      	ldr	r2, [pc, #364]	@ (804293c <UART_SetConfig+0x284>)
 80427d0:	4293      	cmp	r3, r2
 80427d2:	d124      	bne.n	804281e <UART_SetConfig+0x166>
 80427d4:	4b57      	ldr	r3, [pc, #348]	@ (8042934 <UART_SetConfig+0x27c>)
 80427d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80427d8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80427dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80427e0:	d011      	beq.n	8042806 <UART_SetConfig+0x14e>
 80427e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80427e6:	d817      	bhi.n	8042818 <UART_SetConfig+0x160>
 80427e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80427ec:	d011      	beq.n	8042812 <UART_SetConfig+0x15a>
 80427ee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80427f2:	d811      	bhi.n	8042818 <UART_SetConfig+0x160>
 80427f4:	2b00      	cmp	r3, #0
 80427f6:	d003      	beq.n	8042800 <UART_SetConfig+0x148>
 80427f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80427fc:	d006      	beq.n	804280c <UART_SetConfig+0x154>
 80427fe:	e00b      	b.n	8042818 <UART_SetConfig+0x160>
 8042800:	2300      	movs	r3, #0
 8042802:	77fb      	strb	r3, [r7, #31]
 8042804:	e061      	b.n	80428ca <UART_SetConfig+0x212>
 8042806:	2302      	movs	r3, #2
 8042808:	77fb      	strb	r3, [r7, #31]
 804280a:	e05e      	b.n	80428ca <UART_SetConfig+0x212>
 804280c:	2304      	movs	r3, #4
 804280e:	77fb      	strb	r3, [r7, #31]
 8042810:	e05b      	b.n	80428ca <UART_SetConfig+0x212>
 8042812:	2308      	movs	r3, #8
 8042814:	77fb      	strb	r3, [r7, #31]
 8042816:	e058      	b.n	80428ca <UART_SetConfig+0x212>
 8042818:	2310      	movs	r3, #16
 804281a:	77fb      	strb	r3, [r7, #31]
 804281c:	e055      	b.n	80428ca <UART_SetConfig+0x212>
 804281e:	687b      	ldr	r3, [r7, #4]
 8042820:	681b      	ldr	r3, [r3, #0]
 8042822:	4a47      	ldr	r2, [pc, #284]	@ (8042940 <UART_SetConfig+0x288>)
 8042824:	4293      	cmp	r3, r2
 8042826:	d124      	bne.n	8042872 <UART_SetConfig+0x1ba>
 8042828:	4b42      	ldr	r3, [pc, #264]	@ (8042934 <UART_SetConfig+0x27c>)
 804282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804282c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8042830:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8042834:	d011      	beq.n	804285a <UART_SetConfig+0x1a2>
 8042836:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 804283a:	d817      	bhi.n	804286c <UART_SetConfig+0x1b4>
 804283c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8042840:	d011      	beq.n	8042866 <UART_SetConfig+0x1ae>
 8042842:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8042846:	d811      	bhi.n	804286c <UART_SetConfig+0x1b4>
 8042848:	2b00      	cmp	r3, #0
 804284a:	d003      	beq.n	8042854 <UART_SetConfig+0x19c>
 804284c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8042850:	d006      	beq.n	8042860 <UART_SetConfig+0x1a8>
 8042852:	e00b      	b.n	804286c <UART_SetConfig+0x1b4>
 8042854:	2300      	movs	r3, #0
 8042856:	77fb      	strb	r3, [r7, #31]
 8042858:	e037      	b.n	80428ca <UART_SetConfig+0x212>
 804285a:	2302      	movs	r3, #2
 804285c:	77fb      	strb	r3, [r7, #31]
 804285e:	e034      	b.n	80428ca <UART_SetConfig+0x212>
 8042860:	2304      	movs	r3, #4
 8042862:	77fb      	strb	r3, [r7, #31]
 8042864:	e031      	b.n	80428ca <UART_SetConfig+0x212>
 8042866:	2308      	movs	r3, #8
 8042868:	77fb      	strb	r3, [r7, #31]
 804286a:	e02e      	b.n	80428ca <UART_SetConfig+0x212>
 804286c:	2310      	movs	r3, #16
 804286e:	77fb      	strb	r3, [r7, #31]
 8042870:	e02b      	b.n	80428ca <UART_SetConfig+0x212>
 8042872:	687b      	ldr	r3, [r7, #4]
 8042874:	681b      	ldr	r3, [r3, #0]
 8042876:	4a33      	ldr	r2, [pc, #204]	@ (8042944 <UART_SetConfig+0x28c>)
 8042878:	4293      	cmp	r3, r2
 804287a:	d124      	bne.n	80428c6 <UART_SetConfig+0x20e>
 804287c:	4b2d      	ldr	r3, [pc, #180]	@ (8042934 <UART_SetConfig+0x27c>)
 804287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042880:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8042884:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8042888:	d011      	beq.n	80428ae <UART_SetConfig+0x1f6>
 804288a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 804288e:	d817      	bhi.n	80428c0 <UART_SetConfig+0x208>
 8042890:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8042894:	d011      	beq.n	80428ba <UART_SetConfig+0x202>
 8042896:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 804289a:	d811      	bhi.n	80428c0 <UART_SetConfig+0x208>
 804289c:	2b00      	cmp	r3, #0
 804289e:	d003      	beq.n	80428a8 <UART_SetConfig+0x1f0>
 80428a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80428a4:	d006      	beq.n	80428b4 <UART_SetConfig+0x1fc>
 80428a6:	e00b      	b.n	80428c0 <UART_SetConfig+0x208>
 80428a8:	2300      	movs	r3, #0
 80428aa:	77fb      	strb	r3, [r7, #31]
 80428ac:	e00d      	b.n	80428ca <UART_SetConfig+0x212>
 80428ae:	2302      	movs	r3, #2
 80428b0:	77fb      	strb	r3, [r7, #31]
 80428b2:	e00a      	b.n	80428ca <UART_SetConfig+0x212>
 80428b4:	2304      	movs	r3, #4
 80428b6:	77fb      	strb	r3, [r7, #31]
 80428b8:	e007      	b.n	80428ca <UART_SetConfig+0x212>
 80428ba:	2308      	movs	r3, #8
 80428bc:	77fb      	strb	r3, [r7, #31]
 80428be:	e004      	b.n	80428ca <UART_SetConfig+0x212>
 80428c0:	2310      	movs	r3, #16
 80428c2:	77fb      	strb	r3, [r7, #31]
 80428c4:	e001      	b.n	80428ca <UART_SetConfig+0x212>
 80428c6:	2310      	movs	r3, #16
 80428c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80428ca:	687b      	ldr	r3, [r7, #4]
 80428cc:	69db      	ldr	r3, [r3, #28]
 80428ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80428d2:	d16b      	bne.n	80429ac <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80428d4:	7ffb      	ldrb	r3, [r7, #31]
 80428d6:	2b08      	cmp	r3, #8
 80428d8:	d838      	bhi.n	804294c <UART_SetConfig+0x294>
 80428da:	a201      	add	r2, pc, #4	@ (adr r2, 80428e0 <UART_SetConfig+0x228>)
 80428dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80428e0:	08042905 	.word	0x08042905
 80428e4:	0804290d 	.word	0x0804290d
 80428e8:	08042915 	.word	0x08042915
 80428ec:	0804294d 	.word	0x0804294d
 80428f0:	0804291b 	.word	0x0804291b
 80428f4:	0804294d 	.word	0x0804294d
 80428f8:	0804294d 	.word	0x0804294d
 80428fc:	0804294d 	.word	0x0804294d
 8042900:	08042923 	.word	0x08042923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042904:	f7ff fc28 	bl	8042158 <HAL_RCC_GetPCLK1Freq>
 8042908:	61b8      	str	r0, [r7, #24]
        break;
 804290a:	e024      	b.n	8042956 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804290c:	f7ff fc46 	bl	804219c <HAL_RCC_GetPCLK2Freq>
 8042910:	61b8      	str	r0, [r7, #24]
        break;
 8042912:	e020      	b.n	8042956 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042914:	4b0c      	ldr	r3, [pc, #48]	@ (8042948 <UART_SetConfig+0x290>)
 8042916:	61bb      	str	r3, [r7, #24]
        break;
 8042918:	e01d      	b.n	8042956 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804291a:	f7ff fbbd 	bl	8042098 <HAL_RCC_GetSysClockFreq>
 804291e:	61b8      	str	r0, [r7, #24]
        break;
 8042920:	e019      	b.n	8042956 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042926:	61bb      	str	r3, [r7, #24]
        break;
 8042928:	e015      	b.n	8042956 <UART_SetConfig+0x29e>
 804292a:	bf00      	nop
 804292c:	efff69f3 	.word	0xefff69f3
 8042930:	40013800 	.word	0x40013800
 8042934:	40021000 	.word	0x40021000
 8042938:	40004400 	.word	0x40004400
 804293c:	40004800 	.word	0x40004800
 8042940:	40004c00 	.word	0x40004c00
 8042944:	40005000 	.word	0x40005000
 8042948:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 804294c:	2300      	movs	r3, #0
 804294e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8042950:	2301      	movs	r3, #1
 8042952:	77bb      	strb	r3, [r7, #30]
        break;
 8042954:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8042956:	69bb      	ldr	r3, [r7, #24]
 8042958:	2b00      	cmp	r3, #0
 804295a:	d073      	beq.n	8042a44 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 804295c:	69bb      	ldr	r3, [r7, #24]
 804295e:	005a      	lsls	r2, r3, #1
 8042960:	687b      	ldr	r3, [r7, #4]
 8042962:	685b      	ldr	r3, [r3, #4]
 8042964:	085b      	lsrs	r3, r3, #1
 8042966:	441a      	add	r2, r3
 8042968:	687b      	ldr	r3, [r7, #4]
 804296a:	685b      	ldr	r3, [r3, #4]
 804296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8042970:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042972:	693b      	ldr	r3, [r7, #16]
 8042974:	2b0f      	cmp	r3, #15
 8042976:	d916      	bls.n	80429a6 <UART_SetConfig+0x2ee>
 8042978:	693b      	ldr	r3, [r7, #16]
 804297a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 804297e:	d212      	bcs.n	80429a6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8042980:	693b      	ldr	r3, [r7, #16]
 8042982:	b29b      	uxth	r3, r3
 8042984:	f023 030f 	bic.w	r3, r3, #15
 8042988:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 804298a:	693b      	ldr	r3, [r7, #16]
 804298c:	085b      	lsrs	r3, r3, #1
 804298e:	b29b      	uxth	r3, r3
 8042990:	f003 0307 	and.w	r3, r3, #7
 8042994:	b29a      	uxth	r2, r3
 8042996:	89fb      	ldrh	r3, [r7, #14]
 8042998:	4313      	orrs	r3, r2
 804299a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 804299c:	687b      	ldr	r3, [r7, #4]
 804299e:	681b      	ldr	r3, [r3, #0]
 80429a0:	89fa      	ldrh	r2, [r7, #14]
 80429a2:	60da      	str	r2, [r3, #12]
 80429a4:	e04e      	b.n	8042a44 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80429a6:	2301      	movs	r3, #1
 80429a8:	77bb      	strb	r3, [r7, #30]
 80429aa:	e04b      	b.n	8042a44 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80429ac:	7ffb      	ldrb	r3, [r7, #31]
 80429ae:	2b08      	cmp	r3, #8
 80429b0:	d827      	bhi.n	8042a02 <UART_SetConfig+0x34a>
 80429b2:	a201      	add	r2, pc, #4	@ (adr r2, 80429b8 <UART_SetConfig+0x300>)
 80429b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80429b8:	080429dd 	.word	0x080429dd
 80429bc:	080429e5 	.word	0x080429e5
 80429c0:	080429ed 	.word	0x080429ed
 80429c4:	08042a03 	.word	0x08042a03
 80429c8:	080429f3 	.word	0x080429f3
 80429cc:	08042a03 	.word	0x08042a03
 80429d0:	08042a03 	.word	0x08042a03
 80429d4:	08042a03 	.word	0x08042a03
 80429d8:	080429fb 	.word	0x080429fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80429dc:	f7ff fbbc 	bl	8042158 <HAL_RCC_GetPCLK1Freq>
 80429e0:	61b8      	str	r0, [r7, #24]
        break;
 80429e2:	e013      	b.n	8042a0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80429e4:	f7ff fbda 	bl	804219c <HAL_RCC_GetPCLK2Freq>
 80429e8:	61b8      	str	r0, [r7, #24]
        break;
 80429ea:	e00f      	b.n	8042a0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80429ec:	4b1b      	ldr	r3, [pc, #108]	@ (8042a5c <UART_SetConfig+0x3a4>)
 80429ee:	61bb      	str	r3, [r7, #24]
        break;
 80429f0:	e00c      	b.n	8042a0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80429f2:	f7ff fb51 	bl	8042098 <HAL_RCC_GetSysClockFreq>
 80429f6:	61b8      	str	r0, [r7, #24]
        break;
 80429f8:	e008      	b.n	8042a0c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80429fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80429fe:	61bb      	str	r3, [r7, #24]
        break;
 8042a00:	e004      	b.n	8042a0c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8042a02:	2300      	movs	r3, #0
 8042a04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8042a06:	2301      	movs	r3, #1
 8042a08:	77bb      	strb	r3, [r7, #30]
        break;
 8042a0a:	bf00      	nop
    }

    if (pclk != 0U)
 8042a0c:	69bb      	ldr	r3, [r7, #24]
 8042a0e:	2b00      	cmp	r3, #0
 8042a10:	d018      	beq.n	8042a44 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8042a12:	687b      	ldr	r3, [r7, #4]
 8042a14:	685b      	ldr	r3, [r3, #4]
 8042a16:	085a      	lsrs	r2, r3, #1
 8042a18:	69bb      	ldr	r3, [r7, #24]
 8042a1a:	441a      	add	r2, r3
 8042a1c:	687b      	ldr	r3, [r7, #4]
 8042a1e:	685b      	ldr	r3, [r3, #4]
 8042a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8042a24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042a26:	693b      	ldr	r3, [r7, #16]
 8042a28:	2b0f      	cmp	r3, #15
 8042a2a:	d909      	bls.n	8042a40 <UART_SetConfig+0x388>
 8042a2c:	693b      	ldr	r3, [r7, #16]
 8042a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042a32:	d205      	bcs.n	8042a40 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8042a34:	693b      	ldr	r3, [r7, #16]
 8042a36:	b29a      	uxth	r2, r3
 8042a38:	687b      	ldr	r3, [r7, #4]
 8042a3a:	681b      	ldr	r3, [r3, #0]
 8042a3c:	60da      	str	r2, [r3, #12]
 8042a3e:	e001      	b.n	8042a44 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8042a40:	2301      	movs	r3, #1
 8042a42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8042a44:	687b      	ldr	r3, [r7, #4]
 8042a46:	2200      	movs	r2, #0
 8042a48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8042a4a:	687b      	ldr	r3, [r7, #4]
 8042a4c:	2200      	movs	r2, #0
 8042a4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8042a50:	7fbb      	ldrb	r3, [r7, #30]
}
 8042a52:	4618      	mov	r0, r3
 8042a54:	3720      	adds	r7, #32
 8042a56:	46bd      	mov	sp, r7
 8042a58:	bd80      	pop	{r7, pc}
 8042a5a:	bf00      	nop
 8042a5c:	007a1200 	.word	0x007a1200

08042a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8042a60:	b480      	push	{r7}
 8042a62:	b083      	sub	sp, #12
 8042a64:	af00      	add	r7, sp, #0
 8042a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8042a68:	687b      	ldr	r3, [r7, #4]
 8042a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042a6c:	f003 0308 	and.w	r3, r3, #8
 8042a70:	2b00      	cmp	r3, #0
 8042a72:	d00a      	beq.n	8042a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8042a74:	687b      	ldr	r3, [r7, #4]
 8042a76:	681b      	ldr	r3, [r3, #0]
 8042a78:	685b      	ldr	r3, [r3, #4]
 8042a7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8042a7e:	687b      	ldr	r3, [r7, #4]
 8042a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8042a82:	687b      	ldr	r3, [r7, #4]
 8042a84:	681b      	ldr	r3, [r3, #0]
 8042a86:	430a      	orrs	r2, r1
 8042a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8042a8a:	687b      	ldr	r3, [r7, #4]
 8042a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042a8e:	f003 0301 	and.w	r3, r3, #1
 8042a92:	2b00      	cmp	r3, #0
 8042a94:	d00a      	beq.n	8042aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8042a96:	687b      	ldr	r3, [r7, #4]
 8042a98:	681b      	ldr	r3, [r3, #0]
 8042a9a:	685b      	ldr	r3, [r3, #4]
 8042a9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8042aa0:	687b      	ldr	r3, [r7, #4]
 8042aa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8042aa4:	687b      	ldr	r3, [r7, #4]
 8042aa6:	681b      	ldr	r3, [r3, #0]
 8042aa8:	430a      	orrs	r2, r1
 8042aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8042aac:	687b      	ldr	r3, [r7, #4]
 8042aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042ab0:	f003 0302 	and.w	r3, r3, #2
 8042ab4:	2b00      	cmp	r3, #0
 8042ab6:	d00a      	beq.n	8042ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8042ab8:	687b      	ldr	r3, [r7, #4]
 8042aba:	681b      	ldr	r3, [r3, #0]
 8042abc:	685b      	ldr	r3, [r3, #4]
 8042abe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8042ac2:	687b      	ldr	r3, [r7, #4]
 8042ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8042ac6:	687b      	ldr	r3, [r7, #4]
 8042ac8:	681b      	ldr	r3, [r3, #0]
 8042aca:	430a      	orrs	r2, r1
 8042acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8042ace:	687b      	ldr	r3, [r7, #4]
 8042ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042ad2:	f003 0304 	and.w	r3, r3, #4
 8042ad6:	2b00      	cmp	r3, #0
 8042ad8:	d00a      	beq.n	8042af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8042ada:	687b      	ldr	r3, [r7, #4]
 8042adc:	681b      	ldr	r3, [r3, #0]
 8042ade:	685b      	ldr	r3, [r3, #4]
 8042ae0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8042ae4:	687b      	ldr	r3, [r7, #4]
 8042ae6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8042ae8:	687b      	ldr	r3, [r7, #4]
 8042aea:	681b      	ldr	r3, [r3, #0]
 8042aec:	430a      	orrs	r2, r1
 8042aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8042af0:	687b      	ldr	r3, [r7, #4]
 8042af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042af4:	f003 0310 	and.w	r3, r3, #16
 8042af8:	2b00      	cmp	r3, #0
 8042afa:	d00a      	beq.n	8042b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8042afc:	687b      	ldr	r3, [r7, #4]
 8042afe:	681b      	ldr	r3, [r3, #0]
 8042b00:	689b      	ldr	r3, [r3, #8]
 8042b02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8042b06:	687b      	ldr	r3, [r7, #4]
 8042b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8042b0a:	687b      	ldr	r3, [r7, #4]
 8042b0c:	681b      	ldr	r3, [r3, #0]
 8042b0e:	430a      	orrs	r2, r1
 8042b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8042b12:	687b      	ldr	r3, [r7, #4]
 8042b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042b16:	f003 0320 	and.w	r3, r3, #32
 8042b1a:	2b00      	cmp	r3, #0
 8042b1c:	d00a      	beq.n	8042b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8042b1e:	687b      	ldr	r3, [r7, #4]
 8042b20:	681b      	ldr	r3, [r3, #0]
 8042b22:	689b      	ldr	r3, [r3, #8]
 8042b24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8042b28:	687b      	ldr	r3, [r7, #4]
 8042b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8042b2c:	687b      	ldr	r3, [r7, #4]
 8042b2e:	681b      	ldr	r3, [r3, #0]
 8042b30:	430a      	orrs	r2, r1
 8042b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8042b34:	687b      	ldr	r3, [r7, #4]
 8042b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8042b3c:	2b00      	cmp	r3, #0
 8042b3e:	d01a      	beq.n	8042b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8042b40:	687b      	ldr	r3, [r7, #4]
 8042b42:	681b      	ldr	r3, [r3, #0]
 8042b44:	685b      	ldr	r3, [r3, #4]
 8042b46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8042b4a:	687b      	ldr	r3, [r7, #4]
 8042b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8042b4e:	687b      	ldr	r3, [r7, #4]
 8042b50:	681b      	ldr	r3, [r3, #0]
 8042b52:	430a      	orrs	r2, r1
 8042b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8042b56:	687b      	ldr	r3, [r7, #4]
 8042b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8042b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8042b5e:	d10a      	bne.n	8042b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8042b60:	687b      	ldr	r3, [r7, #4]
 8042b62:	681b      	ldr	r3, [r3, #0]
 8042b64:	685b      	ldr	r3, [r3, #4]
 8042b66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8042b6a:	687b      	ldr	r3, [r7, #4]
 8042b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8042b6e:	687b      	ldr	r3, [r7, #4]
 8042b70:	681b      	ldr	r3, [r3, #0]
 8042b72:	430a      	orrs	r2, r1
 8042b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8042b76:	687b      	ldr	r3, [r7, #4]
 8042b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8042b7e:	2b00      	cmp	r3, #0
 8042b80:	d00a      	beq.n	8042b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8042b82:	687b      	ldr	r3, [r7, #4]
 8042b84:	681b      	ldr	r3, [r3, #0]
 8042b86:	685b      	ldr	r3, [r3, #4]
 8042b88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8042b8c:	687b      	ldr	r3, [r7, #4]
 8042b8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8042b90:	687b      	ldr	r3, [r7, #4]
 8042b92:	681b      	ldr	r3, [r3, #0]
 8042b94:	430a      	orrs	r2, r1
 8042b96:	605a      	str	r2, [r3, #4]
  }
}
 8042b98:	bf00      	nop
 8042b9a:	370c      	adds	r7, #12
 8042b9c:	46bd      	mov	sp, r7
 8042b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ba2:	4770      	bx	lr

08042ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8042ba4:	b580      	push	{r7, lr}
 8042ba6:	b098      	sub	sp, #96	@ 0x60
 8042ba8:	af02      	add	r7, sp, #8
 8042baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042bac:	687b      	ldr	r3, [r7, #4]
 8042bae:	2200      	movs	r2, #0
 8042bb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8042bb4:	f7fd fdae 	bl	8040714 <HAL_GetTick>
 8042bb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8042bba:	687b      	ldr	r3, [r7, #4]
 8042bbc:	681b      	ldr	r3, [r3, #0]
 8042bbe:	681b      	ldr	r3, [r3, #0]
 8042bc0:	f003 0308 	and.w	r3, r3, #8
 8042bc4:	2b08      	cmp	r3, #8
 8042bc6:	d12e      	bne.n	8042c26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042bc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8042bcc:	9300      	str	r3, [sp, #0]
 8042bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8042bd0:	2200      	movs	r2, #0
 8042bd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8042bd6:	6878      	ldr	r0, [r7, #4]
 8042bd8:	f000 f88c 	bl	8042cf4 <UART_WaitOnFlagUntilTimeout>
 8042bdc:	4603      	mov	r3, r0
 8042bde:	2b00      	cmp	r3, #0
 8042be0:	d021      	beq.n	8042c26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8042be2:	687b      	ldr	r3, [r7, #4]
 8042be4:	681b      	ldr	r3, [r3, #0]
 8042be6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8042bea:	e853 3f00 	ldrex	r3, [r3]
 8042bee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8042bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8042bf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8042bf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8042bf8:	687b      	ldr	r3, [r7, #4]
 8042bfa:	681b      	ldr	r3, [r3, #0]
 8042bfc:	461a      	mov	r2, r3
 8042bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8042c00:	647b      	str	r3, [r7, #68]	@ 0x44
 8042c02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042c04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8042c06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8042c08:	e841 2300 	strex	r3, r2, [r1]
 8042c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8042c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8042c10:	2b00      	cmp	r3, #0
 8042c12:	d1e6      	bne.n	8042be2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8042c14:	687b      	ldr	r3, [r7, #4]
 8042c16:	2220      	movs	r2, #32
 8042c18:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8042c1a:	687b      	ldr	r3, [r7, #4]
 8042c1c:	2200      	movs	r2, #0
 8042c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042c22:	2303      	movs	r3, #3
 8042c24:	e062      	b.n	8042cec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8042c26:	687b      	ldr	r3, [r7, #4]
 8042c28:	681b      	ldr	r3, [r3, #0]
 8042c2a:	681b      	ldr	r3, [r3, #0]
 8042c2c:	f003 0304 	and.w	r3, r3, #4
 8042c30:	2b04      	cmp	r3, #4
 8042c32:	d149      	bne.n	8042cc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042c34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8042c38:	9300      	str	r3, [sp, #0]
 8042c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8042c3c:	2200      	movs	r2, #0
 8042c3e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8042c42:	6878      	ldr	r0, [r7, #4]
 8042c44:	f000 f856 	bl	8042cf4 <UART_WaitOnFlagUntilTimeout>
 8042c48:	4603      	mov	r3, r0
 8042c4a:	2b00      	cmp	r3, #0
 8042c4c:	d03c      	beq.n	8042cc8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8042c4e:	687b      	ldr	r3, [r7, #4]
 8042c50:	681b      	ldr	r3, [r3, #0]
 8042c52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042c56:	e853 3f00 	ldrex	r3, [r3]
 8042c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8042c5c:	6a3b      	ldr	r3, [r7, #32]
 8042c5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8042c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8042c64:	687b      	ldr	r3, [r7, #4]
 8042c66:	681b      	ldr	r3, [r3, #0]
 8042c68:	461a      	mov	r2, r3
 8042c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8042c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8042c6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042c70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8042c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8042c74:	e841 2300 	strex	r3, r2, [r1]
 8042c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8042c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8042c7c:	2b00      	cmp	r3, #0
 8042c7e:	d1e6      	bne.n	8042c4e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042c80:	687b      	ldr	r3, [r7, #4]
 8042c82:	681b      	ldr	r3, [r3, #0]
 8042c84:	3308      	adds	r3, #8
 8042c86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042c88:	693b      	ldr	r3, [r7, #16]
 8042c8a:	e853 3f00 	ldrex	r3, [r3]
 8042c8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8042c90:	68fb      	ldr	r3, [r7, #12]
 8042c92:	f023 0301 	bic.w	r3, r3, #1
 8042c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8042c98:	687b      	ldr	r3, [r7, #4]
 8042c9a:	681b      	ldr	r3, [r3, #0]
 8042c9c:	3308      	adds	r3, #8
 8042c9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8042ca0:	61fa      	str	r2, [r7, #28]
 8042ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042ca4:	69b9      	ldr	r1, [r7, #24]
 8042ca6:	69fa      	ldr	r2, [r7, #28]
 8042ca8:	e841 2300 	strex	r3, r2, [r1]
 8042cac:	617b      	str	r3, [r7, #20]
   return(result);
 8042cae:	697b      	ldr	r3, [r7, #20]
 8042cb0:	2b00      	cmp	r3, #0
 8042cb2:	d1e5      	bne.n	8042c80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8042cb4:	687b      	ldr	r3, [r7, #4]
 8042cb6:	2220      	movs	r2, #32
 8042cb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8042cbc:	687b      	ldr	r3, [r7, #4]
 8042cbe:	2200      	movs	r2, #0
 8042cc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042cc4:	2303      	movs	r3, #3
 8042cc6:	e011      	b.n	8042cec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8042cc8:	687b      	ldr	r3, [r7, #4]
 8042cca:	2220      	movs	r2, #32
 8042ccc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8042cce:	687b      	ldr	r3, [r7, #4]
 8042cd0:	2220      	movs	r2, #32
 8042cd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042cd6:	687b      	ldr	r3, [r7, #4]
 8042cd8:	2200      	movs	r2, #0
 8042cda:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8042cdc:	687b      	ldr	r3, [r7, #4]
 8042cde:	2200      	movs	r2, #0
 8042ce0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8042ce2:	687b      	ldr	r3, [r7, #4]
 8042ce4:	2200      	movs	r2, #0
 8042ce6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8042cea:	2300      	movs	r3, #0
}
 8042cec:	4618      	mov	r0, r3
 8042cee:	3758      	adds	r7, #88	@ 0x58
 8042cf0:	46bd      	mov	sp, r7
 8042cf2:	bd80      	pop	{r7, pc}

08042cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8042cf4:	b580      	push	{r7, lr}
 8042cf6:	b084      	sub	sp, #16
 8042cf8:	af00      	add	r7, sp, #0
 8042cfa:	60f8      	str	r0, [r7, #12]
 8042cfc:	60b9      	str	r1, [r7, #8]
 8042cfe:	603b      	str	r3, [r7, #0]
 8042d00:	4613      	mov	r3, r2
 8042d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042d04:	e04f      	b.n	8042da6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042d06:	69bb      	ldr	r3, [r7, #24]
 8042d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042d0c:	d04b      	beq.n	8042da6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042d0e:	f7fd fd01 	bl	8040714 <HAL_GetTick>
 8042d12:	4602      	mov	r2, r0
 8042d14:	683b      	ldr	r3, [r7, #0]
 8042d16:	1ad3      	subs	r3, r2, r3
 8042d18:	69ba      	ldr	r2, [r7, #24]
 8042d1a:	429a      	cmp	r2, r3
 8042d1c:	d302      	bcc.n	8042d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8042d1e:	69bb      	ldr	r3, [r7, #24]
 8042d20:	2b00      	cmp	r3, #0
 8042d22:	d101      	bne.n	8042d28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8042d24:	2303      	movs	r3, #3
 8042d26:	e04e      	b.n	8042dc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8042d28:	68fb      	ldr	r3, [r7, #12]
 8042d2a:	681b      	ldr	r3, [r3, #0]
 8042d2c:	681b      	ldr	r3, [r3, #0]
 8042d2e:	f003 0304 	and.w	r3, r3, #4
 8042d32:	2b00      	cmp	r3, #0
 8042d34:	d037      	beq.n	8042da6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8042d36:	68bb      	ldr	r3, [r7, #8]
 8042d38:	2b80      	cmp	r3, #128	@ 0x80
 8042d3a:	d034      	beq.n	8042da6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8042d3c:	68bb      	ldr	r3, [r7, #8]
 8042d3e:	2b40      	cmp	r3, #64	@ 0x40
 8042d40:	d031      	beq.n	8042da6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8042d42:	68fb      	ldr	r3, [r7, #12]
 8042d44:	681b      	ldr	r3, [r3, #0]
 8042d46:	69db      	ldr	r3, [r3, #28]
 8042d48:	f003 0308 	and.w	r3, r3, #8
 8042d4c:	2b08      	cmp	r3, #8
 8042d4e:	d110      	bne.n	8042d72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8042d50:	68fb      	ldr	r3, [r7, #12]
 8042d52:	681b      	ldr	r3, [r3, #0]
 8042d54:	2208      	movs	r2, #8
 8042d56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8042d58:	68f8      	ldr	r0, [r7, #12]
 8042d5a:	f000 f838 	bl	8042dce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8042d5e:	68fb      	ldr	r3, [r7, #12]
 8042d60:	2208      	movs	r2, #8
 8042d62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042d66:	68fb      	ldr	r3, [r7, #12]
 8042d68:	2200      	movs	r2, #0
 8042d6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8042d6e:	2301      	movs	r3, #1
 8042d70:	e029      	b.n	8042dc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8042d72:	68fb      	ldr	r3, [r7, #12]
 8042d74:	681b      	ldr	r3, [r3, #0]
 8042d76:	69db      	ldr	r3, [r3, #28]
 8042d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8042d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8042d80:	d111      	bne.n	8042da6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042d82:	68fb      	ldr	r3, [r7, #12]
 8042d84:	681b      	ldr	r3, [r3, #0]
 8042d86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8042d8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8042d8c:	68f8      	ldr	r0, [r7, #12]
 8042d8e:	f000 f81e 	bl	8042dce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8042d92:	68fb      	ldr	r3, [r7, #12]
 8042d94:	2220      	movs	r2, #32
 8042d96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042d9a:	68fb      	ldr	r3, [r7, #12]
 8042d9c:	2200      	movs	r2, #0
 8042d9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8042da2:	2303      	movs	r3, #3
 8042da4:	e00f      	b.n	8042dc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042da6:	68fb      	ldr	r3, [r7, #12]
 8042da8:	681b      	ldr	r3, [r3, #0]
 8042daa:	69da      	ldr	r2, [r3, #28]
 8042dac:	68bb      	ldr	r3, [r7, #8]
 8042dae:	4013      	ands	r3, r2
 8042db0:	68ba      	ldr	r2, [r7, #8]
 8042db2:	429a      	cmp	r2, r3
 8042db4:	bf0c      	ite	eq
 8042db6:	2301      	moveq	r3, #1
 8042db8:	2300      	movne	r3, #0
 8042dba:	b2db      	uxtb	r3, r3
 8042dbc:	461a      	mov	r2, r3
 8042dbe:	79fb      	ldrb	r3, [r7, #7]
 8042dc0:	429a      	cmp	r2, r3
 8042dc2:	d0a0      	beq.n	8042d06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8042dc4:	2300      	movs	r3, #0
}
 8042dc6:	4618      	mov	r0, r3
 8042dc8:	3710      	adds	r7, #16
 8042dca:	46bd      	mov	sp, r7
 8042dcc:	bd80      	pop	{r7, pc}

08042dce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8042dce:	b480      	push	{r7}
 8042dd0:	b095      	sub	sp, #84	@ 0x54
 8042dd2:	af00      	add	r7, sp, #0
 8042dd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8042dd6:	687b      	ldr	r3, [r7, #4]
 8042dd8:	681b      	ldr	r3, [r3, #0]
 8042dda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8042dde:	e853 3f00 	ldrex	r3, [r3]
 8042de2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8042de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8042de6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8042dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8042dec:	687b      	ldr	r3, [r7, #4]
 8042dee:	681b      	ldr	r3, [r3, #0]
 8042df0:	461a      	mov	r2, r3
 8042df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8042df4:	643b      	str	r3, [r7, #64]	@ 0x40
 8042df6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042df8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8042dfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8042dfc:	e841 2300 	strex	r3, r2, [r1]
 8042e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8042e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8042e04:	2b00      	cmp	r3, #0
 8042e06:	d1e6      	bne.n	8042dd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042e08:	687b      	ldr	r3, [r7, #4]
 8042e0a:	681b      	ldr	r3, [r3, #0]
 8042e0c:	3308      	adds	r3, #8
 8042e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042e10:	6a3b      	ldr	r3, [r7, #32]
 8042e12:	e853 3f00 	ldrex	r3, [r3]
 8042e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8042e18:	69fb      	ldr	r3, [r7, #28]
 8042e1a:	f023 0301 	bic.w	r3, r3, #1
 8042e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8042e20:	687b      	ldr	r3, [r7, #4]
 8042e22:	681b      	ldr	r3, [r3, #0]
 8042e24:	3308      	adds	r3, #8
 8042e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8042e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8042e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042e2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8042e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8042e30:	e841 2300 	strex	r3, r2, [r1]
 8042e34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8042e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042e38:	2b00      	cmp	r3, #0
 8042e3a:	d1e5      	bne.n	8042e08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042e3c:	687b      	ldr	r3, [r7, #4]
 8042e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8042e40:	2b01      	cmp	r3, #1
 8042e42:	d118      	bne.n	8042e76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042e44:	687b      	ldr	r3, [r7, #4]
 8042e46:	681b      	ldr	r3, [r3, #0]
 8042e48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042e4a:	68fb      	ldr	r3, [r7, #12]
 8042e4c:	e853 3f00 	ldrex	r3, [r3]
 8042e50:	60bb      	str	r3, [r7, #8]
   return(result);
 8042e52:	68bb      	ldr	r3, [r7, #8]
 8042e54:	f023 0310 	bic.w	r3, r3, #16
 8042e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8042e5a:	687b      	ldr	r3, [r7, #4]
 8042e5c:	681b      	ldr	r3, [r3, #0]
 8042e5e:	461a      	mov	r2, r3
 8042e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8042e62:	61bb      	str	r3, [r7, #24]
 8042e64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042e66:	6979      	ldr	r1, [r7, #20]
 8042e68:	69ba      	ldr	r2, [r7, #24]
 8042e6a:	e841 2300 	strex	r3, r2, [r1]
 8042e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8042e70:	693b      	ldr	r3, [r7, #16]
 8042e72:	2b00      	cmp	r3, #0
 8042e74:	d1e6      	bne.n	8042e44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8042e76:	687b      	ldr	r3, [r7, #4]
 8042e78:	2220      	movs	r2, #32
 8042e7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042e7e:	687b      	ldr	r3, [r7, #4]
 8042e80:	2200      	movs	r2, #0
 8042e82:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8042e84:	687b      	ldr	r3, [r7, #4]
 8042e86:	2200      	movs	r2, #0
 8042e88:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8042e8a:	bf00      	nop
 8042e8c:	3754      	adds	r7, #84	@ 0x54
 8042e8e:	46bd      	mov	sp, r7
 8042e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e94:	4770      	bx	lr

08042e96 <led_toggle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_toggle( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin )
{
 8042e96:	b580      	push	{r7, lr}
 8042e98:	b082      	sub	sp, #8
 8042e9a:	af00      	add	r7, sp, #0
 8042e9c:	6078      	str	r0, [r7, #4]
 8042e9e:	460b      	mov	r3, r1
 8042ea0:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin( GPIOx, GPIO_Pin );
 8042ea2:	887b      	ldrh	r3, [r7, #2]
 8042ea4:	4619      	mov	r1, r3
 8042ea6:	6878      	ldr	r0, [r7, #4]
 8042ea8:	f7fd fef4 	bl	8040c94 <HAL_GPIO_TogglePin>
	return;
 8042eac:	bf00      	nop
}
 8042eae:	3708      	adds	r7, #8
 8042eb0:	46bd      	mov	sp, r7
 8042eb2:	bd80      	pop	{r7, pc}

08042eb4 <led_run>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_run()
{
 8042eb4:	b580      	push	{r7, lr}
 8042eb6:	af00      	add	r7, sp, #0
	led_toggle( LD2_GPIO_Port, LD2_Pin);
 8042eb8:	2120      	movs	r1, #32
 8042eba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8042ebe:	f7ff ffea 	bl	8042e96 <led_toggle>
}
 8042ec2:	bf00      	nop
 8042ec4:	bd80      	pop	{r7, pc}
	...

08042ec8 <scheduler_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void scheduler_init( void )
{
 8042ec8:	b480      	push	{r7}
 8042eca:	b083      	sub	sp, #12
 8042ecc:	af00      	add	r7, sp, #0
	schedulerVars.nrOfTasks = 0;
 8042ece:	4b2a      	ldr	r3, [pc, #168]	@ (8042f78 <scheduler_init+0xb0>)
 8042ed0:	2200      	movs	r2, #0
 8042ed2:	701a      	strb	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8042ed4:	2300      	movs	r3, #0
 8042ed6:	71fb      	strb	r3, [r7, #7]
 8042ed8:	e020      	b.n	8042f1c <scheduler_init+0x54>
	{
		schedulerVars.taskList[i].pTask = NULL;
 8042eda:	79fa      	ldrb	r2, [r7, #7]
 8042edc:	4926      	ldr	r1, [pc, #152]	@ (8042f78 <scheduler_init+0xb0>)
 8042ede:	4613      	mov	r3, r2
 8042ee0:	005b      	lsls	r3, r3, #1
 8042ee2:	4413      	add	r3, r2
 8042ee4:	009b      	lsls	r3, r3, #2
 8042ee6:	440b      	add	r3, r1
 8042ee8:	3304      	adds	r3, #4
 8042eea:	2200      	movs	r2, #0
 8042eec:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].delay = 0;
 8042eee:	79fa      	ldrb	r2, [r7, #7]
 8042ef0:	4921      	ldr	r1, [pc, #132]	@ (8042f78 <scheduler_init+0xb0>)
 8042ef2:	4613      	mov	r3, r2
 8042ef4:	005b      	lsls	r3, r3, #1
 8042ef6:	4413      	add	r3, r2
 8042ef8:	009b      	lsls	r3, r3, #2
 8042efa:	440b      	add	r3, r1
 8042efc:	3308      	adds	r3, #8
 8042efe:	2200      	movs	r2, #0
 8042f00:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].lastExecutionTime = 0;
 8042f02:	79fa      	ldrb	r2, [r7, #7]
 8042f04:	491c      	ldr	r1, [pc, #112]	@ (8042f78 <scheduler_init+0xb0>)
 8042f06:	4613      	mov	r3, r2
 8042f08:	005b      	lsls	r3, r3, #1
 8042f0a:	4413      	add	r3, r2
 8042f0c:	009b      	lsls	r3, r3, #2
 8042f0e:	440b      	add	r3, r1
 8042f10:	330c      	adds	r3, #12
 8042f12:	2200      	movs	r2, #0
 8042f14:	601a      	str	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8042f16:	79fb      	ldrb	r3, [r7, #7]
 8042f18:	3301      	adds	r3, #1
 8042f1a:	71fb      	strb	r3, [r7, #7]
 8042f1c:	79fb      	ldrb	r3, [r7, #7]
 8042f1e:	2b09      	cmp	r3, #9
 8042f20:	d9db      	bls.n	8042eda <scheduler_init+0x12>
	}

	// init run once queue.
	schedulerVars.RunOnceQueue.head  = 0;
 8042f22:	4b15      	ldr	r3, [pc, #84]	@ (8042f78 <scheduler_init+0xb0>)
 8042f24:	2200      	movs	r2, #0
 8042f26:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	schedulerVars.RunOnceQueue.tail  = 0;
 8042f2a:	4b13      	ldr	r3, [pc, #76]	@ (8042f78 <scheduler_init+0xb0>)
 8042f2c:	2200      	movs	r2, #0
 8042f2e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
	schedulerVars.RunOnceQueue.full  = 0;
 8042f32:	4b11      	ldr	r3, [pc, #68]	@ (8042f78 <scheduler_init+0xb0>)
 8042f34:	2200      	movs	r2, #0
 8042f36:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	schedulerVars.RunOnceQueue.empty = 1;
 8042f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8042f78 <scheduler_init+0xb0>)
 8042f3c:	2201      	movs	r2, #1
 8042f3e:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	schedulerVars.RunOnceQueue.size  = 0;
 8042f42:	4b0d      	ldr	r3, [pc, #52]	@ (8042f78 <scheduler_init+0xb0>)
 8042f44:	2200      	movs	r2, #0
 8042f46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8042f4a:	2300      	movs	r3, #0
 8042f4c:	71bb      	strb	r3, [r7, #6]
 8042f4e:	e009      	b.n	8042f64 <scheduler_init+0x9c>
	{
		schedulerVars.RunOnceQueue.runOnceTaskList[i].pTask = NULL;
 8042f50:	79bb      	ldrb	r3, [r7, #6]
 8042f52:	4a09      	ldr	r2, [pc, #36]	@ (8042f78 <scheduler_init+0xb0>)
 8042f54:	3320      	adds	r3, #32
 8042f56:	009b      	lsls	r3, r3, #2
 8042f58:	4413      	add	r3, r2
 8042f5a:	2200      	movs	r2, #0
 8042f5c:	605a      	str	r2, [r3, #4]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8042f5e:	79bb      	ldrb	r3, [r7, #6]
 8042f60:	3301      	adds	r3, #1
 8042f62:	71bb      	strb	r3, [r7, #6]
 8042f64:	79bb      	ldrb	r3, [r7, #6]
 8042f66:	2b13      	cmp	r3, #19
 8042f68:	d9f2      	bls.n	8042f50 <scheduler_init+0x88>
	}
}
 8042f6a:	bf00      	nop
 8042f6c:	bf00      	nop
 8042f6e:	370c      	adds	r7, #12
 8042f70:	46bd      	mov	sp, r7
 8042f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f76:	4770      	bx	lr
 8042f78:	200000b4 	.word	0x200000b4

08042f7c <scheduler_addTask>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t scheduler_addTask( uint32_t delay, void (*pTask)(void) )
{
 8042f7c:	b480      	push	{r7}
 8042f7e:	b085      	sub	sp, #20
 8042f80:	af00      	add	r7, sp, #0
 8042f82:	6078      	str	r0, [r7, #4]
 8042f84:	6039      	str	r1, [r7, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8042f86:	2300      	movs	r3, #0
 8042f88:	73fb      	strb	r3, [r7, #15]
 8042f8a:	e029      	b.n	8042fe0 <scheduler_addTask+0x64>
	{
		// search for available task.
		if ( schedulerVars.taskList[i].pTask == NULL )
 8042f8c:	7bfa      	ldrb	r2, [r7, #15]
 8042f8e:	4919      	ldr	r1, [pc, #100]	@ (8042ff4 <scheduler_addTask+0x78>)
 8042f90:	4613      	mov	r3, r2
 8042f92:	005b      	lsls	r3, r3, #1
 8042f94:	4413      	add	r3, r2
 8042f96:	009b      	lsls	r3, r3, #2
 8042f98:	440b      	add	r3, r1
 8042f9a:	3304      	adds	r3, #4
 8042f9c:	681b      	ldr	r3, [r3, #0]
 8042f9e:	2b00      	cmp	r3, #0
 8042fa0:	d11b      	bne.n	8042fda <scheduler_addTask+0x5e>
		{
			schedulerVars.taskList[i].pTask = pTask;
 8042fa2:	7bfa      	ldrb	r2, [r7, #15]
 8042fa4:	4913      	ldr	r1, [pc, #76]	@ (8042ff4 <scheduler_addTask+0x78>)
 8042fa6:	4613      	mov	r3, r2
 8042fa8:	005b      	lsls	r3, r3, #1
 8042faa:	4413      	add	r3, r2
 8042fac:	009b      	lsls	r3, r3, #2
 8042fae:	440b      	add	r3, r1
 8042fb0:	3304      	adds	r3, #4
 8042fb2:	683a      	ldr	r2, [r7, #0]
 8042fb4:	601a      	str	r2, [r3, #0]
			schedulerVars.taskList[i].delay = delay;
 8042fb6:	7bfa      	ldrb	r2, [r7, #15]
 8042fb8:	490e      	ldr	r1, [pc, #56]	@ (8042ff4 <scheduler_addTask+0x78>)
 8042fba:	4613      	mov	r3, r2
 8042fbc:	005b      	lsls	r3, r3, #1
 8042fbe:	4413      	add	r3, r2
 8042fc0:	009b      	lsls	r3, r3, #2
 8042fc2:	440b      	add	r3, r1
 8042fc4:	3308      	adds	r3, #8
 8042fc6:	687a      	ldr	r2, [r7, #4]
 8042fc8:	601a      	str	r2, [r3, #0]
			schedulerVars.nrOfTasks += 1;
 8042fca:	4b0a      	ldr	r3, [pc, #40]	@ (8042ff4 <scheduler_addTask+0x78>)
 8042fcc:	781b      	ldrb	r3, [r3, #0]
 8042fce:	3301      	adds	r3, #1
 8042fd0:	b2da      	uxtb	r2, r3
 8042fd2:	4b08      	ldr	r3, [pc, #32]	@ (8042ff4 <scheduler_addTask+0x78>)
 8042fd4:	701a      	strb	r2, [r3, #0]
			return 1;
 8042fd6:	2301      	movs	r3, #1
 8042fd8:	e006      	b.n	8042fe8 <scheduler_addTask+0x6c>
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8042fda:	7bfb      	ldrb	r3, [r7, #15]
 8042fdc:	3301      	adds	r3, #1
 8042fde:	73fb      	strb	r3, [r7, #15]
 8042fe0:	7bfb      	ldrb	r3, [r7, #15]
 8042fe2:	2b09      	cmp	r3, #9
 8042fe4:	d9d2      	bls.n	8042f8c <scheduler_addTask+0x10>
		}
	}
	// no available task was found
	return 0;
 8042fe6:	2300      	movs	r3, #0
}
 8042fe8:	4618      	mov	r0, r3
 8042fea:	3714      	adds	r7, #20
 8042fec:	46bd      	mov	sp, r7
 8042fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ff2:	4770      	bx	lr
 8042ff4:	200000b4 	.word	0x200000b4

08042ff8 <scheduler_run>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void scheduler_run( void )
{
 8042ff8:	b580      	push	{r7, lr}
 8042ffa:	b084      	sub	sp, #16
 8042ffc:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 8042ffe:	2300      	movs	r3, #0
 8043000:	60bb      	str	r3, [r7, #8]
	while( 1 )
	{
		// run once tasks:
		while ( !schedulerVars.RunOnceQueue.empty )
 8043002:	e00d      	b.n	8043020 <scheduler_run+0x28>
		{
			void (*pRunOnce)(void) = NULL;
 8043004:	2300      	movs	r3, #0
 8043006:	607b      	str	r3, [r7, #4]

			if ( 0 == scheduler_popTask( &pRunOnce ) )
 8043008:	1d3b      	adds	r3, r7, #4
 804300a:	4618      	mov	r0, r3
 804300c:	f000 f848 	bl	80430a0 <scheduler_popTask>
 8043010:	4603      	mov	r3, r0
 8043012:	2b00      	cmp	r3, #0
 8043014:	d104      	bne.n	8043020 <scheduler_run+0x28>
				if ( pRunOnce != NULL )
 8043016:	687b      	ldr	r3, [r7, #4]
 8043018:	2b00      	cmp	r3, #0
 804301a:	d001      	beq.n	8043020 <scheduler_run+0x28>
					{
						pRunOnce();
 804301c:	687b      	ldr	r3, [r7, #4]
 804301e:	4798      	blx	r3
		while ( !schedulerVars.RunOnceQueue.empty )
 8043020:	4b1e      	ldr	r3, [pc, #120]	@ (804309c <scheduler_run+0xa4>)
 8043022:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8043026:	2b00      	cmp	r3, #0
 8043028:	d0ec      	beq.n	8043004 <scheduler_run+0xc>
					}
		}

		// repeated tasks:
		now = HAL_GetTick();
 804302a:	f7fd fb73 	bl	8040714 <HAL_GetTick>
 804302e:	60b8      	str	r0, [r7, #8]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8043030:	2300      	movs	r3, #0
 8043032:	73fb      	strb	r3, [r7, #15]
 8043034:	e02c      	b.n	8043090 <scheduler_run+0x98>
		{
			if ( now - schedulerVars.taskList[i].lastExecutionTime  >= schedulerVars.taskList[i].delay )
 8043036:	7bfa      	ldrb	r2, [r7, #15]
 8043038:	4918      	ldr	r1, [pc, #96]	@ (804309c <scheduler_run+0xa4>)
 804303a:	4613      	mov	r3, r2
 804303c:	005b      	lsls	r3, r3, #1
 804303e:	4413      	add	r3, r2
 8043040:	009b      	lsls	r3, r3, #2
 8043042:	440b      	add	r3, r1
 8043044:	330c      	adds	r3, #12
 8043046:	681b      	ldr	r3, [r3, #0]
 8043048:	68ba      	ldr	r2, [r7, #8]
 804304a:	1ad1      	subs	r1, r2, r3
 804304c:	7bfa      	ldrb	r2, [r7, #15]
 804304e:	4813      	ldr	r0, [pc, #76]	@ (804309c <scheduler_run+0xa4>)
 8043050:	4613      	mov	r3, r2
 8043052:	005b      	lsls	r3, r3, #1
 8043054:	4413      	add	r3, r2
 8043056:	009b      	lsls	r3, r3, #2
 8043058:	4403      	add	r3, r0
 804305a:	3308      	adds	r3, #8
 804305c:	681b      	ldr	r3, [r3, #0]
 804305e:	4299      	cmp	r1, r3
 8043060:	d313      	bcc.n	804308a <scheduler_run+0x92>
			{
				// execute task
				schedulerVars.taskList[i].pTask();
 8043062:	7bfa      	ldrb	r2, [r7, #15]
 8043064:	490d      	ldr	r1, [pc, #52]	@ (804309c <scheduler_run+0xa4>)
 8043066:	4613      	mov	r3, r2
 8043068:	005b      	lsls	r3, r3, #1
 804306a:	4413      	add	r3, r2
 804306c:	009b      	lsls	r3, r3, #2
 804306e:	440b      	add	r3, r1
 8043070:	3304      	adds	r3, #4
 8043072:	681b      	ldr	r3, [r3, #0]
 8043074:	4798      	blx	r3
				schedulerVars.taskList[i].lastExecutionTime = now;
 8043076:	7bfa      	ldrb	r2, [r7, #15]
 8043078:	4908      	ldr	r1, [pc, #32]	@ (804309c <scheduler_run+0xa4>)
 804307a:	4613      	mov	r3, r2
 804307c:	005b      	lsls	r3, r3, #1
 804307e:	4413      	add	r3, r2
 8043080:	009b      	lsls	r3, r3, #2
 8043082:	440b      	add	r3, r1
 8043084:	330c      	adds	r3, #12
 8043086:	68ba      	ldr	r2, [r7, #8]
 8043088:	601a      	str	r2, [r3, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 804308a:	7bfb      	ldrb	r3, [r7, #15]
 804308c:	3301      	adds	r3, #1
 804308e:	73fb      	strb	r3, [r7, #15]
 8043090:	4b02      	ldr	r3, [pc, #8]	@ (804309c <scheduler_run+0xa4>)
 8043092:	781b      	ldrb	r3, [r3, #0]
 8043094:	7bfa      	ldrb	r2, [r7, #15]
 8043096:	429a      	cmp	r2, r3
 8043098:	d3cd      	bcc.n	8043036 <scheduler_run+0x3e>
		while ( !schedulerVars.RunOnceQueue.empty )
 804309a:	e7c1      	b.n	8043020 <scheduler_run+0x28>
 804309c:	200000b4 	.word	0x200000b4

080430a0 <scheduler_popTask>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t scheduler_popTask( void (**pTask)(void) )
{
 80430a0:	b480      	push	{r7}
 80430a2:	b083      	sub	sp, #12
 80430a4:	af00      	add	r7, sp, #0
 80430a6:	6078      	str	r0, [r7, #4]
	// is queue empty?
	if ( schedulerVars.RunOnceQueue.empty )
 80430a8:	4b22      	ldr	r3, [pc, #136]	@ (8043134 <scheduler_popTask+0x94>)
 80430aa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80430ae:	2b00      	cmp	r3, #0
 80430b0:	d001      	beq.n	80430b6 <scheduler_popTask+0x16>
		return 1;
 80430b2:	2301      	movs	r3, #1
 80430b4:	e037      	b.n	8043126 <scheduler_popTask+0x86>

	// pick that oldest task.
	*pTask = schedulerVars.RunOnceQueue.runOnceTaskList[ schedulerVars.RunOnceQueue.head ].pTask;
 80430b6:	4b1f      	ldr	r3, [pc, #124]	@ (8043134 <scheduler_popTask+0x94>)
 80430b8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80430bc:	4a1d      	ldr	r2, [pc, #116]	@ (8043134 <scheduler_popTask+0x94>)
 80430be:	3320      	adds	r3, #32
 80430c0:	009b      	lsls	r3, r3, #2
 80430c2:	4413      	add	r3, r2
 80430c4:	685a      	ldr	r2, [r3, #4]
 80430c6:	687b      	ldr	r3, [r7, #4]
 80430c8:	601a      	str	r2, [r3, #0]

	// update head index
	schedulerVars.RunOnceQueue.head = ( schedulerVars.RunOnceQueue.head + 1 ) % SCHEDULER_MAX_NR_RUN_ONCE_TASKS;
 80430ca:	4b1a      	ldr	r3, [pc, #104]	@ (8043134 <scheduler_popTask+0x94>)
 80430cc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80430d0:	1c5a      	adds	r2, r3, #1
 80430d2:	4b19      	ldr	r3, [pc, #100]	@ (8043138 <scheduler_popTask+0x98>)
 80430d4:	fb83 1302 	smull	r1, r3, r3, r2
 80430d8:	10d9      	asrs	r1, r3, #3
 80430da:	17d3      	asrs	r3, r2, #31
 80430dc:	1ac9      	subs	r1, r1, r3
 80430de:	460b      	mov	r3, r1
 80430e0:	009b      	lsls	r3, r3, #2
 80430e2:	440b      	add	r3, r1
 80430e4:	009b      	lsls	r3, r3, #2
 80430e6:	1ad1      	subs	r1, r2, r3
 80430e8:	b2ca      	uxtb	r2, r1
 80430ea:	4b12      	ldr	r3, [pc, #72]	@ (8043134 <scheduler_popTask+0x94>)
 80430ec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	schedulerVars.RunOnceQueue.size -= 1;
 80430f0:	4b10      	ldr	r3, [pc, #64]	@ (8043134 <scheduler_popTask+0x94>)
 80430f2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80430f6:	3b01      	subs	r3, #1
 80430f8:	b2da      	uxtb	r2, r3
 80430fa:	4b0e      	ldr	r3, [pc, #56]	@ (8043134 <scheduler_popTask+0x94>)
 80430fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	// if it was full, it is not now
	if ( schedulerVars.RunOnceQueue.full == 1 )
 8043100:	4b0c      	ldr	r3, [pc, #48]	@ (8043134 <scheduler_popTask+0x94>)
 8043102:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8043106:	2b01      	cmp	r3, #1
 8043108:	d103      	bne.n	8043112 <scheduler_popTask+0x72>
	{
		schedulerVars.RunOnceQueue.full = 0;
 804310a:	4b0a      	ldr	r3, [pc, #40]	@ (8043134 <scheduler_popTask+0x94>)
 804310c:	2200      	movs	r2, #0
 804310e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	}

	// check if empty
	if ( schedulerVars.RunOnceQueue.size == 0 )
 8043112:	4b08      	ldr	r3, [pc, #32]	@ (8043134 <scheduler_popTask+0x94>)
 8043114:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8043118:	2b00      	cmp	r3, #0
 804311a:	d103      	bne.n	8043124 <scheduler_popTask+0x84>
	{
		schedulerVars.RunOnceQueue.empty = 1;
 804311c:	4b05      	ldr	r3, [pc, #20]	@ (8043134 <scheduler_popTask+0x94>)
 804311e:	2201      	movs	r2, #1
 8043120:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	}
	return 0;
 8043124:	2300      	movs	r3, #0
}
 8043126:	4618      	mov	r0, r3
 8043128:	370c      	adds	r7, #12
 804312a:	46bd      	mov	sp, r7
 804312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043130:	4770      	bx	lr
 8043132:	bf00      	nop
 8043134:	200000b4 	.word	0x200000b4
 8043138:	66666667 	.word	0x66666667

0804313c <memset>:
 804313c:	4402      	add	r2, r0
 804313e:	4603      	mov	r3, r0
 8043140:	4293      	cmp	r3, r2
 8043142:	d100      	bne.n	8043146 <memset+0xa>
 8043144:	4770      	bx	lr
 8043146:	f803 1b01 	strb.w	r1, [r3], #1
 804314a:	e7f9      	b.n	8043140 <memset+0x4>

0804314c <__libc_init_array>:
 804314c:	b570      	push	{r4, r5, r6, lr}
 804314e:	4d0d      	ldr	r5, [pc, #52]	@ (8043184 <__libc_init_array+0x38>)
 8043150:	4c0d      	ldr	r4, [pc, #52]	@ (8043188 <__libc_init_array+0x3c>)
 8043152:	1b64      	subs	r4, r4, r5
 8043154:	10a4      	asrs	r4, r4, #2
 8043156:	2600      	movs	r6, #0
 8043158:	42a6      	cmp	r6, r4
 804315a:	d109      	bne.n	8043170 <__libc_init_array+0x24>
 804315c:	4d0b      	ldr	r5, [pc, #44]	@ (804318c <__libc_init_array+0x40>)
 804315e:	4c0c      	ldr	r4, [pc, #48]	@ (8043190 <__libc_init_array+0x44>)
 8043160:	f000 f818 	bl	8043194 <_init>
 8043164:	1b64      	subs	r4, r4, r5
 8043166:	10a4      	asrs	r4, r4, #2
 8043168:	2600      	movs	r6, #0
 804316a:	42a6      	cmp	r6, r4
 804316c:	d105      	bne.n	804317a <__libc_init_array+0x2e>
 804316e:	bd70      	pop	{r4, r5, r6, pc}
 8043170:	f855 3b04 	ldr.w	r3, [r5], #4
 8043174:	4798      	blx	r3
 8043176:	3601      	adds	r6, #1
 8043178:	e7ee      	b.n	8043158 <__libc_init_array+0xc>
 804317a:	f855 3b04 	ldr.w	r3, [r5], #4
 804317e:	4798      	blx	r3
 8043180:	3601      	adds	r6, #1
 8043182:	e7f2      	b.n	804316a <__libc_init_array+0x1e>
 8043184:	080431e4 	.word	0x080431e4
 8043188:	080431e4 	.word	0x080431e4
 804318c:	080431e4 	.word	0x080431e4
 8043190:	080431e8 	.word	0x080431e8

08043194 <_init>:
 8043194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043196:	bf00      	nop
 8043198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804319a:	bc08      	pop	{r3}
 804319c:	469e      	mov	lr, r3
 804319e:	4770      	bx	lr

080431a0 <_fini>:
 80431a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80431a2:	bf00      	nop
 80431a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80431a6:	bc08      	pop	{r3}
 80431a8:	469e      	mov	lr, r3
 80431aa:	4770      	bx	lr

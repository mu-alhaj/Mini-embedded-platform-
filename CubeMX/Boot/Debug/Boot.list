
Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e84  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004018  08004018  00005018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004050  08004050  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004050  08004050  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004050  08004050  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004050  08004050  00005050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004054  08004054  00005054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004058  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000184  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000190  20000190  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b120  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f04  00000000  00000000  0001115c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  00013060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000611  00000000  00000000  00013868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020084  00000000  00000000  00013e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd4f  00000000  00000000  00033efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfae8  00000000  00000000  00040c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100734  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e68  00000000  00000000  00100778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  001025e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004000 	.word	0x08004000

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004000 	.word	0x08004000

080001d4 <circularBuffer_init>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_init( tCircularBuffer* pBuffer, uint8_t* pData, uint16_t size )
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	4613      	mov	r3, r2
 80001e0:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if ( pBuffer == NULL || pData == NULL || size == 0 )
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d005      	beq.n	80001f4 <circularBuffer_init+0x20>
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d002      	beq.n	80001f4 <circularBuffer_init+0x20>
 80001ee:	88fb      	ldrh	r3, [r7, #6]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d101      	bne.n	80001f8 <circularBuffer_init+0x24>
	{
		return 1;
 80001f4:	2301      	movs	r3, #1
 80001f6:	e014      	b.n	8000222 <circularBuffer_init+0x4e>
	}

	// initialize the buffer
	pBuffer->size 		= size;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	88fa      	ldrh	r2, [r7, #6]
 80001fc:	801a      	strh	r2, [r3, #0]
	pBuffer->start 	= 0;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	2200      	movs	r2, #0
 8000202:	809a      	strh	r2, [r3, #4]
	pBuffer->end   	= 0;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	2200      	movs	r2, #0
 8000208:	805a      	strh	r2, [r3, #2]
	pBuffer->pBuffer 	= pData;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	68ba      	ldr	r2, [r7, #8]
 800020e:	609a      	str	r2, [r3, #8]
	memset( pBuffer->pBuffer, 1, pBuffer->size );
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	6898      	ldr	r0, [r3, #8]
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	881b      	ldrh	r3, [r3, #0]
 8000218:	461a      	mov	r2, r3
 800021a:	2101      	movs	r1, #1
 800021c:	f003 feb5 	bl	8003f8a <memset>

	return 0;
 8000220:	2300      	movs	r3, #0
}
 8000222:	4618      	mov	r0, r3
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}

0800022a <circularBuffer_push>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_push( tCircularBuffer* pCbuffer, uint8_t* pInData, uint16_t size )
{
 800022a:	b580      	push	{r7, lr}
 800022c:	b086      	sub	sp, #24
 800022e:	af00      	add	r7, sp, #0
 8000230:	60f8      	str	r0, [r7, #12]
 8000232:	60b9      	str	r1, [r7, #8]
 8000234:	4613      	mov	r3, r2
 8000236:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if( pCbuffer == NULL || pInData == NULL || pCbuffer->size < size )
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d007      	beq.n	800024e <circularBuffer_push+0x24>
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d004      	beq.n	800024e <circularBuffer_push+0x24>
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	88fa      	ldrh	r2, [r7, #6]
 800024a:	429a      	cmp	r2, r3
 800024c:	d901      	bls.n	8000252 <circularBuffer_push+0x28>
	{
		return 1;
 800024e:	2301      	movs	r3, #1
 8000250:	e037      	b.n	80002c2 <circularBuffer_push+0x98>
	 *    n n s d d d d e n n
	 *    d d d e n n n s d d
	 * */

	// do we need to loop over the buffer?
	uint16_t toTheEnd = pCbuffer->size - pCbuffer->end;
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	881a      	ldrh	r2, [r3, #0]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	885b      	ldrh	r3, [r3, #2]
 800025a:	1ad3      	subs	r3, r2, r3
 800025c:	82fb      	strh	r3, [r7, #22]
	uint8_t* pDes = &(*pCbuffer).pBuffer[pCbuffer->end];
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	68fa      	ldr	r2, [r7, #12]
 8000264:	8852      	ldrh	r2, [r2, #2]
 8000266:	4413      	add	r3, r2
 8000268:	613b      	str	r3, [r7, #16]
	if ( toTheEnd < size )
 800026a:	8afa      	ldrh	r2, [r7, #22]
 800026c:	88fb      	ldrh	r3, [r7, #6]
 800026e:	429a      	cmp	r2, r3
 8000270:	d211      	bcs.n	8000296 <circularBuffer_push+0x6c>
	{
		// first copy from the end of the existing data to the end of the buffer
		memcpy( pDes, pInData, toTheEnd );
 8000272:	8afb      	ldrh	r3, [r7, #22]
 8000274:	461a      	mov	r2, r3
 8000276:	68b9      	ldr	r1, [r7, #8]
 8000278:	6938      	ldr	r0, [r7, #16]
 800027a:	f003 feb3 	bl	8003fe4 <memcpy>
		// copy the reset of the inData from the beginning of the buffer.
		memcpy( (*pCbuffer).pBuffer, &pInData[toTheEnd], ( size - toTheEnd ) );
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	6898      	ldr	r0, [r3, #8]
 8000282:	8afb      	ldrh	r3, [r7, #22]
 8000284:	68ba      	ldr	r2, [r7, #8]
 8000286:	18d1      	adds	r1, r2, r3
 8000288:	88fa      	ldrh	r2, [r7, #6]
 800028a:	8afb      	ldrh	r3, [r7, #22]
 800028c:	1ad3      	subs	r3, r2, r3
 800028e:	461a      	mov	r2, r3
 8000290:	f003 fea8 	bl	8003fe4 <memcpy>
 8000294:	e005      	b.n	80002a2 <circularBuffer_push+0x78>
	}
	else
	{
		memcpy( pDes, pInData, size );
 8000296:	88fb      	ldrh	r3, [r7, #6]
 8000298:	461a      	mov	r2, r3
 800029a:	68b9      	ldr	r1, [r7, #8]
 800029c:	6938      	ldr	r0, [r7, #16]
 800029e:	f003 fea1 	bl	8003fe4 <memcpy>
		//pBuffer->pBuffer[pBuffer->end] = pInData[0];
	}

	pCbuffer->end = ( pCbuffer->end + size ) % pCbuffer->size;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	885b      	ldrh	r3, [r3, #2]
 80002a6:	461a      	mov	r2, r3
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	4413      	add	r3, r2
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	8812      	ldrh	r2, [r2, #0]
 80002b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80002b4:	fb01 f202 	mul.w	r2, r1, r2
 80002b8:	1a9b      	subs	r3, r3, r2
 80002ba:	b29a      	uxth	r2, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	805a      	strh	r2, [r3, #2]

	return 0;
 80002c0:	2300      	movs	r3, #0
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3718      	adds	r7, #24
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <MX_DMA_Init+0x38>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000304 <MX_DMA_Init+0x38>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <MX_DMA_Init+0x38>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2100      	movs	r1, #0
 80002ee:	2010      	movs	r0, #16
 80002f0:	f000 fc11 	bl	8000b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002f4:	2010      	movs	r0, #16
 80002f6:	f000 fc2a 	bl	8000b4e <HAL_NVIC_EnableIRQ>

}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08a      	sub	sp, #40	@ 0x28
 800030c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800031e:	4b4b      	ldr	r3, [pc, #300]	@ (800044c <MX_GPIO_Init+0x144>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a4a      	ldr	r2, [pc, #296]	@ (800044c <MX_GPIO_Init+0x144>)
 8000324:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b48      	ldr	r3, [pc, #288]	@ (800044c <MX_GPIO_Init+0x144>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000332:	613b      	str	r3, [r7, #16]
 8000334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000336:	4b45      	ldr	r3, [pc, #276]	@ (800044c <MX_GPIO_Init+0x144>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a44      	ldr	r2, [pc, #272]	@ (800044c <MX_GPIO_Init+0x144>)
 800033c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b42      	ldr	r3, [pc, #264]	@ (800044c <MX_GPIO_Init+0x144>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034e:	4b3f      	ldr	r3, [pc, #252]	@ (800044c <MX_GPIO_Init+0x144>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a3e      	ldr	r2, [pc, #248]	@ (800044c <MX_GPIO_Init+0x144>)
 8000354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b3c      	ldr	r3, [pc, #240]	@ (800044c <MX_GPIO_Init+0x144>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000366:	4b39      	ldr	r3, [pc, #228]	@ (800044c <MX_GPIO_Init+0x144>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a38      	ldr	r2, [pc, #224]	@ (800044c <MX_GPIO_Init+0x144>)
 800036c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b36      	ldr	r3, [pc, #216]	@ (800044c <MX_GPIO_Init+0x144>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037e:	4b33      	ldr	r3, [pc, #204]	@ (800044c <MX_GPIO_Init+0x144>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a32      	ldr	r2, [pc, #200]	@ (800044c <MX_GPIO_Init+0x144>)
 8000384:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000388:	6153      	str	r3, [r2, #20]
 800038a:	4b30      	ldr	r3, [pc, #192]	@ (800044c <MX_GPIO_Init+0x144>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2120      	movs	r1, #32
 800039a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800039e:	f000 ffa9 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	4619      	mov	r1, r3
 80003b8:	4825      	ldr	r0, [pc, #148]	@ (8000450 <MX_GPIO_Init+0x148>)
 80003ba:	f000 fe11 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003be:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80003c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003c4:	2303      	movs	r3, #3
 80003c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003cc:	f107 0314 	add.w	r3, r7, #20
 80003d0:	4619      	mov	r1, r3
 80003d2:	481f      	ldr	r0, [pc, #124]	@ (8000450 <MX_GPIO_Init+0x148>)
 80003d4:	f000 fe04 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80003d8:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 80003dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003de:	2303      	movs	r3, #3
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e6:	f107 0314 	add.w	r3, r7, #20
 80003ea:	4619      	mov	r1, r3
 80003ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003f0:	f000 fdf6 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003f4:	2320      	movs	r3, #32
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	2300      	movs	r3, #0
 8000402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4619      	mov	r1, r3
 800040a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800040e:	f000 fde7 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000412:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8000416:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000418:	2303      	movs	r3, #3
 800041a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	4619      	mov	r1, r3
 8000426:	480b      	ldr	r0, [pc, #44]	@ (8000454 <MX_GPIO_Init+0x14c>)
 8000428:	f000 fdda 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800042c:	2304      	movs	r3, #4
 800042e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000430:	2303      	movs	r3, #3
 8000432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000438:	f107 0314 	add.w	r3, r7, #20
 800043c:	4619      	mov	r1, r3
 800043e:	4806      	ldr	r0, [pc, #24]	@ (8000458 <MX_GPIO_Init+0x150>)
 8000440:	f000 fdce 	bl	8000fe0 <HAL_GPIO_Init>

}
 8000444:	bf00      	nop
 8000446:	3728      	adds	r7, #40	@ 0x28
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000
 8000450:	48000800 	.word	0x48000800
 8000454:	48000400 	.word	0x48000400
 8000458:	48000c00 	.word	0x48000c00

0800045c <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	807b      	strh	r3, [r7, #2]
	if ( huart->Instance == USART2 )
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a08      	ldr	r2, [pc, #32]	@ (8000490 <HAL_UARTEx_RxEventCallback+0x34>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d10a      	bne.n	8000488 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		// copy data to circular buffer;
		circularBuffer_push( &cbuffer, uart_dma_rxBuf, Size );
 8000472:	887b      	ldrh	r3, [r7, #2]
 8000474:	461a      	mov	r2, r3
 8000476:	4907      	ldr	r1, [pc, #28]	@ (8000494 <HAL_UARTEx_RxEventCallback+0x38>)
 8000478:	4807      	ldr	r0, [pc, #28]	@ (8000498 <HAL_UARTEx_RxEventCallback+0x3c>)
 800047a:	f7ff fed6 	bl	800022a <circularBuffer_push>

		// restart receiving data.
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart_dma_rxBuf, RX_BUF_SIZE);
 800047e:	2240      	movs	r2, #64	@ 0x40
 8000480:	4904      	ldr	r1, [pc, #16]	@ (8000494 <HAL_UARTEx_RxEventCallback+0x38>)
 8000482:	4806      	ldr	r0, [pc, #24]	@ (800049c <HAL_UARTEx_RxEventCallback+0x40>)
 8000484:	f003 fd2d 	bl	8003ee2 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40004400 	.word	0x40004400
 8000494:	20000028 	.word	0x20000028
 8000498:	200000b4 	.word	0x200000b4
 800049c:	200000c0 	.word	0x200000c0

080004a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a6:	f000 f9f5 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004aa:	f000 f847 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ae:	f7ff ff2b 	bl	8000308 <MX_GPIO_Init>
  MX_DMA_Init();
 80004b2:	f7ff ff0b 	bl	80002cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004b6:	f000 f91f 	bl	80006f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  circularBuffer_init( &cbuffer, cData , BUF_SIZE );
 80004ba:	220a      	movs	r2, #10
 80004bc:	491a      	ldr	r1, [pc, #104]	@ (8000528 <main+0x88>)
 80004be:	481b      	ldr	r0, [pc, #108]	@ (800052c <main+0x8c>)
 80004c0:	f7ff fe88 	bl	80001d4 <circularBuffer_init>

  HAL_UARTEx_ReceiveToIdle_DMA( &huart2, uart_dma_rxBuf, RX_BUF_SIZE );
 80004c4:	2240      	movs	r2, #64	@ 0x40
 80004c6:	491a      	ldr	r1, [pc, #104]	@ (8000530 <main+0x90>)
 80004c8:	481a      	ldr	r0, [pc, #104]	@ (8000534 <main+0x94>)
 80004ca:	f003 fd0a 	bl	8003ee2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT( huart2.hdmarx, DMA_IT_HT );	// not interested of half transfer interrupt.
 80004ce:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <main+0x94>)
 80004d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	4b17      	ldr	r3, [pc, #92]	@ (8000534 <main+0x94>)
 80004d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f022 0204 	bic.w	r2, r2, #4
 80004e0:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t counter = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	71fb      	strb	r3, [r7, #7]
  test[0] = 0;
 80004e6:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <main+0x98>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
  test[1] = 1;
 80004ec:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <main+0x98>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	705a      	strb	r2, [r3, #1]
  test[2] = 2;
 80004f2:	4b11      	ldr	r3, [pc, #68]	@ (8000538 <main+0x98>)
 80004f4:	2202      	movs	r2, #2
 80004f6:	709a      	strb	r2, [r3, #2]
  while (1)
  {
	  circularBuffer_push( &cbuffer, test, 3 );
 80004f8:	2203      	movs	r2, #3
 80004fa:	490f      	ldr	r1, [pc, #60]	@ (8000538 <main+0x98>)
 80004fc:	480b      	ldr	r0, [pc, #44]	@ (800052c <main+0x8c>)
 80004fe:	f7ff fe94 	bl	800022a <circularBuffer_push>
	  counter += 3;
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	3303      	adds	r3, #3
 8000506:	71fb      	strb	r3, [r7, #7]
	  test[0] = counter;
 8000508:	4a0b      	ldr	r2, [pc, #44]	@ (8000538 <main+0x98>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	7013      	strb	r3, [r2, #0]
	  test[1] = counter + 1;
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	3301      	adds	r3, #1
 8000512:	b2da      	uxtb	r2, r3
 8000514:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <main+0x98>)
 8000516:	705a      	strb	r2, [r3, #1]
	  test[2] = counter + 2;
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	3302      	adds	r3, #2
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <main+0x98>)
 8000520:	709a      	strb	r2, [r3, #2]
	  circularBuffer_push( &cbuffer, test, 3 );
 8000522:	bf00      	nop
 8000524:	e7e8      	b.n	80004f8 <main+0x58>
 8000526:	bf00      	nop
 8000528:	200000a8 	.word	0x200000a8
 800052c:	200000b4 	.word	0x200000b4
 8000530:	20000028 	.word	0x20000028
 8000534:	200000c0 	.word	0x200000c0
 8000538:	20000068 	.word	0x20000068

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b0a6      	sub	sp, #152	@ 0x98
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000546:	2228      	movs	r2, #40	@ 0x28
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fd1d 	bl	8003f8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2258      	movs	r2, #88	@ 0x58
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fd0f 	bl	8003f8a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2310      	movs	r3, #16
 8000576:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000580:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000584:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000588:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800058c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fec2 	bl	8001324 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005a6:	f000 f827 	bl	80005f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2302      	movs	r3, #2
 80005b0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005c4:	2102      	movs	r1, #2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 ff00 	bl	80023cc <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d2:	f000 f811 	bl	80005f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 f913 	bl	800280c <HAL_RCCEx_PeriphCLKConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005ec:	f000 f804 	bl	80005f8 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3798      	adds	r7, #152	@ 0x98
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
}
 80005fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <Error_Handler+0x8>

08000604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <HAL_MspInit+0x44>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <HAL_MspInit+0x44>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6193      	str	r3, [r2, #24]
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <HAL_MspInit+0x44>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <HAL_MspInit+0x44>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <HAL_MspInit+0x44>)
 8000628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_MspInit+0x44>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800063a:	2007      	movs	r0, #7
 800063c:	f000 fa60 	bl	8000b00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <NMI_Handler+0x4>

08000654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <MemManage_Handler+0x4>

08000664 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <UsageFault_Handler+0x4>

08000674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a2:	f000 f93d 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006b0:	4802      	ldr	r0, [pc, #8]	@ (80006bc <DMA1_Channel6_IRQHandler+0x10>)
 80006b2:	f000 fb88 	bl	8000dc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000148 	.word	0x20000148

080006c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006c4:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <USART2_IRQHandler+0x10>)
 80006c6:	f002 fb0d 	bl	8002ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000c0 	.word	0x200000c0

080006d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <SystemInit+0x20>)
 80006da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006de:	4a05      	ldr	r2, [pc, #20]	@ (80006f4 <SystemInit+0x20>)
 80006e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	@ (8000754 <MX_USART2_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_USART2_UART_Init+0x58>)
 800073c:	f002 fa84 	bl	8002c48 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f7ff ff57 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000c0 	.word	0x200000c0
 8000754:	40004400 	.word	0x40004400

08000758 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a2e      	ldr	r2, [pc, #184]	@ (8000830 <HAL_UART_MspInit+0xd8>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d156      	bne.n	8000828 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077a:	4b2e      	ldr	r3, [pc, #184]	@ (8000834 <HAL_UART_MspInit+0xdc>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	4a2d      	ldr	r2, [pc, #180]	@ (8000834 <HAL_UART_MspInit+0xdc>)
 8000780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000784:	61d3      	str	r3, [r2, #28]
 8000786:	4b2b      	ldr	r3, [pc, #172]	@ (8000834 <HAL_UART_MspInit+0xdc>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <HAL_UART_MspInit+0xdc>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a27      	ldr	r2, [pc, #156]	@ (8000834 <HAL_UART_MspInit+0xdc>)
 8000798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <HAL_UART_MspInit+0xdc>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007aa:	230c      	movs	r3, #12
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ba:	2307      	movs	r3, #7
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c8:	f000 fc0a 	bl	8000fe0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <HAL_UART_MspInit+0xe0>)
 80007ce:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <HAL_UART_MspInit+0xe4>)
 80007d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <HAL_UART_MspInit+0xe0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <HAL_UART_MspInit+0xe0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007de:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <HAL_UART_MspInit+0xe0>)
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007e4:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <HAL_UART_MspInit+0xe0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <HAL_UART_MspInit+0xe0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <HAL_UART_MspInit+0xe0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <HAL_UART_MspInit+0xe0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007fc:	480e      	ldr	r0, [pc, #56]	@ (8000838 <HAL_UART_MspInit+0xe0>)
 80007fe:	f000 f9c0 	bl	8000b82 <HAL_DMA_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000808:	f7ff fef6 	bl	80005f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <HAL_UART_MspInit+0xe0>)
 8000810:	675a      	str	r2, [r3, #116]	@ 0x74
 8000812:	4a09      	ldr	r2, [pc, #36]	@ (8000838 <HAL_UART_MspInit+0xe0>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2026      	movs	r0, #38	@ 0x26
 800081e:	f000 f97a 	bl	8000b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000822:	2026      	movs	r0, #38	@ 0x26
 8000824:	f000 f993 	bl	8000b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	@ 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40004400 	.word	0x40004400
 8000834:	40021000 	.word	0x40021000
 8000838:	20000148 	.word	0x20000148
 800083c:	4002006c 	.word	0x4002006c

08000840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000878 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000844:	f7ff ff46 	bl	80006d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	@ (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	@ (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	@ (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	@ (800088c <LoopForever+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086e:	f003 fb95 	bl	8003f9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000872:	f7ff fe15 	bl	80004a0 <main>

08000876 <LoopForever>:

LoopForever:
    b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000878:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000884:	08004058 	.word	0x08004058
  ldr r2, =_sbss
 8000888:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800088c:	20000190 	.word	0x20000190

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>
	...

08000894 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <HAL_Init+0x28>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <HAL_Init+0x28>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f92b 	bl	8000b00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 f808 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b0:	f7ff fea8 	bl	8000604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_InitTick+0x54>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_InitTick+0x58>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f943 	bl	8000b6a <HAL_SYSTICK_Config>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00e      	b.n	800090c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d80a      	bhi.n	800090a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f90b 	bl	8000b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4a06      	ldr	r2, [pc, #24]	@ (800091c <HAL_InitTick+0x5c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000000 	.word	0x20000000
 8000918:	20000008 	.word	0x20000008
 800091c:	20000004 	.word	0x20000004

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_IncTick+0x20>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_IncTick+0x24>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a04      	ldr	r2, [pc, #16]	@ (8000944 <HAL_IncTick+0x24>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000008 	.word	0x20000008
 8000944:	2000018c 	.word	0x2000018c

08000948 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;  
 800094c:	4b03      	ldr	r3, [pc, #12]	@ (800095c <HAL_GetTick+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	2000018c 	.word	0x2000018c

08000960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000988:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800098c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000992:	4a04      	ldr	r2, [pc, #16]	@ (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	60d3      	str	r3, [r2, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	@ (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0b      	blt.n	80009ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f003 021f 	and.w	r2, r3, #31
 80009dc:	4907      	ldr	r1, [pc, #28]	@ (80009fc <__NVIC_EnableIRQ+0x38>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	2001      	movs	r0, #1
 80009e6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	@ (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	@ (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	@ 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	@ 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000acc:	d301      	bcc.n	8000ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00f      	b.n	8000af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <SysTick_Config+0x40>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ada:	210f      	movs	r1, #15
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f7ff ff8e 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <SysTick_Config+0x40>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <SysTick_Config+0x40>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff29 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b28:	f7ff ff3e 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	6978      	ldr	r0, [r7, #20]
 8000b34:	f7ff ff8e 	bl	8000a54 <NVIC_EncodePriority>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff5d 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff31 	bl	80009c4 <__NVIC_EnableIRQ>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffa2 	bl	8000abc <SysTick_Config>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d101      	bne.n	8000b98 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e037      	b.n	8000c08 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000bae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000bb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f9bc 	bl	8000f68 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d101      	bne.n	8000c30 <HAL_DMA_Start_IT+0x20>
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e04a      	b.n	8000cc6 <HAL_DMA_Start_IT+0xb6>
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2201      	movs	r2, #1
 8000c34:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d13a      	bne.n	8000cb8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2202      	movs	r2, #2
 8000c46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f022 0201 	bic.w	r2, r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f000 f950 	bl	8000f0c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d008      	beq.n	8000c86 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 020e 	orr.w	r2, r2, #14
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	e00f      	b.n	8000ca6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f042 020a 	orr.w	r2, r2, #10
 8000c94:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 0204 	bic.w	r2, r2, #4
 8000ca4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f042 0201 	orr.w	r2, r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	e005      	b.n	8000cc4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e02e      	b.n	8000d3e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d008      	beq.n	8000cfc <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2204      	movs	r2, #4
 8000cee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e020      	b.n	8000d3e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 020e 	bic.w	r2, r2, #14
 8000d0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0201 	bic.w	r2, r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d24:	2101      	movs	r1, #1
 8000d26:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d005      	beq.n	8000d6c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2204      	movs	r2, #4
 8000d64:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
 8000d6a:	e027      	b.n	8000dbc <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 020e 	bic.w	r2, r2, #14
 8000d7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0201 	bic.w	r2, r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d94:	2101      	movs	r1, #1
 8000d96:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	4798      	blx	r3
    }
  }
  return status;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	2204      	movs	r2, #4
 8000de4:	409a      	lsls	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d024      	beq.n	8000e38 <HAL_DMA_IRQHandler+0x72>
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d01f      	beq.n	8000e38 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0320 	and.w	r3, r3, #32
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d107      	bne.n	8000e16 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0204 	bic.w	r2, r2, #4
 8000e14:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e1e:	2104      	movs	r1, #4
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d06a      	beq.n	8000f04 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e36:	e065      	b.n	8000f04 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4013      	ands	r3, r2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d02c      	beq.n	8000ea2 <HAL_DMA_IRQHandler+0xdc>
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d027      	beq.n	8000ea2 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0320 	and.w	r3, r3, #32
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10b      	bne.n	8000e78 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 020a 	bic.w	r2, r2, #10
 8000e6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e80:	2102      	movs	r1, #2
 8000e82:	fa01 f202 	lsl.w	r2, r1, r2
 8000e86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d035      	beq.n	8000f04 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ea0:	e030      	b.n	8000f04 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4013      	ands	r3, r2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d028      	beq.n	8000f04 <HAL_DMA_IRQHandler+0x13e>
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d023      	beq.n	8000f04 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 020e 	bic.w	r2, r2, #14
 8000eca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d004      	beq.n	8000f04 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	4798      	blx	r3
    }
  }
}
 8000f02:	e7ff      	b.n	8000f04 <HAL_DMA_IRQHandler+0x13e>
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f22:	2101      	movs	r1, #1
 8000f24:	fa01 f202 	lsl.w	r2, r1, r2
 8000f28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b10      	cmp	r3, #16
 8000f38:	d108      	bne.n	8000f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f4a:	e007      	b.n	8000f5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	60da      	str	r2, [r3, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <DMA_CalcBaseAndBitshift+0x60>)
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d80f      	bhi.n	8000f9c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <DMA_CalcBaseAndBitshift+0x64>)
 8000f84:	4413      	add	r3, r2
 8000f86:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	091b      	lsrs	r3, r3, #4
 8000f8e:	009a      	lsls	r2, r3, #2
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd4 <DMA_CalcBaseAndBitshift+0x6c>)
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000f9a:	e00e      	b.n	8000fba <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <DMA_CalcBaseAndBitshift+0x70>)
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8000fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	009a      	lsls	r2, r3, #2
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a09      	ldr	r2, [pc, #36]	@ (8000fdc <DMA_CalcBaseAndBitshift+0x74>)
 8000fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40020407 	.word	0x40020407
 8000fcc:	bffdfff8 	.word	0xbffdfff8
 8000fd0:	cccccccd 	.word	0xcccccccd
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	bffdfbf8 	.word	0xbffdfbf8
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e160      	b.n	80012b2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8152 	beq.w	80012ac <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x40>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 0201 	and.w	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	6939      	ldr	r1, [r7, #16]
 800110e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0203 	and.w	r2, r3, #3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80ac 	beq.w	80012ac <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b5e      	ldr	r3, [pc, #376]	@ (80012d0 <HAL_GPIO_Init+0x2f0>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a5d      	ldr	r2, [pc, #372]	@ (80012d0 <HAL_GPIO_Init+0x2f0>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b5b      	ldr	r3, [pc, #364]	@ (80012d0 <HAL_GPIO_Init+0x2f0>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800116c:	4a59      	ldr	r2, [pc, #356]	@ (80012d4 <HAL_GPIO_Init+0x2f4>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001196:	d025      	beq.n	80011e4 <HAL_GPIO_Init+0x204>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a4f      	ldr	r2, [pc, #316]	@ (80012d8 <HAL_GPIO_Init+0x2f8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d01f      	beq.n	80011e0 <HAL_GPIO_Init+0x200>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a4e      	ldr	r2, [pc, #312]	@ (80012dc <HAL_GPIO_Init+0x2fc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d019      	beq.n	80011dc <HAL_GPIO_Init+0x1fc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a4d      	ldr	r2, [pc, #308]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d013      	beq.n	80011d8 <HAL_GPIO_Init+0x1f8>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a4c      	ldr	r2, [pc, #304]	@ (80012e4 <HAL_GPIO_Init+0x304>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d00d      	beq.n	80011d4 <HAL_GPIO_Init+0x1f4>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a4b      	ldr	r2, [pc, #300]	@ (80012e8 <HAL_GPIO_Init+0x308>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d007      	beq.n	80011d0 <HAL_GPIO_Init+0x1f0>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a4a      	ldr	r2, [pc, #296]	@ (80012ec <HAL_GPIO_Init+0x30c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d101      	bne.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011c8:	2306      	movs	r3, #6
 80011ca:	e00c      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011cc:	2307      	movs	r3, #7
 80011ce:	e00a      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011d0:	2305      	movs	r3, #5
 80011d2:	e008      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011d4:	2304      	movs	r3, #4
 80011d6:	e006      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011d8:	2303      	movs	r3, #3
 80011da:	e004      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011dc:	2302      	movs	r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_GPIO_Init+0x206>
 80011e4:	2300      	movs	r3, #0
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	f002 0203 	and.w	r2, r2, #3
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	4093      	lsls	r3, r2
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f6:	4937      	ldr	r1, [pc, #220]	@ (80012d4 <HAL_GPIO_Init+0x2f4>)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001228:	4a31      	ldr	r2, [pc, #196]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800122e:	4b30      	ldr	r3, [pc, #192]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001252:	4a27      	ldr	r2, [pc, #156]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001258:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800127c:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001282:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012a6:	4a12      	ldr	r2, [pc, #72]	@ (80012f0 <HAL_GPIO_Init+0x310>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f47f ae97 	bne.w	8000ff0 <HAL_GPIO_Init+0x10>
  }
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000
 80012d8:	48000400 	.word	0x48000400
 80012dc:	48000800 	.word	0x48000800
 80012e0:	48000c00 	.word	0x48000c00
 80012e4:	48001000 	.word	0x48001000
 80012e8:	48001400 	.word	0x48001400
 80012ec:	48001800 	.word	0x48001800
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001310:	e002      	b.n	8001318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800132a:	af00      	add	r7, sp, #0
 800132c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001330:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001334:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800133a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	f001 b83a 	b.w	80023be <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800134e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 816f 	beq.w	800163e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001360:	4bb5      	ldr	r3, [pc, #724]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b04      	cmp	r3, #4
 800136a:	d00c      	beq.n	8001386 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800136c:	4bb2      	ldr	r3, [pc, #712]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b08      	cmp	r3, #8
 8001376:	d15c      	bne.n	8001432 <HAL_RCC_OscConfig+0x10e>
 8001378:	4baf      	ldr	r3, [pc, #700]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001384:	d155      	bne.n	8001432 <HAL_RCC_OscConfig+0x10e>
 8001386:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800138a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800139a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139e:	fab3 f383 	clz	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	095b      	lsrs	r3, r3, #5
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d102      	bne.n	80013b8 <HAL_RCC_OscConfig+0x94>
 80013b2:	4ba1      	ldr	r3, [pc, #644]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	e015      	b.n	80013e4 <HAL_RCC_OscConfig+0xc0>
 80013b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013bc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80013cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013d0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80013d4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80013e0:	4b95      	ldr	r3, [pc, #596]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 80013e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013e8:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80013ec:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80013f0:	fa92 f2a2 	rbit	r2, r2
 80013f4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80013f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80013fc:	fab2 f282 	clz	r2, r2
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	f042 0220 	orr.w	r2, r2, #32
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f002 021f 	and.w	r2, r2, #31
 800140c:	2101      	movs	r1, #1
 800140e:	fa01 f202 	lsl.w	r2, r1, r2
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 8111 	beq.w	800163c <HAL_RCC_OscConfig+0x318>
 800141a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800141e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 8108 	bne.w	800163c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	f000 bfc6 	b.w	80023be <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001432:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001436:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001442:	d106      	bne.n	8001452 <HAL_RCC_OscConfig+0x12e>
 8001444:	4b7c      	ldr	r3, [pc, #496]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a7b      	ldr	r2, [pc, #492]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 800144a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	e036      	b.n	80014c0 <HAL_RCC_OscConfig+0x19c>
 8001452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001456:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x158>
 8001462:	4b75      	ldr	r3, [pc, #468]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a74      	ldr	r2, [pc, #464]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 8001468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b72      	ldr	r3, [pc, #456]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a71      	ldr	r2, [pc, #452]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 8001474:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e021      	b.n	80014c0 <HAL_RCC_OscConfig+0x19c>
 800147c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001480:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x184>
 800148e:	4b6a      	ldr	r3, [pc, #424]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a69      	ldr	r2, [pc, #420]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 8001494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b67      	ldr	r3, [pc, #412]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a66      	ldr	r2, [pc, #408]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e00b      	b.n	80014c0 <HAL_RCC_OscConfig+0x19c>
 80014a8:	4b63      	ldr	r3, [pc, #396]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a62      	ldr	r2, [pc, #392]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 80014ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b60      	ldr	r3, [pc, #384]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a5f      	ldr	r2, [pc, #380]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 80014ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014be:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d059      	beq.n	8001584 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fa3a 	bl	8000948 <HAL_GetTick>
 80014d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014da:	f7ff fa35 	bl	8000948 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	@ 0x64
 80014e8:	d902      	bls.n	80014f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	f000 bf67 	b.w	80023be <HAL_RCC_OscConfig+0x109a>
 80014f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014f4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80014fc:	fa93 f3a3 	rbit	r3, r3
 8001500:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001504:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001508:	fab3 f383 	clz	r3, r3
 800150c:	b2db      	uxtb	r3, r3
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b01      	cmp	r3, #1
 800151a:	d102      	bne.n	8001522 <HAL_RCC_OscConfig+0x1fe>
 800151c:	4b46      	ldr	r3, [pc, #280]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	e015      	b.n	800154e <HAL_RCC_OscConfig+0x22a>
 8001522:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001526:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001536:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800153a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800153e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800154a:	4b3b      	ldr	r3, [pc, #236]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 800154c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001552:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001556:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800155a:	fa92 f2a2 	rbit	r2, r2
 800155e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001562:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001566:	fab2 f282 	clz	r2, r2
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	f042 0220 	orr.w	r2, r2, #32
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	f002 021f 	and.w	r2, r2, #31
 8001576:	2101      	movs	r1, #1
 8001578:	fa01 f202 	lsl.w	r2, r1, r2
 800157c:	4013      	ands	r3, r2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0ab      	beq.n	80014da <HAL_RCC_OscConfig+0x1b6>
 8001582:	e05c      	b.n	800163e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff f9e0 	bl	8000948 <HAL_GetTick>
 8001588:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158e:	f7ff f9db 	bl	8000948 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d902      	bls.n	80015a4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	f000 bf0d 	b.w	80023be <HAL_RCC_OscConfig+0x109a>
 80015a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015a8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80015b0:	fa93 f3a3 	rbit	r3, r3
 80015b4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80015b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015bc:	fab3 f383 	clz	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d102      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2b2>
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x2de>
 80015d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015da:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80015ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015ee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80015f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80015f6:	fa93 f3a3 	rbit	r3, r3
 80015fa:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <HAL_RCC_OscConfig+0x314>)
 8001600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001602:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001606:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800160a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800160e:	fa92 f2a2 	rbit	r2, r2
 8001612:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001616:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800161a:	fab2 f282 	clz	r2, r2
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	f042 0220 	orr.w	r2, r2, #32
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	f002 021f 	and.w	r2, r2, #31
 800162a:	2101      	movs	r1, #1
 800162c:	fa01 f202 	lsl.w	r2, r1, r2
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ab      	bne.n	800158e <HAL_RCC_OscConfig+0x26a>
 8001636:	e002      	b.n	800163e <HAL_RCC_OscConfig+0x31a>
 8001638:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001642:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 817f 	beq.w	8001952 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001654:	4ba7      	ldr	r3, [pc, #668]	@ (80018f4 <HAL_RCC_OscConfig+0x5d0>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00c      	beq.n	800167a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001660:	4ba4      	ldr	r3, [pc, #656]	@ (80018f4 <HAL_RCC_OscConfig+0x5d0>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d173      	bne.n	8001754 <HAL_RCC_OscConfig+0x430>
 800166c:	4ba1      	ldr	r3, [pc, #644]	@ (80018f4 <HAL_RCC_OscConfig+0x5d0>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001674:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001678:	d16c      	bne.n	8001754 <HAL_RCC_OscConfig+0x430>
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800168c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d102      	bne.n	80016aa <HAL_RCC_OscConfig+0x386>
 80016a4:	4b93      	ldr	r3, [pc, #588]	@ (80018f4 <HAL_RCC_OscConfig+0x5d0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	e013      	b.n	80016d2 <HAL_RCC_OscConfig+0x3ae>
 80016aa:	2302      	movs	r3, #2
 80016ac:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80016c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80016ce:	4b89      	ldr	r3, [pc, #548]	@ (80018f4 <HAL_RCC_OscConfig+0x5d0>)
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	2202      	movs	r2, #2
 80016d4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80016d8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80016dc:	fa92 f2a2 	rbit	r2, r2
 80016e0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80016e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80016e8:	fab2 f282 	clz	r2, r2
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	f042 0220 	orr.w	r2, r2, #32
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f002 021f 	and.w	r2, r2, #31
 80016f8:	2101      	movs	r1, #1
 80016fa:	fa01 f202 	lsl.w	r2, r1, r2
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00a      	beq.n	800171a <HAL_RCC_OscConfig+0x3f6>
 8001704:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001708:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d002      	beq.n	800171a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	f000 be52 	b.w	80023be <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171a:	4b76      	ldr	r3, [pc, #472]	@ (80018f4 <HAL_RCC_OscConfig+0x5d0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001726:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	21f8      	movs	r1, #248	@ 0xf8
 8001730:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001738:	fa91 f1a1 	rbit	r1, r1
 800173c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001740:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001744:	fab1 f181 	clz	r1, r1
 8001748:	b2c9      	uxtb	r1, r1
 800174a:	408b      	lsls	r3, r1
 800174c:	4969      	ldr	r1, [pc, #420]	@ (80018f4 <HAL_RCC_OscConfig+0x5d0>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	e0fe      	b.n	8001952 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001754:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001758:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8088 	beq.w	8001876 <HAL_RCC_OscConfig+0x552>
 8001766:	2301      	movs	r3, #1
 8001768:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001778:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001786:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	461a      	mov	r2, r3
 800178e:	2301      	movs	r3, #1
 8001790:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7ff f8d9 	bl	8000948 <HAL_GetTick>
 8001796:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff f8d4 	bl	8000948 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d902      	bls.n	80017b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	f000 be06 	b.w	80023be <HAL_RCC_OscConfig+0x109a>
 80017b2:	2302      	movs	r3, #2
 80017b4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80017c4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	fab3 f383 	clz	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d102      	bne.n	80017e2 <HAL_RCC_OscConfig+0x4be>
 80017dc:	4b45      	ldr	r3, [pc, #276]	@ (80018f4 <HAL_RCC_OscConfig+0x5d0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	e013      	b.n	800180a <HAL_RCC_OscConfig+0x4e6>
 80017e2:	2302      	movs	r3, #2
 80017e4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80017fa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001806:	4b3b      	ldr	r3, [pc, #236]	@ (80018f4 <HAL_RCC_OscConfig+0x5d0>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	2202      	movs	r2, #2
 800180c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001810:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001814:	fa92 f2a2 	rbit	r2, r2
 8001818:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800181c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001820:	fab2 f282 	clz	r2, r2
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	f042 0220 	orr.w	r2, r2, #32
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	f002 021f 	and.w	r2, r2, #31
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0af      	beq.n	800179c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183c:	4b2d      	ldr	r3, [pc, #180]	@ (80018f4 <HAL_RCC_OscConfig+0x5d0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001848:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	21f8      	movs	r1, #248	@ 0xf8
 8001852:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800185a:	fa91 f1a1 	rbit	r1, r1
 800185e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001862:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001866:	fab1 f181 	clz	r1, r1
 800186a:	b2c9      	uxtb	r1, r1
 800186c:	408b      	lsls	r3, r1
 800186e:	4921      	ldr	r1, [pc, #132]	@ (80018f4 <HAL_RCC_OscConfig+0x5d0>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e06d      	b.n	8001952 <HAL_RCC_OscConfig+0x62e>
 8001876:	2301      	movs	r3, #1
 8001878:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001888:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001896:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	461a      	mov	r2, r3
 800189e:	2300      	movs	r3, #0
 80018a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff f851 	bl	8000948 <HAL_GetTick>
 80018a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ac:	f7ff f84c 	bl	8000948 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d902      	bls.n	80018c2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	f000 bd7e 	b.w	80023be <HAL_RCC_OscConfig+0x109a>
 80018c2:	2302      	movs	r3, #2
 80018c4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80018d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5d4>
 80018ec:	4b01      	ldr	r3, [pc, #4]	@ (80018f4 <HAL_RCC_OscConfig+0x5d0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	e016      	b.n	8001920 <HAL_RCC_OscConfig+0x5fc>
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	2302      	movs	r3, #2
 80018fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800190a:	2302      	movs	r3, #2
 800190c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001910:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800191c:	4bbf      	ldr	r3, [pc, #764]	@ (8001c1c <HAL_RCC_OscConfig+0x8f8>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001920:	2202      	movs	r2, #2
 8001922:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001926:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800192a:	fa92 f2a2 	rbit	r2, r2
 800192e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001932:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001936:	fab2 f282 	clz	r2, r2
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	f042 0220 	orr.w	r2, r2, #32
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	f002 021f 	and.w	r2, r2, #31
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f202 	lsl.w	r2, r1, r2
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ac      	bne.n	80018ac <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001956:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8113 	beq.w	8001b8e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d07c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x74e>
 8001978:	2301      	movs	r3, #1
 800197a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800198a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	4ba2      	ldr	r3, [pc, #648]	@ (8001c20 <HAL_RCC_OscConfig+0x8fc>)
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	461a      	mov	r2, r3
 800199e:	2301      	movs	r3, #1
 80019a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7fe ffd1 	bl	8000948 <HAL_GetTick>
 80019a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ac:	f7fe ffcc 	bl	8000948 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d902      	bls.n	80019c2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	f000 bcfe 	b.w	80023be <HAL_RCC_OscConfig+0x109a>
 80019c2:	2302      	movs	r3, #2
 80019c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	fa93 f2a3 	rbit	r2, r3
 80019f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a06:	2202      	movs	r2, #2
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	4b7e      	ldr	r3, [pc, #504]	@ (8001c1c <HAL_RCC_OscConfig+0x8f8>)
 8001a24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a2e:	2102      	movs	r1, #2
 8001a30:	6019      	str	r1, [r3, #0]
 8001a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a36:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fa93 f1a3 	rbit	r1, r3
 8001a40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a48:	6019      	str	r1, [r3, #0]
  return result;
 8001a4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	2101      	movs	r1, #1
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d09d      	beq.n	80019ac <HAL_RCC_OscConfig+0x688>
 8001a70:	e08d      	b.n	8001b8e <HAL_RCC_OscConfig+0x86a>
 8001a72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a82:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	fa93 f2a3 	rbit	r2, r3
 8001a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a90:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a94:	601a      	str	r2, [r3, #0]
  return result;
 8001a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a9e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b5d      	ldr	r3, [pc, #372]	@ (8001c20 <HAL_RCC_OscConfig+0x8fc>)
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab4:	f7fe ff48 	bl	8000948 <HAL_GetTick>
 8001ab8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001abe:	f7fe ff43 	bl	8000948 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d902      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	f000 bc75 	b.w	80023be <HAL_RCC_OscConfig+0x109a>
 8001ad4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001adc:	2202      	movs	r2, #2
 8001ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	fa93 f2a3 	rbit	r2, r3
 8001aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b00:	2202      	movs	r2, #2
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b16:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b20:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b24:	2202      	movs	r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001b3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b40:	4b36      	ldr	r3, [pc, #216]	@ (8001c1c <HAL_RCC_OscConfig+0x8f8>)
 8001b42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	6019      	str	r1, [r3, #0]
 8001b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b54:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f1a3 	rbit	r1, r3
 8001b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b62:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b66:	6019      	str	r1, [r3, #0]
  return result;
 8001b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d197      	bne.n	8001abe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 81a5 	beq.w	8001eee <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001baa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <HAL_RCC_OscConfig+0x8f8>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d116      	bne.n	8001be4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <HAL_RCC_OscConfig+0x8f8>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a18      	ldr	r2, [pc, #96]	@ (8001c1c <HAL_RCC_OscConfig+0x8f8>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <HAL_RCC_OscConfig+0x8f8>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001bca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bdc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <HAL_RCC_OscConfig+0x900>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d121      	bne.n	8001c34 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <HAL_RCC_OscConfig+0x900>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c24 <HAL_RCC_OscConfig+0x900>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfc:	f7fe fea4 	bl	8000948 <HAL_GetTick>
 8001c00:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	e010      	b.n	8001c28 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7fe fe9f 	bl	8000948 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	@ 0x64
 8001c14:	d908      	bls.n	8001c28 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e3d1      	b.n	80023be <HAL_RCC_OscConfig+0x109a>
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	10908120 	.word	0x10908120
 8001c24:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	4b8d      	ldr	r3, [pc, #564]	@ (8001e60 <HAL_RCC_OscConfig+0xb3c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0e8      	beq.n	8001c06 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x92e>
 8001c44:	4b87      	ldr	r3, [pc, #540]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4a86      	ldr	r2, [pc, #536]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6213      	str	r3, [r2, #32]
 8001c50:	e035      	b.n	8001cbe <HAL_RCC_OscConfig+0x99a>
 8001c52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x958>
 8001c62:	4b80      	ldr	r3, [pc, #512]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a7f      	ldr	r2, [pc, #508]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6213      	str	r3, [r2, #32]
 8001c6e:	4b7d      	ldr	r3, [pc, #500]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a7c      	ldr	r2, [pc, #496]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	6213      	str	r3, [r2, #32]
 8001c7a:	e020      	b.n	8001cbe <HAL_RCC_OscConfig+0x99a>
 8001c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x982>
 8001c8c:	4b75      	ldr	r3, [pc, #468]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a74      	ldr	r2, [pc, #464]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	4b72      	ldr	r3, [pc, #456]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a71      	ldr	r2, [pc, #452]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	e00b      	b.n	8001cbe <HAL_RCC_OscConfig+0x99a>
 8001ca6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a6e      	ldr	r2, [pc, #440]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a6b      	ldr	r2, [pc, #428]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8081 	beq.w	8001dd2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7fe fe3a 	bl	8000948 <HAL_GetTick>
 8001cd4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7fe fe35 	bl	8000948 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e365      	b.n	80023be <HAL_RCC_OscConfig+0x109a>
 8001cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d02:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d10:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d1a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d1e:	2202      	movs	r2, #2
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d26:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	fa93 f2a3 	rbit	r2, r3
 8001d30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d34:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d38:	601a      	str	r2, [r3, #0]
  return result;
 8001d3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d3e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d42:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f043 0302 	orr.w	r3, r3, #2
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d102      	bne.n	8001d5e <HAL_RCC_OscConfig+0xa3a>
 8001d58:	4b42      	ldr	r3, [pc, #264]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	e013      	b.n	8001d86 <HAL_RCC_OscConfig+0xa62>
 8001d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d62:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d66:	2202      	movs	r2, #2
 8001d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	fa93 f2a3 	rbit	r2, r3
 8001d78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d7c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	4b38      	ldr	r3, [pc, #224]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d8a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d8e:	2102      	movs	r1, #2
 8001d90:	6011      	str	r1, [r2, #0]
 8001d92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d96:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	fa92 f1a2 	rbit	r1, r2
 8001da0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001da4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001da8:	6011      	str	r1, [r2, #0]
  return result;
 8001daa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dae:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	fab2 f282 	clz	r2, r2
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	f002 021f 	and.w	r2, r2, #31
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d084      	beq.n	8001cda <HAL_RCC_OscConfig+0x9b6>
 8001dd0:	e083      	b.n	8001eda <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7fe fdb9 	bl	8000948 <HAL_GetTick>
 8001dd6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7fe fdb4 	bl	8000948 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e2e4      	b.n	80023be <HAL_RCC_OscConfig+0x109a>
 8001df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e04:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e12:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e20:	2202      	movs	r2, #2
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e28:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	fa93 f2a3 	rbit	r2, r3
 8001e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e36:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e3a:	601a      	str	r2, [r3, #0]
  return result;
 8001e3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e40:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e44:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d106      	bne.n	8001e68 <HAL_RCC_OscConfig+0xb44>
 8001e5a:	4b02      	ldr	r3, [pc, #8]	@ (8001e64 <HAL_RCC_OscConfig+0xb40>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	e017      	b.n	8001e90 <HAL_RCC_OscConfig+0xb6c>
 8001e60:	40007000 	.word	0x40007000
 8001e64:	40021000 	.word	0x40021000
 8001e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e70:	2202      	movs	r2, #2
 8001e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e78:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fa93 f2a3 	rbit	r2, r3
 8001e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e86:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	4bb3      	ldr	r3, [pc, #716]	@ (800215c <HAL_RCC_OscConfig+0xe38>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e94:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001e98:	2102      	movs	r1, #2
 8001e9a:	6011      	str	r1, [r2, #0]
 8001e9c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ea0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	fa92 f1a2 	rbit	r1, r2
 8001eaa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001eae:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001eb2:	6011      	str	r1, [r2, #0]
  return result;
 8001eb4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001eb8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	fab2 f282 	clz	r2, r2
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f002 021f 	and.w	r2, r2, #31
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d180      	bne.n	8001ddc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eda:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d105      	bne.n	8001eee <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee2:	4b9e      	ldr	r3, [pc, #632]	@ (800215c <HAL_RCC_OscConfig+0xe38>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a9d      	ldr	r2, [pc, #628]	@ (800215c <HAL_RCC_OscConfig+0xe38>)
 8001ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 825e 	beq.w	80023bc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f00:	4b96      	ldr	r3, [pc, #600]	@ (800215c <HAL_RCC_OscConfig+0xe38>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	f000 821f 	beq.w	800234c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	f040 8170 	bne.w	8002200 <HAL_RCC_OscConfig+0xedc>
 8001f20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f24:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f32:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	fa93 f2a3 	rbit	r2, r3
 8001f3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f40:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f44:	601a      	str	r2, [r3, #0]
  return result;
 8001f46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f4e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	461a      	mov	r2, r3
 8001f62:	2300      	movs	r3, #0
 8001f64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe fcef 	bl	8000948 <HAL_GetTick>
 8001f6a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6e:	e009      	b.n	8001f84 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe fcea 	bl	8000948 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e21c      	b.n	80023be <HAL_RCC_OscConfig+0x109a>
 8001f84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f88:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f96:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	fa93 f2a3 	rbit	r2, r3
 8001fa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001fa8:	601a      	str	r2, [r3, #0]
  return result;
 8001faa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001fb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb4:	fab3 f383 	clz	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_OscConfig+0xcaa>
 8001fc8:	4b64      	ldr	r3, [pc, #400]	@ (800215c <HAL_RCC_OscConfig+0xe38>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	e027      	b.n	800201e <HAL_RCC_OscConfig+0xcfa>
 8001fce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001fd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	fa93 f2a3 	rbit	r2, r3
 8001fea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ffc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002006:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	fa93 f2a3 	rbit	r2, r3
 8002010:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002014:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	4b50      	ldr	r3, [pc, #320]	@ (800215c <HAL_RCC_OscConfig+0xe38>)
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002022:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002026:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800202a:	6011      	str	r1, [r2, #0]
 800202c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002030:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	fa92 f1a2 	rbit	r1, r2
 800203a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800203e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002042:	6011      	str	r1, [r2, #0]
  return result;
 8002044:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002048:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	fab2 f282 	clz	r2, r2
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f042 0220 	orr.w	r2, r2, #32
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f002 021f 	and.w	r2, r2, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d182      	bne.n	8001f70 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206a:	4b3c      	ldr	r3, [pc, #240]	@ (800215c <HAL_RCC_OscConfig+0xe38>)
 800206c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206e:	f023 020f 	bic.w	r2, r3, #15
 8002072:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002076:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	4937      	ldr	r1, [pc, #220]	@ (800215c <HAL_RCC_OscConfig+0xe38>)
 8002080:	4313      	orrs	r3, r2
 8002082:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002084:	4b35      	ldr	r3, [pc, #212]	@ (800215c <HAL_RCC_OscConfig+0xe38>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800208c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002090:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a19      	ldr	r1, [r3, #32]
 8002098:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800209c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	492d      	ldr	r1, [pc, #180]	@ (800215c <HAL_RCC_OscConfig+0xe38>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
 80020ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80020b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020be:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fa93 f2a3 	rbit	r2, r3
 80020c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020cc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020d0:	601a      	str	r2, [r3, #0]
  return result;
 80020d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020da:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	461a      	mov	r2, r3
 80020ee:	2301      	movs	r3, #1
 80020f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7fe fc29 	bl	8000948 <HAL_GetTick>
 80020f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fa:	e009      	b.n	8002110 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fc:	f7fe fc24 	bl	8000948 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e156      	b.n	80023be <HAL_RCC_OscConfig+0x109a>
 8002110:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002114:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002118:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800211c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002122:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002130:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002134:	601a      	str	r2, [r3, #0]
  return result;
 8002136:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800213e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0xe3c>
 8002154:	4b01      	ldr	r3, [pc, #4]	@ (800215c <HAL_RCC_OscConfig+0xe38>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	e02a      	b.n	80021b0 <HAL_RCC_OscConfig+0xe8c>
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002164:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002168:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800216c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002172:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	fa93 f2a3 	rbit	r2, r3
 800217c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002180:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800218e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002198:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	fa93 f2a3 	rbit	r2, r3
 80021a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	4b86      	ldr	r3, [pc, #536]	@ (80023c8 <HAL_RCC_OscConfig+0x10a4>)
 80021ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021b4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021c2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	fa92 f1a2 	rbit	r1, r2
 80021cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021d0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80021d4:	6011      	str	r1, [r2, #0]
  return result;
 80021d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021da:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	fab2 f282 	clz	r2, r2
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	f042 0220 	orr.w	r2, r2, #32
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f002 021f 	and.w	r2, r2, #31
 80021f0:	2101      	movs	r1, #1
 80021f2:	fa01 f202 	lsl.w	r2, r1, r2
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f43f af7f 	beq.w	80020fc <HAL_RCC_OscConfig+0xdd8>
 80021fe:	e0dd      	b.n	80023bc <HAL_RCC_OscConfig+0x1098>
 8002200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002204:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002208:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800220c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002212:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002220:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002224:	601a      	str	r2, [r3, #0]
  return result;
 8002226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800222e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800223a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	461a      	mov	r2, r3
 8002242:	2300      	movs	r3, #0
 8002244:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7fe fb7f 	bl	8000948 <HAL_GetTick>
 800224a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224e:	e009      	b.n	8002264 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe fb7a 	bl	8000948 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0ac      	b.n	80023be <HAL_RCC_OscConfig+0x109a>
 8002264:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002268:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800226c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002276:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002284:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002288:	601a      	str	r2, [r3, #0]
  return result;
 800228a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002292:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	b2db      	uxtb	r3, r3
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d102      	bne.n	80022ae <HAL_RCC_OscConfig+0xf8a>
 80022a8:	4b47      	ldr	r3, [pc, #284]	@ (80023c8 <HAL_RCC_OscConfig+0x10a4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	e027      	b.n	80022fe <HAL_RCC_OscConfig+0xfda>
 80022ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80022b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	fa93 f2a3 	rbit	r2, r3
 80022ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80022dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f4:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	4b33      	ldr	r3, [pc, #204]	@ (80023c8 <HAL_RCC_OscConfig+0x10a4>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002302:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002306:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800230a:	6011      	str	r1, [r2, #0]
 800230c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002310:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	fa92 f1a2 	rbit	r1, r2
 800231a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800231e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002322:	6011      	str	r1, [r2, #0]
  return result;
 8002324:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002328:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	fab2 f282 	clz	r2, r2
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	f042 0220 	orr.w	r2, r2, #32
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f002 021f 	and.w	r2, r2, #31
 800233e:	2101      	movs	r1, #1
 8002340:	fa01 f202 	lsl.w	r2, r1, r2
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d182      	bne.n	8002250 <HAL_RCC_OscConfig+0xf2c>
 800234a:	e037      	b.n	80023bc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800234c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002350:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e02e      	b.n	80023be <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002360:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <HAL_RCC_OscConfig+0x10a4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002368:	4b17      	ldr	r3, [pc, #92]	@ (80023c8 <HAL_RCC_OscConfig+0x10a4>)
 800236a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002370:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002374:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800237c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	429a      	cmp	r2, r3
 8002386:	d117      	bne.n	80023b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002388:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800238c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002390:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002394:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800239c:	429a      	cmp	r2, r3
 800239e:	d10b      	bne.n	80023b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80023a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023a4:	f003 020f 	and.w	r2, r3, #15
 80023a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000

080023cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b09e      	sub	sp, #120	@ 0x78
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e162      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b90      	ldr	r3, [pc, #576]	@ (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b8d      	ldr	r3, [pc, #564]	@ (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	498b      	ldr	r1, [pc, #556]	@ (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b89      	ldr	r3, [pc, #548]	@ (8002628 <HAL_RCC_ClockConfig+0x25c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e14a      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b82      	ldr	r3, [pc, #520]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	497f      	ldr	r1, [pc, #508]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80dc 	beq.w	80025f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d13c      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xf6>
 8002448:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800244c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d102      	bne.n	8002472 <HAL_RCC_ClockConfig+0xa6>
 800246c:	4b6f      	ldr	r3, [pc, #444]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	e00f      	b.n	8002492 <HAL_RCC_ClockConfig+0xc6>
 8002472:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002476:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002480:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002484:	663b      	str	r3, [r7, #96]	@ 0x60
 8002486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800248e:	4b67      	ldr	r3, [pc, #412]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002496:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002498:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800249a:	fa92 f2a2 	rbit	r2, r2
 800249e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80024a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80024a2:	fab2 f282 	clz	r2, r2
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f042 0220 	orr.w	r2, r2, #32
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f002 021f 	and.w	r2, r2, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d17b      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0f3      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d13c      	bne.n	8002544 <HAL_RCC_ClockConfig+0x178>
 80024ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d102      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x128>
 80024ee:	4b4f      	ldr	r3, [pc, #316]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e00f      	b.n	8002514 <HAL_RCC_ClockConfig+0x148>
 80024f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	647b      	str	r3, [r7, #68]	@ 0x44
 8002502:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002506:	643b      	str	r3, [r7, #64]	@ 0x40
 8002508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002510:	4b46      	ldr	r3, [pc, #280]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002518:	63ba      	str	r2, [r7, #56]	@ 0x38
 800251a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800251c:	fa92 f2a2 	rbit	r2, r2
 8002520:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002522:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002524:	fab2 f282 	clz	r2, r2
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f042 0220 	orr.w	r2, r2, #32
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f002 021f 	and.w	r2, r2, #31
 8002534:	2101      	movs	r1, #1
 8002536:	fa01 f202 	lsl.w	r2, r1, r2
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d13a      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0b2      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
 8002544:	2302      	movs	r3, #2
 8002546:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <HAL_RCC_ClockConfig+0x1a0>
 8002566:	4b31      	ldr	r3, [pc, #196]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	e00d      	b.n	8002588 <HAL_RCC_ClockConfig+0x1bc>
 800256c:	2302      	movs	r3, #2
 800256e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
 8002578:	2302      	movs	r3, #2
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	4b29      	ldr	r3, [pc, #164]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	2202      	movs	r2, #2
 800258a:	61ba      	str	r2, [r7, #24]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	fa92 f2a2 	rbit	r2, r2
 8002592:	617a      	str	r2, [r7, #20]
  return result;
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	fab2 f282 	clz	r2, r2
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f042 0220 	orr.w	r2, r2, #32
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f002 021f 	and.w	r2, r2, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e079      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b6:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f023 0203 	bic.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	491a      	ldr	r1, [pc, #104]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c8:	f7fe f9be 	bl	8000948 <HAL_GetTick>
 80025cc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d0:	f7fe f9ba 	bl	8000948 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e061      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HAL_RCC_ClockConfig+0x260>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 020c 	and.w	r2, r3, #12
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d1eb      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d214      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <HAL_RCC_ClockConfig+0x25c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 0207 	bic.w	r2, r3, #7
 800260e:	4906      	ldr	r1, [pc, #24]	@ (8002628 <HAL_RCC_ClockConfig+0x25c>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <HAL_RCC_ClockConfig+0x25c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e040      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
 8002628:	40022000 	.word	0x40022000
 800262c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800263c:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <HAL_RCC_ClockConfig+0x2e8>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	491a      	ldr	r1, [pc, #104]	@ (80026b4 <HAL_RCC_ClockConfig+0x2e8>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265a:	4b16      	ldr	r3, [pc, #88]	@ (80026b4 <HAL_RCC_ClockConfig+0x2e8>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4912      	ldr	r1, [pc, #72]	@ (80026b4 <HAL_RCC_ClockConfig+0x2e8>)
 800266a:	4313      	orrs	r3, r2
 800266c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800266e:	f000 f829 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002672:	4601      	mov	r1, r0
 8002674:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <HAL_RCC_ClockConfig+0x2e8>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800267c:	22f0      	movs	r2, #240	@ 0xf0
 800267e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	fa92 f2a2 	rbit	r2, r2
 8002686:	60fa      	str	r2, [r7, #12]
  return result;
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	fab2 f282 	clz	r2, r2
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	40d3      	lsrs	r3, r2
 8002692:	4a09      	ldr	r2, [pc, #36]	@ (80026b8 <HAL_RCC_ClockConfig+0x2ec>)
 8002694:	5cd3      	ldrb	r3, [r2, r3]
 8002696:	fa21 f303 	lsr.w	r3, r1, r3
 800269a:	4a08      	ldr	r2, [pc, #32]	@ (80026bc <HAL_RCC_ClockConfig+0x2f0>)
 800269c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800269e:	4b08      	ldr	r3, [pc, #32]	@ (80026c0 <HAL_RCC_ClockConfig+0x2f4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe f90c 	bl	80008c0 <HAL_InitTick>
  
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3778      	adds	r7, #120	@ 0x78
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08004018 	.word	0x08004018
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80026de:	4b1f      	ldr	r3, [pc, #124]	@ (800275c <HAL_RCC_GetSysClockFreq+0x98>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d002      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x30>
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d003      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x36>
 80026f2:	e029      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026f6:	613b      	str	r3, [r7, #16]
      break;
 80026f8:	e029      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	0c9b      	lsrs	r3, r3, #18
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	4a18      	ldr	r2, [pc, #96]	@ (8002764 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002708:	4b14      	ldr	r3, [pc, #80]	@ (800275c <HAL_RCC_GetSysClockFreq+0x98>)
 800270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	4a15      	ldr	r2, [pc, #84]	@ (8002768 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002712:	5cd3      	ldrb	r3, [r2, r3]
 8002714:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002720:	4a0f      	ldr	r2, [pc, #60]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	fbb2 f2f3 	udiv	r2, r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	e007      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002732:	4a0b      	ldr	r2, [pc, #44]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	fbb2 f2f3 	udiv	r2, r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	613b      	str	r3, [r7, #16]
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x9c>)
 800274a:	613b      	str	r3, [r7, #16]
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	693b      	ldr	r3, [r7, #16]
}
 8002750:	4618      	mov	r0, r3
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40021000 	.word	0x40021000
 8002760:	007a1200 	.word	0x007a1200
 8002764:	08004030 	.word	0x08004030
 8002768:	08004040 	.word	0x08004040

0800276c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002770:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800278a:	f7ff ffef 	bl	800276c <HAL_RCC_GetHCLKFreq>
 800278e:	4601      	mov	r1, r0
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002798:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800279c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	fa92 f2a2 	rbit	r2, r2
 80027a4:	603a      	str	r2, [r7, #0]
  return result;
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	fab2 f282 	clz	r2, r2
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	40d3      	lsrs	r3, r2
 80027b0:	4a04      	ldr	r2, [pc, #16]	@ (80027c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08004028 	.word	0x08004028

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027ce:	f7ff ffcd 	bl	800276c <HAL_RCC_GetHCLKFreq>
 80027d2:	4601      	mov	r1, r0
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80027dc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80027e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	fa92 f2a2 	rbit	r2, r2
 80027e8:	603a      	str	r2, [r7, #0]
  return result;
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	fab2 f282 	clz	r2, r2
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	40d3      	lsrs	r3, r2
 80027f4:	4a04      	ldr	r2, [pc, #16]	@ (8002808 <HAL_RCC_GetPCLK2Freq+0x40>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08004028 	.word	0x08004028

0800280c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b092      	sub	sp, #72	@ 0x48
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80d4 	beq.w	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002830:	4b4e      	ldr	r3, [pc, #312]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10e      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283c:	4b4b      	ldr	r3, [pc, #300]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	4a4a      	ldr	r2, [pc, #296]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002846:	61d3      	str	r3, [r2, #28]
 8002848:	4b48      	ldr	r3, [pc, #288]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002854:	2301      	movs	r3, #1
 8002856:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	4b45      	ldr	r3, [pc, #276]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d118      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002866:	4b42      	ldr	r3, [pc, #264]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a41      	ldr	r2, [pc, #260]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002870:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002872:	f7fe f869 	bl	8000948 <HAL_GetTick>
 8002876:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	e008      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287a:	f7fe f865 	bl	8000948 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b64      	cmp	r3, #100	@ 0x64
 8002886:	d901      	bls.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e1d6      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b38      	ldr	r3, [pc, #224]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002898:	4b34      	ldr	r3, [pc, #208]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8084 	beq.w	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d07c      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028b8:	4b2c      	ldr	r3, [pc, #176]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	4b26      	ldr	r3, [pc, #152]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	461a      	mov	r2, r3
 80028e2:	2301      	movs	r3, #1
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80028f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	461a      	mov	r2, r3
 8002906:	2300      	movs	r3, #0
 8002908:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800290a:	4a18      	ldr	r2, [pc, #96]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800290e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d04b      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe f815 	bl	8000948 <HAL_GetTick>
 800291e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002920:	e00a      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002922:	f7fe f811 	bl	8000948 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d901      	bls.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e180      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002938:	2302      	movs	r3, #2
 800293a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
 8002944:	2302      	movs	r3, #2
 8002946:	623b      	str	r3, [r7, #32]
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	61fb      	str	r3, [r7, #28]
  return result;
 8002950:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d108      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002966:	4b01      	ldr	r3, [pc, #4]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	e00d      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800296c:	40021000 	.word	0x40021000
 8002970:	40007000 	.word	0x40007000
 8002974:	10908100 	.word	0x10908100
 8002978:	2302      	movs	r3, #2
 800297a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	4b9a      	ldr	r3, [pc, #616]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	2202      	movs	r2, #2
 800298a:	613a      	str	r2, [r7, #16]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	fa92 f2a2 	rbit	r2, r2
 8002992:	60fa      	str	r2, [r7, #12]
  return result;
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	fab2 f282 	clz	r2, r2
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	f002 021f 	and.w	r2, r2, #31
 80029a6:	2101      	movs	r1, #1
 80029a8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0b7      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029b2:	4b8f      	ldr	r3, [pc, #572]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	498c      	ldr	r1, [pc, #560]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d105      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029cc:	4b88      	ldr	r3, [pc, #544]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	4a87      	ldr	r2, [pc, #540]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e4:	4b82      	ldr	r3, [pc, #520]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e8:	f023 0203 	bic.w	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	497f      	ldr	r1, [pc, #508]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a02:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4978      	ldr	r1, [pc, #480]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a20:	4b73      	ldr	r3, [pc, #460]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	4970      	ldr	r1, [pc, #448]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a3e:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	f023 0210 	bic.w	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4969      	ldr	r1, [pc, #420]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a5c:	4b64      	ldr	r3, [pc, #400]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a68:	4961      	ldr	r1, [pc, #388]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	f023 0220 	bic.w	r2, r3, #32
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	495a      	ldr	r1, [pc, #360]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a98:	4b55      	ldr	r3, [pc, #340]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	4952      	ldr	r1, [pc, #328]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	494b      	ldr	r1, [pc, #300]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ad4:	4b46      	ldr	r3, [pc, #280]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	4943      	ldr	r1, [pc, #268]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002af2:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	493c      	ldr	r1, [pc, #240]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b10:	4b37      	ldr	r3, [pc, #220]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	4934      	ldr	r1, [pc, #208]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b2e:	4b30      	ldr	r3, [pc, #192]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b32:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3a:	492d      	ldr	r1, [pc, #180]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b4c:	4b28      	ldr	r3, [pc, #160]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b58:	4925      	ldr	r1, [pc, #148]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b6a:	4b21      	ldr	r3, [pc, #132]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	491e      	ldr	r1, [pc, #120]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002b88:	4b19      	ldr	r3, [pc, #100]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	4916      	ldr	r1, [pc, #88]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002ba6:	4b12      	ldr	r3, [pc, #72]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb2:	490f      	ldr	r1, [pc, #60]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd0:	4907      	ldr	r1, [pc, #28]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00c      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002be2:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	e002      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf6:	4913      	ldr	r1, [pc, #76]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c08:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c14:	490b      	ldr	r1, [pc, #44]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c26:	4b07      	ldr	r3, [pc, #28]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c32:	4904      	ldr	r1, [pc, #16]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3748      	adds	r7, #72	@ 0x48
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000

08002c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e040      	b.n	8002cdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fd fd74 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2224      	movs	r2, #36	@ 0x24
 8002c74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fd0a 	bl	80036a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fb33 	bl	8003300 <UART_SetConfig>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e01b      	b.n	8002cdc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fd89 	bl	80037ec <UART_CheckIdleState>
 8002cda:	4603      	mov	r3, r0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b0ba      	sub	sp, #232	@ 0xe8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002d0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002d12:	4013      	ands	r3, r2
 8002d14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002d18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d115      	bne.n	8002d4c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 82ab 	beq.w	8003298 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
      }
      return;
 8002d4a:	e2a5      	b.n	8003298 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8117 	beq.w	8002f84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002d66:	4b85      	ldr	r3, [pc, #532]	@ (8002f7c <HAL_UART_IRQHandler+0x298>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 810a 	beq.w	8002f84 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d011      	beq.n	8002da0 <HAL_UART_IRQHandler+0xbc>
 8002d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00b      	beq.n	8002da0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d011      	beq.n	8002dd0 <HAL_UART_IRQHandler+0xec>
 8002dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dc6:	f043 0204 	orr.w	r2, r3, #4
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d011      	beq.n	8002e00 <HAL_UART_IRQHandler+0x11c>
 8002ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2204      	movs	r2, #4
 8002dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002df6:	f043 0202 	orr.w	r2, r3, #2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d017      	beq.n	8002e3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00b      	beq.n	8002e3c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2208      	movs	r2, #8
 8002e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e32:	f043 0208 	orr.w	r2, r3, #8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d012      	beq.n	8002e6e <HAL_UART_IRQHandler+0x18a>
 8002e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00c      	beq.n	8002e6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8211 	beq.w	800329c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb6:	2b40      	cmp	r3, #64	@ 0x40
 8002eb8:	d005      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ebe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d04f      	beq.n	8002f66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fe6c 	bl	8003ba4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d141      	bne.n	8002f5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3308      	adds	r3, #8
 8002f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1d9      	bne.n	8002eda <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d013      	beq.n	8002f56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f32:	4a13      	ldr	r2, [pc, #76]	@ (8002f80 <HAL_UART_IRQHandler+0x29c>)
 8002f34:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd ff05 	bl	8000d4a <HAL_DMA_Abort_IT>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d017      	beq.n	8002f76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f50:	4610      	mov	r0, r2
 8002f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	e00f      	b.n	8002f76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f9c8 	bl	80032ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5c:	e00b      	b.n	8002f76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f9c4 	bl	80032ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f64:	e007      	b.n	8002f76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f9c0 	bl	80032ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002f74:	e192      	b.n	800329c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f76:	bf00      	nop
    return;
 8002f78:	e190      	b.n	800329c <HAL_UART_IRQHandler+0x5b8>
 8002f7a:	bf00      	nop
 8002f7c:	04000120 	.word	0x04000120
 8002f80:	08003e4f 	.word	0x08003e4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	f040 814b 	bne.w	8003224 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8144 	beq.w	8003224 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 813d 	beq.w	8003224 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2210      	movs	r2, #16
 8002fb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbc:	2b40      	cmp	r3, #64	@ 0x40
 8002fbe:	f040 80b5 	bne.w	800312c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8164 	beq.w	80032a0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	f080 815c 	bcs.w	80032a0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	f000 8086 	beq.w	800310a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003012:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003016:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800301a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003028:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800302c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003034:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1da      	bne.n	8002ffe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3308      	adds	r3, #8
 800304e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003058:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800305a:	f023 0301 	bic.w	r3, r3, #1
 800305e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3308      	adds	r3, #8
 8003068:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800306c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003070:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003074:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800307e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e1      	bne.n	8003048 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3308      	adds	r3, #8
 800308a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003094:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800309a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3308      	adds	r3, #8
 80030a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e3      	bne.n	8003084 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030d2:	e853 3f00 	ldrex	r3, [r3]
 80030d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030da:	f023 0310 	bic.w	r3, r3, #16
 80030de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030f4:	e841 2300 	strex	r3, r2, [r1]
 80030f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e4      	bne.n	80030ca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd fde2 	bl	8000cce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2202      	movs	r2, #2
 800310e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800311c:	b29b      	uxth	r3, r3
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	b29b      	uxth	r3, r3
 8003122:	4619      	mov	r1, r3
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7fd f999 	bl	800045c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800312a:	e0b9      	b.n	80032a0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003138:	b29b      	uxth	r3, r3
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80ab 	beq.w	80032a4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800314e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80a6 	beq.w	80032a4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003168:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800316c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800317a:	647b      	str	r3, [r7, #68]	@ 0x44
 800317c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003180:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e4      	bne.n	8003158 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3308      	adds	r3, #8
 8003194:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	623b      	str	r3, [r7, #32]
   return(result);
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3308      	adds	r3, #8
 80031ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80031b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e3      	bne.n	800318e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	e853 3f00 	ldrex	r3, [r3]
 80031e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0310 	bic.w	r3, r3, #16
 80031ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	69b9      	ldr	r1, [r7, #24]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	617b      	str	r3, [r7, #20]
   return(result);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e4      	bne.n	80031da <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003216:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7fd f91d 	bl	800045c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003222:	e03f      	b.n	80032a4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003228:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <HAL_UART_IRQHandler+0x56a>
 8003230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003234:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003244:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fe41 	bl	8003ece <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800324c:	e02d      	b.n	80032aa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800324e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00e      	beq.n	8003278 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800325a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800325e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01c      	beq.n	80032a8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	4798      	blx	r3
    }
    return;
 8003276:	e017      	b.n	80032a8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d012      	beq.n	80032aa <HAL_UART_IRQHandler+0x5c6>
 8003284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00c      	beq.n	80032aa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fdf2 	bl	8003e7a <UART_EndTransmit_IT>
    return;
 8003296:	e008      	b.n	80032aa <HAL_UART_IRQHandler+0x5c6>
      return;
 8003298:	bf00      	nop
 800329a:	e006      	b.n	80032aa <HAL_UART_IRQHandler+0x5c6>
    return;
 800329c:	bf00      	nop
 800329e:	e004      	b.n	80032aa <HAL_UART_IRQHandler+0x5c6>
      return;
 80032a0:	bf00      	nop
 80032a2:	e002      	b.n	80032aa <HAL_UART_IRQHandler+0x5c6>
      return;
 80032a4:	bf00      	nop
 80032a6:	e000      	b.n	80032aa <HAL_UART_IRQHandler+0x5c6>
    return;
 80032a8:	bf00      	nop
  }

}
 80032aa:	37e8      	adds	r7, #232	@ 0xe8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b92      	ldr	r3, [pc, #584]	@ (8003574 <UART_SetConfig+0x274>)
 800332c:	4013      	ands	r3, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	6979      	ldr	r1, [r7, #20]
 8003334:	430b      	orrs	r3, r1
 8003336:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4313      	orrs	r3, r2
 800335c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a80      	ldr	r2, [pc, #512]	@ (8003578 <UART_SetConfig+0x278>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d120      	bne.n	80033be <UART_SetConfig+0xbe>
 800337c:	4b7f      	ldr	r3, [pc, #508]	@ (800357c <UART_SetConfig+0x27c>)
 800337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b03      	cmp	r3, #3
 8003386:	d817      	bhi.n	80033b8 <UART_SetConfig+0xb8>
 8003388:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <UART_SetConfig+0x90>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033a1 	.word	0x080033a1
 8003394:	080033ad 	.word	0x080033ad
 8003398:	080033b3 	.word	0x080033b3
 800339c:	080033a7 	.word	0x080033a7
 80033a0:	2301      	movs	r3, #1
 80033a2:	77fb      	strb	r3, [r7, #31]
 80033a4:	e0b5      	b.n	8003512 <UART_SetConfig+0x212>
 80033a6:	2302      	movs	r3, #2
 80033a8:	77fb      	strb	r3, [r7, #31]
 80033aa:	e0b2      	b.n	8003512 <UART_SetConfig+0x212>
 80033ac:	2304      	movs	r3, #4
 80033ae:	77fb      	strb	r3, [r7, #31]
 80033b0:	e0af      	b.n	8003512 <UART_SetConfig+0x212>
 80033b2:	2308      	movs	r3, #8
 80033b4:	77fb      	strb	r3, [r7, #31]
 80033b6:	e0ac      	b.n	8003512 <UART_SetConfig+0x212>
 80033b8:	2310      	movs	r3, #16
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e0a9      	b.n	8003512 <UART_SetConfig+0x212>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a6f      	ldr	r2, [pc, #444]	@ (8003580 <UART_SetConfig+0x280>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d124      	bne.n	8003412 <UART_SetConfig+0x112>
 80033c8:	4b6c      	ldr	r3, [pc, #432]	@ (800357c <UART_SetConfig+0x27c>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033d4:	d011      	beq.n	80033fa <UART_SetConfig+0xfa>
 80033d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033da:	d817      	bhi.n	800340c <UART_SetConfig+0x10c>
 80033dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033e0:	d011      	beq.n	8003406 <UART_SetConfig+0x106>
 80033e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033e6:	d811      	bhi.n	800340c <UART_SetConfig+0x10c>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <UART_SetConfig+0xf4>
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f0:	d006      	beq.n	8003400 <UART_SetConfig+0x100>
 80033f2:	e00b      	b.n	800340c <UART_SetConfig+0x10c>
 80033f4:	2300      	movs	r3, #0
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e08b      	b.n	8003512 <UART_SetConfig+0x212>
 80033fa:	2302      	movs	r3, #2
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e088      	b.n	8003512 <UART_SetConfig+0x212>
 8003400:	2304      	movs	r3, #4
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e085      	b.n	8003512 <UART_SetConfig+0x212>
 8003406:	2308      	movs	r3, #8
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e082      	b.n	8003512 <UART_SetConfig+0x212>
 800340c:	2310      	movs	r3, #16
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e07f      	b.n	8003512 <UART_SetConfig+0x212>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a5b      	ldr	r2, [pc, #364]	@ (8003584 <UART_SetConfig+0x284>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d124      	bne.n	8003466 <UART_SetConfig+0x166>
 800341c:	4b57      	ldr	r3, [pc, #348]	@ (800357c <UART_SetConfig+0x27c>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003424:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003428:	d011      	beq.n	800344e <UART_SetConfig+0x14e>
 800342a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800342e:	d817      	bhi.n	8003460 <UART_SetConfig+0x160>
 8003430:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003434:	d011      	beq.n	800345a <UART_SetConfig+0x15a>
 8003436:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800343a:	d811      	bhi.n	8003460 <UART_SetConfig+0x160>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <UART_SetConfig+0x148>
 8003440:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003444:	d006      	beq.n	8003454 <UART_SetConfig+0x154>
 8003446:	e00b      	b.n	8003460 <UART_SetConfig+0x160>
 8003448:	2300      	movs	r3, #0
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e061      	b.n	8003512 <UART_SetConfig+0x212>
 800344e:	2302      	movs	r3, #2
 8003450:	77fb      	strb	r3, [r7, #31]
 8003452:	e05e      	b.n	8003512 <UART_SetConfig+0x212>
 8003454:	2304      	movs	r3, #4
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e05b      	b.n	8003512 <UART_SetConfig+0x212>
 800345a:	2308      	movs	r3, #8
 800345c:	77fb      	strb	r3, [r7, #31]
 800345e:	e058      	b.n	8003512 <UART_SetConfig+0x212>
 8003460:	2310      	movs	r3, #16
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e055      	b.n	8003512 <UART_SetConfig+0x212>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a47      	ldr	r2, [pc, #284]	@ (8003588 <UART_SetConfig+0x288>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d124      	bne.n	80034ba <UART_SetConfig+0x1ba>
 8003470:	4b42      	ldr	r3, [pc, #264]	@ (800357c <UART_SetConfig+0x27c>)
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003478:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800347c:	d011      	beq.n	80034a2 <UART_SetConfig+0x1a2>
 800347e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003482:	d817      	bhi.n	80034b4 <UART_SetConfig+0x1b4>
 8003484:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003488:	d011      	beq.n	80034ae <UART_SetConfig+0x1ae>
 800348a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800348e:	d811      	bhi.n	80034b4 <UART_SetConfig+0x1b4>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <UART_SetConfig+0x19c>
 8003494:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003498:	d006      	beq.n	80034a8 <UART_SetConfig+0x1a8>
 800349a:	e00b      	b.n	80034b4 <UART_SetConfig+0x1b4>
 800349c:	2300      	movs	r3, #0
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e037      	b.n	8003512 <UART_SetConfig+0x212>
 80034a2:	2302      	movs	r3, #2
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e034      	b.n	8003512 <UART_SetConfig+0x212>
 80034a8:	2304      	movs	r3, #4
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e031      	b.n	8003512 <UART_SetConfig+0x212>
 80034ae:	2308      	movs	r3, #8
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e02e      	b.n	8003512 <UART_SetConfig+0x212>
 80034b4:	2310      	movs	r3, #16
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e02b      	b.n	8003512 <UART_SetConfig+0x212>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a33      	ldr	r2, [pc, #204]	@ (800358c <UART_SetConfig+0x28c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d124      	bne.n	800350e <UART_SetConfig+0x20e>
 80034c4:	4b2d      	ldr	r3, [pc, #180]	@ (800357c <UART_SetConfig+0x27c>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80034cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034d0:	d011      	beq.n	80034f6 <UART_SetConfig+0x1f6>
 80034d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034d6:	d817      	bhi.n	8003508 <UART_SetConfig+0x208>
 80034d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034dc:	d011      	beq.n	8003502 <UART_SetConfig+0x202>
 80034de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034e2:	d811      	bhi.n	8003508 <UART_SetConfig+0x208>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <UART_SetConfig+0x1f0>
 80034e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034ec:	d006      	beq.n	80034fc <UART_SetConfig+0x1fc>
 80034ee:	e00b      	b.n	8003508 <UART_SetConfig+0x208>
 80034f0:	2300      	movs	r3, #0
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e00d      	b.n	8003512 <UART_SetConfig+0x212>
 80034f6:	2302      	movs	r3, #2
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e00a      	b.n	8003512 <UART_SetConfig+0x212>
 80034fc:	2304      	movs	r3, #4
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e007      	b.n	8003512 <UART_SetConfig+0x212>
 8003502:	2308      	movs	r3, #8
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e004      	b.n	8003512 <UART_SetConfig+0x212>
 8003508:	2310      	movs	r3, #16
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e001      	b.n	8003512 <UART_SetConfig+0x212>
 800350e:	2310      	movs	r3, #16
 8003510:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800351a:	d16b      	bne.n	80035f4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800351c:	7ffb      	ldrb	r3, [r7, #31]
 800351e:	2b08      	cmp	r3, #8
 8003520:	d838      	bhi.n	8003594 <UART_SetConfig+0x294>
 8003522:	a201      	add	r2, pc, #4	@ (adr r2, 8003528 <UART_SetConfig+0x228>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	0800354d 	.word	0x0800354d
 800352c:	08003555 	.word	0x08003555
 8003530:	0800355d 	.word	0x0800355d
 8003534:	08003595 	.word	0x08003595
 8003538:	08003563 	.word	0x08003563
 800353c:	08003595 	.word	0x08003595
 8003540:	08003595 	.word	0x08003595
 8003544:	08003595 	.word	0x08003595
 8003548:	0800356b 	.word	0x0800356b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7ff f91a 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003550:	61b8      	str	r0, [r7, #24]
        break;
 8003552:	e024      	b.n	800359e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003554:	f7ff f938 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8003558:	61b8      	str	r0, [r7, #24]
        break;
 800355a:	e020      	b.n	800359e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800355c:	4b0c      	ldr	r3, [pc, #48]	@ (8003590 <UART_SetConfig+0x290>)
 800355e:	61bb      	str	r3, [r7, #24]
        break;
 8003560:	e01d      	b.n	800359e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003562:	f7ff f8af 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8003566:	61b8      	str	r0, [r7, #24]
        break;
 8003568:	e019      	b.n	800359e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800356e:	61bb      	str	r3, [r7, #24]
        break;
 8003570:	e015      	b.n	800359e <UART_SetConfig+0x29e>
 8003572:	bf00      	nop
 8003574:	efff69f3 	.word	0xefff69f3
 8003578:	40013800 	.word	0x40013800
 800357c:	40021000 	.word	0x40021000
 8003580:	40004400 	.word	0x40004400
 8003584:	40004800 	.word	0x40004800
 8003588:	40004c00 	.word	0x40004c00
 800358c:	40005000 	.word	0x40005000
 8003590:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	77bb      	strb	r3, [r7, #30]
        break;
 800359c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d073      	beq.n	800368c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	005a      	lsls	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	441a      	add	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b0f      	cmp	r3, #15
 80035be:	d916      	bls.n	80035ee <UART_SetConfig+0x2ee>
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c6:	d212      	bcs.n	80035ee <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f023 030f 	bic.w	r3, r3, #15
 80035d0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	b29a      	uxth	r2, r3
 80035de:	89fb      	ldrh	r3, [r7, #14]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	89fa      	ldrh	r2, [r7, #14]
 80035ea:	60da      	str	r2, [r3, #12]
 80035ec:	e04e      	b.n	800368c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	77bb      	strb	r3, [r7, #30]
 80035f2:	e04b      	b.n	800368c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035f4:	7ffb      	ldrb	r3, [r7, #31]
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d827      	bhi.n	800364a <UART_SetConfig+0x34a>
 80035fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <UART_SetConfig+0x300>)
 80035fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003600:	08003625 	.word	0x08003625
 8003604:	0800362d 	.word	0x0800362d
 8003608:	08003635 	.word	0x08003635
 800360c:	0800364b 	.word	0x0800364b
 8003610:	0800363b 	.word	0x0800363b
 8003614:	0800364b 	.word	0x0800364b
 8003618:	0800364b 	.word	0x0800364b
 800361c:	0800364b 	.word	0x0800364b
 8003620:	08003643 	.word	0x08003643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003624:	f7ff f8ae 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003628:	61b8      	str	r0, [r7, #24]
        break;
 800362a:	e013      	b.n	8003654 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800362c:	f7ff f8cc 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8003630:	61b8      	str	r0, [r7, #24]
        break;
 8003632:	e00f      	b.n	8003654 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003634:	4b1b      	ldr	r3, [pc, #108]	@ (80036a4 <UART_SetConfig+0x3a4>)
 8003636:	61bb      	str	r3, [r7, #24]
        break;
 8003638:	e00c      	b.n	8003654 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800363a:	f7ff f843 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 800363e:	61b8      	str	r0, [r7, #24]
        break;
 8003640:	e008      	b.n	8003654 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003646:	61bb      	str	r3, [r7, #24]
        break;
 8003648:	e004      	b.n	8003654 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	77bb      	strb	r3, [r7, #30]
        break;
 8003652:	bf00      	nop
    }

    if (pclk != 0U)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d018      	beq.n	800368c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	085a      	lsrs	r2, r3, #1
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	441a      	add	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b0f      	cmp	r3, #15
 8003672:	d909      	bls.n	8003688 <UART_SetConfig+0x388>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800367a:	d205      	bcs.n	8003688 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	e001      	b.n	800368c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003698:	7fbb      	ldrb	r3, [r7, #30]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	007a1200 	.word	0x007a1200

080036a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01a      	beq.n	80037be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037a6:	d10a      	bne.n	80037be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]
  }
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b098      	sub	sp, #96	@ 0x60
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037fc:	f7fd f8a4 	bl	8000948 <HAL_GetTick>
 8003800:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b08      	cmp	r3, #8
 800380e:	d12e      	bne.n	800386e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003810:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003818:	2200      	movs	r2, #0
 800381a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f88c 	bl	800393c <UART_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d021      	beq.n	800386e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800383a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800383e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003848:	647b      	str	r3, [r7, #68]	@ 0x44
 800384a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800384e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e6      	bne.n	800382a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e062      	b.n	8003934 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b04      	cmp	r3, #4
 800387a:	d149      	bne.n	8003910 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800387c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003884:	2200      	movs	r2, #0
 8003886:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f856 	bl	800393c <UART_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d03c      	beq.n	8003910 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	e853 3f00 	ldrex	r3, [r3]
 80038a2:	623b      	str	r3, [r7, #32]
   return(result);
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80038b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e6      	bne.n	8003896 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3308      	adds	r3, #8
 80038ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	e853 3f00 	ldrex	r3, [r3]
 80038d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3308      	adds	r3, #8
 80038e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038e8:	61fa      	str	r2, [r7, #28]
 80038ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ec:	69b9      	ldr	r1, [r7, #24]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	e841 2300 	strex	r3, r2, [r1]
 80038f4:	617b      	str	r3, [r7, #20]
   return(result);
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e5      	bne.n	80038c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e011      	b.n	8003934 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3758      	adds	r7, #88	@ 0x58
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800394c:	e04f      	b.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d04b      	beq.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7fc fff7 	bl	8000948 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <UART_WaitOnFlagUntilTimeout+0x30>
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e04e      	b.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	d037      	beq.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b80      	cmp	r3, #128	@ 0x80
 8003982:	d034      	beq.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b40      	cmp	r3, #64	@ 0x40
 8003988:	d031      	beq.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b08      	cmp	r3, #8
 8003996:	d110      	bne.n	80039ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2208      	movs	r2, #8
 800399e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f8ff 	bl	8003ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2208      	movs	r2, #8
 80039aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e029      	b.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039c8:	d111      	bne.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f8e5 	bl	8003ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e00f      	b.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4013      	ands	r3, r2
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	bf0c      	ite	eq
 80039fe:	2301      	moveq	r3, #1
 8003a00:	2300      	movne	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d0a0      	beq.n	800394e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b096      	sub	sp, #88	@ 0x58
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2222      	movs	r2, #34	@ 0x22
 8003a40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d028      	beq.n	8003a9e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a50:	4a3e      	ldr	r2, [pc, #248]	@ (8003b4c <UART_Start_Receive_DMA+0x134>)
 8003a52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a58:	4a3d      	ldr	r2, [pc, #244]	@ (8003b50 <UART_Start_Receive_DMA+0x138>)
 8003a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a60:	4a3c      	ldr	r2, [pc, #240]	@ (8003b54 <UART_Start_Receive_DMA+0x13c>)
 8003a62:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a68:	2200      	movs	r2, #0
 8003a6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3324      	adds	r3, #36	@ 0x24
 8003a76:	4619      	mov	r1, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	f7fd f8c6 	bl	8000c10 <HAL_DMA_Start_IT>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e051      	b.n	8003b42 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d018      	beq.n	8003ad8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ac6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003aca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e6      	bne.n	8003aa6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3308      	adds	r3, #8
 8003ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3308      	adds	r3, #8
 8003af6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003af8:	637a      	str	r2, [r7, #52]	@ 0x34
 8003afa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003afe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3308      	adds	r3, #8
 8003b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3308      	adds	r3, #8
 8003b2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b2c:	623a      	str	r2, [r7, #32]
 8003b2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	69f9      	ldr	r1, [r7, #28]
 8003b32:	6a3a      	ldr	r2, [r7, #32]
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e5      	bne.n	8003b0c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3758      	adds	r7, #88	@ 0x58
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	08003c6d 	.word	0x08003c6d
 8003b50:	08003d93 	.word	0x08003d93
 8003b54:	08003dd1 	.word	0x08003dd1

08003b58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	@ 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	6979      	ldr	r1, [r7, #20]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e6      	bne.n	8003b60 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003b98:	bf00      	nop
 8003b9a:	3724      	adds	r7, #36	@ 0x24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b095      	sub	sp, #84	@ 0x54
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bca:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e6      	bne.n	8003bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3308      	adds	r3, #8
 8003be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c06:	e841 2300 	strex	r3, r2, [r1]
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e5      	bne.n	8003bde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d118      	bne.n	8003c4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f023 0310 	bic.w	r3, r3, #16
 8003c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6979      	ldr	r1, [r7, #20]
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	613b      	str	r3, [r7, #16]
   return(result);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e6      	bne.n	8003c1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c60:	bf00      	nop
 8003c62:	3754      	adds	r7, #84	@ 0x54
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b09c      	sub	sp, #112	@ 0x70
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d071      	beq.n	8003d66 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003caa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e6      	bne.n	8003c8a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003cdc:	647a      	str	r2, [r7, #68]	@ 0x44
 8003cde:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	623b      	str	r3, [r7, #32]
   return(result);
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d06:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d10:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e5      	bne.n	8003cf0 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d26:	2220      	movs	r2, #32
 8003d28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d118      	bne.n	8003d66 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f023 0310 	bic.w	r3, r3, #16
 8003d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	69b9      	ldr	r1, [r7, #24]
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	617b      	str	r3, [r7, #20]
   return(result);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e6      	bne.n	8003d34 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d68:	2200      	movs	r2, #0
 8003d6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003d7e:	f7fc fb6d 	bl	800045c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d82:	e002      	b.n	8003d8a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003d84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003d86:	f7ff fa9d 	bl	80032c4 <HAL_UART_RxCpltCallback>
}
 8003d8a:	bf00      	nop
 8003d8c:	3770      	adds	r7, #112	@ 0x70
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d109      	bne.n	8003dc2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	4619      	mov	r1, r3
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7fc fb4e 	bl	800045c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003dc0:	e002      	b.n	8003dc8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff fa88 	bl	80032d8 <HAL_UART_RxHalfCpltCallback>
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003de2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df6:	2b80      	cmp	r3, #128	@ 0x80
 8003df8:	d109      	bne.n	8003e0e <UART_DMAError+0x3e>
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b21      	cmp	r3, #33	@ 0x21
 8003dfe:	d106      	bne.n	8003e0e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8003e08:	6978      	ldr	r0, [r7, #20]
 8003e0a:	f7ff fea5 	bl	8003b58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e18:	2b40      	cmp	r3, #64	@ 0x40
 8003e1a:	d109      	bne.n	8003e30 <UART_DMAError+0x60>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b22      	cmp	r3, #34	@ 0x22
 8003e20:	d106      	bne.n	8003e30 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8003e2a:	6978      	ldr	r0, [r7, #20]
 8003e2c:	f7ff feba 	bl	8003ba4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e36:	f043 0210 	orr.w	r2, r3, #16
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e40:	6978      	ldr	r0, [r7, #20]
 8003e42:	f7ff fa53 	bl	80032ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff fa3d 	bl	80032ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b088      	sub	sp, #32
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6979      	ldr	r1, [r7, #20]
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	613b      	str	r3, [r7, #16]
   return(result);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e6      	bne.n	8003e82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff f9f5 	bl	80032b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec6:	bf00      	nop
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b08c      	sub	sp, #48	@ 0x30
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	4613      	mov	r3, r2
 8003eee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d142      	bne.n	8003f80 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e03b      	b.n	8003f82 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff fd7b 	bl	8003a18 <UART_Start_Receive_DMA>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003f28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d124      	bne.n	8003f7a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d11d      	bne.n	8003f74 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f043 0310 	orr.w	r3, r3, #16
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f60:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6a39      	ldr	r1, [r7, #32]
 8003f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e6      	bne.n	8003f40 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8003f72:	e002      	b.n	8003f7a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f7e:	e000      	b.n	8003f82 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3730      	adds	r7, #48	@ 0x30
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <memset>:
 8003f8a:	4402      	add	r2, r0
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d100      	bne.n	8003f94 <memset+0xa>
 8003f92:	4770      	bx	lr
 8003f94:	f803 1b01 	strb.w	r1, [r3], #1
 8003f98:	e7f9      	b.n	8003f8e <memset+0x4>
	...

08003f9c <__libc_init_array>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8003fd4 <__libc_init_array+0x38>)
 8003fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8003fd8 <__libc_init_array+0x3c>)
 8003fa2:	1b64      	subs	r4, r4, r5
 8003fa4:	10a4      	asrs	r4, r4, #2
 8003fa6:	2600      	movs	r6, #0
 8003fa8:	42a6      	cmp	r6, r4
 8003faa:	d109      	bne.n	8003fc0 <__libc_init_array+0x24>
 8003fac:	4d0b      	ldr	r5, [pc, #44]	@ (8003fdc <__libc_init_array+0x40>)
 8003fae:	4c0c      	ldr	r4, [pc, #48]	@ (8003fe0 <__libc_init_array+0x44>)
 8003fb0:	f000 f826 	bl	8004000 <_init>
 8003fb4:	1b64      	subs	r4, r4, r5
 8003fb6:	10a4      	asrs	r4, r4, #2
 8003fb8:	2600      	movs	r6, #0
 8003fba:	42a6      	cmp	r6, r4
 8003fbc:	d105      	bne.n	8003fca <__libc_init_array+0x2e>
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc4:	4798      	blx	r3
 8003fc6:	3601      	adds	r6, #1
 8003fc8:	e7ee      	b.n	8003fa8 <__libc_init_array+0xc>
 8003fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fce:	4798      	blx	r3
 8003fd0:	3601      	adds	r6, #1
 8003fd2:	e7f2      	b.n	8003fba <__libc_init_array+0x1e>
 8003fd4:	08004050 	.word	0x08004050
 8003fd8:	08004050 	.word	0x08004050
 8003fdc:	08004050 	.word	0x08004050
 8003fe0:	08004054 	.word	0x08004054

08003fe4 <memcpy>:
 8003fe4:	440a      	add	r2, r1
 8003fe6:	4291      	cmp	r1, r2
 8003fe8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fec:	d100      	bne.n	8003ff0 <memcpy+0xc>
 8003fee:	4770      	bx	lr
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ffa:	4291      	cmp	r1, r2
 8003ffc:	d1f9      	bne.n	8003ff2 <memcpy+0xe>
 8003ffe:	bd10      	pop	{r4, pc}

08004000 <_init>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr

0800400c <_fini>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr


Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006068  08006068  00007068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006118  08006118  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006118  08006118  00007118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006120  08006120  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006120  08006120  00007120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006124  08006124  00007124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006128  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          000004c4  20000068  20000068  00008068  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000052c  2000052c  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eeff  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000328a  00000000  00000000  00016f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  0001a228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008bc  00000000  00000000  0001add8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022807  00000000  00000000  0001b694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012fa1  00000000  00000000  0003de9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3252  00000000  00000000  00050e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011408e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003300  00000000  00000000  001140d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  001173d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006050 	.word	0x08006050

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006050 	.word	0x08006050

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000286:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <MX_DMA_Init+0x38>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a0b      	ldr	r2, [pc, #44]	@ (80002b8 <MX_DMA_Init+0x38>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <MX_DMA_Init+0x38>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800029e:	2200      	movs	r2, #0
 80002a0:	2100      	movs	r1, #0
 80002a2:	2010      	movs	r0, #16
 80002a4:	f000 fd07 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002a8:	2010      	movs	r0, #16
 80002aa:	f000 fd20 	bl	8000cee <HAL_NVIC_EnableIRQ>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000

080002bc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08a      	sub	sp, #40	@ 0x28
 80002c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d2:	4b4f      	ldr	r3, [pc, #316]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a4e      	ldr	r2, [pc, #312]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b4c      	ldr	r3, [pc, #304]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002e6:	613b      	str	r3, [r7, #16]
 80002e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ea:	4b49      	ldr	r3, [pc, #292]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a48      	ldr	r2, [pc, #288]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b46      	ldr	r3, [pc, #280]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	4b43      	ldr	r3, [pc, #268]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a42      	ldr	r2, [pc, #264]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800030c:	6153      	str	r3, [r2, #20]
 800030e:	4b40      	ldr	r3, [pc, #256]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b3d      	ldr	r3, [pc, #244]	@ (8000410 <MX_GPIO_Init+0x154>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	4a3c      	ldr	r2, [pc, #240]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000324:	6153      	str	r3, [r2, #20]
 8000326:	4b3a      	ldr	r3, [pc, #232]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000332:	4b37      	ldr	r3, [pc, #220]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	4a36      	ldr	r2, [pc, #216]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000338:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800033c:	6153      	str	r3, [r2, #20]
 800033e:	4b34      	ldr	r3, [pc, #208]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2120      	movs	r1, #32
 800034e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000352:	f001 fa77 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000356:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800035c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	4619      	mov	r1, r3
 800036c:	4829      	ldr	r0, [pc, #164]	@ (8000414 <MX_GPIO_Init+0x158>)
 800036e:	f001 f8df 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000372:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000376:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000378:	2303      	movs	r3, #3
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	4619      	mov	r1, r3
 8000386:	4823      	ldr	r0, [pc, #140]	@ (8000414 <MX_GPIO_Init+0x158>)
 8000388:	f001 f8d2 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 800038c:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 8000390:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000392:	2303      	movs	r3, #3
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	4619      	mov	r1, r3
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003a4:	f001 f8c4 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003a8:	2320      	movs	r3, #32
 80003aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2300      	movs	r3, #0
 80003b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	4619      	mov	r1, r3
 80003be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c2:	f001 f8b5 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80003c6:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80003ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003cc:	2303      	movs	r3, #3
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4619      	mov	r1, r3
 80003da:	480f      	ldr	r0, [pc, #60]	@ (8000418 <MX_GPIO_Init+0x15c>)
 80003dc:	f001 f8a8 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003e0:	2304      	movs	r3, #4
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e4:	2303      	movs	r3, #3
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	4619      	mov	r1, r3
 80003f2:	480a      	ldr	r0, [pc, #40]	@ (800041c <MX_GPIO_Init+0x160>)
 80003f4:	f001 f89c 	bl	8001530 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2100      	movs	r1, #0
 80003fc:	2028      	movs	r0, #40	@ 0x28
 80003fe:	f000 fc5a 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000402:	2028      	movs	r0, #40	@ 0x28
 8000404:	f000 fc73 	bl	8000cee <HAL_NVIC_EnableIRQ>

}
 8000408:	bf00      	nop
 800040a:	3728      	adds	r7, #40	@ 0x28
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40021000 	.word	0x40021000
 8000414:	48000800 	.word	0x48000800
 8000418:	48000400 	.word	0x48000400
 800041c:	48000c00 	.word	0x48000c00

08000420 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000424:	f3bf 8f4f 	dsb	sy
}
 8000428:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <__NVIC_SystemReset+0x24>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000432:	4904      	ldr	r1, [pc, #16]	@ (8000444 <__NVIC_SystemReset+0x24>)
 8000434:	4b04      	ldr	r3, [pc, #16]	@ (8000448 <__NVIC_SystemReset+0x28>)
 8000436:	4313      	orrs	r3, r2
 8000438:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800043a:	f3bf 8f4f 	dsb	sy
}
 800043e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000440:	bf00      	nop
 8000442:	e7fd      	b.n	8000440 <__NVIC_SystemReset+0x20>
 8000444:	e000ed00 	.word	0xe000ed00
 8000448:	05fa0004 	.word	0x05fa0004

0800044c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000454:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000458:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	2b00      	cmp	r3, #0
 8000462:	d013      	beq.n	800048c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000464:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000468:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800046c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000470:	2b00      	cmp	r3, #0
 8000472:	d00b      	beq.n	800048c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000474:	e000      	b.n	8000478 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000476:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000478:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d0f9      	beq.n	8000476 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000482:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	b086      	sub	sp, #24
 800049e:	af00      	add	r7, sp, #0
 80004a0:	60f8      	str	r0, [r7, #12]
 80004a2:	60b9      	str	r1, [r7, #8]
 80004a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
 80004aa:	e009      	b.n	80004c0 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	1c5a      	adds	r2, r3, #1
 80004b0:	60ba      	str	r2, [r7, #8]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ffc9 	bl	800044c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	3301      	adds	r3, #1
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	697a      	ldr	r2, [r7, #20]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	dbf1      	blt.n	80004ac <_write+0x12>
  }
  return len;
 80004c8:	687b      	ldr	r3, [r7, #4]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
	...

080004d4 <HAL_GPIO_EXTI_Callback>:
	SystemClock_DeInit();
	HAL_DeInit();
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == B1_Pin )
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004e4:	d104      	bne.n	80004f0 <HAL_GPIO_EXTI_Callback+0x1c>
		 *  When jumping to application directly from here, interrupts in application do not work.
		 *  This might be due to incorrect de-initialization of peripherals.
		 *  A work around can be to save a flag in flash that tells us it time to jump, perform a
		 *  system restart and jump to application first in main before initializing any peripherals.
		 * */
		fwUpgrade_setFlag( GO_APP );
 80004e6:	4804      	ldr	r0, [pc, #16]	@ (80004f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80004e8:	f004 fb52 	bl	8004b90 <fwUpgrade_setFlag>
		NVIC_SystemReset();
 80004ec:	f7ff ff98 	bl	8000420 <__NVIC_SystemReset>

	}
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	abb0abb0 	.word	0xabb0abb0

080004fc <verify_app>:

// verify application
uint8_t verify_app()
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	uint8_t *data = (uint8_t*) APP_START_ADD;
 8000502:	4b09      	ldr	r3, [pc, #36]	@ (8000528 <verify_app+0x2c>)
 8000504:	607b      	str	r3, [r7, #4]
	uint32_t crc = calculate_crc( data, 16131 );
 8000506:	f643 7103 	movw	r1, #16131	@ 0x3f03
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f004 fda2 	bl	8005054 <calculate_crc>
 8000510:	6038      	str	r0, [r7, #0]

	if ( crc == 0xffbd47d9 )
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	4a05      	ldr	r2, [pc, #20]	@ (800052c <verify_app+0x30>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d101      	bne.n	800051e <verify_app+0x22>
		return 1;
 800051a:	2301      	movs	r3, #1
 800051c:	e000      	b.n	8000520 <verify_app+0x24>
	else
		return 0;
 800051e:	2300      	movs	r3, #0
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	08040000 	.word	0x08040000
 800052c:	ffbd47d9 	.word	0xffbd47d9

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0

	printf( "Start");
 8000536:	4819      	ldr	r0, [pc, #100]	@ (800059c <main+0x6c>)
 8000538:	f004 ffbc 	bl	80054b4 <iprintf>
  /* USER CODE BEGIN 1 */
	uint32_t flag = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
	flash_read( APP_BOOT_FLAG_ADD, &flag, 4 );
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2204      	movs	r2, #4
 8000544:	4619      	mov	r1, r3
 8000546:	4816      	ldr	r0, [pc, #88]	@ (80005a0 <main+0x70>)
 8000548:	f004 fa62 	bl	8004a10 <flash_read>
	if( flag == GO_APP )
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a15      	ldr	r2, [pc, #84]	@ (80005a4 <main+0x74>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d104      	bne.n	800055e <main+0x2e>
	{
		// invalidate application flag to stay in boot next time.
		fwUpgrade_setFlag( GO_BOOT );
 8000554:	4814      	ldr	r0, [pc, #80]	@ (80005a8 <main+0x78>)
 8000556:	f004 fb1b 	bl	8004b90 <fwUpgrade_setFlag>

		// jump.
		fwUpgrade_jumpToApp();
 800055a:	f004 fafd 	bl	8004b58 <fwUpgrade_jumpToApp>
	}


	verify_app();
 800055e:	f7ff ffcd 	bl	80004fc <verify_app>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fa67 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f825 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f7ff fea7 	bl	80002bc <MX_GPIO_Init>
  MX_DMA_Init();
 800056e:	f7ff fe87 	bl	8000280 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f991 	bl	8000898 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // initiate command handler first to be ready to register other modules.
  cmdhandler_init( &huart2 );
 8000576:	480d      	ldr	r0, [pc, #52]	@ (80005ac <main+0x7c>)
 8000578:	f004 f86c 	bl	8004654 <cmdhandler_init>

  led_init();
 800057c:	f004 fb48 	bl	8004c10 <led_init>
  flash_init();
 8000580:	f004 f9bc 	bl	80048fc <flash_init>
  fwUpgrade_init();
 8000584:	f004 fabe 	bl	8004b04 <fwUpgrade_init>



  scheduler_init();
 8000588:	f004 fb9c 	bl	8004cc4 <scheduler_init>
  scheduler_addTask( 50, led_run );
 800058c:	4908      	ldr	r1, [pc, #32]	@ (80005b0 <main+0x80>)
 800058e:	2032      	movs	r0, #50	@ 0x32
 8000590:	f004 fbf2 	bl	8004d78 <scheduler_addTask>
  scheduler_run();
 8000594:	f004 fc7a 	bl	8004e8c <scheduler_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <main+0x68>
 800059c:	08006068 	.word	0x08006068
 80005a0:	0803f800 	.word	0x0803f800
 80005a4:	abb0abb0 	.word	0xabb0abb0
 80005a8:	b001b001 	.word	0xb001b001
 80005ac:	20000088 	.word	0x20000088
 80005b0:	08004c57 	.word	0x08004c57

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b0a6      	sub	sp, #152	@ 0x98
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80005be:	2228      	movs	r2, #40	@ 0x28
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 ffcb 	bl	800555e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2258      	movs	r2, #88	@ 0x58
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 ffbd 	bl	800555e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000600:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000604:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f960 	bl	80018d8 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800061e:	f000 f827 	bl	8000670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000632:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000638:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800063c:	2102      	movs	r1, #2
 800063e:	4618      	mov	r0, r3
 8000640:	f002 f99e 	bl	8002980 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800064a:	f000 f811 	bl	8000670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800064e:	2302      	movs	r3, #2
 8000650:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fbb1 	bl	8002dc0 <HAL_RCCEx_PeriphCLKConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000664:	f000 f804 	bl	8000670 <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3798      	adds	r7, #152	@ 0x98
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <Error_Handler+0x8>

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <HAL_MspInit+0x44>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a0e      	ldr	r2, [pc, #56]	@ (80006c0 <HAL_MspInit+0x44>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <HAL_MspInit+0x44>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <HAL_MspInit+0x44>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a08      	ldr	r2, [pc, #32]	@ (80006c0 <HAL_MspInit+0x44>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <HAL_MspInit+0x44>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006b2:	2007      	movs	r0, #7
 80006b4:	f000 faf4 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <NMI_Handler+0x4>

080006cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <MemManage_Handler+0x4>

080006dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071a:	f000 f9d1 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000728:	4802      	ldr	r0, [pc, #8]	@ (8000734 <DMA1_Channel6_IRQHandler+0x10>)
 800072a:	f000 fc1c 	bl	8000f66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000110 	.word	0x20000110

08000738 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800073c:	4802      	ldr	r0, [pc, #8]	@ (8000748 <USART2_IRQHandler+0x10>)
 800073e:	f002 fe35 	bl	80033ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000088 	.word	0x20000088

0800074c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000750:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000754:	f001 f8a8 	bl	80018a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	e00a      	b.n	8000784 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800076e:	f3af 8000 	nop.w
 8000772:	4601      	mov	r1, r0
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	60ba      	str	r2, [r7, #8]
 800077a:	b2ca      	uxtb	r2, r1
 800077c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	3301      	adds	r3, #1
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	dbf0      	blt.n	800076e <_read+0x12>
  }

  return len;
 800078c:	687b      	ldr	r3, [r7, #4]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007be:	605a      	str	r2, [r3, #4]
  return 0;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <_isatty>:

int _isatty(int file)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000808:	4a14      	ldr	r2, [pc, #80]	@ (800085c <_sbrk+0x5c>)
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <_sbrk+0x60>)
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000814:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <_sbrk+0x64>)
 800081e:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <_sbrk+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <_sbrk+0x64>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	429a      	cmp	r2, r3
 800082e:	d207      	bcs.n	8000840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000830:	f004 fef4 	bl	800561c <__errno>
 8000834:	4603      	mov	r3, r0
 8000836:	220c      	movs	r2, #12
 8000838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	e009      	b.n	8000854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000840:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <_sbrk+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000846:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <_sbrk+0x64>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	4a05      	ldr	r2, [pc, #20]	@ (8000864 <_sbrk+0x64>)
 8000850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20010000 	.word	0x20010000
 8000860:	00000400 	.word	0x00000400
 8000864:	20000084 	.word	0x20000084
 8000868:	20000530 	.word	0x20000530

0800086c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000870:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <SystemInit+0x28>)
 8000872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000876:	4a07      	ldr	r2, [pc, #28]	@ (8000894 <SystemInit+0x28>)
 8000878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800087c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000880:	4b04      	ldr	r3, [pc, #16]	@ (8000894 <SystemInit+0x28>)
 8000882:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000886:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 800089e:	4a15      	ldr	r2, [pc, #84]	@ (80008f4 <MX_USART2_UART_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a2:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_USART2_UART_Init+0x58>)
 80008dc:	f002 fc8e 	bl	80031fc <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008e6:	f7ff fec3 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000088 	.word	0x20000088
 80008f4:	40004400 	.word	0x40004400

080008f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a2e      	ldr	r2, [pc, #184]	@ (80009d0 <HAL_UART_MspInit+0xd8>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d156      	bne.n	80009c8 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091a:	4b2e      	ldr	r3, [pc, #184]	@ (80009d4 <HAL_UART_MspInit+0xdc>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a2d      	ldr	r2, [pc, #180]	@ (80009d4 <HAL_UART_MspInit+0xdc>)
 8000920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b2b      	ldr	r3, [pc, #172]	@ (80009d4 <HAL_UART_MspInit+0xdc>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <HAL_UART_MspInit+0xdc>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a27      	ldr	r2, [pc, #156]	@ (80009d4 <HAL_UART_MspInit+0xdc>)
 8000938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b25      	ldr	r3, [pc, #148]	@ (80009d4 <HAL_UART_MspInit+0xdc>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800094a:	230c      	movs	r3, #12
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800095a:	2307      	movs	r3, #7
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000968:	f000 fde2 	bl	8001530 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <HAL_UART_MspInit+0xe0>)
 800096e:	4a1b      	ldr	r2, [pc, #108]	@ (80009dc <HAL_UART_MspInit+0xe4>)
 8000970:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <HAL_UART_MspInit+0xe0>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <HAL_UART_MspInit+0xe0>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <HAL_UART_MspInit+0xe0>)
 8000980:	2280      	movs	r2, #128	@ 0x80
 8000982:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <HAL_UART_MspInit+0xe0>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800098a:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <HAL_UART_MspInit+0xe0>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <HAL_UART_MspInit+0xe0>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <HAL_UART_MspInit+0xe0>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800099c:	480e      	ldr	r0, [pc, #56]	@ (80009d8 <HAL_UART_MspInit+0xe0>)
 800099e:	f000 f9c0 	bl	8000d22 <HAL_DMA_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80009a8:	f7ff fe62 	bl	8000670 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <HAL_UART_MspInit+0xe0>)
 80009b0:	675a      	str	r2, [r3, #116]	@ 0x74
 80009b2:	4a09      	ldr	r2, [pc, #36]	@ (80009d8 <HAL_UART_MspInit+0xe0>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	2026      	movs	r0, #38	@ 0x26
 80009be:	f000 f97a 	bl	8000cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c2:	2026      	movs	r0, #38	@ 0x26
 80009c4:	f000 f993 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	@ 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40021000 	.word	0x40021000
 80009d8:	20000110 	.word	0x20000110
 80009dc:	4002006c 	.word	0x4002006c

080009e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a18 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e4:	f7ff ff42 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	@ (8000a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000a24 <LoopForever+0xe>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	@ (8000a2c <LoopForever+0x16>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f004 fe0b 	bl	8005628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a12:	f7ff fd8d 	bl	8000530 <main>

08000a16 <LoopForever>:

LoopForever:
    b LoopForever
 8000a16:	e7fe      	b.n	8000a16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a24:	08006128 	.word	0x08006128
  ldr r2, =_sbss
 8000a28:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a2c:	2000052c 	.word	0x2000052c

08000a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC1_2_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_Init+0x28>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <HAL_Init+0x28>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f92b 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f000 f808 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fe14 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40022000 	.word	0x40022000

08000a60 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f943 	bl	8000d0a <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 f90b 	bl	8000cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	@ (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000154 	.word	0x20000154

08000ae8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;  
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000154 	.word	0x20000154

08000b00 <__NVIC_SetPriorityGrouping>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	@ (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	@ (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	@ (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	@ 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	@ 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <SysTick_Config>:
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f7ff ff8e 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff29 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff3e 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff8e 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5d 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff31 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa2 	bl	8000c5c <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e037      	b.n	8000da8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000d4e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000d52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f9bc 	bl	8001108 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d101      	bne.n	8000dd0 <HAL_DMA_Start_IT+0x20>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e04a      	b.n	8000e66 <HAL_DMA_Start_IT+0xb6>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d13a      	bne.n	8000e58 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2202      	movs	r2, #2
 8000de6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2200      	movs	r2, #0
 8000dee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0201 	bic.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f000 f950 	bl	80010ac <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d008      	beq.n	8000e26 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 020e 	orr.w	r2, r2, #14
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	e00f      	b.n	8000e46 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f042 020a 	orr.w	r2, r2, #10
 8000e34:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0204 	bic.w	r2, r2, #4
 8000e44:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f042 0201 	orr.w	r2, r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e005      	b.n	8000e64 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e60:	2302      	movs	r3, #2
 8000e62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e02e      	b.n	8000ede <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d008      	beq.n	8000e9c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e020      	b.n	8000ede <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 020e 	bic.w	r2, r2, #14
 8000eaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d005      	beq.n	8000f0c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2204      	movs	r2, #4
 8000f04:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e027      	b.n	8000f5c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 020e 	bic.w	r2, r2, #14
 8000f1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f34:	2101      	movs	r1, #1
 8000f36:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	4798      	blx	r3
    }
  }
  return status;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	2204      	movs	r2, #4
 8000f84:	409a      	lsls	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d024      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0x72>
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d01f      	beq.n	8000fd8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d107      	bne.n	8000fb6 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0204 	bic.w	r2, r2, #4
 8000fb4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d06a      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000fd6:	e065      	b.n	80010a4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	2202      	movs	r2, #2
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d02c      	beq.n	8001042 <HAL_DMA_IRQHandler+0xdc>
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d027      	beq.n	8001042 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0320 	and.w	r3, r3, #32
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10b      	bne.n	8001018 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 020a 	bic.w	r2, r2, #10
 800100e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001020:	2102      	movs	r1, #2
 8001022:	fa01 f202 	lsl.w	r2, r1, r2
 8001026:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001034:	2b00      	cmp	r3, #0
 8001036:	d035      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001040:	e030      	b.n	80010a4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	2208      	movs	r2, #8
 8001048:	409a      	lsls	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4013      	ands	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d028      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x13e>
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	2b00      	cmp	r3, #0
 800105a:	d023      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 020e 	bic.w	r2, r2, #14
 800106a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001074:	2101      	movs	r1, #1
 8001076:	fa01 f202 	lsl.w	r2, r1, r2
 800107a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	4798      	blx	r3
    }
  }
}
 80010a2:	e7ff      	b.n	80010a4 <HAL_DMA_IRQHandler+0x13e>
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c2:	2101      	movs	r1, #1
 80010c4:	fa01 f202 	lsl.w	r2, r1, r2
 80010c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d108      	bne.n	80010ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010ea:	e007      	b.n	80010fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	60da      	str	r2, [r3, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <DMA_CalcBaseAndBitshift+0x60>)
 8001118:	429a      	cmp	r2, r3
 800111a:	d80f      	bhi.n	800113c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b12      	ldr	r3, [pc, #72]	@ (800116c <DMA_CalcBaseAndBitshift+0x64>)
 8001124:	4413      	add	r3, r2
 8001126:	4a12      	ldr	r2, [pc, #72]	@ (8001170 <DMA_CalcBaseAndBitshift+0x68>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	009a      	lsls	r2, r3, #2
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a0f      	ldr	r2, [pc, #60]	@ (8001174 <DMA_CalcBaseAndBitshift+0x6c>)
 8001138:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800113a:	e00e      	b.n	800115a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <DMA_CalcBaseAndBitshift+0x70>)
 8001144:	4413      	add	r3, r2
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <DMA_CalcBaseAndBitshift+0x68>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	009a      	lsls	r2, r3, #2
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a09      	ldr	r2, [pc, #36]	@ (800117c <DMA_CalcBaseAndBitshift+0x74>)
 8001158:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40020407 	.word	0x40020407
 800116c:	bffdfff8 	.word	0xbffdfff8
 8001170:	cccccccd 	.word	0xcccccccd
 8001174:	40020000 	.word	0x40020000
 8001178:	bffdfbf8 	.word	0xbffdfbf8
 800117c:	40020400 	.word	0x40020400

08001180 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800119a:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <HAL_FLASH_Program+0xd8>)
 800119c:	7e1b      	ldrb	r3, [r3, #24]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_FLASH_Program+0x26>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e054      	b.n	8001250 <HAL_FLASH_Program+0xd0>
 80011a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001258 <HAL_FLASH_Program+0xd8>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011b0:	f000 f8a8 	bl	8001304 <FLASH_WaitForLastOperation>
 80011b4:	4603      	mov	r3, r0
 80011b6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d144      	bne.n	8001248 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d102      	bne.n	80011ca <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80011c4:	2301      	movs	r3, #1
 80011c6:	757b      	strb	r3, [r7, #21]
 80011c8:	e007      	b.n	80011da <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d102      	bne.n	80011d6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80011d0:	2302      	movs	r3, #2
 80011d2:	757b      	strb	r3, [r7, #21]
 80011d4:	e001      	b.n	80011da <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80011d6:	2304      	movs	r3, #4
 80011d8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80011da:	2300      	movs	r3, #0
 80011dc:	75bb      	strb	r3, [r7, #22]
 80011de:	e02d      	b.n	800123c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80011e0:	7dbb      	ldrb	r3, [r7, #22]
 80011e2:	005a      	lsls	r2, r3, #1
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	eb02 0c03 	add.w	ip, r2, r3
 80011ea:	7dbb      	ldrb	r3, [r7, #22]
 80011ec:	0119      	lsls	r1, r3, #4
 80011ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011f2:	f1c1 0620 	rsb	r6, r1, #32
 80011f6:	f1a1 0020 	sub.w	r0, r1, #32
 80011fa:	fa22 f401 	lsr.w	r4, r2, r1
 80011fe:	fa03 f606 	lsl.w	r6, r3, r6
 8001202:	4334      	orrs	r4, r6
 8001204:	fa23 f000 	lsr.w	r0, r3, r0
 8001208:	4304      	orrs	r4, r0
 800120a:	fa23 f501 	lsr.w	r5, r3, r1
 800120e:	b2a3      	uxth	r3, r4
 8001210:	4619      	mov	r1, r3
 8001212:	4660      	mov	r0, ip
 8001214:	f000 f85a 	bl	80012cc <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001218:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800121c:	f000 f872 	bl	8001304 <FLASH_WaitForLastOperation>
 8001220:	4603      	mov	r3, r0
 8001222:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <HAL_FLASH_Program+0xdc>)
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	4a0c      	ldr	r2, [pc, #48]	@ (800125c <HAL_FLASH_Program+0xdc>)
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d107      	bne.n	8001246 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001236:	7dbb      	ldrb	r3, [r7, #22]
 8001238:	3301      	adds	r3, #1
 800123a:	75bb      	strb	r3, [r7, #22]
 800123c:	7dba      	ldrb	r2, [r7, #22]
 800123e:	7d7b      	ldrb	r3, [r7, #21]
 8001240:	429a      	cmp	r2, r3
 8001242:	d3cd      	bcc.n	80011e0 <HAL_FLASH_Program+0x60>
 8001244:	e000      	b.n	8001248 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001246:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001248:	4b03      	ldr	r3, [pc, #12]	@ (8001258 <HAL_FLASH_Program+0xd8>)
 800124a:	2200      	movs	r2, #0
 800124c:	761a      	strb	r2, [r3, #24]

  return status;
 800124e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001250:	4618      	mov	r0, r3
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001258:	20000158 	.word	0x20000158
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <HAL_FLASH_Unlock+0x40>)
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00d      	beq.n	8001292 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_FLASH_Unlock+0x40>)
 8001278:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <HAL_FLASH_Unlock+0x44>)
 800127a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <HAL_FLASH_Unlock+0x40>)
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <HAL_FLASH_Unlock+0x48>)
 8001280:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <HAL_FLASH_Unlock+0x40>)
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001292:	79fb      	ldrb	r3, [r7, #7]
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40022000 	.word	0x40022000
 80012a4:	45670123 	.word	0x45670123
 80012a8:	cdef89ab 	.word	0xcdef89ab

080012ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80012b0:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <HAL_FLASH_Lock+0x1c>)
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <HAL_FLASH_Lock+0x1c>)
 80012b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40022000 	.word	0x40022000

080012cc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <FLASH_Program_HalfWord+0x30>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <FLASH_Program_HalfWord+0x34>)
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <FLASH_Program_HalfWord+0x34>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	887a      	ldrh	r2, [r7, #2]
 80012ee:	801a      	strh	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	20000158 	.word	0x20000158
 8001300:	40022000 	.word	0x40022000

08001304 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff fbec 	bl	8000ae8 <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001312:	e010      	b.n	8001336 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131a:	d00c      	beq.n	8001336 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <FLASH_WaitForLastOperation+0x2e>
 8001322:	f7ff fbe1 	bl	8000ae8 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	d201      	bcs.n	8001336 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e01f      	b.n	8001376 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <FLASH_WaitForLastOperation+0x7c>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b01      	cmp	r3, #1
 8001340:	d0e8      	beq.n	8001314 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <FLASH_WaitForLastOperation+0x7c>)
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	f003 0320 	and.w	r3, r3, #32
 800134a:	2b20      	cmp	r3, #32
 800134c:	d102      	bne.n	8001354 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <FLASH_WaitForLastOperation+0x7c>)
 8001350:	2220      	movs	r2, #32
 8001352:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <FLASH_WaitForLastOperation+0x7c>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	2b10      	cmp	r3, #16
 800135e:	d005      	beq.n	800136c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <FLASH_WaitForLastOperation+0x7c>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001368:	2b04      	cmp	r3, #4
 800136a:	d103      	bne.n	8001374 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800136c:	f000 f80a 	bl	8001384 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40022000 	.word	0x40022000

08001384 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <FLASH_SetErrorCode+0x5c>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b10      	cmp	r3, #16
 8001398:	d109      	bne.n	80013ae <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800139a:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <FLASH_SetErrorCode+0x60>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f043 0302 	orr.w	r3, r3, #2
 80013a2:	4a10      	ldr	r2, [pc, #64]	@ (80013e4 <FLASH_SetErrorCode+0x60>)
 80013a4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f043 0310 	orr.w	r3, r3, #16
 80013ac:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <FLASH_SetErrorCode+0x5c>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d109      	bne.n	80013ce <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <FLASH_SetErrorCode+0x60>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <FLASH_SetErrorCode+0x60>)
 80013c4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80013ce:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <FLASH_SetErrorCode+0x5c>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60d3      	str	r3, [r2, #12]
}  
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40022000 	.word	0x40022000
 80013e4:	20000158 	.word	0x20000158

080013e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013fa:	4b2e      	ldr	r3, [pc, #184]	@ (80014b4 <HAL_FLASHEx_Erase+0xcc>)
 80013fc:	7e1b      	ldrb	r3, [r3, #24]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_FLASHEx_Erase+0x1e>
 8001402:	2302      	movs	r3, #2
 8001404:	e052      	b.n	80014ac <HAL_FLASHEx_Erase+0xc4>
 8001406:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <HAL_FLASHEx_Erase+0xcc>)
 8001408:	2201      	movs	r2, #1
 800140a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d115      	bne.n	8001440 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001414:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001418:	f7ff ff74 	bl	8001304 <FLASH_WaitForLastOperation>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d140      	bne.n	80014a4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001422:	f000 f84b 	bl	80014bc <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001426:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800142a:	f7ff ff6b 	bl	8001304 <FLASH_WaitForLastOperation>
 800142e:	4603      	mov	r3, r0
 8001430:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001432:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <HAL_FLASHEx_Erase+0xd0>)
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	4a20      	ldr	r2, [pc, #128]	@ (80014b8 <HAL_FLASHEx_Erase+0xd0>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6113      	str	r3, [r2, #16]
 800143e:	e031      	b.n	80014a4 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001440:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001444:	f7ff ff5e 	bl	8001304 <FLASH_WaitForLastOperation>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d12a      	bne.n	80014a4 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	e019      	b.n	8001492 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800145e:	68b8      	ldr	r0, [r7, #8]
 8001460:	f000 f846 	bl	80014f0 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001464:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001468:	f7ff ff4c 	bl	8001304 <FLASH_WaitForLastOperation>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <HAL_FLASHEx_Erase+0xd0>)
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	4a10      	ldr	r2, [pc, #64]	@ (80014b8 <HAL_FLASHEx_Erase+0xd0>)
 8001476:	f023 0302 	bic.w	r3, r3, #2
 800147a:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	601a      	str	r2, [r3, #0]
            break;
 8001488:	e00c      	b.n	80014a4 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001490:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	02da      	lsls	r2, r3, #11
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4413      	add	r3, r2
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d3dc      	bcc.n	800145e <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <HAL_FLASHEx_Erase+0xcc>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	761a      	strb	r2, [r3, #24]

  return status;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000158 	.word	0x20000158
 80014b8:	40022000 	.word	0x40022000

080014bc <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <FLASH_MassErase+0x2c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <FLASH_MassErase+0x30>)
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	4a08      	ldr	r2, [pc, #32]	@ (80014ec <FLASH_MassErase+0x30>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <FLASH_MassErase+0x30>)
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <FLASH_MassErase+0x30>)
 80014d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014dc:	6113      	str	r3, [r2, #16]
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	20000158 	.word	0x20000158
 80014ec:	40022000 	.word	0x40022000

080014f0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <FLASH_PageErase+0x38>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <FLASH_PageErase+0x3c>)
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <FLASH_PageErase+0x3c>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800150a:	4a08      	ldr	r2, [pc, #32]	@ (800152c <FLASH_PageErase+0x3c>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <FLASH_PageErase+0x3c>)
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	4a05      	ldr	r2, [pc, #20]	@ (800152c <FLASH_PageErase+0x3c>)
 8001516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800151a:	6113      	str	r3, [r2, #16]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	20000158 	.word	0x20000158
 800152c:	40022000 	.word	0x40022000

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153e:	e160      	b.n	8001802 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8152 	beq.w	80017fc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d005      	beq.n	8001570 <HAL_GPIO_Init+0x40>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d130      	bne.n	80015d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a6:	2201      	movs	r2, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f003 0201 	and.w	r2, r3, #1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d017      	beq.n	800160e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d123      	bne.n	8001662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	220f      	movs	r2, #15
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	6939      	ldr	r1, [r7, #16]
 800165e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0203 	and.w	r2, r3, #3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80ac 	beq.w	80017fc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001820 <HAL_GPIO_Init+0x2f0>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001820 <HAL_GPIO_Init+0x2f0>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001820 <HAL_GPIO_Init+0x2f0>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016bc:	4a59      	ldr	r2, [pc, #356]	@ (8001824 <HAL_GPIO_Init+0x2f4>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016e6:	d025      	beq.n	8001734 <HAL_GPIO_Init+0x204>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001828 <HAL_GPIO_Init+0x2f8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d01f      	beq.n	8001730 <HAL_GPIO_Init+0x200>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a4e      	ldr	r2, [pc, #312]	@ (800182c <HAL_GPIO_Init+0x2fc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d019      	beq.n	800172c <HAL_GPIO_Init+0x1fc>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a4d      	ldr	r2, [pc, #308]	@ (8001830 <HAL_GPIO_Init+0x300>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d013      	beq.n	8001728 <HAL_GPIO_Init+0x1f8>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a4c      	ldr	r2, [pc, #304]	@ (8001834 <HAL_GPIO_Init+0x304>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d00d      	beq.n	8001724 <HAL_GPIO_Init+0x1f4>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a4b      	ldr	r2, [pc, #300]	@ (8001838 <HAL_GPIO_Init+0x308>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d007      	beq.n	8001720 <HAL_GPIO_Init+0x1f0>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a4a      	ldr	r2, [pc, #296]	@ (800183c <HAL_GPIO_Init+0x30c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d101      	bne.n	800171c <HAL_GPIO_Init+0x1ec>
 8001718:	2306      	movs	r3, #6
 800171a:	e00c      	b.n	8001736 <HAL_GPIO_Init+0x206>
 800171c:	2307      	movs	r3, #7
 800171e:	e00a      	b.n	8001736 <HAL_GPIO_Init+0x206>
 8001720:	2305      	movs	r3, #5
 8001722:	e008      	b.n	8001736 <HAL_GPIO_Init+0x206>
 8001724:	2304      	movs	r3, #4
 8001726:	e006      	b.n	8001736 <HAL_GPIO_Init+0x206>
 8001728:	2303      	movs	r3, #3
 800172a:	e004      	b.n	8001736 <HAL_GPIO_Init+0x206>
 800172c:	2302      	movs	r3, #2
 800172e:	e002      	b.n	8001736 <HAL_GPIO_Init+0x206>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_GPIO_Init+0x206>
 8001734:	2300      	movs	r3, #0
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	f002 0203 	and.w	r2, r2, #3
 800173c:	0092      	lsls	r2, r2, #2
 800173e:	4093      	lsls	r3, r2
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001746:	4937      	ldr	r1, [pc, #220]	@ (8001824 <HAL_GPIO_Init+0x2f4>)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001754:	4b3a      	ldr	r3, [pc, #232]	@ (8001840 <HAL_GPIO_Init+0x310>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001778:	4a31      	ldr	r2, [pc, #196]	@ (8001840 <HAL_GPIO_Init+0x310>)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800177e:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <HAL_GPIO_Init+0x310>)
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017a2:	4a27      	ldr	r2, [pc, #156]	@ (8001840 <HAL_GPIO_Init+0x310>)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017a8:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <HAL_GPIO_Init+0x310>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001840 <HAL_GPIO_Init+0x310>)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <HAL_GPIO_Init+0x310>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017f6:	4a12      	ldr	r2, [pc, #72]	@ (8001840 <HAL_GPIO_Init+0x310>)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	f47f ae97 	bne.w	8001540 <HAL_GPIO_Init+0x10>
  }
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	371c      	adds	r7, #28
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40021000 	.word	0x40021000
 8001824:	40010000 	.word	0x40010000
 8001828:	48000400 	.word	0x48000400
 800182c:	48000800 	.word	0x48000800
 8001830:	48000c00 	.word	0x48000c00
 8001834:	48001000 	.word	0x48001000
 8001838:	48001400 	.word	0x48001400
 800183c:	48001800 	.word	0x48001800
 8001840:	40010400 	.word	0x40010400

08001844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
 8001850:	4613      	mov	r3, r2
 8001852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001860:	e002      	b.n	8001868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4013      	ands	r3, r2
 800188c:	041a      	lsls	r2, r3, #16
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43d9      	mvns	r1, r3
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	400b      	ands	r3, r1
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	619a      	str	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018b2:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe04 	bl	80004d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40010400 	.word	0x40010400

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80018de:	af00      	add	r7, sp, #0
 80018e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f001 b83a 	b.w	8002972 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001902:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 816f 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001914:	4bb5      	ldr	r3, [pc, #724]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b04      	cmp	r3, #4
 800191e:	d00c      	beq.n	800193a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001920:	4bb2      	ldr	r3, [pc, #712]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d15c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x10e>
 800192c:	4baf      	ldr	r3, [pc, #700]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001938:	d155      	bne.n	80019e6 <HAL_RCC_OscConfig+0x10e>
 800193a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800193e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800194e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	095b      	lsrs	r3, r3, #5
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b01      	cmp	r3, #1
 8001964:	d102      	bne.n	800196c <HAL_RCC_OscConfig+0x94>
 8001966:	4ba1      	ldr	r3, [pc, #644]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	e015      	b.n	8001998 <HAL_RCC_OscConfig+0xc0>
 800196c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001970:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001980:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001984:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001988:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800198c:	fa93 f3a3 	rbit	r3, r3
 8001990:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001994:	4b95      	ldr	r3, [pc, #596]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001998:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800199c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80019a0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80019a4:	fa92 f2a2 	rbit	r2, r2
 80019a8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80019ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80019b0:	fab2 f282 	clz	r2, r2
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	f042 0220 	orr.w	r2, r2, #32
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	f002 021f 	and.w	r2, r2, #31
 80019c0:	2101      	movs	r1, #1
 80019c2:	fa01 f202 	lsl.w	r2, r1, r2
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8111 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x318>
 80019ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 8108 	bne.w	8001bf0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	f000 bfc6 	b.w	8002972 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12e>
 80019f8:	4b7c      	ldr	r3, [pc, #496]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a7b      	ldr	r2, [pc, #492]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e036      	b.n	8001a74 <HAL_RCC_OscConfig+0x19c>
 8001a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x158>
 8001a16:	4b75      	ldr	r3, [pc, #468]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a74      	ldr	r2, [pc, #464]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b72      	ldr	r3, [pc, #456]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a71      	ldr	r2, [pc, #452]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001a28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e021      	b.n	8001a74 <HAL_RCC_OscConfig+0x19c>
 8001a30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x184>
 8001a42:	4b6a      	ldr	r3, [pc, #424]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a69      	ldr	r2, [pc, #420]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b67      	ldr	r3, [pc, #412]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a66      	ldr	r2, [pc, #408]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0x19c>
 8001a5c:	4b63      	ldr	r3, [pc, #396]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a62      	ldr	r2, [pc, #392]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b60      	ldr	r3, [pc, #384]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a5f      	ldr	r2, [pc, #380]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a72:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d059      	beq.n	8001b38 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff f830 	bl	8000ae8 <HAL_GetTick>
 8001a88:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8e:	f7ff f82b 	bl	8000ae8 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	@ 0x64
 8001a9c:	d902      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	f000 bf67 	b.w	8002972 <HAL_RCC_OscConfig+0x109a>
 8001aa4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001ab8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d102      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x1fe>
 8001ad0:	4b46      	ldr	r3, [pc, #280]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x22a>
 8001ad6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ada:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001aea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aee:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001af2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001afe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b06:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001b0a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001b0e:	fa92 f2a2 	rbit	r2, r2
 8001b12:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001b16:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001b1a:	fab2 f282 	clz	r2, r2
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f042 0220 	orr.w	r2, r2, #32
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f002 021f 	and.w	r2, r2, #31
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0ab      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1b6>
 8001b36:	e05c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7fe ffd6 	bl	8000ae8 <HAL_GetTick>
 8001b3c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b40:	e00a      	b.n	8001b58 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b42:	f7fe ffd1 	bl	8000ae8 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	@ 0x64
 8001b50:	d902      	bls.n	8001b58 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	f000 bf0d 	b.w	8002972 <HAL_RCC_OscConfig+0x109a>
 8001b58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b5c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001b6c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d102      	bne.n	8001b8a <HAL_RCC_OscConfig+0x2b2>
 8001b84:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	e015      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2de>
 8001b8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b8e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001b9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ba2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001ba6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <HAL_RCC_OscConfig+0x314>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bba:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001bbe:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001bc2:	fa92 f2a2 	rbit	r2, r2
 8001bc6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001bca:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001bce:	fab2 f282 	clz	r2, r2
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	f042 0220 	orr.w	r2, r2, #32
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	f002 021f 	and.w	r2, r2, #31
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f202 	lsl.w	r2, r1, r2
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ab      	bne.n	8001b42 <HAL_RCC_OscConfig+0x26a>
 8001bea:	e002      	b.n	8001bf2 <HAL_RCC_OscConfig+0x31a>
 8001bec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 817f 	beq.w	8001f06 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c08:	4ba7      	ldr	r3, [pc, #668]	@ (8001ea8 <HAL_RCC_OscConfig+0x5d0>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c14:	4ba4      	ldr	r3, [pc, #656]	@ (8001ea8 <HAL_RCC_OscConfig+0x5d0>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d173      	bne.n	8001d08 <HAL_RCC_OscConfig+0x430>
 8001c20:	4ba1      	ldr	r3, [pc, #644]	@ (8001ea8 <HAL_RCC_OscConfig+0x5d0>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c2c:	d16c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x430>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001c40:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_OscConfig+0x386>
 8001c58:	4b93      	ldr	r3, [pc, #588]	@ (8001ea8 <HAL_RCC_OscConfig+0x5d0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	e013      	b.n	8001c86 <HAL_RCC_OscConfig+0x3ae>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001c70:	2302      	movs	r3, #2
 8001c72:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c76:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001c82:	4b89      	ldr	r3, [pc, #548]	@ (8001ea8 <HAL_RCC_OscConfig+0x5d0>)
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	2202      	movs	r2, #2
 8001c88:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001c8c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001c90:	fa92 f2a2 	rbit	r2, r2
 8001c94:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001c98:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c9c:	fab2 f282 	clz	r2, r2
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	f042 0220 	orr.w	r2, r2, #32
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f002 021f 	and.w	r2, r2, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00a      	beq.n	8001cce <HAL_RCC_OscConfig+0x3f6>
 8001cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d002      	beq.n	8001cce <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f000 be52 	b.w	8002972 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b76      	ldr	r3, [pc, #472]	@ (8001ea8 <HAL_RCC_OscConfig+0x5d0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	21f8      	movs	r1, #248	@ 0xf8
 8001ce4:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001cec:	fa91 f1a1 	rbit	r1, r1
 8001cf0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001cf4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001cf8:	fab1 f181 	clz	r1, r1
 8001cfc:	b2c9      	uxtb	r1, r1
 8001cfe:	408b      	lsls	r3, r1
 8001d00:	4969      	ldr	r1, [pc, #420]	@ (8001ea8 <HAL_RCC_OscConfig+0x5d0>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	e0fe      	b.n	8001f06 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8088 	beq.w	8001e2a <HAL_RCC_OscConfig+0x552>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001d2c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d3a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	461a      	mov	r2, r3
 8001d42:	2301      	movs	r3, #1
 8001d44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7fe fecf 	bl	8000ae8 <HAL_GetTick>
 8001d4a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d50:	f7fe feca 	bl	8000ae8 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d902      	bls.n	8001d66 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	f000 be06 	b.w	8002972 <HAL_RCC_OscConfig+0x109a>
 8001d66:	2302      	movs	r3, #2
 8001d68:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001d78:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_OscConfig+0x4be>
 8001d90:	4b45      	ldr	r3, [pc, #276]	@ (8001ea8 <HAL_RCC_OscConfig+0x5d0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	e013      	b.n	8001dbe <HAL_RCC_OscConfig+0x4e6>
 8001d96:	2302      	movs	r3, #2
 8001d98:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001dae:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001dba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea8 <HAL_RCC_OscConfig+0x5d0>)
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001dc4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001dc8:	fa92 f2a2 	rbit	r2, r2
 8001dcc:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001dd0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001dd4:	fab2 f282 	clz	r2, r2
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f042 0220 	orr.w	r2, r2, #32
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f002 021f 	and.w	r2, r2, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0af      	beq.n	8001d50 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea8 <HAL_RCC_OscConfig+0x5d0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dfc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	21f8      	movs	r1, #248	@ 0xf8
 8001e06:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001e0e:	fa91 f1a1 	rbit	r1, r1
 8001e12:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001e16:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e1a:	fab1 f181 	clz	r1, r1
 8001e1e:	b2c9      	uxtb	r1, r1
 8001e20:	408b      	lsls	r3, r1
 8001e22:	4921      	ldr	r1, [pc, #132]	@ (8001ea8 <HAL_RCC_OscConfig+0x5d0>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
 8001e28:	e06d      	b.n	8001f06 <HAL_RCC_OscConfig+0x62e>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001e3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e4a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	461a      	mov	r2, r3
 8001e52:	2300      	movs	r3, #0
 8001e54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7fe fe47 	bl	8000ae8 <HAL_GetTick>
 8001e5a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e60:	f7fe fe42 	bl	8000ae8 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d902      	bls.n	8001e76 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	f000 bd7e 	b.w	8002972 <HAL_RCC_OscConfig+0x109a>
 8001e76:	2302      	movs	r3, #2
 8001e78:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001e88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_RCC_OscConfig+0x5d4>
 8001ea0:	4b01      	ldr	r3, [pc, #4]	@ (8001ea8 <HAL_RCC_OscConfig+0x5d0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	e016      	b.n	8001ed4 <HAL_RCC_OscConfig+0x5fc>
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	2302      	movs	r3, #2
 8001eae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001ec4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001ed0:	4bbf      	ldr	r3, [pc, #764]	@ (80021d0 <HAL_RCC_OscConfig+0x8f8>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001eda:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ede:	fa92 f2a2 	rbit	r2, r2
 8001ee2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001ee6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001eea:	fab2 f282 	clz	r2, r2
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f042 0220 	orr.w	r2, r2, #32
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	f002 021f 	and.w	r2, r2, #31
 8001efa:	2101      	movs	r1, #1
 8001efc:	fa01 f202 	lsl.w	r2, r1, r2
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ac      	bne.n	8001e60 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8113 	beq.w	8002142 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d07c      	beq.n	8002026 <HAL_RCC_OscConfig+0x74e>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001f3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4ba2      	ldr	r3, [pc, #648]	@ (80021d4 <HAL_RCC_OscConfig+0x8fc>)
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	461a      	mov	r2, r3
 8001f52:	2301      	movs	r3, #1
 8001f54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7fe fdc7 	bl	8000ae8 <HAL_GetTick>
 8001f5a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f60:	f7fe fdc2 	bl	8000ae8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d902      	bls.n	8001f76 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	f000 bcfe 	b.w	8002972 <HAL_RCC_OscConfig+0x109a>
 8001f76:	2302      	movs	r3, #2
 8001f78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f80:	fa93 f2a3 	rbit	r2, r3
 8001f84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f88:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f96:	2202      	movs	r2, #2
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fba:	2202      	movs	r2, #2
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	fa93 f2a3 	rbit	r2, r3
 8001fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001fd4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	4b7e      	ldr	r3, [pc, #504]	@ (80021d0 <HAL_RCC_OscConfig+0x8f8>)
 8001fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fde:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	6019      	str	r1, [r3, #0]
 8001fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f1a3 	rbit	r1, r3
 8001ff4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ffc:	6019      	str	r1, [r3, #0]
  return result;
 8001ffe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002002:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	2101      	movs	r1, #1
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d09d      	beq.n	8001f60 <HAL_RCC_OscConfig+0x688>
 8002024:	e08d      	b.n	8002142 <HAL_RCC_OscConfig+0x86a>
 8002026:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002036:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002044:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002048:	601a      	str	r2, [r3, #0]
  return result;
 800204a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002052:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	4b5d      	ldr	r3, [pc, #372]	@ (80021d4 <HAL_RCC_OscConfig+0x8fc>)
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	461a      	mov	r2, r3
 8002064:	2300      	movs	r3, #0
 8002066:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002068:	f7fe fd3e 	bl	8000ae8 <HAL_GetTick>
 800206c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002072:	f7fe fd39 	bl	8000ae8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d902      	bls.n	8002088 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	f000 bc75 	b.w	8002972 <HAL_RCC_OscConfig+0x109a>
 8002088:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002090:	2202      	movs	r2, #2
 8002092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002098:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	fa93 f2a3 	rbit	r2, r3
 80020a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020b4:	2202      	movs	r2, #2
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	fa93 f2a3 	rbit	r2, r3
 80020c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020d8:	2202      	movs	r2, #2
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	fa93 f2a3 	rbit	r2, r3
 80020ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	4b36      	ldr	r3, [pc, #216]	@ (80021d0 <HAL_RCC_OscConfig+0x8f8>)
 80020f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002100:	2102      	movs	r1, #2
 8002102:	6019      	str	r1, [r3, #0]
 8002104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002108:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f1a3 	rbit	r1, r3
 8002112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002116:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800211a:	6019      	str	r1, [r3, #0]
  return result;
 800211c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002120:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d197      	bne.n	8002072 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002142:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002146:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 81a5 	beq.w	80024a2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <HAL_RCC_OscConfig+0x8f8>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d116      	bne.n	8002198 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_RCC_OscConfig+0x8f8>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a18      	ldr	r2, [pc, #96]	@ (80021d0 <HAL_RCC_OscConfig+0x8f8>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <HAL_RCC_OscConfig+0x8f8>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800217e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002182:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002190:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <HAL_RCC_OscConfig+0x900>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d121      	bne.n	80021e8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a4:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <HAL_RCC_OscConfig+0x900>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0b      	ldr	r2, [pc, #44]	@ (80021d8 <HAL_RCC_OscConfig+0x900>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b0:	f7fe fc9a 	bl	8000ae8 <HAL_GetTick>
 80021b4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	e010      	b.n	80021dc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7fe fc95 	bl	8000ae8 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	@ 0x64
 80021c8:	d908      	bls.n	80021dc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e3d1      	b.n	8002972 <HAL_RCC_OscConfig+0x109a>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	10908120 	.word	0x10908120
 80021d8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002414 <HAL_RCC_OscConfig+0xb3c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0e8      	beq.n	80021ba <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x92e>
 80021f8:	4b87      	ldr	r3, [pc, #540]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a86      	ldr	r2, [pc, #536]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e035      	b.n	8002272 <HAL_RCC_OscConfig+0x99a>
 8002206:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0x958>
 8002216:	4b80      	ldr	r3, [pc, #512]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4a7f      	ldr	r2, [pc, #508]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6213      	str	r3, [r2, #32]
 8002222:	4b7d      	ldr	r3, [pc, #500]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4a7c      	ldr	r2, [pc, #496]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 8002228:	f023 0304 	bic.w	r3, r3, #4
 800222c:	6213      	str	r3, [r2, #32]
 800222e:	e020      	b.n	8002272 <HAL_RCC_OscConfig+0x99a>
 8002230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002234:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b05      	cmp	r3, #5
 800223e:	d10c      	bne.n	800225a <HAL_RCC_OscConfig+0x982>
 8002240:	4b75      	ldr	r3, [pc, #468]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a74      	ldr	r2, [pc, #464]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	4b72      	ldr	r3, [pc, #456]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a71      	ldr	r2, [pc, #452]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	e00b      	b.n	8002272 <HAL_RCC_OscConfig+0x99a>
 800225a:	4b6f      	ldr	r3, [pc, #444]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a6e      	ldr	r2, [pc, #440]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	4b6c      	ldr	r3, [pc, #432]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a6b      	ldr	r2, [pc, #428]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002272:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002276:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8081 	beq.w	8002386 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7fe fc30 	bl	8000ae8 <HAL_GetTick>
 8002288:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228c:	e00b      	b.n	80022a6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7fe fc2b 	bl	8000ae8 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e365      	b.n	8002972 <HAL_RCC_OscConfig+0x109a>
 80022a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022aa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022ae:	2202      	movs	r2, #2
 80022b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ce:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022d2:	2202      	movs	r2, #2
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022da:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	fa93 f2a3 	rbit	r2, r3
 80022e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022ec:	601a      	str	r2, [r3, #0]
  return result;
 80022ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d102      	bne.n	8002312 <HAL_RCC_OscConfig+0xa3a>
 800230c:	4b42      	ldr	r3, [pc, #264]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	e013      	b.n	800233a <HAL_RCC_OscConfig+0xa62>
 8002312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002316:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800231a:	2202      	movs	r2, #2
 800231c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002322:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	fa93 f2a3 	rbit	r2, r3
 800232c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002330:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	4b38      	ldr	r3, [pc, #224]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800233e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002342:	2102      	movs	r1, #2
 8002344:	6011      	str	r1, [r2, #0]
 8002346:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800234a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	fa92 f1a2 	rbit	r1, r2
 8002354:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002358:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800235c:	6011      	str	r1, [r2, #0]
  return result;
 800235e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002362:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	fab2 f282 	clz	r2, r2
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	f002 021f 	and.w	r2, r2, #31
 8002378:	2101      	movs	r1, #1
 800237a:	fa01 f202 	lsl.w	r2, r1, r2
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d084      	beq.n	800228e <HAL_RCC_OscConfig+0x9b6>
 8002384:	e083      	b.n	800248e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7fe fbaf 	bl	8000ae8 <HAL_GetTick>
 800238a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7fe fbaa 	bl	8000ae8 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e2e4      	b.n	8002972 <HAL_RCC_OscConfig+0x109a>
 80023a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ac:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80023b0:	2202      	movs	r2, #2
 80023b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	fa93 f2a3 	rbit	r2, r3
 80023c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023d4:	2202      	movs	r2, #2
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023dc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fa93 f2a3 	rbit	r2, r3
 80023e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ea:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023ee:	601a      	str	r2, [r3, #0]
  return result;
 80023f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80023f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d106      	bne.n	800241c <HAL_RCC_OscConfig+0xb44>
 800240e:	4b02      	ldr	r3, [pc, #8]	@ (8002418 <HAL_RCC_OscConfig+0xb40>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	e017      	b.n	8002444 <HAL_RCC_OscConfig+0xb6c>
 8002414:	40007000 	.word	0x40007000
 8002418:	40021000 	.word	0x40021000
 800241c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002420:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002424:	2202      	movs	r2, #2
 8002426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800242c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fa93 f2a3 	rbit	r2, r3
 8002436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800243a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	4bb3      	ldr	r3, [pc, #716]	@ (8002710 <HAL_RCC_OscConfig+0xe38>)
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002448:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800244c:	2102      	movs	r1, #2
 800244e:	6011      	str	r1, [r2, #0]
 8002450:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002454:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	fa92 f1a2 	rbit	r1, r2
 800245e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002462:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002466:	6011      	str	r1, [r2, #0]
  return result;
 8002468:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800246c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	fab2 f282 	clz	r2, r2
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f002 021f 	and.w	r2, r2, #31
 8002482:	2101      	movs	r1, #1
 8002484:	fa01 f202 	lsl.w	r2, r1, r2
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d180      	bne.n	8002390 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800248e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002492:	2b01      	cmp	r3, #1
 8002494:	d105      	bne.n	80024a2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002496:	4b9e      	ldr	r3, [pc, #632]	@ (8002710 <HAL_RCC_OscConfig+0xe38>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4a9d      	ldr	r2, [pc, #628]	@ (8002710 <HAL_RCC_OscConfig+0xe38>)
 800249c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 825e 	beq.w	8002970 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b4:	4b96      	ldr	r3, [pc, #600]	@ (8002710 <HAL_RCC_OscConfig+0xe38>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b08      	cmp	r3, #8
 80024be:	f000 821f 	beq.w	8002900 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	f040 8170 	bne.w	80027b4 <HAL_RCC_OscConfig+0xedc>
 80024d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	fa93 f2a3 	rbit	r2, r3
 80024f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80024f8:	601a      	str	r2, [r3, #0]
  return result;
 80024fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002502:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800250e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	461a      	mov	r2, r3
 8002516:	2300      	movs	r3, #0
 8002518:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7fe fae5 	bl	8000ae8 <HAL_GetTick>
 800251e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002522:	e009      	b.n	8002538 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002524:	f7fe fae0 	bl	8000ae8 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e21c      	b.n	8002972 <HAL_RCC_OscConfig+0x109a>
 8002538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002540:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800254a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002558:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800255c:	601a      	str	r2, [r3, #0]
  return result;
 800255e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002562:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002566:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d102      	bne.n	8002582 <HAL_RCC_OscConfig+0xcaa>
 800257c:	4b64      	ldr	r3, [pc, #400]	@ (8002710 <HAL_RCC_OscConfig+0xe38>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	e027      	b.n	80025d2 <HAL_RCC_OscConfig+0xcfa>
 8002582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002586:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800258a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800258e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002594:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	fa93 f2a3 	rbit	r2, r3
 800259e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ac:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ba:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	fa93 f2a3 	rbit	r2, r3
 80025c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	4b50      	ldr	r3, [pc, #320]	@ (8002710 <HAL_RCC_OscConfig+0xe38>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025d6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025da:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025de:	6011      	str	r1, [r2, #0]
 80025e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025e4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	fa92 f1a2 	rbit	r1, r2
 80025ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025f2:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80025f6:	6011      	str	r1, [r2, #0]
  return result;
 80025f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025fc:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	fab2 f282 	clz	r2, r2
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f042 0220 	orr.w	r2, r2, #32
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	f002 021f 	and.w	r2, r2, #31
 8002612:	2101      	movs	r1, #1
 8002614:	fa01 f202 	lsl.w	r2, r1, r2
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d182      	bne.n	8002524 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261e:	4b3c      	ldr	r3, [pc, #240]	@ (8002710 <HAL_RCC_OscConfig+0xe38>)
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	f023 020f 	bic.w	r2, r3, #15
 8002626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800262a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	4937      	ldr	r1, [pc, #220]	@ (8002710 <HAL_RCC_OscConfig+0xe38>)
 8002634:	4313      	orrs	r3, r2
 8002636:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002638:	4b35      	ldr	r3, [pc, #212]	@ (8002710 <HAL_RCC_OscConfig+0xe38>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002644:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6a19      	ldr	r1, [r3, #32]
 800264c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002650:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	430b      	orrs	r3, r1
 800265a:	492d      	ldr	r1, [pc, #180]	@ (8002710 <HAL_RCC_OscConfig+0xe38>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
 8002660:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002664:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002668:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800266c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002672:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	fa93 f2a3 	rbit	r2, r3
 800267c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002680:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002684:	601a      	str	r2, [r3, #0]
  return result;
 8002686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800268a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800268e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800269a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	461a      	mov	r2, r3
 80026a2:	2301      	movs	r3, #1
 80026a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7fe fa1f 	bl	8000ae8 <HAL_GetTick>
 80026aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ae:	e009      	b.n	80026c4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe fa1a 	bl	8000ae8 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e156      	b.n	8002972 <HAL_RCC_OscConfig+0x109a>
 80026c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	fa93 f2a3 	rbit	r2, r3
 80026e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026e8:	601a      	str	r2, [r3, #0]
  return result;
 80026ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ee:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80026f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_RCC_OscConfig+0xe3c>
 8002708:	4b01      	ldr	r3, [pc, #4]	@ (8002710 <HAL_RCC_OscConfig+0xe38>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	e02a      	b.n	8002764 <HAL_RCC_OscConfig+0xe8c>
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002718:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800271c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002726:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002734:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002742:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800274c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	fa93 f2a3 	rbit	r2, r3
 8002756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	4b86      	ldr	r3, [pc, #536]	@ (800297c <HAL_RCC_OscConfig+0x10a4>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002768:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800276c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002770:	6011      	str	r1, [r2, #0]
 8002772:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002776:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	fa92 f1a2 	rbit	r1, r2
 8002780:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002784:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002788:	6011      	str	r1, [r2, #0]
  return result;
 800278a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800278e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	fab2 f282 	clz	r2, r2
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	f042 0220 	orr.w	r2, r2, #32
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	f002 021f 	and.w	r2, r2, #31
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f202 	lsl.w	r2, r1, r2
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f43f af7f 	beq.w	80026b0 <HAL_RCC_OscConfig+0xdd8>
 80027b2:	e0dd      	b.n	8002970 <HAL_RCC_OscConfig+0x1098>
 80027b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f2a3 	rbit	r2, r3
 80027d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027d8:	601a      	str	r2, [r3, #0]
  return result;
 80027da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027de:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80027e2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027ee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	461a      	mov	r2, r3
 80027f6:	2300      	movs	r3, #0
 80027f8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7fe f975 	bl	8000ae8 <HAL_GetTick>
 80027fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002802:	e009      	b.n	8002818 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe f970 	bl	8000ae8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0ac      	b.n	8002972 <HAL_RCC_OscConfig+0x109a>
 8002818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002820:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800282a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002838:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800283c:	601a      	str	r2, [r3, #0]
  return result;
 800283e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002842:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002846:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d102      	bne.n	8002862 <HAL_RCC_OscConfig+0xf8a>
 800285c:	4b47      	ldr	r3, [pc, #284]	@ (800297c <HAL_RCC_OscConfig+0x10a4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	e027      	b.n	80028b2 <HAL_RCC_OscConfig+0xfda>
 8002862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002866:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800286a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800286e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002874:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f2a3 	rbit	r2, r3
 800287e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002882:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800288c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002890:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800289a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	fa93 f2a3 	rbit	r2, r3
 80028a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	4b33      	ldr	r3, [pc, #204]	@ (800297c <HAL_RCC_OscConfig+0x10a4>)
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028b6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028ba:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028be:	6011      	str	r1, [r2, #0]
 80028c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028c4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	fa92 f1a2 	rbit	r1, r2
 80028ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028d2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80028d6:	6011      	str	r1, [r2, #0]
  return result;
 80028d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028dc:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f042 0220 	orr.w	r2, r2, #32
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f002 021f 	and.w	r2, r2, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d182      	bne.n	8002804 <HAL_RCC_OscConfig+0xf2c>
 80028fe:	e037      	b.n	8002970 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002904:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e02e      	b.n	8002972 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002914:	4b19      	ldr	r3, [pc, #100]	@ (800297c <HAL_RCC_OscConfig+0x10a4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800291c:	4b17      	ldr	r3, [pc, #92]	@ (800297c <HAL_RCC_OscConfig+0x10a4>)
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002924:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002928:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 800292c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002930:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	429a      	cmp	r2, r3
 800293a:	d117      	bne.n	800296c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800293c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002940:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002944:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002948:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002950:	429a      	cmp	r2, r3
 8002952:	d10b      	bne.n	800296c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002954:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002958:	f003 020f 	and.w	r2, r3, #15
 800295c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002960:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000

08002980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b09e      	sub	sp, #120	@ 0x78
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e162      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b90      	ldr	r3, [pc, #576]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d910      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b8d      	ldr	r3, [pc, #564]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 0207 	bic.w	r2, r3, #7
 80029ae:	498b      	ldr	r1, [pc, #556]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b89      	ldr	r3, [pc, #548]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e14a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b82      	ldr	r3, [pc, #520]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	497f      	ldr	r1, [pc, #508]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80dc 	beq.w	8002bac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d13c      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xf6>
 80029fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a00:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d102      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xa6>
 8002a20:	4b6f      	ldr	r3, [pc, #444]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	e00f      	b.n	8002a46 <HAL_RCC_ClockConfig+0xc6>
 8002a26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a2a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a38:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a42:	4b67      	ldr	r3, [pc, #412]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a4a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a4e:	fa92 f2a2 	rbit	r2, r2
 8002a52:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a56:	fab2 f282 	clz	r2, r2
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f042 0220 	orr.w	r2, r2, #32
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f002 021f 	and.w	r2, r2, #31
 8002a66:	2101      	movs	r1, #1
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d17b      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0f3      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d13c      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x178>
 8002a7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a82:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x128>
 8002aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	e00f      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x148>
 8002aa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ab6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aba:	643b      	str	r3, [r7, #64]	@ 0x40
 8002abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ac4:	4b46      	ldr	r3, [pc, #280]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002acc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002ace:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ad0:	fa92 f2a2 	rbit	r2, r2
 8002ad4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002ad6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ad8:	fab2 f282 	clz	r2, r2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	f042 0220 	orr.w	r2, r2, #32
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	f002 021f 	and.w	r2, r2, #31
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d13a      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b2      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
 8002af8:	2302      	movs	r3, #2
 8002afa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d102      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x1a0>
 8002b1a:	4b31      	ldr	r3, [pc, #196]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	e00d      	b.n	8002b3c <HAL_RCC_ClockConfig+0x1bc>
 8002b20:	2302      	movs	r3, #2
 8002b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	623b      	str	r3, [r7, #32]
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	4b29      	ldr	r3, [pc, #164]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	61ba      	str	r2, [r7, #24]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	fa92 f2a2 	rbit	r2, r2
 8002b46:	617a      	str	r2, [r7, #20]
  return result;
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	fab2 f282 	clz	r2, r2
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	f042 0220 	orr.w	r2, r2, #32
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f002 021f 	and.w	r2, r2, #31
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e079      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	491a      	ldr	r1, [pc, #104]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b7c:	f7fd ffb4 	bl	8000ae8 <HAL_GetTick>
 8002b80:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b84:	f7fd ffb0 	bl	8000ae8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e061      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_ClockConfig+0x260>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 020c 	and.w	r2, r3, #12
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1eb      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d214      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 0207 	bic.w	r2, r3, #7
 8002bc2:	4906      	ldr	r1, [pc, #24]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <HAL_RCC_ClockConfig+0x25c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e040      	b.n	8002c5e <HAL_RCC_ClockConfig+0x2de>
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c68 <HAL_RCC_ClockConfig+0x2e8>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	491a      	ldr	r1, [pc, #104]	@ (8002c68 <HAL_RCC_ClockConfig+0x2e8>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c0e:	4b16      	ldr	r3, [pc, #88]	@ (8002c68 <HAL_RCC_ClockConfig+0x2e8>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4912      	ldr	r1, [pc, #72]	@ (8002c68 <HAL_RCC_ClockConfig+0x2e8>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c22:	f000 f829 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002c26:	4601      	mov	r1, r0
 8002c28:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <HAL_RCC_ClockConfig+0x2e8>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c30:	22f0      	movs	r2, #240	@ 0xf0
 8002c32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	fa92 f2a2 	rbit	r2, r2
 8002c3a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	fab2 f282 	clz	r2, r2
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	40d3      	lsrs	r3, r2
 8002c46:	4a09      	ldr	r2, [pc, #36]	@ (8002c6c <HAL_RCC_ClockConfig+0x2ec>)
 8002c48:	5cd3      	ldrb	r3, [r2, r3]
 8002c4a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c4e:	4a08      	ldr	r2, [pc, #32]	@ (8002c70 <HAL_RCC_ClockConfig+0x2f0>)
 8002c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c52:	4b08      	ldr	r3, [pc, #32]	@ (8002c74 <HAL_RCC_ClockConfig+0x2f4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd ff02 	bl	8000a60 <HAL_InitTick>
  
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3778      	adds	r7, #120	@ 0x78
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	080060ac 	.word	0x080060ac
 8002c70:	20000000 	.word	0x20000000
 8002c74:	20000004 	.word	0x20000004

08002c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c92:	4b1f      	ldr	r3, [pc, #124]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d002      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d003      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x36>
 8002ca6:	e029      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002caa:	613b      	str	r3, [r7, #16]
      break;
 8002cac:	e029      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	0c9b      	lsrs	r3, r3, #18
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	4a18      	ldr	r2, [pc, #96]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cb8:	5cd3      	ldrb	r3, [r2, r3]
 8002cba:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002cbc:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	4a15      	ldr	r2, [pc, #84]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cc6:	5cd3      	ldrb	r3, [r2, r3]
 8002cc8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e007      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
 8002cf4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	613b      	str	r3, [r7, #16]
      break;
 8002cfa:	e002      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cfe:	613b      	str	r3, [r7, #16]
      break;
 8002d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d02:	693b      	ldr	r3, [r7, #16]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	371c      	adds	r7, #28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	40021000 	.word	0x40021000
 8002d14:	007a1200 	.word	0x007a1200
 8002d18:	080060c4 	.word	0x080060c4
 8002d1c:	080060d4 	.word	0x080060d4

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b03      	ldr	r3, [pc, #12]	@ (8002d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000000 	.word	0x20000000

08002d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d3e:	f7ff ffef 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d42:	4601      	mov	r1, r0
 8002d44:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d4c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	fa92 f2a2 	rbit	r2, r2
 8002d58:	603a      	str	r2, [r7, #0]
  return result;
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	fab2 f282 	clz	r2, r2
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	40d3      	lsrs	r3, r2
 8002d64:	4a04      	ldr	r2, [pc, #16]	@ (8002d78 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	080060bc 	.word	0x080060bc

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d82:	f7ff ffcd 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d86:	4601      	mov	r1, r0
 8002d88:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002d90:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002d94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	fa92 f2a2 	rbit	r2, r2
 8002d9c:	603a      	str	r2, [r7, #0]
  return result;
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	40d3      	lsrs	r3, r2
 8002da8:	4a04      	ldr	r2, [pc, #16]	@ (8002dbc <HAL_RCC_GetPCLK2Freq+0x40>)
 8002daa:	5cd3      	ldrb	r3, [r2, r3]
 8002dac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	080060bc 	.word	0x080060bc

08002dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b092      	sub	sp, #72	@ 0x48
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80d4 	beq.w	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de4:	4b4e      	ldr	r3, [pc, #312]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10e      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	4b4b      	ldr	r3, [pc, #300]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	4a4a      	ldr	r2, [pc, #296]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	61d3      	str	r3, [r2, #28]
 8002dfc:	4b48      	ldr	r3, [pc, #288]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	4b45      	ldr	r3, [pc, #276]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d118      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1a:	4b42      	ldr	r3, [pc, #264]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a41      	ldr	r2, [pc, #260]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e26:	f7fd fe5f 	bl	8000ae8 <HAL_GetTick>
 8002e2a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	e008      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2e:	f7fd fe5b 	bl	8000ae8 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b64      	cmp	r3, #100	@ 0x64
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1d6      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	4b38      	ldr	r3, [pc, #224]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e4c:	4b34      	ldr	r3, [pc, #208]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8084 	beq.w	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d07c      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b26      	ldr	r3, [pc, #152]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	461a      	mov	r2, r3
 8002e96:	2301      	movs	r3, #1
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ebe:	4a18      	ldr	r2, [pc, #96]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d04b      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fd fe0b 	bl	8000ae8 <HAL_GetTick>
 8002ed2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7fd fe07 	bl	8000ae8 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e180      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002eec:	2302      	movs	r3, #2
 8002eee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef8:	2302      	movs	r3, #2
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	61fb      	str	r3, [r7, #28]
  return result;
 8002f04:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d108      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f1a:	4b01      	ldr	r3, [pc, #4]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	e00d      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	10908100 	.word	0x10908100
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	4b9a      	ldr	r3, [pc, #616]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	613a      	str	r2, [r7, #16]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	fa92 f2a2 	rbit	r2, r2
 8002f46:	60fa      	str	r2, [r7, #12]
  return result;
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	fab2 f282 	clz	r2, r2
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f002 021f 	and.w	r2, r2, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0b7      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f66:	4b8f      	ldr	r3, [pc, #572]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	498c      	ldr	r1, [pc, #560]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f80:	4b88      	ldr	r3, [pc, #544]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	4a87      	ldr	r2, [pc, #540]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f98:	4b82      	ldr	r3, [pc, #520]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	f023 0203 	bic.w	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	497f      	ldr	r1, [pc, #508]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fb6:	4b7b      	ldr	r3, [pc, #492]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	4978      	ldr	r1, [pc, #480]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fd4:	4b73      	ldr	r3, [pc, #460]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	4970      	ldr	r1, [pc, #448]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	f023 0210 	bic.w	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4969      	ldr	r1, [pc, #420]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003010:	4b64      	ldr	r3, [pc, #400]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301c:	4961      	ldr	r1, [pc, #388]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800302e:	4b5d      	ldr	r3, [pc, #372]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	f023 0220 	bic.w	r2, r3, #32
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	495a      	ldr	r1, [pc, #360]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800304c:	4b55      	ldr	r3, [pc, #340]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800304e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003050:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	4952      	ldr	r1, [pc, #328]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800306a:	4b4e      	ldr	r3, [pc, #312]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	494b      	ldr	r1, [pc, #300]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003088:	4b46      	ldr	r3, [pc, #280]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4943      	ldr	r1, [pc, #268]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030a6:	4b3f      	ldr	r3, [pc, #252]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	493c      	ldr	r1, [pc, #240]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030c4:	4b37      	ldr	r3, [pc, #220]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d0:	4934      	ldr	r1, [pc, #208]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80030e2:	4b30      	ldr	r3, [pc, #192]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e6:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ee:	492d      	ldr	r1, [pc, #180]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003100:	4b28      	ldr	r3, [pc, #160]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003104:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310c:	4925      	ldr	r1, [pc, #148]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800310e:	4313      	orrs	r3, r2
 8003110:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800311e:	4b21      	ldr	r3, [pc, #132]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	491e      	ldr	r1, [pc, #120]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800313c:	4b19      	ldr	r3, [pc, #100]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003148:	4916      	ldr	r1, [pc, #88]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800315a:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003166:	490f      	ldr	r1, [pc, #60]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003168:	4313      	orrs	r3, r2
 800316a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003178:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003184:	4907      	ldr	r1, [pc, #28]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003186:	4313      	orrs	r3, r2
 8003188:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00c      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003196:	4b03      	ldr	r3, [pc, #12]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	e002      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031aa:	4913      	ldr	r1, [pc, #76]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80031bc:	4b0e      	ldr	r3, [pc, #56]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c8:	490b      	ldr	r1, [pc, #44]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80031da:	4b07      	ldr	r3, [pc, #28]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e6:	4904      	ldr	r1, [pc, #16]	@ (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3748      	adds	r7, #72	@ 0x48
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000

080031fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e040      	b.n	8003290 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd fb6a 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	@ 0x24
 8003228:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fd94 	bl	8003d70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fbbd 	bl	80039c8 <UART_SetConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e01b      	b.n	8003290 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fe13 	bl	8003eb4 <UART_CheckIdleState>
 800328e:	4603      	mov	r3, r0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	@ 0x28
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d177      	bne.n	80033a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_UART_Transmit+0x24>
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e070      	b.n	80033a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2221      	movs	r2, #33	@ 0x21
 80032cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032ce:	f7fd fc0b 	bl	8000ae8 <HAL_GetTick>
 80032d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	88fa      	ldrh	r2, [r7, #6]
 80032d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ec:	d108      	bne.n	8003300 <HAL_UART_Transmit+0x68>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d104      	bne.n	8003300 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	e003      	b.n	8003308 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003308:	e02f      	b.n	800336a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2200      	movs	r2, #0
 8003312:	2180      	movs	r1, #128	@ 0x80
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fe75 	bl	8004004 <UART_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e03b      	b.n	80033a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10b      	bne.n	8003348 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	881a      	ldrh	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800333c:	b292      	uxth	r2, r2
 800333e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	3302      	adds	r3, #2
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	e007      	b.n	8003358 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	781a      	ldrb	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3301      	adds	r3, #1
 8003356:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1c9      	bne.n	800330a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2200      	movs	r2, #0
 800337e:	2140      	movs	r1, #64	@ 0x40
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fe3f 	bl	8004004 <UART_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e005      	b.n	80033a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b0ba      	sub	sp, #232	@ 0xe8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80033d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80033da:	4013      	ands	r3, r2
 80033dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80033e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d115      	bne.n	8003414 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80033e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00f      	beq.n	8003414 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d009      	beq.n	8003414 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 82ab 	beq.w	8003960 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
      }
      return;
 8003412:	e2a5      	b.n	8003960 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8117 	beq.w	800364c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800341e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800342a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800342e:	4b85      	ldr	r3, [pc, #532]	@ (8003644 <HAL_UART_IRQHandler+0x298>)
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 810a 	beq.w	800364c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d011      	beq.n	8003468 <HAL_UART_IRQHandler+0xbc>
 8003444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00b      	beq.n	8003468 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2201      	movs	r2, #1
 8003456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d011      	beq.n	8003498 <HAL_UART_IRQHandler+0xec>
 8003474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00b      	beq.n	8003498 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2202      	movs	r2, #2
 8003486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800348e:	f043 0204 	orr.w	r2, r3, #4
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d011      	beq.n	80034c8 <HAL_UART_IRQHandler+0x11c>
 80034a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2204      	movs	r2, #4
 80034b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034be:	f043 0202 	orr.w	r2, r3, #2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d017      	beq.n	8003504 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80034e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00b      	beq.n	8003504 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2208      	movs	r2, #8
 80034f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034fa:	f043 0208 	orr.w	r2, r3, #8
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800350c:	2b00      	cmp	r3, #0
 800350e:	d012      	beq.n	8003536 <HAL_UART_IRQHandler+0x18a>
 8003510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003514:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00c      	beq.n	8003536 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8211 	beq.w	8003964 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800354e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003570:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357e:	2b40      	cmp	r3, #64	@ 0x40
 8003580:	d005      	beq.n	800358e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003586:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800358a:	2b00      	cmp	r3, #0
 800358c:	d04f      	beq.n	800362e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fe6c 	bl	800426c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359e:	2b40      	cmp	r3, #64	@ 0x40
 80035a0:	d141      	bne.n	8003626 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3308      	adds	r3, #8
 80035a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3308      	adds	r3, #8
 80035ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1d9      	bne.n	80035a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d013      	beq.n	800361e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fa:	4a13      	ldr	r2, [pc, #76]	@ (8003648 <HAL_UART_IRQHandler+0x29c>)
 80035fc:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fc71 	bl	8000eea <HAL_DMA_Abort_IT>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d017      	beq.n	800363e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003618:	4610      	mov	r0, r2
 800361a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	e00f      	b.n	800363e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f9c8 	bl	80039b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	e00b      	b.n	800363e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9c4 	bl	80039b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362c:	e007      	b.n	800363e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f9c0 	bl	80039b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800363c:	e192      	b.n	8003964 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363e:	bf00      	nop
    return;
 8003640:	e190      	b.n	8003964 <HAL_UART_IRQHandler+0x5b8>
 8003642:	bf00      	nop
 8003644:	04000120 	.word	0x04000120
 8003648:	08004517 	.word	0x08004517

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003650:	2b01      	cmp	r3, #1
 8003652:	f040 814b 	bne.w	80038ec <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8144 	beq.w	80038ec <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 813d 	beq.w	80038ec <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2210      	movs	r2, #16
 8003678:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b40      	cmp	r3, #64	@ 0x40
 8003686:	f040 80b5 	bne.w	80037f4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003696:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8164 	beq.w	8003968 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036aa:	429a      	cmp	r2, r3
 80036ac:	f080 815c 	bcs.w	8003968 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	f000 8086 	beq.w	80037d2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036d2:	e853 3f00 	ldrex	r3, [r3]
 80036d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80036f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036f4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003700:	e841 2300 	strex	r3, r2, [r1]
 8003704:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003708:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1da      	bne.n	80036c6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3308      	adds	r3, #8
 8003716:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003718:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800371a:	e853 3f00 	ldrex	r3, [r3]
 800371e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003720:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3308      	adds	r3, #8
 8003730:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003734:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003738:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800373c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003746:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e1      	bne.n	8003710 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3308      	adds	r3, #8
 8003752:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800375c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800375e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003762:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3308      	adds	r3, #8
 800376c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003770:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003772:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003776:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800377e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e3      	bne.n	800374c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037a2:	f023 0310 	bic.w	r3, r3, #16
 80037a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037b6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e4      	bne.n	8003792 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fd fb4e 	bl	8000e6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	4619      	mov	r1, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f001 fc95 	bl	800511c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037f2:	e0b9      	b.n	8003968 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003800:	b29b      	uxth	r3, r3
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80ab 	beq.w	800396c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003816:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80a6 	beq.w	800396c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800382e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003834:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003842:	647b      	str	r3, [r7, #68]	@ 0x44
 8003844:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003848:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e4      	bne.n	8003820 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3308      	adds	r3, #8
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	623b      	str	r3, [r7, #32]
   return(result);
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3308      	adds	r3, #8
 8003876:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800387a:	633a      	str	r2, [r7, #48]	@ 0x30
 800387c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e3      	bne.n	8003856 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	e853 3f00 	ldrex	r3, [r3]
 80038ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0310 	bic.w	r3, r3, #16
 80038b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	69b9      	ldr	r1, [r7, #24]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	617b      	str	r3, [r7, #20]
   return(result);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e4      	bne.n	80038a2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f001 fc19 	bl	800511c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038ea:	e03f      	b.n	800396c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80038ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00e      	beq.n	8003916 <HAL_UART_IRQHandler+0x56a>
 80038f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800390c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fe41 	bl	8004596 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003914:	e02d      	b.n	8003972 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00e      	beq.n	8003940 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01c      	beq.n	8003970 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	4798      	blx	r3
    }
    return;
 800393e:	e017      	b.n	8003970 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d012      	beq.n	8003972 <HAL_UART_IRQHandler+0x5c6>
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00c      	beq.n	8003972 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fdf2 	bl	8004542 <UART_EndTransmit_IT>
    return;
 800395e:	e008      	b.n	8003972 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003960:	bf00      	nop
 8003962:	e006      	b.n	8003972 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003964:	bf00      	nop
 8003966:	e004      	b.n	8003972 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003968:	bf00      	nop
 800396a:	e002      	b.n	8003972 <HAL_UART_IRQHandler+0x5c6>
      return;
 800396c:	bf00      	nop
 800396e:	e000      	b.n	8003972 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003970:	bf00      	nop
  }

}
 8003972:	37e8      	adds	r7, #232	@ 0xe8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4b92      	ldr	r3, [pc, #584]	@ (8003c3c <UART_SetConfig+0x274>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	6979      	ldr	r1, [r7, #20]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a80      	ldr	r2, [pc, #512]	@ (8003c40 <UART_SetConfig+0x278>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d120      	bne.n	8003a86 <UART_SetConfig+0xbe>
 8003a44:	4b7f      	ldr	r3, [pc, #508]	@ (8003c44 <UART_SetConfig+0x27c>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d817      	bhi.n	8003a80 <UART_SetConfig+0xb8>
 8003a50:	a201      	add	r2, pc, #4	@ (adr r2, 8003a58 <UART_SetConfig+0x90>)
 8003a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a56:	bf00      	nop
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a75 	.word	0x08003a75
 8003a60:	08003a7b 	.word	0x08003a7b
 8003a64:	08003a6f 	.word	0x08003a6f
 8003a68:	2301      	movs	r3, #1
 8003a6a:	77fb      	strb	r3, [r7, #31]
 8003a6c:	e0b5      	b.n	8003bda <UART_SetConfig+0x212>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	77fb      	strb	r3, [r7, #31]
 8003a72:	e0b2      	b.n	8003bda <UART_SetConfig+0x212>
 8003a74:	2304      	movs	r3, #4
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e0af      	b.n	8003bda <UART_SetConfig+0x212>
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	77fb      	strb	r3, [r7, #31]
 8003a7e:	e0ac      	b.n	8003bda <UART_SetConfig+0x212>
 8003a80:	2310      	movs	r3, #16
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e0a9      	b.n	8003bda <UART_SetConfig+0x212>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a6f      	ldr	r2, [pc, #444]	@ (8003c48 <UART_SetConfig+0x280>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d124      	bne.n	8003ada <UART_SetConfig+0x112>
 8003a90:	4b6c      	ldr	r3, [pc, #432]	@ (8003c44 <UART_SetConfig+0x27c>)
 8003a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a9c:	d011      	beq.n	8003ac2 <UART_SetConfig+0xfa>
 8003a9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003aa2:	d817      	bhi.n	8003ad4 <UART_SetConfig+0x10c>
 8003aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aa8:	d011      	beq.n	8003ace <UART_SetConfig+0x106>
 8003aaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aae:	d811      	bhi.n	8003ad4 <UART_SetConfig+0x10c>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <UART_SetConfig+0xf4>
 8003ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab8:	d006      	beq.n	8003ac8 <UART_SetConfig+0x100>
 8003aba:	e00b      	b.n	8003ad4 <UART_SetConfig+0x10c>
 8003abc:	2300      	movs	r3, #0
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e08b      	b.n	8003bda <UART_SetConfig+0x212>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e088      	b.n	8003bda <UART_SetConfig+0x212>
 8003ac8:	2304      	movs	r3, #4
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e085      	b.n	8003bda <UART_SetConfig+0x212>
 8003ace:	2308      	movs	r3, #8
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e082      	b.n	8003bda <UART_SetConfig+0x212>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e07f      	b.n	8003bda <UART_SetConfig+0x212>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a5b      	ldr	r2, [pc, #364]	@ (8003c4c <UART_SetConfig+0x284>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d124      	bne.n	8003b2e <UART_SetConfig+0x166>
 8003ae4:	4b57      	ldr	r3, [pc, #348]	@ (8003c44 <UART_SetConfig+0x27c>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003aec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003af0:	d011      	beq.n	8003b16 <UART_SetConfig+0x14e>
 8003af2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003af6:	d817      	bhi.n	8003b28 <UART_SetConfig+0x160>
 8003af8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003afc:	d011      	beq.n	8003b22 <UART_SetConfig+0x15a>
 8003afe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b02:	d811      	bhi.n	8003b28 <UART_SetConfig+0x160>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <UART_SetConfig+0x148>
 8003b08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b0c:	d006      	beq.n	8003b1c <UART_SetConfig+0x154>
 8003b0e:	e00b      	b.n	8003b28 <UART_SetConfig+0x160>
 8003b10:	2300      	movs	r3, #0
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e061      	b.n	8003bda <UART_SetConfig+0x212>
 8003b16:	2302      	movs	r3, #2
 8003b18:	77fb      	strb	r3, [r7, #31]
 8003b1a:	e05e      	b.n	8003bda <UART_SetConfig+0x212>
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e05b      	b.n	8003bda <UART_SetConfig+0x212>
 8003b22:	2308      	movs	r3, #8
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e058      	b.n	8003bda <UART_SetConfig+0x212>
 8003b28:	2310      	movs	r3, #16
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e055      	b.n	8003bda <UART_SetConfig+0x212>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a47      	ldr	r2, [pc, #284]	@ (8003c50 <UART_SetConfig+0x288>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d124      	bne.n	8003b82 <UART_SetConfig+0x1ba>
 8003b38:	4b42      	ldr	r3, [pc, #264]	@ (8003c44 <UART_SetConfig+0x27c>)
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003b40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b44:	d011      	beq.n	8003b6a <UART_SetConfig+0x1a2>
 8003b46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b4a:	d817      	bhi.n	8003b7c <UART_SetConfig+0x1b4>
 8003b4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b50:	d011      	beq.n	8003b76 <UART_SetConfig+0x1ae>
 8003b52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b56:	d811      	bhi.n	8003b7c <UART_SetConfig+0x1b4>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <UART_SetConfig+0x19c>
 8003b5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b60:	d006      	beq.n	8003b70 <UART_SetConfig+0x1a8>
 8003b62:	e00b      	b.n	8003b7c <UART_SetConfig+0x1b4>
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e037      	b.n	8003bda <UART_SetConfig+0x212>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e034      	b.n	8003bda <UART_SetConfig+0x212>
 8003b70:	2304      	movs	r3, #4
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e031      	b.n	8003bda <UART_SetConfig+0x212>
 8003b76:	2308      	movs	r3, #8
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	e02e      	b.n	8003bda <UART_SetConfig+0x212>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e02b      	b.n	8003bda <UART_SetConfig+0x212>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a33      	ldr	r2, [pc, #204]	@ (8003c54 <UART_SetConfig+0x28c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d124      	bne.n	8003bd6 <UART_SetConfig+0x20e>
 8003b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c44 <UART_SetConfig+0x27c>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003b94:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b98:	d011      	beq.n	8003bbe <UART_SetConfig+0x1f6>
 8003b9a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b9e:	d817      	bhi.n	8003bd0 <UART_SetConfig+0x208>
 8003ba0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ba4:	d011      	beq.n	8003bca <UART_SetConfig+0x202>
 8003ba6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003baa:	d811      	bhi.n	8003bd0 <UART_SetConfig+0x208>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <UART_SetConfig+0x1f0>
 8003bb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bb4:	d006      	beq.n	8003bc4 <UART_SetConfig+0x1fc>
 8003bb6:	e00b      	b.n	8003bd0 <UART_SetConfig+0x208>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e00d      	b.n	8003bda <UART_SetConfig+0x212>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e00a      	b.n	8003bda <UART_SetConfig+0x212>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e007      	b.n	8003bda <UART_SetConfig+0x212>
 8003bca:	2308      	movs	r3, #8
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e004      	b.n	8003bda <UART_SetConfig+0x212>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e001      	b.n	8003bda <UART_SetConfig+0x212>
 8003bd6:	2310      	movs	r3, #16
 8003bd8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be2:	d16b      	bne.n	8003cbc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003be4:	7ffb      	ldrb	r3, [r7, #31]
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d838      	bhi.n	8003c5c <UART_SetConfig+0x294>
 8003bea:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf0 <UART_SetConfig+0x228>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c1d 	.word	0x08003c1d
 8003bf8:	08003c25 	.word	0x08003c25
 8003bfc:	08003c5d 	.word	0x08003c5d
 8003c00:	08003c2b 	.word	0x08003c2b
 8003c04:	08003c5d 	.word	0x08003c5d
 8003c08:	08003c5d 	.word	0x08003c5d
 8003c0c:	08003c5d 	.word	0x08003c5d
 8003c10:	08003c33 	.word	0x08003c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7ff f890 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8003c18:	61b8      	str	r0, [r7, #24]
        break;
 8003c1a:	e024      	b.n	8003c66 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c1c:	f7ff f8ae 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8003c20:	61b8      	str	r0, [r7, #24]
        break;
 8003c22:	e020      	b.n	8003c66 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c24:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <UART_SetConfig+0x290>)
 8003c26:	61bb      	str	r3, [r7, #24]
        break;
 8003c28:	e01d      	b.n	8003c66 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2a:	f7ff f825 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8003c2e:	61b8      	str	r0, [r7, #24]
        break;
 8003c30:	e019      	b.n	8003c66 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c36:	61bb      	str	r3, [r7, #24]
        break;
 8003c38:	e015      	b.n	8003c66 <UART_SetConfig+0x29e>
 8003c3a:	bf00      	nop
 8003c3c:	efff69f3 	.word	0xefff69f3
 8003c40:	40013800 	.word	0x40013800
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40004400 	.word	0x40004400
 8003c4c:	40004800 	.word	0x40004800
 8003c50:	40004c00 	.word	0x40004c00
 8003c54:	40005000 	.word	0x40005000
 8003c58:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	77bb      	strb	r3, [r7, #30]
        break;
 8003c64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d073      	beq.n	8003d54 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	005a      	lsls	r2, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	441a      	add	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b0f      	cmp	r3, #15
 8003c86:	d916      	bls.n	8003cb6 <UART_SetConfig+0x2ee>
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c8e:	d212      	bcs.n	8003cb6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f023 030f 	bic.w	r3, r3, #15
 8003c98:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	89fb      	ldrh	r3, [r7, #14]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	89fa      	ldrh	r2, [r7, #14]
 8003cb2:	60da      	str	r2, [r3, #12]
 8003cb4:	e04e      	b.n	8003d54 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	77bb      	strb	r3, [r7, #30]
 8003cba:	e04b      	b.n	8003d54 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cbc:	7ffb      	ldrb	r3, [r7, #31]
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d827      	bhi.n	8003d12 <UART_SetConfig+0x34a>
 8003cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc8 <UART_SetConfig+0x300>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003ced 	.word	0x08003ced
 8003ccc:	08003cf5 	.word	0x08003cf5
 8003cd0:	08003cfd 	.word	0x08003cfd
 8003cd4:	08003d13 	.word	0x08003d13
 8003cd8:	08003d03 	.word	0x08003d03
 8003cdc:	08003d13 	.word	0x08003d13
 8003ce0:	08003d13 	.word	0x08003d13
 8003ce4:	08003d13 	.word	0x08003d13
 8003ce8:	08003d0b 	.word	0x08003d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cec:	f7ff f824 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 8003cf0:	61b8      	str	r0, [r7, #24]
        break;
 8003cf2:	e013      	b.n	8003d1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf4:	f7ff f842 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8003cf8:	61b8      	str	r0, [r7, #24]
        break;
 8003cfa:	e00f      	b.n	8003d1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d6c <UART_SetConfig+0x3a4>)
 8003cfe:	61bb      	str	r3, [r7, #24]
        break;
 8003d00:	e00c      	b.n	8003d1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d02:	f7fe ffb9 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8003d06:	61b8      	str	r0, [r7, #24]
        break;
 8003d08:	e008      	b.n	8003d1c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d0e:	61bb      	str	r3, [r7, #24]
        break;
 8003d10:	e004      	b.n	8003d1c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	77bb      	strb	r3, [r7, #30]
        break;
 8003d1a:	bf00      	nop
    }

    if (pclk != 0U)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d018      	beq.n	8003d54 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	085a      	lsrs	r2, r3, #1
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	441a      	add	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b0f      	cmp	r3, #15
 8003d3a:	d909      	bls.n	8003d50 <UART_SetConfig+0x388>
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d42:	d205      	bcs.n	8003d50 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60da      	str	r2, [r3, #12]
 8003d4e:	e001      	b.n	8003d54 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d60:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	007a1200 	.word	0x007a1200

08003d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01a      	beq.n	8003e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e6e:	d10a      	bne.n	8003e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b098      	sub	sp, #96	@ 0x60
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ec4:	f7fc fe10 	bl	8000ae8 <HAL_GetTick>
 8003ec8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d12e      	bne.n	8003f36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f88c 	bl	8004004 <UART_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d021      	beq.n	8003f36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f06:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e6      	bne.n	8003ef2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e062      	b.n	8003ffc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d149      	bne.n	8003fd8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f856 	bl	8004004 <UART_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d03c      	beq.n	8003fd8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	623b      	str	r3, [r7, #32]
   return(result);
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e6      	bne.n	8003f5e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3308      	adds	r3, #8
 8003f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fb0:	61fa      	str	r2, [r7, #28]
 8003fb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	69b9      	ldr	r1, [r7, #24]
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e5      	bne.n	8003f90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e011      	b.n	8003ffc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3758      	adds	r7, #88	@ 0x58
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004014:	e04f      	b.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d04b      	beq.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401e:	f7fc fd63 	bl	8000ae8 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <UART_WaitOnFlagUntilTimeout+0x30>
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e04e      	b.n	80040d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d037      	beq.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b80      	cmp	r3, #128	@ 0x80
 800404a:	d034      	beq.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b40      	cmp	r3, #64	@ 0x40
 8004050:	d031      	beq.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b08      	cmp	r3, #8
 800405e:	d110      	bne.n	8004082 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2208      	movs	r2, #8
 8004066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f8ff 	bl	800426c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2208      	movs	r2, #8
 8004072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e029      	b.n	80040d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800408c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004090:	d111      	bne.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800409a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f8e5 	bl	800426c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e00f      	b.n	80040d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4013      	ands	r3, r2
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d0a0      	beq.n	8004016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b096      	sub	sp, #88	@ 0x58
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2222      	movs	r2, #34	@ 0x22
 8004108:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004110:	2b00      	cmp	r3, #0
 8004112:	d028      	beq.n	8004166 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004118:	4a3e      	ldr	r2, [pc, #248]	@ (8004214 <UART_Start_Receive_DMA+0x134>)
 800411a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004120:	4a3d      	ldr	r2, [pc, #244]	@ (8004218 <UART_Start_Receive_DMA+0x138>)
 8004122:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004128:	4a3c      	ldr	r2, [pc, #240]	@ (800421c <UART_Start_Receive_DMA+0x13c>)
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004130:	2200      	movs	r2, #0
 8004132:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3324      	adds	r3, #36	@ 0x24
 800413e:	4619      	mov	r1, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004144:	461a      	mov	r2, r3
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	f7fc fe32 	bl	8000db0 <HAL_DMA_Start_IT>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2210      	movs	r2, #16
 8004156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e051      	b.n	800420a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d018      	beq.n	80041a0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800417c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004182:	657b      	str	r3, [r7, #84]	@ 0x54
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800418e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800419a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e6      	bne.n	800416e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3308      	adds	r3, #8
 80041a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3308      	adds	r3, #8
 80041be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80041c0:	637a      	str	r2, [r7, #52]	@ 0x34
 80041c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80041ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e5      	bne.n	80041a0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3308      	adds	r3, #8
 80041da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	613b      	str	r3, [r7, #16]
   return(result);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3308      	adds	r3, #8
 80041f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041f4:	623a      	str	r2, [r7, #32]
 80041f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	69f9      	ldr	r1, [r7, #28]
 80041fa:	6a3a      	ldr	r2, [r7, #32]
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	61bb      	str	r3, [r7, #24]
   return(result);
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e5      	bne.n	80041d4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3758      	adds	r7, #88	@ 0x58
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	08004335 	.word	0x08004335
 8004218:	0800445b 	.word	0x0800445b
 800421c:	08004499 	.word	0x08004499

08004220 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	@ 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	60bb      	str	r3, [r7, #8]
   return(result);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6979      	ldr	r1, [r7, #20]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	613b      	str	r3, [r7, #16]
   return(result);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e6      	bne.n	8004228 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004260:	bf00      	nop
 8004262:	3724      	adds	r7, #36	@ 0x24
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b095      	sub	sp, #84	@ 0x54
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004292:	643b      	str	r3, [r7, #64]	@ 0x40
 8004294:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004298:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e6      	bne.n	8004274 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3308      	adds	r3, #8
 80042ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3308      	adds	r3, #8
 80042c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e5      	bne.n	80042a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d118      	bne.n	8004314 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f023 0310 	bic.w	r3, r3, #16
 80042f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6979      	ldr	r1, [r7, #20]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	613b      	str	r3, [r7, #16]
   return(result);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e6      	bne.n	80042e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004328:	bf00      	nop
 800432a:	3754      	adds	r7, #84	@ 0x54
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b09c      	sub	sp, #112	@ 0x70
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2b20      	cmp	r3, #32
 8004348:	d071      	beq.n	800442e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800434a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800434c:	2200      	movs	r2, #0
 800434e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004362:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004366:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004372:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004376:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800437e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e6      	bne.n	8004352 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	667b      	str	r3, [r7, #100]	@ 0x64
 800439c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043a4:	647a      	str	r2, [r7, #68]	@ 0x44
 80043a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e5      	bne.n	8004384 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	623b      	str	r3, [r7, #32]
   return(result);
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80043d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3308      	adds	r3, #8
 80043d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80043d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80043da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e5      	bne.n	80043b8 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ee:	2220      	movs	r2, #32
 80043f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d118      	bne.n	800442e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	60fb      	str	r3, [r7, #12]
   return(result);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f023 0310 	bic.w	r3, r3, #16
 8004410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	69b9      	ldr	r1, [r7, #24]
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	617b      	str	r3, [r7, #20]
   return(result);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e6      	bne.n	80043fc <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800442e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004430:	2200      	movs	r2, #0
 8004432:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004438:	2b01      	cmp	r3, #1
 800443a:	d107      	bne.n	800444c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800443c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800443e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004442:	4619      	mov	r1, r3
 8004444:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004446:	f000 fe69 	bl	800511c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800444a:	e002      	b.n	8004452 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800444c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800444e:	f7ff fa9d 	bl	800398c <HAL_UART_RxCpltCallback>
}
 8004452:	bf00      	nop
 8004454:	3770      	adds	r7, #112	@ 0x70
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004472:	2b01      	cmp	r3, #1
 8004474:	d109      	bne.n	800448a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	b29b      	uxth	r3, r3
 8004480:	4619      	mov	r1, r3
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fe4a 	bl	800511c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004488:	e002      	b.n	8004490 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f7ff fa88 	bl	80039a0 <HAL_UART_RxHalfCpltCallback>
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044be:	2b80      	cmp	r3, #128	@ 0x80
 80044c0:	d109      	bne.n	80044d6 <UART_DMAError+0x3e>
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b21      	cmp	r3, #33	@ 0x21
 80044c6:	d106      	bne.n	80044d6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80044d0:	6978      	ldr	r0, [r7, #20]
 80044d2:	f7ff fea5 	bl	8004220 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e0:	2b40      	cmp	r3, #64	@ 0x40
 80044e2:	d109      	bne.n	80044f8 <UART_DMAError+0x60>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b22      	cmp	r3, #34	@ 0x22
 80044e8:	d106      	bne.n	80044f8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80044f2:	6978      	ldr	r0, [r7, #20]
 80044f4:	f7ff feba 	bl	800426c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044fe:	f043 0210 	orr.w	r2, r3, #16
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004508:	6978      	ldr	r0, [r7, #20]
 800450a:	f7ff fa53 	bl	80039b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004522:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff fa3d 	bl	80039b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b088      	sub	sp, #32
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	60bb      	str	r3, [r7, #8]
   return(result);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800455e:	61fb      	str	r3, [r7, #28]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6979      	ldr	r1, [r7, #20]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	613b      	str	r3, [r7, #16]
   return(result);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e6      	bne.n	800454a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff f9f5 	bl	8003978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800458e:	bf00      	nop
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b08c      	sub	sp, #48	@ 0x30
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	4613      	mov	r3, r2
 80045b6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d142      	bne.n	8004648 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e03b      	b.n	800464a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	461a      	mov	r2, r3
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f7ff fd7b 	bl	80040e0 <UART_Start_Receive_DMA>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80045f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d124      	bne.n	8004642 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d11d      	bne.n	800463c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2210      	movs	r2, #16
 8004606:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	617b      	str	r3, [r7, #20]
   return(result);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f043 0310 	orr.w	r3, r3, #16
 800461c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
 8004628:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	6a39      	ldr	r1, [r7, #32]
 800462c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	61fb      	str	r3, [r7, #28]
   return(result);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e6      	bne.n	8004608 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800463a:	e002      	b.n	8004642 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004642:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004646:	e000      	b.n	800464a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3730      	adds	r7, #48	@ 0x30
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <cmdhandler_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void cmdhandler_init( UART_HandleTypeDef* huart )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	// create a data queue
	cmdqueue_init( &cmdhandler_vars.cmdq );
 800465c:	4813      	ldr	r0, [pc, #76]	@ (80046ac <cmdhandler_init+0x58>)
 800465e:	f000 f897 	bl	8004790 <cmdqueue_init>

	// init uart.
	serial_uart_init(huart, &cmdhandler_vars.cmdq );
 8004662:	4912      	ldr	r1, [pc, #72]	@ (80046ac <cmdhandler_init+0x58>)
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fcb3 	bl	8004fd0 <serial_uart_init>
	serial_uart_receiveToIdle( huart );
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fcc4 	bl	8004ff8 <serial_uart_receiveToIdle>

	// to let us know to uart received new data;
	serial_uart_registerCB( cmdhandler_processNewData );
 8004670:	480f      	ldr	r0, [pc, #60]	@ (80046b0 <cmdhandler_init+0x5c>)
 8004672:	f000 fcdf 	bl	8005034 <serial_uart_registerCB>

	// initialize cmd list.
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 8004676:	2300      	movs	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
 800467a:	e010      	b.n	800469e <cmdhandler_init+0x4a>
	{
		cmdhandler_vars.cmdhandler_list[i].moduleId	= MODULE_ID_NONE;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	4a0b      	ldr	r2, [pc, #44]	@ (80046ac <cmdhandler_init+0x58>)
 8004680:	3306      	adds	r3, #6
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4413      	add	r3, r2
 8004686:	2200      	movs	r2, #0
 8004688:	711a      	strb	r2, [r3, #4]
		cmdhandler_vars.cmdhandler_list[i].funPtr 		= NULL;
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	4a07      	ldr	r2, [pc, #28]	@ (80046ac <cmdhandler_init+0x58>)
 800468e:	3306      	adds	r3, #6
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4413      	add	r3, r2
 8004694:	2200      	movs	r2, #0
 8004696:	609a      	str	r2, [r3, #8]
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	3301      	adds	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b09      	cmp	r3, #9
 80046a2:	d9eb      	bls.n	800467c <cmdhandler_init+0x28>
	}
	return;
 80046a4:	bf00      	nop
}
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000178 	.word	0x20000178
 80046b0:	08004719 	.word	0x08004719

080046b4 <cmdhandler_registerModuleCmdHandler>:

uint8_t cmdhandler_registerModuleCmdHandler( tCmdhandler_moduleCmdHandler handler )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	463b      	mov	r3, r7
 80046bc:	e883 0003 	stmia.w	r3, {r0, r1}
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80046c0:	2300      	movs	r3, #0
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e01b      	b.n	80046fe <cmdhandler_registerModuleCmdHandler+0x4a>
	{
		if ( cmdhandler_vars.cmdhandler_list[i].moduleId == MODULE_ID_NONE )
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	4a12      	ldr	r2, [pc, #72]	@ (8004714 <cmdhandler_registerModuleCmdHandler+0x60>)
 80046ca:	3306      	adds	r3, #6
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4413      	add	r3, r2
 80046d0:	791b      	ldrb	r3, [r3, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d110      	bne.n	80046f8 <cmdhandler_registerModuleCmdHandler+0x44>
		{
			cmdhandler_vars.cmdhandler_list[i].moduleId = handler.moduleId;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	7839      	ldrb	r1, [r7, #0]
 80046da:	4a0e      	ldr	r2, [pc, #56]	@ (8004714 <cmdhandler_registerModuleCmdHandler+0x60>)
 80046dc:	3306      	adds	r3, #6
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	460a      	mov	r2, r1
 80046e4:	711a      	strb	r2, [r3, #4]
			cmdhandler_vars.cmdhandler_list[i].funPtr 	 = handler.funPtr;
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	490a      	ldr	r1, [pc, #40]	@ (8004714 <cmdhandler_registerModuleCmdHandler+0x60>)
 80046ec:	3306      	adds	r3, #6
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	440b      	add	r3, r1
 80046f2:	609a      	str	r2, [r3, #8]
			return 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e006      	b.n	8004706 <cmdhandler_registerModuleCmdHandler+0x52>
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	3301      	adds	r3, #1
 80046fc:	73fb      	strb	r3, [r7, #15]
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b09      	cmp	r3, #9
 8004702:	d9e0      	bls.n	80046c6 <cmdhandler_registerModuleCmdHandler+0x12>
		}
	}

	// if we looped through the whole list without finding an empty slot.
	return 1;
 8004704:	2301      	movs	r3, #1
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000178 	.word	0x20000178

08004718 <cmdhandler_processNewData>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void cmdhandler_processNewData()
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
	tCmdhandler_cmd* pCmd;

	if ( 1 == cmdqueue_pop( &cmdhandler_vars.cmdq, &pCmd ) )
 800471e:	463b      	mov	r3, r7
 8004720:	4619      	mov	r1, r3
 8004722:	481a      	ldr	r0, [pc, #104]	@ (800478c <cmdhandler_processNewData+0x74>)
 8004724:	f000 f8a4 	bl	8004870 <cmdqueue_pop>
 8004728:	4603      	mov	r3, r0
 800472a:	2b01      	cmp	r3, #1
 800472c:	d029      	beq.n	8004782 <cmdhandler_processNewData+0x6a>
		return;


	// send the command to the relevant module.

	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 800472e:	2300      	movs	r3, #0
 8004730:	71fb      	strb	r3, [r7, #7]
 8004732:	e022      	b.n	800477a <cmdhandler_processNewData+0x62>
	{
		if ( cmdhandler_vars.cmdhandler_list[i].funPtr != NULL && cmdhandler_vars.cmdhandler_list[i].moduleId == pCmd->id.module )
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	4a15      	ldr	r2, [pc, #84]	@ (800478c <cmdhandler_processNewData+0x74>)
 8004738:	3306      	adds	r3, #6
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d017      	beq.n	8004774 <cmdhandler_processNewData+0x5c>
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	4a11      	ldr	r2, [pc, #68]	@ (800478c <cmdhandler_processNewData+0x74>)
 8004748:	3306      	adds	r3, #6
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	791a      	ldrb	r2, [r3, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d10d      	bne.n	8004774 <cmdhandler_processNewData+0x5c>
		{
			cmdhandler_vars.cmdhandler_list[i].funPtr( *pCmd );
 8004758:	79fb      	ldrb	r3, [r7, #7]
 800475a:	4a0c      	ldr	r2, [pc, #48]	@ (800478c <cmdhandler_processNewData+0x74>)
 800475c:	3306      	adds	r3, #6
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800476a:	4798      	blx	r3
			cmdqueue_freeCmd( pCmd );
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f8ac 	bl	80048cc <cmdqueue_freeCmd>
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	3301      	adds	r3, #1
 8004778:	71fb      	strb	r3, [r7, #7]
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	2b09      	cmp	r3, #9
 800477e:	d9d9      	bls.n	8004734 <cmdhandler_processNewData+0x1c>
		}
	}

	return;
 8004780:	e000      	b.n	8004784 <cmdhandler_processNewData+0x6c>
		return;
 8004782:	bf00      	nop
}
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000178 	.word	0x20000178

08004790 <cmdqueue_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t cmdqueue_init( tCmdqueue* cmdq )
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]

	cmdq->head = 0;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	629a      	str	r2, [r3, #40]	@ 0x28
	cmdq->tail = 0;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	cmdq->count= 0;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <cmdqueue_push>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t cmdqueue_push( tCmdqueue* cmdq, uint8_t *pData )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
    if ( !pData || pData[0] != CMD_NEW )
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <cmdqueue_push+0x18>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2bab      	cmp	r3, #171	@ 0xab
 80047ce:	d001      	beq.n	80047d4 <cmdqueue_push+0x1c>
    {
        return 1;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e047      	b.n	8004864 <cmdqueue_push+0xac>
    }

    // create a new cmd and allocate memory for that.
    tCmdhandler_cmd* cmd = (tCmdhandler_cmd*)malloc(sizeof(tCmdhandler_cmd));
 80047d4:	2008      	movs	r0, #8
 80047d6:	f000 fced 	bl	80051b4 <malloc>
 80047da:	4603      	mov	r3, r0
 80047dc:	60fb      	str	r3, [r7, #12]

    // parse data into cmd

    cmd->id.module  = pData[2];
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	789a      	ldrb	r2, [r3, #2]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	701a      	strb	r2, [r3, #0]
    cmd->id.cmd		= pData[1];
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	785a      	ldrb	r2, [r3, #1]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	705a      	strb	r2, [r3, #1]

    memcpy( &cmd->dataSize, &pData[3], 2 );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3302      	adds	r3, #2
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	3203      	adds	r2, #3
 80047f6:	8812      	ldrh	r2, [r2, #0]
 80047f8:	b292      	uxth	r2, r2
 80047fa:	801a      	strh	r2, [r3, #0]

	if ( cmd->dataSize != 0 )
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	885b      	ldrh	r3, [r3, #2]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d012      	beq.n	800482a <cmdqueue_push+0x72>
	{
		cmd->pData = (uint8_t*) malloc( cmd->dataSize );
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	885b      	ldrh	r3, [r3, #2]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fcd3 	bl	80051b4 <malloc>
 800480e:	4603      	mov	r3, r0
 8004810:	461a      	mov	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]
		memcpy( cmd->pData, &pData[5], cmd->dataSize );
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6858      	ldr	r0, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	1d59      	adds	r1, r3, #5
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	885b      	ldrh	r3, [r3, #2]
 8004822:	461a      	mov	r2, r3
 8004824:	f000 ff27 	bl	8005676 <memcpy>
 8004828:	e002      	b.n	8004830 <cmdqueue_push+0x78>
	}
	else
	{
		cmd->pData = NULL;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	605a      	str	r2, [r3, #4]
	}

	cmdq->pCmdList[cmdq->tail] = cmd;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    cmdq->tail = (cmdq->tail + 1) % CMD_Q_SIZE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	1c59      	adds	r1, r3, #1
 8004842:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <cmdqueue_push+0xb4>)
 8004844:	fba3 2301 	umull	r2, r3, r3, r1
 8004848:	08da      	lsrs	r2, r3, #3
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	1aca      	subs	r2, r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	62da      	str	r2, [r3, #44]	@ 0x2c
    cmdq->count++;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	cccccccd 	.word	0xcccccccd

08004870 <cmdqueue_pop>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t cmdqueue_pop( tCmdqueue* cmdq, tCmdhandler_cmd** pCmd )
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
    if ( cmdq->count == 0)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <cmdqueue_pop+0x16>
    {
        return 1;
 8004882:	2301      	movs	r3, #1
 8004884:	e01a      	b.n	80048bc <cmdqueue_pop+0x4c>
    }

    *pCmd = cmdq->pCmdList[cmdq->head];
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	601a      	str	r2, [r3, #0]
    cmdq->head = (cmdq->head + 1) % CMD_Q_SIZE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004898:	1c59      	adds	r1, r3, #1
 800489a:	4b0b      	ldr	r3, [pc, #44]	@ (80048c8 <cmdqueue_pop+0x58>)
 800489c:	fba3 2301 	umull	r2, r3, r3, r1
 80048a0:	08da      	lsrs	r2, r3, #3
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	1aca      	subs	r2, r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	629a      	str	r2, [r3, #40]	@ 0x28
    cmdq->count--;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b4:	1e5a      	subs	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	cccccccd 	.word	0xcccccccd

080048cc <cmdqueue_freeCmd>:

uint8_t cmdqueue_freeCmd( tCmdhandler_cmd* pCmd )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	if( pCmd != NULL )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <cmdqueue_freeCmd+0x26>
	{
		if ( pCmd->pData != NULL )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <cmdqueue_freeCmd+0x20>
			free( pCmd->pData );
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fc6c 	bl	80051c4 <free>
		free( pCmd );
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fc69 	bl	80051c4 <free>
	}
	return 0;
 80048f2:	2300      	movs	r3, #0
};
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <flash_init>:
/************************************
 * Function
 * **********************************
 */
void flash_init()
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_FLASH, .funPtr = flash_cmd_handler };
 8004902:	4a07      	ldr	r2, [pc, #28]	@ (8004920 <flash_init+0x24>)
 8004904:	463b      	mov	r3, r7
 8004906:	e892 0003 	ldmia.w	r2, {r0, r1}
 800490a:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 800490e:	463b      	mov	r3, r7
 8004910:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004914:	f7ff fece 	bl	80046b4 <cmdhandler_registerModuleCmdHandler>
}
 8004918:	bf00      	nop
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	08006070 	.word	0x08006070

08004924 <flash_write>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_write( uint32_t Address, uint8_t* pData, uint32_t size )
{
 8004924:	b5b0      	push	{r4, r5, r7, lr}
 8004926:	b08a      	sub	sp, #40	@ 0x28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
	// check if valid flash address.
	if ( Address < APP_BOOT_FLAG_ADD || Address > FLASH_END_ADD )
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a35      	ldr	r2, [pc, #212]	@ (8004a08 <flash_write+0xe4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d303      	bcc.n	8004940 <flash_write+0x1c>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4a34      	ldr	r2, [pc, #208]	@ (8004a0c <flash_write+0xe8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d901      	bls.n	8004944 <flash_write+0x20>
	{
		// return if address is within the boot area.
		return 1;
 8004940:	2301      	movs	r3, #1
 8004942:	e05c      	b.n	80049fe <flash_write+0xda>
	}

	// check for valid input
	if ( pData == NULL && size == 0 )
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d104      	bne.n	8004954 <flash_write+0x30>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <flash_write+0x30>
	{
		return 1;
 8004950:	2301      	movs	r3, #1
 8004952:	e054      	b.n	80049fe <flash_write+0xda>
  __ASM volatile ("cpsid i" : : : "memory");
 8004954:	b672      	cpsid	i
}
 8004956:	bf00      	nop
	}

	// Disable interrupts
	__disable_irq();

	HAL_FLASH_Unlock();
 8004958:	f7fc fc82 	bl	8001260 <HAL_FLASH_Unlock>
	uint32_t remaining_bytes = size;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_StatusTypeDef status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	76bb      	strb	r3, [r7, #26]
	uint32_t read_offset = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	623b      	str	r3, [r7, #32]
	uint32_t write_offset = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
	uint8_t oneByte= 0;
 800496c:	2300      	movs	r3, #0
 800496e:	76fb      	strb	r3, [r7, #27]

	while( remaining_bytes )
 8004970:	e03d      	b.n	80049ee <flash_write+0xca>
	{
		uint16_t inData= 0xffff;
 8004972:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004976:	827b      	strh	r3, [r7, #18]
		uint32_t writing_address = Address + write_offset;
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	4413      	add	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

		if ( remaining_bytes >= HALF_WORD )
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	2b01      	cmp	r3, #1
 8004984:	d906      	bls.n	8004994 <flash_write+0x70>
			memcpy (&inData, &pData[read_offset], HALF_WORD);
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	827b      	strh	r3, [r7, #18]
 8004992:	e006      	b.n	80049a2 <flash_write+0x7e>
		else
		{
			// if there is only one byte, move it to inData.
			memcpy (&inData, &pData[read_offset], 1);
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	4413      	add	r3, r2
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	74bb      	strb	r3, [r7, #18]
			oneByte = 1;
 800499e:	2301      	movs	r3, #1
 80049a0:	76fb      	strb	r3, [r7, #27]
		}
		status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, writing_address, inData );
 80049a2:	8a7b      	ldrh	r3, [r7, #18]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2200      	movs	r2, #0
 80049a8:	461c      	mov	r4, r3
 80049aa:	4615      	mov	r5, r2
 80049ac:	4622      	mov	r2, r4
 80049ae:	462b      	mov	r3, r5
 80049b0:	6979      	ldr	r1, [r7, #20]
 80049b2:	2001      	movs	r0, #1
 80049b4:	f7fc fbe4 	bl	8001180 <HAL_FLASH_Program>
 80049b8:	4603      	mov	r3, r0
 80049ba:	76bb      	strb	r3, [r7, #26]
		if ( status == HAL_OK )
 80049bc:	7ebb      	ldrb	r3, [r7, #26]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d115      	bne.n	80049ee <flash_write+0xca>
		{
			if ( oneByte == 1 )
 80049c2:	7efb      	ldrb	r3, [r7, #27]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d109      	bne.n	80049dc <flash_write+0xb8>
			{
				remaining_bytes -= 1;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	3b01      	subs	r3, #1
 80049cc:	627b      	str	r3, [r7, #36]	@ 0x24
				read_offset 	+= 1;
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	3301      	adds	r3, #1
 80049d2:	623b      	str	r3, [r7, #32]
				write_offset	+= 1;
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	3301      	adds	r3, #1
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	e008      	b.n	80049ee <flash_write+0xca>
			}
			else
			{
				remaining_bytes -= HALF_WORD;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	3b02      	subs	r3, #2
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
				read_offset 	+= HALF_WORD;
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	3302      	adds	r3, #2
 80049e6:	623b      	str	r3, [r7, #32]
				write_offset	+= HALF_WORD;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	3302      	adds	r3, #2
 80049ec:	61fb      	str	r3, [r7, #28]
	while( remaining_bytes )
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1be      	bne.n	8004972 <flash_write+0x4e>

		}

	}

	HAL_FLASH_Lock();
 80049f4:	f7fc fc5a 	bl	80012ac <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80049f8:	b662      	cpsie	i
}
 80049fa:	bf00      	nop
	// Re-enable interrupts
	__enable_irq();

	return 0;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3728      	adds	r7, #40	@ 0x28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bdb0      	pop	{r4, r5, r7, pc}
 8004a06:	bf00      	nop
 8004a08:	0803f800 	.word	0x0803f800
 8004a0c:	08080000 	.word	0x08080000

08004a10 <flash_read>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_read(uint32_t address, uint8_t* pData, uint32_t size)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
	memcpy( pData, address, size );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4619      	mov	r1, r3
 8004a22:	68b8      	ldr	r0, [r7, #8]
 8004a24:	f000 fe27 	bl	8005676 <memcpy>
	return 0;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <flash_erasePage>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_erasePage( uint32_t Address, uint32_t nrPages )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
	// make sure we are not going to erase ourself
	if ( Address < APP_BOOT_FLAG_ADD )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <flash_erasePage+0x68>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d205      	bcs.n	8004a52 <flash_erasePage+0x1e>
	{
		printf( "trying to erase boot area 0x:%08x", Address );
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4815      	ldr	r0, [pc, #84]	@ (8004aa0 <flash_erasePage+0x6c>)
 8004a4a:	f000 fd33 	bl	80054b4 <iprintf>
		return 1;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e01f      	b.n	8004a92 <flash_erasePage+0x5e>
	}

	// find page start address.
	uint32_t pageStartAddress = ( Address / FLASH_PAGE_SIZE ) * FLASH_PAGE_SIZE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a58:	f023 0307 	bic.w	r3, r3, #7
 8004a5c:	61fb      	str	r3, [r7, #28]

	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages 		= nrPages;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	617b      	str	r3, [r7, #20]
	eraseInit.PageAddress 	= pageStartAddress;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	613b      	str	r3, [r7, #16]
	eraseInit.TypeErase 	= FLASH_TYPEERASE_PAGES;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]

	uint32_t pageError;

	HAL_FLASH_Unlock();
 8004a6a:	f7fc fbf9 	bl	8001260 <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase( &eraseInit, &pageError);
 8004a6e:	f107 0208 	add.w	r2, r7, #8
 8004a72:	f107 030c 	add.w	r3, r7, #12
 8004a76:	4611      	mov	r1, r2
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fc fcb5 	bl	80013e8 <HAL_FLASHEx_Erase>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	76fb      	strb	r3, [r7, #27]
	HAL_FLASH_Lock();
 8004a82:	f7fc fc13 	bl	80012ac <HAL_FLASH_Lock>
	if ( status != HAL_OK )
 8004a86:	7efb      	ldrb	r3, [r7, #27]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <flash_erasePage+0x5c>
		return 1;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <flash_erasePage+0x5e>

	return 0;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3720      	adds	r7, #32
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	0803f800 	.word	0x0803f800
 8004aa0:	08006078 	.word	0x08006078

08004aa4 <flash_cmd_handler>:
/************************************
 * Function
 * **********************************
 */
void flash_cmd_handler( tCmdhandler_cmd inCmd )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	463b      	mov	r3, r7
 8004aac:	e883 0003 	stmia.w	r3, {r0, r1}
	if( inCmd.id.module !=  MODULE_ID_FLASH )
 8004ab0:	783b      	ldrb	r3, [r7, #0]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d121      	bne.n	8004afa <flash_cmd_handler+0x56>
		return;

	switch( inCmd.id.cmd )
 8004ab6:	787b      	ldrb	r3, [r7, #1]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d002      	beq.n	8004ac2 <flash_cmd_handler+0x1e>
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d010      	beq.n	8004ae2 <flash_cmd_handler+0x3e>
			memcpy( &address, &inCmd.pData[0], 4 );
			flash_erasePage( address, 1 );
			break;
		}
		default:
			break;
 8004ac0:	e01a      	b.n	8004af8 <flash_cmd_handler+0x54>
			uint32_t address = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	613b      	str	r3, [r7, #16]
			memcpy( &address, &inCmd.pData[0], 4);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	613b      	str	r3, [r7, #16]
			uint8_t* pData 	 = &inCmd.pData[4];
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	617b      	str	r3, [r7, #20]
			flash_write(address, pData, inCmd.dataSize - 4 );
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	887a      	ldrh	r2, [r7, #2]
 8004ad6:	3a04      	subs	r2, #4
 8004ad8:	6979      	ldr	r1, [r7, #20]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff ff22 	bl	8004924 <flash_write>
			break;
 8004ae0:	e00a      	b.n	8004af8 <flash_cmd_handler+0x54>
			uint32_t address = 0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
			memcpy( &address, &inCmd.pData[0], 4 );
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]
			flash_erasePage( address, 1 );
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2101      	movs	r1, #1
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff ff9f 	bl	8004a34 <flash_erasePage>
			break;
 8004af6:	bf00      	nop
	}

	return;
 8004af8:	e000      	b.n	8004afc <flash_cmd_handler+0x58>
		return;
 8004afa:	bf00      	nop
}
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <fwUpgrade_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void fwUpgrade_init()
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_FW_UPGRADE, .funPtr = fwUpgrade_cmd_handler };
 8004b0a:	4a07      	ldr	r2, [pc, #28]	@ (8004b28 <fwUpgrade_init+0x24>)
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b12:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 8004b16:	463b      	mov	r3, r7
 8004b18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b1c:	f7ff fdca 	bl	80046b4 <cmdhandler_registerModuleCmdHandler>
	return;
 8004b20:	bf00      	nop
}
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	0800609c 	.word	0x0800609c

08004b2c <fwUpgrade_eraseApp>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void fwUpgrade_eraseApp()
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
	uint32_t address 	= APP_START_ADD;
 8004b32:	4b08      	ldr	r3, [pc, #32]	@ (8004b54 <fwUpgrade_eraseApp+0x28>)
 8004b34:	60fb      	str	r3, [r7, #12]
	uint32_t eraseArea 	= FLASH_END_ADD - APP_START_ADD;
 8004b36:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004b3a:	60bb      	str	r3, [r7, #8]
	uint32_t nrPages   	= eraseArea / FLASH_PAGE_SIZE ;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	0adb      	lsrs	r3, r3, #11
 8004b40:	607b      	str	r3, [r7, #4]

	flash_erasePage( address, nrPages );
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7ff ff75 	bl	8004a34 <flash_erasePage>
	return;
 8004b4a:	bf00      	nop
}
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	08040000 	.word	0x08040000

08004b58 <fwUpgrade_jumpToApp>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void fwUpgrade_jumpToApp()
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
	// Start address of your application
    uint32_t app_start_address = APP_START_ADD;
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <fwUpgrade_jumpToApp+0x34>)
 8004b60:	617b      	str	r3, [r7, #20]

    // Reset vector
    uint32_t reset_handler = *(volatile uint32_t*)(app_start_address + 4);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	3304      	adds	r3, #4
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	613b      	str	r3, [r7, #16]

    // Stack pointer
    uint32_t stack_pointer = (uint32_t) *((__IO uint32_t*) app_start_address );
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]

    // Set application function.
    void (*app_reset_handler)(void) = (void (*)(void))( reset_handler );
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f383 8808 	msr	MSP, r3
}
 8004b7e:	bf00      	nop

    // Set the stack pointer to the application's stack pointer
    __set_MSP(stack_pointer);

    // Call the application
    app_reset_handler();
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4798      	blx	r3
}
 8004b84:	bf00      	nop
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	08040000 	.word	0x08040000

08004b90 <fwUpgrade_setFlag>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void fwUpgrade_setFlag( uint32_t flag )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	uint32_t set_flag = (uint32_t) flag;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]
	flash_erasePage( (uint32_t) APP_BOOT_FLAG_ADD, 1);
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	4807      	ldr	r0, [pc, #28]	@ (8004bbc <fwUpgrade_setFlag+0x2c>)
 8004ba0:	f7ff ff48 	bl	8004a34 <flash_erasePage>
	flash_write( (uint32_t)APP_BOOT_FLAG_ADD, (uint8_t*)&set_flag, 4 );
 8004ba4:	f107 030c 	add.w	r3, r7, #12
 8004ba8:	2204      	movs	r2, #4
 8004baa:	4619      	mov	r1, r3
 8004bac:	4803      	ldr	r0, [pc, #12]	@ (8004bbc <fwUpgrade_setFlag+0x2c>)
 8004bae:	f7ff feb9 	bl	8004924 <flash_write>
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	0803f800 	.word	0x0803f800

08004bc0 <fwUpgrade_cmd_handler>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void fwUpgrade_cmd_handler( tCmdhandler_cmd inCmd )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	463b      	mov	r3, r7
 8004bc8:	e883 0003 	stmia.w	r3, {r0, r1}
	// make sure the command is for us.
	if ( inCmd.id.module != MODULE_ID_FW_UPGRADE )
 8004bcc:	783b      	ldrb	r3, [r7, #0]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d119      	bne.n	8004c06 <fwUpgrade_cmd_handler+0x46>
		return;

	switch( inCmd.id.cmd )
 8004bd2:	787b      	ldrb	r3, [r7, #1]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d002      	beq.n	8004bde <fwUpgrade_cmd_handler+0x1e>
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d003      	beq.n	8004be4 <fwUpgrade_cmd_handler+0x24>
			// call write
			flash_write( address, pData, inCmd.dataSize - 4 );
			break;
		}
		default:
			break;
 8004bdc:	e012      	b.n	8004c04 <fwUpgrade_cmd_handler+0x44>
			fwUpgrade_eraseApp();
 8004bde:	f7ff ffa5 	bl	8004b2c <fwUpgrade_eraseApp>
			break;
 8004be2:	e00f      	b.n	8004c04 <fwUpgrade_cmd_handler+0x44>
			uint32_t address = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60bb      	str	r3, [r7, #8]
			memcpy( &address, &inCmd.pData[0], 4);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	60bb      	str	r3, [r7, #8]
			uint8_t* pData 	 = &inCmd.pData[4];
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	60fb      	str	r3, [r7, #12]
			flash_write( address, pData, inCmd.dataSize - 4 );
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	887a      	ldrh	r2, [r7, #2]
 8004bf8:	3a04      	subs	r2, #4
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fe91 	bl	8004924 <flash_write>
			break;
 8004c02:	bf00      	nop
	}

	return;
 8004c04:	e000      	b.n	8004c08 <fwUpgrade_cmd_handler+0x48>
		return;
 8004c06:	bf00      	nop
}
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <led_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_init()
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_LED, .funPtr = led_cmd_handler };
 8004c16:	4a07      	ldr	r2, [pc, #28]	@ (8004c34 <led_init+0x24>)
 8004c18:	463b      	mov	r3, r7
 8004c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c1e:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 8004c22:	463b      	mov	r3, r7
 8004c24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c28:	f7ff fd44 	bl	80046b4 <cmdhandler_registerModuleCmdHandler>
	return;
 8004c2c:	bf00      	nop
}
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	080060a4 	.word	0x080060a4

08004c38 <led_toggle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_toggle( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin( GPIOx, GPIO_Pin );
 8004c44:	887b      	ldrh	r3, [r7, #2]
 8004c46:	4619      	mov	r1, r3
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7fc fe13 	bl	8001874 <HAL_GPIO_TogglePin>
	return;
 8004c4e:	bf00      	nop
}
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <led_run>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_run()
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	af00      	add	r7, sp, #0
	led_toggle( LD2_GPIO_Port, LD2_Pin);
 8004c5a:	2120      	movs	r1, #32
 8004c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c60:	f7ff ffea 	bl	8004c38 <led_toggle>
}
 8004c64:	bf00      	nop
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <led_cmd_handler>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_cmd_handler( tCmdhandler_cmd inCmd )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	463b      	mov	r3, r7
 8004c70:	e883 0003 	stmia.w	r3, {r0, r1}
	// make sure the command is for us.
	if ( inCmd.id.module != MODULE_ID_LED )
 8004c74:	783b      	ldrb	r3, [r7, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d11f      	bne.n	8004cba <led_cmd_handler+0x52>
		return;

	switch( inCmd.id.cmd )
 8004c7a:	787b      	ldrb	r3, [r7, #1]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d002      	beq.n	8004c86 <led_cmd_handler+0x1e>
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d013      	beq.n	8004cac <led_cmd_handler+0x44>
		{
			led_toggle( LD2_GPIO_Port, LD2_Pin);
			break;
		}
		default:
			break;
 8004c84:	e018      	b.n	8004cb8 <led_cmd_handler+0x50>
			uint8_t set = 0;// (uint8_t)param;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
			memcpy(&set, &inCmd.pData, inCmd.dataSize );
 8004c8a:	887b      	ldrh	r3, [r7, #2]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	463b      	mov	r3, r7
 8004c90:	1d19      	adds	r1, r3, #4
 8004c92:	f107 030f 	add.w	r3, r7, #15
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fced 	bl	8005676 <memcpy>
			HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, set);
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	2120      	movs	r1, #32
 8004ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ca6:	f7fc fdcd 	bl	8001844 <HAL_GPIO_WritePin>
			break;
 8004caa:	e005      	b.n	8004cb8 <led_cmd_handler+0x50>
			led_toggle( LD2_GPIO_Port, LD2_Pin);
 8004cac:	2120      	movs	r1, #32
 8004cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004cb2:	f7ff ffc1 	bl	8004c38 <led_toggle>
			break;
 8004cb6:	bf00      	nop
	}

	return;
 8004cb8:	e000      	b.n	8004cbc <led_cmd_handler+0x54>
		return;
 8004cba:	bf00      	nop
}
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <scheduler_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void scheduler_init( void )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
	schedulerVars.nrOfTasks = 0;
 8004cca:	4b2a      	ldr	r3, [pc, #168]	@ (8004d74 <scheduler_init+0xb0>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	71fb      	strb	r3, [r7, #7]
 8004cd4:	e020      	b.n	8004d18 <scheduler_init+0x54>
	{
		schedulerVars.taskList[i].pTask = NULL;
 8004cd6:	79fa      	ldrb	r2, [r7, #7]
 8004cd8:	4926      	ldr	r1, [pc, #152]	@ (8004d74 <scheduler_init+0xb0>)
 8004cda:	4613      	mov	r3, r2
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].delay = 0;
 8004cea:	79fa      	ldrb	r2, [r7, #7]
 8004cec:	4921      	ldr	r1, [pc, #132]	@ (8004d74 <scheduler_init+0xb0>)
 8004cee:	4613      	mov	r3, r2
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].lastExecutionTime = 0;
 8004cfe:	79fa      	ldrb	r2, [r7, #7]
 8004d00:	491c      	ldr	r1, [pc, #112]	@ (8004d74 <scheduler_init+0xb0>)
 8004d02:	4613      	mov	r3, r2
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	3301      	adds	r3, #1
 8004d16:	71fb      	strb	r3, [r7, #7]
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	2b09      	cmp	r3, #9
 8004d1c:	d9db      	bls.n	8004cd6 <scheduler_init+0x12>
	}

	// init run once queue.
	schedulerVars.RunOnceQueue.head  = 0;
 8004d1e:	4b15      	ldr	r3, [pc, #84]	@ (8004d74 <scheduler_init+0xb0>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	schedulerVars.RunOnceQueue.tail  = 0;
 8004d26:	4b13      	ldr	r3, [pc, #76]	@ (8004d74 <scheduler_init+0xb0>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
	schedulerVars.RunOnceQueue.full  = 0;
 8004d2e:	4b11      	ldr	r3, [pc, #68]	@ (8004d74 <scheduler_init+0xb0>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	schedulerVars.RunOnceQueue.empty = 1;
 8004d36:	4b0f      	ldr	r3, [pc, #60]	@ (8004d74 <scheduler_init+0xb0>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	schedulerVars.RunOnceQueue.size  = 0;
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <scheduler_init+0xb0>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8004d46:	2300      	movs	r3, #0
 8004d48:	71bb      	strb	r3, [r7, #6]
 8004d4a:	e009      	b.n	8004d60 <scheduler_init+0x9c>
	{
		schedulerVars.RunOnceQueue.runOnceTaskList[i].pTask = NULL;
 8004d4c:	79bb      	ldrb	r3, [r7, #6]
 8004d4e:	4a09      	ldr	r2, [pc, #36]	@ (8004d74 <scheduler_init+0xb0>)
 8004d50:	3320      	adds	r3, #32
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	2200      	movs	r2, #0
 8004d58:	605a      	str	r2, [r3, #4]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8004d5a:	79bb      	ldrb	r3, [r7, #6]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	71bb      	strb	r3, [r7, #6]
 8004d60:	79bb      	ldrb	r3, [r7, #6]
 8004d62:	2b13      	cmp	r3, #19
 8004d64:	d9f2      	bls.n	8004d4c <scheduler_init+0x88>
	}
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	200001fc 	.word	0x200001fc

08004d78 <scheduler_addTask>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t scheduler_addTask( uint32_t delay, void (*pTask)(void) )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]
 8004d86:	e029      	b.n	8004ddc <scheduler_addTask+0x64>
	{
		// search for available task.
		if ( schedulerVars.taskList[i].pTask == NULL )
 8004d88:	7bfa      	ldrb	r2, [r7, #15]
 8004d8a:	4919      	ldr	r1, [pc, #100]	@ (8004df0 <scheduler_addTask+0x78>)
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	3304      	adds	r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d11b      	bne.n	8004dd6 <scheduler_addTask+0x5e>
		{
			schedulerVars.taskList[i].pTask = pTask;
 8004d9e:	7bfa      	ldrb	r2, [r7, #15]
 8004da0:	4913      	ldr	r1, [pc, #76]	@ (8004df0 <scheduler_addTask+0x78>)
 8004da2:	4613      	mov	r3, r2
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	3304      	adds	r3, #4
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	601a      	str	r2, [r3, #0]
			schedulerVars.taskList[i].delay = delay;
 8004db2:	7bfa      	ldrb	r2, [r7, #15]
 8004db4:	490e      	ldr	r1, [pc, #56]	@ (8004df0 <scheduler_addTask+0x78>)
 8004db6:	4613      	mov	r3, r2
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
			schedulerVars.nrOfTasks += 1;
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004df0 <scheduler_addTask+0x78>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	4b08      	ldr	r3, [pc, #32]	@ (8004df0 <scheduler_addTask+0x78>)
 8004dd0:	701a      	strb	r2, [r3, #0]
			return 1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e006      	b.n	8004de4 <scheduler_addTask+0x6c>
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b09      	cmp	r3, #9
 8004de0:	d9d2      	bls.n	8004d88 <scheduler_addTask+0x10>
		}
	}
	// no available task was found
	return 0;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	200001fc 	.word	0x200001fc

08004df4 <scheduler_pushTask>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t scheduler_pushTask( void (*pTask)(void) )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	// is queue full?
	if ( schedulerVars.RunOnceQueue.full )
 8004dfc:	4b21      	ldr	r3, [pc, #132]	@ (8004e84 <scheduler_pushTask+0x90>)
 8004dfe:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <scheduler_pushTask+0x16>
		return 1;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e036      	b.n	8004e78 <scheduler_pushTask+0x84>

	// if not, add task.
	schedulerVars.RunOnceQueue.runOnceTaskList[ schedulerVars.RunOnceQueue.tail ].pTask = pTask;
 8004e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e84 <scheduler_pushTask+0x90>)
 8004e0c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004e10:	4a1c      	ldr	r2, [pc, #112]	@ (8004e84 <scheduler_pushTask+0x90>)
 8004e12:	3320      	adds	r3, #32
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	605a      	str	r2, [r3, #4]

	// increase tail index and size.
	schedulerVars.RunOnceQueue.tail = ( schedulerVars.RunOnceQueue.tail + 1 ) % SCHEDULER_MAX_NR_RUN_ONCE_TASKS;
 8004e1c:	4b19      	ldr	r3, [pc, #100]	@ (8004e84 <scheduler_pushTask+0x90>)
 8004e1e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	4b18      	ldr	r3, [pc, #96]	@ (8004e88 <scheduler_pushTask+0x94>)
 8004e26:	fb83 1302 	smull	r1, r3, r3, r2
 8004e2a:	10d9      	asrs	r1, r3, #3
 8004e2c:	17d3      	asrs	r3, r2, #31
 8004e2e:	1ac9      	subs	r1, r1, r3
 8004e30:	460b      	mov	r3, r1
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	1ad1      	subs	r1, r2, r3
 8004e3a:	b2ca      	uxtb	r2, r1
 8004e3c:	4b11      	ldr	r3, [pc, #68]	@ (8004e84 <scheduler_pushTask+0x90>)
 8004e3e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
	schedulerVars.RunOnceQueue.size += 1;
 8004e42:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <scheduler_pushTask+0x90>)
 8004e44:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004e48:	3301      	adds	r3, #1
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <scheduler_pushTask+0x90>)
 8004e4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	// if queue was empty, it is not now.
	if ( schedulerVars.RunOnceQueue.empty )
 8004e52:	4b0c      	ldr	r3, [pc, #48]	@ (8004e84 <scheduler_pushTask+0x90>)
 8004e54:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <scheduler_pushTask+0x70>
	{
		schedulerVars.RunOnceQueue.empty = 0;
 8004e5c:	4b09      	ldr	r3, [pc, #36]	@ (8004e84 <scheduler_pushTask+0x90>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	}

	// check if full and update full.
	if( schedulerVars.RunOnceQueue.size == SCHEDULER_MAX_NR_RUN_ONCE_TASKS )
 8004e64:	4b07      	ldr	r3, [pc, #28]	@ (8004e84 <scheduler_pushTask+0x90>)
 8004e66:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004e6a:	2b14      	cmp	r3, #20
 8004e6c:	d103      	bne.n	8004e76 <scheduler_pushTask+0x82>
	{
		schedulerVars.RunOnceQueue.full = 1;
 8004e6e:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <scheduler_pushTask+0x90>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	}

	return 0;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	200001fc 	.word	0x200001fc
 8004e88:	66666667 	.word	0x66666667

08004e8c <scheduler_run>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void scheduler_run( void )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]
	while( 1 )
	{
		// run once tasks:
		while ( !schedulerVars.RunOnceQueue.empty )
 8004e96:	e00d      	b.n	8004eb4 <scheduler_run+0x28>
		{
			void (*pRunOnce)(void) = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	607b      	str	r3, [r7, #4]

			if ( 0 == scheduler_popTask( &pRunOnce ) )
 8004e9c:	1d3b      	adds	r3, r7, #4
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f848 	bl	8004f34 <scheduler_popTask>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d104      	bne.n	8004eb4 <scheduler_run+0x28>
				if ( pRunOnce != NULL )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <scheduler_run+0x28>
					{
						pRunOnce();
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4798      	blx	r3
		while ( !schedulerVars.RunOnceQueue.empty )
 8004eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f30 <scheduler_run+0xa4>)
 8004eb6:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0ec      	beq.n	8004e98 <scheduler_run+0xc>
					}
		}

		// repeated tasks:
		now = HAL_GetTick();
 8004ebe:	f7fb fe13 	bl	8000ae8 <HAL_GetTick>
 8004ec2:	60b8      	str	r0, [r7, #8]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73fb      	strb	r3, [r7, #15]
 8004ec8:	e02c      	b.n	8004f24 <scheduler_run+0x98>
		{
			if ( now - schedulerVars.taskList[i].lastExecutionTime  >= schedulerVars.taskList[i].delay )
 8004eca:	7bfa      	ldrb	r2, [r7, #15]
 8004ecc:	4918      	ldr	r1, [pc, #96]	@ (8004f30 <scheduler_run+0xa4>)
 8004ece:	4613      	mov	r3, r2
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	330c      	adds	r3, #12
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	1ad1      	subs	r1, r2, r3
 8004ee0:	7bfa      	ldrb	r2, [r7, #15]
 8004ee2:	4813      	ldr	r0, [pc, #76]	@ (8004f30 <scheduler_run+0xa4>)
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4403      	add	r3, r0
 8004eee:	3308      	adds	r3, #8
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4299      	cmp	r1, r3
 8004ef4:	d313      	bcc.n	8004f1e <scheduler_run+0x92>
			{
				// execute task
				schedulerVars.taskList[i].pTask();
 8004ef6:	7bfa      	ldrb	r2, [r7, #15]
 8004ef8:	490d      	ldr	r1, [pc, #52]	@ (8004f30 <scheduler_run+0xa4>)
 8004efa:	4613      	mov	r3, r2
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	3304      	adds	r3, #4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4798      	blx	r3
				schedulerVars.taskList[i].lastExecutionTime = now;
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	4908      	ldr	r1, [pc, #32]	@ (8004f30 <scheduler_run+0xa4>)
 8004f0e:	4613      	mov	r3, r2
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	330c      	adds	r3, #12
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	601a      	str	r2, [r3, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	3301      	adds	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
 8004f24:	4b02      	ldr	r3, [pc, #8]	@ (8004f30 <scheduler_run+0xa4>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	7bfa      	ldrb	r2, [r7, #15]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d3cd      	bcc.n	8004eca <scheduler_run+0x3e>
		while ( !schedulerVars.RunOnceQueue.empty )
 8004f2e:	e7c1      	b.n	8004eb4 <scheduler_run+0x28>
 8004f30:	200001fc 	.word	0x200001fc

08004f34 <scheduler_popTask>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t scheduler_popTask( void (**pTask)(void) )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	// is queue empty?
	if ( schedulerVars.RunOnceQueue.empty )
 8004f3c:	4b22      	ldr	r3, [pc, #136]	@ (8004fc8 <scheduler_popTask+0x94>)
 8004f3e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <scheduler_popTask+0x16>
		return 1;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e037      	b.n	8004fba <scheduler_popTask+0x86>

	// pick that oldest task.
	*pTask = schedulerVars.RunOnceQueue.runOnceTaskList[ schedulerVars.RunOnceQueue.head ].pTask;
 8004f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc8 <scheduler_popTask+0x94>)
 8004f4c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004f50:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc8 <scheduler_popTask+0x94>)
 8004f52:	3320      	adds	r3, #32
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	601a      	str	r2, [r3, #0]

	// update head index
	schedulerVars.RunOnceQueue.head = ( schedulerVars.RunOnceQueue.head + 1 ) % SCHEDULER_MAX_NR_RUN_ONCE_TASKS;
 8004f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc8 <scheduler_popTask+0x94>)
 8004f60:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	4b19      	ldr	r3, [pc, #100]	@ (8004fcc <scheduler_popTask+0x98>)
 8004f68:	fb83 1302 	smull	r1, r3, r3, r2
 8004f6c:	10d9      	asrs	r1, r3, #3
 8004f6e:	17d3      	asrs	r3, r2, #31
 8004f70:	1ac9      	subs	r1, r1, r3
 8004f72:	460b      	mov	r3, r1
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	1ad1      	subs	r1, r2, r3
 8004f7c:	b2ca      	uxtb	r2, r1
 8004f7e:	4b12      	ldr	r3, [pc, #72]	@ (8004fc8 <scheduler_popTask+0x94>)
 8004f80:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	schedulerVars.RunOnceQueue.size -= 1;
 8004f84:	4b10      	ldr	r3, [pc, #64]	@ (8004fc8 <scheduler_popTask+0x94>)
 8004f86:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc8 <scheduler_popTask+0x94>)
 8004f90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	// if it was full, it is not now
	if ( schedulerVars.RunOnceQueue.full == 1 )
 8004f94:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc8 <scheduler_popTask+0x94>)
 8004f96:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d103      	bne.n	8004fa6 <scheduler_popTask+0x72>
	{
		schedulerVars.RunOnceQueue.full = 0;
 8004f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc8 <scheduler_popTask+0x94>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	}

	// check if empty
	if ( schedulerVars.RunOnceQueue.size == 0 )
 8004fa6:	4b08      	ldr	r3, [pc, #32]	@ (8004fc8 <scheduler_popTask+0x94>)
 8004fa8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d103      	bne.n	8004fb8 <scheduler_popTask+0x84>
	{
		schedulerVars.RunOnceQueue.empty = 1;
 8004fb0:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <scheduler_popTask+0x94>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	}
	return 0;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	200001fc 	.word	0x200001fc
 8004fcc:	66666667 	.word	0x66666667

08004fd0 <serial_uart_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void serial_uart_init(  UART_HandleTypeDef *huart, tCmdqueue* cmdq )
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
	serialVars.pUart  		= huart;
 8004fda:	4a06      	ldr	r2, [pc, #24]	@ (8004ff4 <serial_uart_init+0x24>)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6013      	str	r3, [r2, #0]
	serialVars.cmdq			= cmdq;
 8004fe0:	4a04      	ldr	r2, [pc, #16]	@ (8004ff4 <serial_uart_init+0x24>)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6053      	str	r3, [r2, #4]

	return;
 8004fe6:	bf00      	nop
}
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	200002d0 	.word	0x200002d0

08004ff8 <serial_uart_receiveToIdle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t serial_uart_receiveToIdle()
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA( serialVars.pUart, serialVars.pRxBuff, RX_BUF_SIZE );
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <serial_uart_receiveToIdle+0x34>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005004:	490a      	ldr	r1, [pc, #40]	@ (8005030 <serial_uart_receiveToIdle+0x38>)
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff facf 	bl	80045aa <HAL_UARTEx_ReceiveToIdle_DMA>

	  // not interested of half transfer interrupt.
	  __HAL_DMA_DISABLE_IT( serialVars.pUart->hdmarx, DMA_IT_HT );
 800500c:	4b07      	ldr	r3, [pc, #28]	@ (800502c <serial_uart_receiveToIdle+0x34>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b05      	ldr	r3, [pc, #20]	@ (800502c <serial_uart_receiveToIdle+0x34>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0204 	bic.w	r2, r2, #4
 8005022:	601a      	str	r2, [r3, #0]
	return 0;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	200002d0 	.word	0x200002d0
 8005030:	200002d8 	.word	0x200002d8

08005034 <serial_uart_registerCB>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void serial_uart_registerCB( void (*pCB)(void) )
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	serialVars.pCmdHandlerCB = pCB;
 800503c:	4a04      	ldr	r2, [pc, #16]	@ (8005050 <serial_uart_registerCB+0x1c>)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	200002d0 	.word	0x200002d0

08005054 <calculate_crc>:
/*
 * ********************************************
 * 					function
 * ********************************************/

uint32_t calculate_crc(uint8_t *data, uint32_t length) {
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 800505e:	f04f 33ff 	mov.w	r3, #4294967295
 8005062:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < length; i++) {
 8005064:	2300      	movs	r3, #0
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	e021      	b.n	80050ae <calculate_crc+0x5a>
        crc ^= data[i];
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	4413      	add	r3, r2
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4053      	eors	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 800507a:	2300      	movs	r3, #0
 800507c:	73fb      	strb	r3, [r7, #15]
 800507e:	e010      	b.n	80050a2 <calculate_crc+0x4e>
            if (crc & 1) {
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <calculate_crc+0x42>
                crc = (crc >> 1) ^ 0x04C11DB7;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	085a      	lsrs	r2, r3, #1
 800508e:	4b0e      	ldr	r3, [pc, #56]	@ (80050c8 <calculate_crc+0x74>)
 8005090:	4053      	eors	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	e002      	b.n	800509c <calculate_crc+0x48>
            } else {
                crc >>= 1;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	3301      	adds	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b07      	cmp	r3, #7
 80050a6:	d9eb      	bls.n	8005080 <calculate_crc+0x2c>
    for (uint32_t i = 0; i < length; i++) {
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	3301      	adds	r3, #1
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d3d9      	bcc.n	800506a <calculate_crc+0x16>
            }
        }
    }
    return crc ^ 0xFFFFFFFF;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	43db      	mvns	r3, r3
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	04c11db7 	.word	0x04c11db7

080050cc <confirm_crc>:

uint8_t confirm_crc()
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
	// extract crc from incoming data
	uint32_t received_crc = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	607b      	str	r3, [r7, #4]
	uint32_t crcIx = serialVars.receivedSize - 4;
 80050d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005114 <confirm_crc+0x48>)
 80050d8:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80050dc:	3b04      	subs	r3, #4
 80050de:	60fb      	str	r3, [r7, #12]
	memcpy( &received_crc, &serialVars.pRxBuff[crcIx], 4 );
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3308      	adds	r3, #8
 80050e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005114 <confirm_crc+0x48>)
 80050e6:	4413      	add	r3, r2
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	607b      	str	r3, [r7, #4]

	uint32_t calc_crc = calculate_crc( serialVars.pRxBuff, serialVars.receivedSize - 4  );
 80050ec:	4b09      	ldr	r3, [pc, #36]	@ (8005114 <confirm_crc+0x48>)
 80050ee:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80050f2:	3b04      	subs	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4808      	ldr	r0, [pc, #32]	@ (8005118 <confirm_crc+0x4c>)
 80050f8:	f7ff ffac 	bl	8005054 <calculate_crc>
 80050fc:	60b8      	str	r0, [r7, #8]

	if ( calc_crc == received_crc )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d101      	bne.n	800510a <confirm_crc+0x3e>
		return 0;
 8005106:	2300      	movs	r3, #0
 8005108:	e000      	b.n	800510c <confirm_crc+0x40>
	else
		return 1;
 800510a:	2301      	movs	r3, #1
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	200002d0 	.word	0x200002d0
 8005118:	200002d8 	.word	0x200002d8

0800511c <HAL_UARTEx_RxEventCallback>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	807b      	strh	r3, [r7, #2]
	if ( huart->Instance == serialVars.pUart->Instance )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	4b1f      	ldr	r3, [pc, #124]	@ (80051ac <HAL_UARTEx_RxEventCallback+0x90>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d135      	bne.n	80051a2 <HAL_UARTEx_RxEventCallback+0x86>
	{
		// restart receiving data.
		HAL_UARTEx_ReceiveToIdle_DMA( serialVars.pUart, serialVars.pRxBuff, RX_BUF_SIZE );
 8005136:	4b1d      	ldr	r3, [pc, #116]	@ (80051ac <HAL_UARTEx_RxEventCallback+0x90>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800513e:	491c      	ldr	r1, [pc, #112]	@ (80051b0 <HAL_UARTEx_RxEventCallback+0x94>)
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff fa32 	bl	80045aa <HAL_UARTEx_ReceiveToIdle_DMA>
		serialVars.receivedSize = Size;
 8005146:	887b      	ldrh	r3, [r7, #2]
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4b18      	ldr	r3, [pc, #96]	@ (80051ac <HAL_UARTEx_RxEventCallback+0x90>)
 800514c:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

		uint8_t res;
		if ( 0 == confirm_crc() )
 8005150:	f7ff ffbc 	bl	80050cc <confirm_crc>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d117      	bne.n	800518a <HAL_UARTEx_RxEventCallback+0x6e>
		{
			// ack the received message.
			res = ACK;
 800515a:	2306      	movs	r3, #6
 800515c:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit( serialVars.pUart, &res, 1, HAL_MAX_DELAY );
 800515e:	4b13      	ldr	r3, [pc, #76]	@ (80051ac <HAL_UARTEx_RxEventCallback+0x90>)
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	f107 010f 	add.w	r1, r7, #15
 8005166:	f04f 33ff 	mov.w	r3, #4294967295
 800516a:	2201      	movs	r2, #1
 800516c:	f7fe f894 	bl	8003298 <HAL_UART_Transmit>

			// copy in data to data buffer.
			cmdqueue_push( serialVars.cmdq, serialVars.pRxBuff );
 8005170:	4b0e      	ldr	r3, [pc, #56]	@ (80051ac <HAL_UARTEx_RxEventCallback+0x90>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	490e      	ldr	r1, [pc, #56]	@ (80051b0 <HAL_UARTEx_RxEventCallback+0x94>)
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff fb1e 	bl	80047b8 <cmdqueue_push>
			scheduler_pushTask( serialVars.pCmdHandlerCB );
 800517c:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <HAL_UARTEx_RxEventCallback+0x90>)
 800517e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff fe36 	bl	8004df4 <scheduler_pushTask>
			res = NACK;
			HAL_UART_Transmit( serialVars.pUart, &res, 1, HAL_MAX_DELAY );
		}

	}
	return;
 8005188:	e00b      	b.n	80051a2 <HAL_UARTEx_RxEventCallback+0x86>
			res = NACK;
 800518a:	2315      	movs	r3, #21
 800518c:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit( serialVars.pUart, &res, 1, HAL_MAX_DELAY );
 800518e:	4b07      	ldr	r3, [pc, #28]	@ (80051ac <HAL_UARTEx_RxEventCallback+0x90>)
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	f107 010f 	add.w	r1, r7, #15
 8005196:	f04f 33ff 	mov.w	r3, #4294967295
 800519a:	2201      	movs	r2, #1
 800519c:	f7fe f87c 	bl	8003298 <HAL_UART_Transmit>
	return;
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
}
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	200002d0 	.word	0x200002d0
 80051b0:	200002d8 	.word	0x200002d8

080051b4 <malloc>:
 80051b4:	4b02      	ldr	r3, [pc, #8]	@ (80051c0 <malloc+0xc>)
 80051b6:	4601      	mov	r1, r0
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	f000 b82d 	b.w	8005218 <_malloc_r>
 80051be:	bf00      	nop
 80051c0:	20000018 	.word	0x20000018

080051c4 <free>:
 80051c4:	4b02      	ldr	r3, [pc, #8]	@ (80051d0 <free+0xc>)
 80051c6:	4601      	mov	r1, r0
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	f000 ba63 	b.w	8005694 <_free_r>
 80051ce:	bf00      	nop
 80051d0:	20000018 	.word	0x20000018

080051d4 <sbrk_aligned>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4e0f      	ldr	r6, [pc, #60]	@ (8005214 <sbrk_aligned+0x40>)
 80051d8:	460c      	mov	r4, r1
 80051da:	6831      	ldr	r1, [r6, #0]
 80051dc:	4605      	mov	r5, r0
 80051de:	b911      	cbnz	r1, 80051e6 <sbrk_aligned+0x12>
 80051e0:	f000 f9fa 	bl	80055d8 <_sbrk_r>
 80051e4:	6030      	str	r0, [r6, #0]
 80051e6:	4621      	mov	r1, r4
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 f9f5 	bl	80055d8 <_sbrk_r>
 80051ee:	1c43      	adds	r3, r0, #1
 80051f0:	d103      	bne.n	80051fa <sbrk_aligned+0x26>
 80051f2:	f04f 34ff 	mov.w	r4, #4294967295
 80051f6:	4620      	mov	r0, r4
 80051f8:	bd70      	pop	{r4, r5, r6, pc}
 80051fa:	1cc4      	adds	r4, r0, #3
 80051fc:	f024 0403 	bic.w	r4, r4, #3
 8005200:	42a0      	cmp	r0, r4
 8005202:	d0f8      	beq.n	80051f6 <sbrk_aligned+0x22>
 8005204:	1a21      	subs	r1, r4, r0
 8005206:	4628      	mov	r0, r5
 8005208:	f000 f9e6 	bl	80055d8 <_sbrk_r>
 800520c:	3001      	adds	r0, #1
 800520e:	d1f2      	bne.n	80051f6 <sbrk_aligned+0x22>
 8005210:	e7ef      	b.n	80051f2 <sbrk_aligned+0x1e>
 8005212:	bf00      	nop
 8005214:	200003e0 	.word	0x200003e0

08005218 <_malloc_r>:
 8005218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800521c:	1ccd      	adds	r5, r1, #3
 800521e:	f025 0503 	bic.w	r5, r5, #3
 8005222:	3508      	adds	r5, #8
 8005224:	2d0c      	cmp	r5, #12
 8005226:	bf38      	it	cc
 8005228:	250c      	movcc	r5, #12
 800522a:	2d00      	cmp	r5, #0
 800522c:	4606      	mov	r6, r0
 800522e:	db01      	blt.n	8005234 <_malloc_r+0x1c>
 8005230:	42a9      	cmp	r1, r5
 8005232:	d904      	bls.n	800523e <_malloc_r+0x26>
 8005234:	230c      	movs	r3, #12
 8005236:	6033      	str	r3, [r6, #0]
 8005238:	2000      	movs	r0, #0
 800523a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800523e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005314 <_malloc_r+0xfc>
 8005242:	f000 f869 	bl	8005318 <__malloc_lock>
 8005246:	f8d8 3000 	ldr.w	r3, [r8]
 800524a:	461c      	mov	r4, r3
 800524c:	bb44      	cbnz	r4, 80052a0 <_malloc_r+0x88>
 800524e:	4629      	mov	r1, r5
 8005250:	4630      	mov	r0, r6
 8005252:	f7ff ffbf 	bl	80051d4 <sbrk_aligned>
 8005256:	1c43      	adds	r3, r0, #1
 8005258:	4604      	mov	r4, r0
 800525a:	d158      	bne.n	800530e <_malloc_r+0xf6>
 800525c:	f8d8 4000 	ldr.w	r4, [r8]
 8005260:	4627      	mov	r7, r4
 8005262:	2f00      	cmp	r7, #0
 8005264:	d143      	bne.n	80052ee <_malloc_r+0xd6>
 8005266:	2c00      	cmp	r4, #0
 8005268:	d04b      	beq.n	8005302 <_malloc_r+0xea>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	4639      	mov	r1, r7
 800526e:	4630      	mov	r0, r6
 8005270:	eb04 0903 	add.w	r9, r4, r3
 8005274:	f000 f9b0 	bl	80055d8 <_sbrk_r>
 8005278:	4581      	cmp	r9, r0
 800527a:	d142      	bne.n	8005302 <_malloc_r+0xea>
 800527c:	6821      	ldr	r1, [r4, #0]
 800527e:	1a6d      	subs	r5, r5, r1
 8005280:	4629      	mov	r1, r5
 8005282:	4630      	mov	r0, r6
 8005284:	f7ff ffa6 	bl	80051d4 <sbrk_aligned>
 8005288:	3001      	adds	r0, #1
 800528a:	d03a      	beq.n	8005302 <_malloc_r+0xea>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	442b      	add	r3, r5
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	f8d8 3000 	ldr.w	r3, [r8]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	bb62      	cbnz	r2, 80052f4 <_malloc_r+0xdc>
 800529a:	f8c8 7000 	str.w	r7, [r8]
 800529e:	e00f      	b.n	80052c0 <_malloc_r+0xa8>
 80052a0:	6822      	ldr	r2, [r4, #0]
 80052a2:	1b52      	subs	r2, r2, r5
 80052a4:	d420      	bmi.n	80052e8 <_malloc_r+0xd0>
 80052a6:	2a0b      	cmp	r2, #11
 80052a8:	d917      	bls.n	80052da <_malloc_r+0xc2>
 80052aa:	1961      	adds	r1, r4, r5
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	6025      	str	r5, [r4, #0]
 80052b0:	bf18      	it	ne
 80052b2:	6059      	strne	r1, [r3, #4]
 80052b4:	6863      	ldr	r3, [r4, #4]
 80052b6:	bf08      	it	eq
 80052b8:	f8c8 1000 	streq.w	r1, [r8]
 80052bc:	5162      	str	r2, [r4, r5]
 80052be:	604b      	str	r3, [r1, #4]
 80052c0:	4630      	mov	r0, r6
 80052c2:	f000 f82f 	bl	8005324 <__malloc_unlock>
 80052c6:	f104 000b 	add.w	r0, r4, #11
 80052ca:	1d23      	adds	r3, r4, #4
 80052cc:	f020 0007 	bic.w	r0, r0, #7
 80052d0:	1ac2      	subs	r2, r0, r3
 80052d2:	bf1c      	itt	ne
 80052d4:	1a1b      	subne	r3, r3, r0
 80052d6:	50a3      	strne	r3, [r4, r2]
 80052d8:	e7af      	b.n	800523a <_malloc_r+0x22>
 80052da:	6862      	ldr	r2, [r4, #4]
 80052dc:	42a3      	cmp	r3, r4
 80052de:	bf0c      	ite	eq
 80052e0:	f8c8 2000 	streq.w	r2, [r8]
 80052e4:	605a      	strne	r2, [r3, #4]
 80052e6:	e7eb      	b.n	80052c0 <_malloc_r+0xa8>
 80052e8:	4623      	mov	r3, r4
 80052ea:	6864      	ldr	r4, [r4, #4]
 80052ec:	e7ae      	b.n	800524c <_malloc_r+0x34>
 80052ee:	463c      	mov	r4, r7
 80052f0:	687f      	ldr	r7, [r7, #4]
 80052f2:	e7b6      	b.n	8005262 <_malloc_r+0x4a>
 80052f4:	461a      	mov	r2, r3
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	d1fb      	bne.n	80052f4 <_malloc_r+0xdc>
 80052fc:	2300      	movs	r3, #0
 80052fe:	6053      	str	r3, [r2, #4]
 8005300:	e7de      	b.n	80052c0 <_malloc_r+0xa8>
 8005302:	230c      	movs	r3, #12
 8005304:	6033      	str	r3, [r6, #0]
 8005306:	4630      	mov	r0, r6
 8005308:	f000 f80c 	bl	8005324 <__malloc_unlock>
 800530c:	e794      	b.n	8005238 <_malloc_r+0x20>
 800530e:	6005      	str	r5, [r0, #0]
 8005310:	e7d6      	b.n	80052c0 <_malloc_r+0xa8>
 8005312:	bf00      	nop
 8005314:	200003e4 	.word	0x200003e4

08005318 <__malloc_lock>:
 8005318:	4801      	ldr	r0, [pc, #4]	@ (8005320 <__malloc_lock+0x8>)
 800531a:	f000 b9aa 	b.w	8005672 <__retarget_lock_acquire_recursive>
 800531e:	bf00      	nop
 8005320:	20000528 	.word	0x20000528

08005324 <__malloc_unlock>:
 8005324:	4801      	ldr	r0, [pc, #4]	@ (800532c <__malloc_unlock+0x8>)
 8005326:	f000 b9a5 	b.w	8005674 <__retarget_lock_release_recursive>
 800532a:	bf00      	nop
 800532c:	20000528 	.word	0x20000528

08005330 <std>:
 8005330:	2300      	movs	r3, #0
 8005332:	b510      	push	{r4, lr}
 8005334:	4604      	mov	r4, r0
 8005336:	e9c0 3300 	strd	r3, r3, [r0]
 800533a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800533e:	6083      	str	r3, [r0, #8]
 8005340:	8181      	strh	r1, [r0, #12]
 8005342:	6643      	str	r3, [r0, #100]	@ 0x64
 8005344:	81c2      	strh	r2, [r0, #14]
 8005346:	6183      	str	r3, [r0, #24]
 8005348:	4619      	mov	r1, r3
 800534a:	2208      	movs	r2, #8
 800534c:	305c      	adds	r0, #92	@ 0x5c
 800534e:	f000 f906 	bl	800555e <memset>
 8005352:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <std+0x58>)
 8005354:	6263      	str	r3, [r4, #36]	@ 0x24
 8005356:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <std+0x5c>)
 8005358:	62a3      	str	r3, [r4, #40]	@ 0x28
 800535a:	4b0d      	ldr	r3, [pc, #52]	@ (8005390 <std+0x60>)
 800535c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800535e:	4b0d      	ldr	r3, [pc, #52]	@ (8005394 <std+0x64>)
 8005360:	6323      	str	r3, [r4, #48]	@ 0x30
 8005362:	4b0d      	ldr	r3, [pc, #52]	@ (8005398 <std+0x68>)
 8005364:	6224      	str	r4, [r4, #32]
 8005366:	429c      	cmp	r4, r3
 8005368:	d006      	beq.n	8005378 <std+0x48>
 800536a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800536e:	4294      	cmp	r4, r2
 8005370:	d002      	beq.n	8005378 <std+0x48>
 8005372:	33d0      	adds	r3, #208	@ 0xd0
 8005374:	429c      	cmp	r4, r3
 8005376:	d105      	bne.n	8005384 <std+0x54>
 8005378:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800537c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005380:	f000 b976 	b.w	8005670 <__retarget_lock_init_recursive>
 8005384:	bd10      	pop	{r4, pc}
 8005386:	bf00      	nop
 8005388:	080054d9 	.word	0x080054d9
 800538c:	080054fb 	.word	0x080054fb
 8005390:	08005533 	.word	0x08005533
 8005394:	08005557 	.word	0x08005557
 8005398:	200003e8 	.word	0x200003e8

0800539c <stdio_exit_handler>:
 800539c:	4a02      	ldr	r2, [pc, #8]	@ (80053a8 <stdio_exit_handler+0xc>)
 800539e:	4903      	ldr	r1, [pc, #12]	@ (80053ac <stdio_exit_handler+0x10>)
 80053a0:	4803      	ldr	r0, [pc, #12]	@ (80053b0 <stdio_exit_handler+0x14>)
 80053a2:	f000 b869 	b.w	8005478 <_fwalk_sglue>
 80053a6:	bf00      	nop
 80053a8:	2000000c 	.word	0x2000000c
 80053ac:	08005dd1 	.word	0x08005dd1
 80053b0:	2000001c 	.word	0x2000001c

080053b4 <cleanup_stdio>:
 80053b4:	6841      	ldr	r1, [r0, #4]
 80053b6:	4b0c      	ldr	r3, [pc, #48]	@ (80053e8 <cleanup_stdio+0x34>)
 80053b8:	4299      	cmp	r1, r3
 80053ba:	b510      	push	{r4, lr}
 80053bc:	4604      	mov	r4, r0
 80053be:	d001      	beq.n	80053c4 <cleanup_stdio+0x10>
 80053c0:	f000 fd06 	bl	8005dd0 <_fflush_r>
 80053c4:	68a1      	ldr	r1, [r4, #8]
 80053c6:	4b09      	ldr	r3, [pc, #36]	@ (80053ec <cleanup_stdio+0x38>)
 80053c8:	4299      	cmp	r1, r3
 80053ca:	d002      	beq.n	80053d2 <cleanup_stdio+0x1e>
 80053cc:	4620      	mov	r0, r4
 80053ce:	f000 fcff 	bl	8005dd0 <_fflush_r>
 80053d2:	68e1      	ldr	r1, [r4, #12]
 80053d4:	4b06      	ldr	r3, [pc, #24]	@ (80053f0 <cleanup_stdio+0x3c>)
 80053d6:	4299      	cmp	r1, r3
 80053d8:	d004      	beq.n	80053e4 <cleanup_stdio+0x30>
 80053da:	4620      	mov	r0, r4
 80053dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e0:	f000 bcf6 	b.w	8005dd0 <_fflush_r>
 80053e4:	bd10      	pop	{r4, pc}
 80053e6:	bf00      	nop
 80053e8:	200003e8 	.word	0x200003e8
 80053ec:	20000450 	.word	0x20000450
 80053f0:	200004b8 	.word	0x200004b8

080053f4 <global_stdio_init.part.0>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005424 <global_stdio_init.part.0+0x30>)
 80053f8:	4c0b      	ldr	r4, [pc, #44]	@ (8005428 <global_stdio_init.part.0+0x34>)
 80053fa:	4a0c      	ldr	r2, [pc, #48]	@ (800542c <global_stdio_init.part.0+0x38>)
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	4620      	mov	r0, r4
 8005400:	2200      	movs	r2, #0
 8005402:	2104      	movs	r1, #4
 8005404:	f7ff ff94 	bl	8005330 <std>
 8005408:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800540c:	2201      	movs	r2, #1
 800540e:	2109      	movs	r1, #9
 8005410:	f7ff ff8e 	bl	8005330 <std>
 8005414:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005418:	2202      	movs	r2, #2
 800541a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800541e:	2112      	movs	r1, #18
 8005420:	f7ff bf86 	b.w	8005330 <std>
 8005424:	20000520 	.word	0x20000520
 8005428:	200003e8 	.word	0x200003e8
 800542c:	0800539d 	.word	0x0800539d

08005430 <__sfp_lock_acquire>:
 8005430:	4801      	ldr	r0, [pc, #4]	@ (8005438 <__sfp_lock_acquire+0x8>)
 8005432:	f000 b91e 	b.w	8005672 <__retarget_lock_acquire_recursive>
 8005436:	bf00      	nop
 8005438:	20000529 	.word	0x20000529

0800543c <__sfp_lock_release>:
 800543c:	4801      	ldr	r0, [pc, #4]	@ (8005444 <__sfp_lock_release+0x8>)
 800543e:	f000 b919 	b.w	8005674 <__retarget_lock_release_recursive>
 8005442:	bf00      	nop
 8005444:	20000529 	.word	0x20000529

08005448 <__sinit>:
 8005448:	b510      	push	{r4, lr}
 800544a:	4604      	mov	r4, r0
 800544c:	f7ff fff0 	bl	8005430 <__sfp_lock_acquire>
 8005450:	6a23      	ldr	r3, [r4, #32]
 8005452:	b11b      	cbz	r3, 800545c <__sinit+0x14>
 8005454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005458:	f7ff bff0 	b.w	800543c <__sfp_lock_release>
 800545c:	4b04      	ldr	r3, [pc, #16]	@ (8005470 <__sinit+0x28>)
 800545e:	6223      	str	r3, [r4, #32]
 8005460:	4b04      	ldr	r3, [pc, #16]	@ (8005474 <__sinit+0x2c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f5      	bne.n	8005454 <__sinit+0xc>
 8005468:	f7ff ffc4 	bl	80053f4 <global_stdio_init.part.0>
 800546c:	e7f2      	b.n	8005454 <__sinit+0xc>
 800546e:	bf00      	nop
 8005470:	080053b5 	.word	0x080053b5
 8005474:	20000520 	.word	0x20000520

08005478 <_fwalk_sglue>:
 8005478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800547c:	4607      	mov	r7, r0
 800547e:	4688      	mov	r8, r1
 8005480:	4614      	mov	r4, r2
 8005482:	2600      	movs	r6, #0
 8005484:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005488:	f1b9 0901 	subs.w	r9, r9, #1
 800548c:	d505      	bpl.n	800549a <_fwalk_sglue+0x22>
 800548e:	6824      	ldr	r4, [r4, #0]
 8005490:	2c00      	cmp	r4, #0
 8005492:	d1f7      	bne.n	8005484 <_fwalk_sglue+0xc>
 8005494:	4630      	mov	r0, r6
 8005496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800549a:	89ab      	ldrh	r3, [r5, #12]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d907      	bls.n	80054b0 <_fwalk_sglue+0x38>
 80054a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054a4:	3301      	adds	r3, #1
 80054a6:	d003      	beq.n	80054b0 <_fwalk_sglue+0x38>
 80054a8:	4629      	mov	r1, r5
 80054aa:	4638      	mov	r0, r7
 80054ac:	47c0      	blx	r8
 80054ae:	4306      	orrs	r6, r0
 80054b0:	3568      	adds	r5, #104	@ 0x68
 80054b2:	e7e9      	b.n	8005488 <_fwalk_sglue+0x10>

080054b4 <iprintf>:
 80054b4:	b40f      	push	{r0, r1, r2, r3}
 80054b6:	b507      	push	{r0, r1, r2, lr}
 80054b8:	4906      	ldr	r1, [pc, #24]	@ (80054d4 <iprintf+0x20>)
 80054ba:	ab04      	add	r3, sp, #16
 80054bc:	6808      	ldr	r0, [r1, #0]
 80054be:	f853 2b04 	ldr.w	r2, [r3], #4
 80054c2:	6881      	ldr	r1, [r0, #8]
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	f000 f959 	bl	800577c <_vfiprintf_r>
 80054ca:	b003      	add	sp, #12
 80054cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80054d0:	b004      	add	sp, #16
 80054d2:	4770      	bx	lr
 80054d4:	20000018 	.word	0x20000018

080054d8 <__sread>:
 80054d8:	b510      	push	{r4, lr}
 80054da:	460c      	mov	r4, r1
 80054dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e0:	f000 f868 	bl	80055b4 <_read_r>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	bfab      	itete	ge
 80054e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054ea:	89a3      	ldrhlt	r3, [r4, #12]
 80054ec:	181b      	addge	r3, r3, r0
 80054ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054f2:	bfac      	ite	ge
 80054f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054f6:	81a3      	strhlt	r3, [r4, #12]
 80054f8:	bd10      	pop	{r4, pc}

080054fa <__swrite>:
 80054fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fe:	461f      	mov	r7, r3
 8005500:	898b      	ldrh	r3, [r1, #12]
 8005502:	05db      	lsls	r3, r3, #23
 8005504:	4605      	mov	r5, r0
 8005506:	460c      	mov	r4, r1
 8005508:	4616      	mov	r6, r2
 800550a:	d505      	bpl.n	8005518 <__swrite+0x1e>
 800550c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005510:	2302      	movs	r3, #2
 8005512:	2200      	movs	r2, #0
 8005514:	f000 f83c 	bl	8005590 <_lseek_r>
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800551e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005522:	81a3      	strh	r3, [r4, #12]
 8005524:	4632      	mov	r2, r6
 8005526:	463b      	mov	r3, r7
 8005528:	4628      	mov	r0, r5
 800552a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800552e:	f000 b863 	b.w	80055f8 <_write_r>

08005532 <__sseek>:
 8005532:	b510      	push	{r4, lr}
 8005534:	460c      	mov	r4, r1
 8005536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553a:	f000 f829 	bl	8005590 <_lseek_r>
 800553e:	1c43      	adds	r3, r0, #1
 8005540:	89a3      	ldrh	r3, [r4, #12]
 8005542:	bf15      	itete	ne
 8005544:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005546:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800554a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800554e:	81a3      	strheq	r3, [r4, #12]
 8005550:	bf18      	it	ne
 8005552:	81a3      	strhne	r3, [r4, #12]
 8005554:	bd10      	pop	{r4, pc}

08005556 <__sclose>:
 8005556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800555a:	f000 b809 	b.w	8005570 <_close_r>

0800555e <memset>:
 800555e:	4402      	add	r2, r0
 8005560:	4603      	mov	r3, r0
 8005562:	4293      	cmp	r3, r2
 8005564:	d100      	bne.n	8005568 <memset+0xa>
 8005566:	4770      	bx	lr
 8005568:	f803 1b01 	strb.w	r1, [r3], #1
 800556c:	e7f9      	b.n	8005562 <memset+0x4>
	...

08005570 <_close_r>:
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	4d06      	ldr	r5, [pc, #24]	@ (800558c <_close_r+0x1c>)
 8005574:	2300      	movs	r3, #0
 8005576:	4604      	mov	r4, r0
 8005578:	4608      	mov	r0, r1
 800557a:	602b      	str	r3, [r5, #0]
 800557c:	f7fb f90b 	bl	8000796 <_close>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d102      	bne.n	800558a <_close_r+0x1a>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	b103      	cbz	r3, 800558a <_close_r+0x1a>
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	20000524 	.word	0x20000524

08005590 <_lseek_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4d07      	ldr	r5, [pc, #28]	@ (80055b0 <_lseek_r+0x20>)
 8005594:	4604      	mov	r4, r0
 8005596:	4608      	mov	r0, r1
 8005598:	4611      	mov	r1, r2
 800559a:	2200      	movs	r2, #0
 800559c:	602a      	str	r2, [r5, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	f7fb f920 	bl	80007e4 <_lseek>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_lseek_r+0x1e>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_lseek_r+0x1e>
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	20000524 	.word	0x20000524

080055b4 <_read_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4d07      	ldr	r5, [pc, #28]	@ (80055d4 <_read_r+0x20>)
 80055b8:	4604      	mov	r4, r0
 80055ba:	4608      	mov	r0, r1
 80055bc:	4611      	mov	r1, r2
 80055be:	2200      	movs	r2, #0
 80055c0:	602a      	str	r2, [r5, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f7fb f8ca 	bl	800075c <_read>
 80055c8:	1c43      	adds	r3, r0, #1
 80055ca:	d102      	bne.n	80055d2 <_read_r+0x1e>
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	b103      	cbz	r3, 80055d2 <_read_r+0x1e>
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	20000524 	.word	0x20000524

080055d8 <_sbrk_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4d06      	ldr	r5, [pc, #24]	@ (80055f4 <_sbrk_r+0x1c>)
 80055dc:	2300      	movs	r3, #0
 80055de:	4604      	mov	r4, r0
 80055e0:	4608      	mov	r0, r1
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	f7fb f90c 	bl	8000800 <_sbrk>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d102      	bne.n	80055f2 <_sbrk_r+0x1a>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	b103      	cbz	r3, 80055f2 <_sbrk_r+0x1a>
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	20000524 	.word	0x20000524

080055f8 <_write_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d07      	ldr	r5, [pc, #28]	@ (8005618 <_write_r+0x20>)
 80055fc:	4604      	mov	r4, r0
 80055fe:	4608      	mov	r0, r1
 8005600:	4611      	mov	r1, r2
 8005602:	2200      	movs	r2, #0
 8005604:	602a      	str	r2, [r5, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	f7fa ff47 	bl	800049a <_write>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d102      	bne.n	8005616 <_write_r+0x1e>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	b103      	cbz	r3, 8005616 <_write_r+0x1e>
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	20000524 	.word	0x20000524

0800561c <__errno>:
 800561c:	4b01      	ldr	r3, [pc, #4]	@ (8005624 <__errno+0x8>)
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000018 	.word	0x20000018

08005628 <__libc_init_array>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	4d0d      	ldr	r5, [pc, #52]	@ (8005660 <__libc_init_array+0x38>)
 800562c:	4c0d      	ldr	r4, [pc, #52]	@ (8005664 <__libc_init_array+0x3c>)
 800562e:	1b64      	subs	r4, r4, r5
 8005630:	10a4      	asrs	r4, r4, #2
 8005632:	2600      	movs	r6, #0
 8005634:	42a6      	cmp	r6, r4
 8005636:	d109      	bne.n	800564c <__libc_init_array+0x24>
 8005638:	4d0b      	ldr	r5, [pc, #44]	@ (8005668 <__libc_init_array+0x40>)
 800563a:	4c0c      	ldr	r4, [pc, #48]	@ (800566c <__libc_init_array+0x44>)
 800563c:	f000 fd08 	bl	8006050 <_init>
 8005640:	1b64      	subs	r4, r4, r5
 8005642:	10a4      	asrs	r4, r4, #2
 8005644:	2600      	movs	r6, #0
 8005646:	42a6      	cmp	r6, r4
 8005648:	d105      	bne.n	8005656 <__libc_init_array+0x2e>
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005650:	4798      	blx	r3
 8005652:	3601      	adds	r6, #1
 8005654:	e7ee      	b.n	8005634 <__libc_init_array+0xc>
 8005656:	f855 3b04 	ldr.w	r3, [r5], #4
 800565a:	4798      	blx	r3
 800565c:	3601      	adds	r6, #1
 800565e:	e7f2      	b.n	8005646 <__libc_init_array+0x1e>
 8005660:	08006120 	.word	0x08006120
 8005664:	08006120 	.word	0x08006120
 8005668:	08006120 	.word	0x08006120
 800566c:	08006124 	.word	0x08006124

08005670 <__retarget_lock_init_recursive>:
 8005670:	4770      	bx	lr

08005672 <__retarget_lock_acquire_recursive>:
 8005672:	4770      	bx	lr

08005674 <__retarget_lock_release_recursive>:
 8005674:	4770      	bx	lr

08005676 <memcpy>:
 8005676:	440a      	add	r2, r1
 8005678:	4291      	cmp	r1, r2
 800567a:	f100 33ff 	add.w	r3, r0, #4294967295
 800567e:	d100      	bne.n	8005682 <memcpy+0xc>
 8005680:	4770      	bx	lr
 8005682:	b510      	push	{r4, lr}
 8005684:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800568c:	4291      	cmp	r1, r2
 800568e:	d1f9      	bne.n	8005684 <memcpy+0xe>
 8005690:	bd10      	pop	{r4, pc}
	...

08005694 <_free_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4605      	mov	r5, r0
 8005698:	2900      	cmp	r1, #0
 800569a:	d041      	beq.n	8005720 <_free_r+0x8c>
 800569c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056a0:	1f0c      	subs	r4, r1, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	bfb8      	it	lt
 80056a6:	18e4      	addlt	r4, r4, r3
 80056a8:	f7ff fe36 	bl	8005318 <__malloc_lock>
 80056ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005724 <_free_r+0x90>)
 80056ae:	6813      	ldr	r3, [r2, #0]
 80056b0:	b933      	cbnz	r3, 80056c0 <_free_r+0x2c>
 80056b2:	6063      	str	r3, [r4, #4]
 80056b4:	6014      	str	r4, [r2, #0]
 80056b6:	4628      	mov	r0, r5
 80056b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056bc:	f7ff be32 	b.w	8005324 <__malloc_unlock>
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	d908      	bls.n	80056d6 <_free_r+0x42>
 80056c4:	6820      	ldr	r0, [r4, #0]
 80056c6:	1821      	adds	r1, r4, r0
 80056c8:	428b      	cmp	r3, r1
 80056ca:	bf01      	itttt	eq
 80056cc:	6819      	ldreq	r1, [r3, #0]
 80056ce:	685b      	ldreq	r3, [r3, #4]
 80056d0:	1809      	addeq	r1, r1, r0
 80056d2:	6021      	streq	r1, [r4, #0]
 80056d4:	e7ed      	b.n	80056b2 <_free_r+0x1e>
 80056d6:	461a      	mov	r2, r3
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	b10b      	cbz	r3, 80056e0 <_free_r+0x4c>
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d9fa      	bls.n	80056d6 <_free_r+0x42>
 80056e0:	6811      	ldr	r1, [r2, #0]
 80056e2:	1850      	adds	r0, r2, r1
 80056e4:	42a0      	cmp	r0, r4
 80056e6:	d10b      	bne.n	8005700 <_free_r+0x6c>
 80056e8:	6820      	ldr	r0, [r4, #0]
 80056ea:	4401      	add	r1, r0
 80056ec:	1850      	adds	r0, r2, r1
 80056ee:	4283      	cmp	r3, r0
 80056f0:	6011      	str	r1, [r2, #0]
 80056f2:	d1e0      	bne.n	80056b6 <_free_r+0x22>
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	6053      	str	r3, [r2, #4]
 80056fa:	4408      	add	r0, r1
 80056fc:	6010      	str	r0, [r2, #0]
 80056fe:	e7da      	b.n	80056b6 <_free_r+0x22>
 8005700:	d902      	bls.n	8005708 <_free_r+0x74>
 8005702:	230c      	movs	r3, #12
 8005704:	602b      	str	r3, [r5, #0]
 8005706:	e7d6      	b.n	80056b6 <_free_r+0x22>
 8005708:	6820      	ldr	r0, [r4, #0]
 800570a:	1821      	adds	r1, r4, r0
 800570c:	428b      	cmp	r3, r1
 800570e:	bf04      	itt	eq
 8005710:	6819      	ldreq	r1, [r3, #0]
 8005712:	685b      	ldreq	r3, [r3, #4]
 8005714:	6063      	str	r3, [r4, #4]
 8005716:	bf04      	itt	eq
 8005718:	1809      	addeq	r1, r1, r0
 800571a:	6021      	streq	r1, [r4, #0]
 800571c:	6054      	str	r4, [r2, #4]
 800571e:	e7ca      	b.n	80056b6 <_free_r+0x22>
 8005720:	bd38      	pop	{r3, r4, r5, pc}
 8005722:	bf00      	nop
 8005724:	200003e4 	.word	0x200003e4

08005728 <__sfputc_r>:
 8005728:	6893      	ldr	r3, [r2, #8]
 800572a:	3b01      	subs	r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	b410      	push	{r4}
 8005730:	6093      	str	r3, [r2, #8]
 8005732:	da08      	bge.n	8005746 <__sfputc_r+0x1e>
 8005734:	6994      	ldr	r4, [r2, #24]
 8005736:	42a3      	cmp	r3, r4
 8005738:	db01      	blt.n	800573e <__sfputc_r+0x16>
 800573a:	290a      	cmp	r1, #10
 800573c:	d103      	bne.n	8005746 <__sfputc_r+0x1e>
 800573e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005742:	f000 bb6d 	b.w	8005e20 <__swbuf_r>
 8005746:	6813      	ldr	r3, [r2, #0]
 8005748:	1c58      	adds	r0, r3, #1
 800574a:	6010      	str	r0, [r2, #0]
 800574c:	7019      	strb	r1, [r3, #0]
 800574e:	4608      	mov	r0, r1
 8005750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005754:	4770      	bx	lr

08005756 <__sfputs_r>:
 8005756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005758:	4606      	mov	r6, r0
 800575a:	460f      	mov	r7, r1
 800575c:	4614      	mov	r4, r2
 800575e:	18d5      	adds	r5, r2, r3
 8005760:	42ac      	cmp	r4, r5
 8005762:	d101      	bne.n	8005768 <__sfputs_r+0x12>
 8005764:	2000      	movs	r0, #0
 8005766:	e007      	b.n	8005778 <__sfputs_r+0x22>
 8005768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800576c:	463a      	mov	r2, r7
 800576e:	4630      	mov	r0, r6
 8005770:	f7ff ffda 	bl	8005728 <__sfputc_r>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d1f3      	bne.n	8005760 <__sfputs_r+0xa>
 8005778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800577c <_vfiprintf_r>:
 800577c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005780:	460d      	mov	r5, r1
 8005782:	b09d      	sub	sp, #116	@ 0x74
 8005784:	4614      	mov	r4, r2
 8005786:	4698      	mov	r8, r3
 8005788:	4606      	mov	r6, r0
 800578a:	b118      	cbz	r0, 8005794 <_vfiprintf_r+0x18>
 800578c:	6a03      	ldr	r3, [r0, #32]
 800578e:	b90b      	cbnz	r3, 8005794 <_vfiprintf_r+0x18>
 8005790:	f7ff fe5a 	bl	8005448 <__sinit>
 8005794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005796:	07d9      	lsls	r1, r3, #31
 8005798:	d405      	bmi.n	80057a6 <_vfiprintf_r+0x2a>
 800579a:	89ab      	ldrh	r3, [r5, #12]
 800579c:	059a      	lsls	r2, r3, #22
 800579e:	d402      	bmi.n	80057a6 <_vfiprintf_r+0x2a>
 80057a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057a2:	f7ff ff66 	bl	8005672 <__retarget_lock_acquire_recursive>
 80057a6:	89ab      	ldrh	r3, [r5, #12]
 80057a8:	071b      	lsls	r3, r3, #28
 80057aa:	d501      	bpl.n	80057b0 <_vfiprintf_r+0x34>
 80057ac:	692b      	ldr	r3, [r5, #16]
 80057ae:	b99b      	cbnz	r3, 80057d8 <_vfiprintf_r+0x5c>
 80057b0:	4629      	mov	r1, r5
 80057b2:	4630      	mov	r0, r6
 80057b4:	f000 fb72 	bl	8005e9c <__swsetup_r>
 80057b8:	b170      	cbz	r0, 80057d8 <_vfiprintf_r+0x5c>
 80057ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057bc:	07dc      	lsls	r4, r3, #31
 80057be:	d504      	bpl.n	80057ca <_vfiprintf_r+0x4e>
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	b01d      	add	sp, #116	@ 0x74
 80057c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ca:	89ab      	ldrh	r3, [r5, #12]
 80057cc:	0598      	lsls	r0, r3, #22
 80057ce:	d4f7      	bmi.n	80057c0 <_vfiprintf_r+0x44>
 80057d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057d2:	f7ff ff4f 	bl	8005674 <__retarget_lock_release_recursive>
 80057d6:	e7f3      	b.n	80057c0 <_vfiprintf_r+0x44>
 80057d8:	2300      	movs	r3, #0
 80057da:	9309      	str	r3, [sp, #36]	@ 0x24
 80057dc:	2320      	movs	r3, #32
 80057de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80057e6:	2330      	movs	r3, #48	@ 0x30
 80057e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005998 <_vfiprintf_r+0x21c>
 80057ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057f0:	f04f 0901 	mov.w	r9, #1
 80057f4:	4623      	mov	r3, r4
 80057f6:	469a      	mov	sl, r3
 80057f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057fc:	b10a      	cbz	r2, 8005802 <_vfiprintf_r+0x86>
 80057fe:	2a25      	cmp	r2, #37	@ 0x25
 8005800:	d1f9      	bne.n	80057f6 <_vfiprintf_r+0x7a>
 8005802:	ebba 0b04 	subs.w	fp, sl, r4
 8005806:	d00b      	beq.n	8005820 <_vfiprintf_r+0xa4>
 8005808:	465b      	mov	r3, fp
 800580a:	4622      	mov	r2, r4
 800580c:	4629      	mov	r1, r5
 800580e:	4630      	mov	r0, r6
 8005810:	f7ff ffa1 	bl	8005756 <__sfputs_r>
 8005814:	3001      	adds	r0, #1
 8005816:	f000 80a7 	beq.w	8005968 <_vfiprintf_r+0x1ec>
 800581a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800581c:	445a      	add	r2, fp
 800581e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005820:	f89a 3000 	ldrb.w	r3, [sl]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 809f 	beq.w	8005968 <_vfiprintf_r+0x1ec>
 800582a:	2300      	movs	r3, #0
 800582c:	f04f 32ff 	mov.w	r2, #4294967295
 8005830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005834:	f10a 0a01 	add.w	sl, sl, #1
 8005838:	9304      	str	r3, [sp, #16]
 800583a:	9307      	str	r3, [sp, #28]
 800583c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005840:	931a      	str	r3, [sp, #104]	@ 0x68
 8005842:	4654      	mov	r4, sl
 8005844:	2205      	movs	r2, #5
 8005846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800584a:	4853      	ldr	r0, [pc, #332]	@ (8005998 <_vfiprintf_r+0x21c>)
 800584c:	f7fa fcc8 	bl	80001e0 <memchr>
 8005850:	9a04      	ldr	r2, [sp, #16]
 8005852:	b9d8      	cbnz	r0, 800588c <_vfiprintf_r+0x110>
 8005854:	06d1      	lsls	r1, r2, #27
 8005856:	bf44      	itt	mi
 8005858:	2320      	movmi	r3, #32
 800585a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800585e:	0713      	lsls	r3, r2, #28
 8005860:	bf44      	itt	mi
 8005862:	232b      	movmi	r3, #43	@ 0x2b
 8005864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005868:	f89a 3000 	ldrb.w	r3, [sl]
 800586c:	2b2a      	cmp	r3, #42	@ 0x2a
 800586e:	d015      	beq.n	800589c <_vfiprintf_r+0x120>
 8005870:	9a07      	ldr	r2, [sp, #28]
 8005872:	4654      	mov	r4, sl
 8005874:	2000      	movs	r0, #0
 8005876:	f04f 0c0a 	mov.w	ip, #10
 800587a:	4621      	mov	r1, r4
 800587c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005880:	3b30      	subs	r3, #48	@ 0x30
 8005882:	2b09      	cmp	r3, #9
 8005884:	d94b      	bls.n	800591e <_vfiprintf_r+0x1a2>
 8005886:	b1b0      	cbz	r0, 80058b6 <_vfiprintf_r+0x13a>
 8005888:	9207      	str	r2, [sp, #28]
 800588a:	e014      	b.n	80058b6 <_vfiprintf_r+0x13a>
 800588c:	eba0 0308 	sub.w	r3, r0, r8
 8005890:	fa09 f303 	lsl.w	r3, r9, r3
 8005894:	4313      	orrs	r3, r2
 8005896:	9304      	str	r3, [sp, #16]
 8005898:	46a2      	mov	sl, r4
 800589a:	e7d2      	b.n	8005842 <_vfiprintf_r+0xc6>
 800589c:	9b03      	ldr	r3, [sp, #12]
 800589e:	1d19      	adds	r1, r3, #4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	9103      	str	r1, [sp, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bfbb      	ittet	lt
 80058a8:	425b      	neglt	r3, r3
 80058aa:	f042 0202 	orrlt.w	r2, r2, #2
 80058ae:	9307      	strge	r3, [sp, #28]
 80058b0:	9307      	strlt	r3, [sp, #28]
 80058b2:	bfb8      	it	lt
 80058b4:	9204      	strlt	r2, [sp, #16]
 80058b6:	7823      	ldrb	r3, [r4, #0]
 80058b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80058ba:	d10a      	bne.n	80058d2 <_vfiprintf_r+0x156>
 80058bc:	7863      	ldrb	r3, [r4, #1]
 80058be:	2b2a      	cmp	r3, #42	@ 0x2a
 80058c0:	d132      	bne.n	8005928 <_vfiprintf_r+0x1ac>
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	1d1a      	adds	r2, r3, #4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	9203      	str	r2, [sp, #12]
 80058ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058ce:	3402      	adds	r4, #2
 80058d0:	9305      	str	r3, [sp, #20]
 80058d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80059a8 <_vfiprintf_r+0x22c>
 80058d6:	7821      	ldrb	r1, [r4, #0]
 80058d8:	2203      	movs	r2, #3
 80058da:	4650      	mov	r0, sl
 80058dc:	f7fa fc80 	bl	80001e0 <memchr>
 80058e0:	b138      	cbz	r0, 80058f2 <_vfiprintf_r+0x176>
 80058e2:	9b04      	ldr	r3, [sp, #16]
 80058e4:	eba0 000a 	sub.w	r0, r0, sl
 80058e8:	2240      	movs	r2, #64	@ 0x40
 80058ea:	4082      	lsls	r2, r0
 80058ec:	4313      	orrs	r3, r2
 80058ee:	3401      	adds	r4, #1
 80058f0:	9304      	str	r3, [sp, #16]
 80058f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f6:	4829      	ldr	r0, [pc, #164]	@ (800599c <_vfiprintf_r+0x220>)
 80058f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058fc:	2206      	movs	r2, #6
 80058fe:	f7fa fc6f 	bl	80001e0 <memchr>
 8005902:	2800      	cmp	r0, #0
 8005904:	d03f      	beq.n	8005986 <_vfiprintf_r+0x20a>
 8005906:	4b26      	ldr	r3, [pc, #152]	@ (80059a0 <_vfiprintf_r+0x224>)
 8005908:	bb1b      	cbnz	r3, 8005952 <_vfiprintf_r+0x1d6>
 800590a:	9b03      	ldr	r3, [sp, #12]
 800590c:	3307      	adds	r3, #7
 800590e:	f023 0307 	bic.w	r3, r3, #7
 8005912:	3308      	adds	r3, #8
 8005914:	9303      	str	r3, [sp, #12]
 8005916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005918:	443b      	add	r3, r7
 800591a:	9309      	str	r3, [sp, #36]	@ 0x24
 800591c:	e76a      	b.n	80057f4 <_vfiprintf_r+0x78>
 800591e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005922:	460c      	mov	r4, r1
 8005924:	2001      	movs	r0, #1
 8005926:	e7a8      	b.n	800587a <_vfiprintf_r+0xfe>
 8005928:	2300      	movs	r3, #0
 800592a:	3401      	adds	r4, #1
 800592c:	9305      	str	r3, [sp, #20]
 800592e:	4619      	mov	r1, r3
 8005930:	f04f 0c0a 	mov.w	ip, #10
 8005934:	4620      	mov	r0, r4
 8005936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800593a:	3a30      	subs	r2, #48	@ 0x30
 800593c:	2a09      	cmp	r2, #9
 800593e:	d903      	bls.n	8005948 <_vfiprintf_r+0x1cc>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0c6      	beq.n	80058d2 <_vfiprintf_r+0x156>
 8005944:	9105      	str	r1, [sp, #20]
 8005946:	e7c4      	b.n	80058d2 <_vfiprintf_r+0x156>
 8005948:	fb0c 2101 	mla	r1, ip, r1, r2
 800594c:	4604      	mov	r4, r0
 800594e:	2301      	movs	r3, #1
 8005950:	e7f0      	b.n	8005934 <_vfiprintf_r+0x1b8>
 8005952:	ab03      	add	r3, sp, #12
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	462a      	mov	r2, r5
 8005958:	4b12      	ldr	r3, [pc, #72]	@ (80059a4 <_vfiprintf_r+0x228>)
 800595a:	a904      	add	r1, sp, #16
 800595c:	4630      	mov	r0, r6
 800595e:	f3af 8000 	nop.w
 8005962:	4607      	mov	r7, r0
 8005964:	1c78      	adds	r0, r7, #1
 8005966:	d1d6      	bne.n	8005916 <_vfiprintf_r+0x19a>
 8005968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800596a:	07d9      	lsls	r1, r3, #31
 800596c:	d405      	bmi.n	800597a <_vfiprintf_r+0x1fe>
 800596e:	89ab      	ldrh	r3, [r5, #12]
 8005970:	059a      	lsls	r2, r3, #22
 8005972:	d402      	bmi.n	800597a <_vfiprintf_r+0x1fe>
 8005974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005976:	f7ff fe7d 	bl	8005674 <__retarget_lock_release_recursive>
 800597a:	89ab      	ldrh	r3, [r5, #12]
 800597c:	065b      	lsls	r3, r3, #25
 800597e:	f53f af1f 	bmi.w	80057c0 <_vfiprintf_r+0x44>
 8005982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005984:	e71e      	b.n	80057c4 <_vfiprintf_r+0x48>
 8005986:	ab03      	add	r3, sp, #12
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	462a      	mov	r2, r5
 800598c:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <_vfiprintf_r+0x228>)
 800598e:	a904      	add	r1, sp, #16
 8005990:	4630      	mov	r0, r6
 8005992:	f000 f879 	bl	8005a88 <_printf_i>
 8005996:	e7e4      	b.n	8005962 <_vfiprintf_r+0x1e6>
 8005998:	080060e4 	.word	0x080060e4
 800599c:	080060ee 	.word	0x080060ee
 80059a0:	00000000 	.word	0x00000000
 80059a4:	08005757 	.word	0x08005757
 80059a8:	080060ea 	.word	0x080060ea

080059ac <_printf_common>:
 80059ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b0:	4616      	mov	r6, r2
 80059b2:	4698      	mov	r8, r3
 80059b4:	688a      	ldr	r2, [r1, #8]
 80059b6:	690b      	ldr	r3, [r1, #16]
 80059b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059bc:	4293      	cmp	r3, r2
 80059be:	bfb8      	it	lt
 80059c0:	4613      	movlt	r3, r2
 80059c2:	6033      	str	r3, [r6, #0]
 80059c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059c8:	4607      	mov	r7, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	b10a      	cbz	r2, 80059d2 <_printf_common+0x26>
 80059ce:	3301      	adds	r3, #1
 80059d0:	6033      	str	r3, [r6, #0]
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	0699      	lsls	r1, r3, #26
 80059d6:	bf42      	ittt	mi
 80059d8:	6833      	ldrmi	r3, [r6, #0]
 80059da:	3302      	addmi	r3, #2
 80059dc:	6033      	strmi	r3, [r6, #0]
 80059de:	6825      	ldr	r5, [r4, #0]
 80059e0:	f015 0506 	ands.w	r5, r5, #6
 80059e4:	d106      	bne.n	80059f4 <_printf_common+0x48>
 80059e6:	f104 0a19 	add.w	sl, r4, #25
 80059ea:	68e3      	ldr	r3, [r4, #12]
 80059ec:	6832      	ldr	r2, [r6, #0]
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	42ab      	cmp	r3, r5
 80059f2:	dc26      	bgt.n	8005a42 <_printf_common+0x96>
 80059f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	3b00      	subs	r3, #0
 80059fc:	bf18      	it	ne
 80059fe:	2301      	movne	r3, #1
 8005a00:	0692      	lsls	r2, r2, #26
 8005a02:	d42b      	bmi.n	8005a5c <_printf_common+0xb0>
 8005a04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a08:	4641      	mov	r1, r8
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	47c8      	blx	r9
 8005a0e:	3001      	adds	r0, #1
 8005a10:	d01e      	beq.n	8005a50 <_printf_common+0xa4>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	6922      	ldr	r2, [r4, #16]
 8005a16:	f003 0306 	and.w	r3, r3, #6
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	bf02      	ittt	eq
 8005a1e:	68e5      	ldreq	r5, [r4, #12]
 8005a20:	6833      	ldreq	r3, [r6, #0]
 8005a22:	1aed      	subeq	r5, r5, r3
 8005a24:	68a3      	ldr	r3, [r4, #8]
 8005a26:	bf0c      	ite	eq
 8005a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a2c:	2500      	movne	r5, #0
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	bfc4      	itt	gt
 8005a32:	1a9b      	subgt	r3, r3, r2
 8005a34:	18ed      	addgt	r5, r5, r3
 8005a36:	2600      	movs	r6, #0
 8005a38:	341a      	adds	r4, #26
 8005a3a:	42b5      	cmp	r5, r6
 8005a3c:	d11a      	bne.n	8005a74 <_printf_common+0xc8>
 8005a3e:	2000      	movs	r0, #0
 8005a40:	e008      	b.n	8005a54 <_printf_common+0xa8>
 8005a42:	2301      	movs	r3, #1
 8005a44:	4652      	mov	r2, sl
 8005a46:	4641      	mov	r1, r8
 8005a48:	4638      	mov	r0, r7
 8005a4a:	47c8      	blx	r9
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d103      	bne.n	8005a58 <_printf_common+0xac>
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a58:	3501      	adds	r5, #1
 8005a5a:	e7c6      	b.n	80059ea <_printf_common+0x3e>
 8005a5c:	18e1      	adds	r1, r4, r3
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	2030      	movs	r0, #48	@ 0x30
 8005a62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a66:	4422      	add	r2, r4
 8005a68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a70:	3302      	adds	r3, #2
 8005a72:	e7c7      	b.n	8005a04 <_printf_common+0x58>
 8005a74:	2301      	movs	r3, #1
 8005a76:	4622      	mov	r2, r4
 8005a78:	4641      	mov	r1, r8
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	47c8      	blx	r9
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d0e6      	beq.n	8005a50 <_printf_common+0xa4>
 8005a82:	3601      	adds	r6, #1
 8005a84:	e7d9      	b.n	8005a3a <_printf_common+0x8e>
	...

08005a88 <_printf_i>:
 8005a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8c:	7e0f      	ldrb	r7, [r1, #24]
 8005a8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a90:	2f78      	cmp	r7, #120	@ 0x78
 8005a92:	4691      	mov	r9, r2
 8005a94:	4680      	mov	r8, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	469a      	mov	sl, r3
 8005a9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a9e:	d807      	bhi.n	8005ab0 <_printf_i+0x28>
 8005aa0:	2f62      	cmp	r7, #98	@ 0x62
 8005aa2:	d80a      	bhi.n	8005aba <_printf_i+0x32>
 8005aa4:	2f00      	cmp	r7, #0
 8005aa6:	f000 80d2 	beq.w	8005c4e <_printf_i+0x1c6>
 8005aaa:	2f58      	cmp	r7, #88	@ 0x58
 8005aac:	f000 80b9 	beq.w	8005c22 <_printf_i+0x19a>
 8005ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ab8:	e03a      	b.n	8005b30 <_printf_i+0xa8>
 8005aba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005abe:	2b15      	cmp	r3, #21
 8005ac0:	d8f6      	bhi.n	8005ab0 <_printf_i+0x28>
 8005ac2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ac8 <_printf_i+0x40>)
 8005ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ac8:	08005b21 	.word	0x08005b21
 8005acc:	08005b35 	.word	0x08005b35
 8005ad0:	08005ab1 	.word	0x08005ab1
 8005ad4:	08005ab1 	.word	0x08005ab1
 8005ad8:	08005ab1 	.word	0x08005ab1
 8005adc:	08005ab1 	.word	0x08005ab1
 8005ae0:	08005b35 	.word	0x08005b35
 8005ae4:	08005ab1 	.word	0x08005ab1
 8005ae8:	08005ab1 	.word	0x08005ab1
 8005aec:	08005ab1 	.word	0x08005ab1
 8005af0:	08005ab1 	.word	0x08005ab1
 8005af4:	08005c35 	.word	0x08005c35
 8005af8:	08005b5f 	.word	0x08005b5f
 8005afc:	08005bef 	.word	0x08005bef
 8005b00:	08005ab1 	.word	0x08005ab1
 8005b04:	08005ab1 	.word	0x08005ab1
 8005b08:	08005c57 	.word	0x08005c57
 8005b0c:	08005ab1 	.word	0x08005ab1
 8005b10:	08005b5f 	.word	0x08005b5f
 8005b14:	08005ab1 	.word	0x08005ab1
 8005b18:	08005ab1 	.word	0x08005ab1
 8005b1c:	08005bf7 	.word	0x08005bf7
 8005b20:	6833      	ldr	r3, [r6, #0]
 8005b22:	1d1a      	adds	r2, r3, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6032      	str	r2, [r6, #0]
 8005b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b30:	2301      	movs	r3, #1
 8005b32:	e09d      	b.n	8005c70 <_printf_i+0x1e8>
 8005b34:	6833      	ldr	r3, [r6, #0]
 8005b36:	6820      	ldr	r0, [r4, #0]
 8005b38:	1d19      	adds	r1, r3, #4
 8005b3a:	6031      	str	r1, [r6, #0]
 8005b3c:	0606      	lsls	r6, r0, #24
 8005b3e:	d501      	bpl.n	8005b44 <_printf_i+0xbc>
 8005b40:	681d      	ldr	r5, [r3, #0]
 8005b42:	e003      	b.n	8005b4c <_printf_i+0xc4>
 8005b44:	0645      	lsls	r5, r0, #25
 8005b46:	d5fb      	bpl.n	8005b40 <_printf_i+0xb8>
 8005b48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	da03      	bge.n	8005b58 <_printf_i+0xd0>
 8005b50:	232d      	movs	r3, #45	@ 0x2d
 8005b52:	426d      	negs	r5, r5
 8005b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b58:	4859      	ldr	r0, [pc, #356]	@ (8005cc0 <_printf_i+0x238>)
 8005b5a:	230a      	movs	r3, #10
 8005b5c:	e011      	b.n	8005b82 <_printf_i+0xfa>
 8005b5e:	6821      	ldr	r1, [r4, #0]
 8005b60:	6833      	ldr	r3, [r6, #0]
 8005b62:	0608      	lsls	r0, r1, #24
 8005b64:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b68:	d402      	bmi.n	8005b70 <_printf_i+0xe8>
 8005b6a:	0649      	lsls	r1, r1, #25
 8005b6c:	bf48      	it	mi
 8005b6e:	b2ad      	uxthmi	r5, r5
 8005b70:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b72:	4853      	ldr	r0, [pc, #332]	@ (8005cc0 <_printf_i+0x238>)
 8005b74:	6033      	str	r3, [r6, #0]
 8005b76:	bf14      	ite	ne
 8005b78:	230a      	movne	r3, #10
 8005b7a:	2308      	moveq	r3, #8
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b82:	6866      	ldr	r6, [r4, #4]
 8005b84:	60a6      	str	r6, [r4, #8]
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	bfa2      	ittt	ge
 8005b8a:	6821      	ldrge	r1, [r4, #0]
 8005b8c:	f021 0104 	bicge.w	r1, r1, #4
 8005b90:	6021      	strge	r1, [r4, #0]
 8005b92:	b90d      	cbnz	r5, 8005b98 <_printf_i+0x110>
 8005b94:	2e00      	cmp	r6, #0
 8005b96:	d04b      	beq.n	8005c30 <_printf_i+0x1a8>
 8005b98:	4616      	mov	r6, r2
 8005b9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b9e:	fb03 5711 	mls	r7, r3, r1, r5
 8005ba2:	5dc7      	ldrb	r7, [r0, r7]
 8005ba4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ba8:	462f      	mov	r7, r5
 8005baa:	42bb      	cmp	r3, r7
 8005bac:	460d      	mov	r5, r1
 8005bae:	d9f4      	bls.n	8005b9a <_printf_i+0x112>
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d10b      	bne.n	8005bcc <_printf_i+0x144>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	07df      	lsls	r7, r3, #31
 8005bb8:	d508      	bpl.n	8005bcc <_printf_i+0x144>
 8005bba:	6923      	ldr	r3, [r4, #16]
 8005bbc:	6861      	ldr	r1, [r4, #4]
 8005bbe:	4299      	cmp	r1, r3
 8005bc0:	bfde      	ittt	le
 8005bc2:	2330      	movle	r3, #48	@ 0x30
 8005bc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bcc:	1b92      	subs	r2, r2, r6
 8005bce:	6122      	str	r2, [r4, #16]
 8005bd0:	f8cd a000 	str.w	sl, [sp]
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	aa03      	add	r2, sp, #12
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4640      	mov	r0, r8
 8005bdc:	f7ff fee6 	bl	80059ac <_printf_common>
 8005be0:	3001      	adds	r0, #1
 8005be2:	d14a      	bne.n	8005c7a <_printf_i+0x1f2>
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295
 8005be8:	b004      	add	sp, #16
 8005bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	f043 0320 	orr.w	r3, r3, #32
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	4833      	ldr	r0, [pc, #204]	@ (8005cc4 <_printf_i+0x23c>)
 8005bf8:	2778      	movs	r7, #120	@ 0x78
 8005bfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	6831      	ldr	r1, [r6, #0]
 8005c02:	061f      	lsls	r7, r3, #24
 8005c04:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c08:	d402      	bmi.n	8005c10 <_printf_i+0x188>
 8005c0a:	065f      	lsls	r7, r3, #25
 8005c0c:	bf48      	it	mi
 8005c0e:	b2ad      	uxthmi	r5, r5
 8005c10:	6031      	str	r1, [r6, #0]
 8005c12:	07d9      	lsls	r1, r3, #31
 8005c14:	bf44      	itt	mi
 8005c16:	f043 0320 	orrmi.w	r3, r3, #32
 8005c1a:	6023      	strmi	r3, [r4, #0]
 8005c1c:	b11d      	cbz	r5, 8005c26 <_printf_i+0x19e>
 8005c1e:	2310      	movs	r3, #16
 8005c20:	e7ac      	b.n	8005b7c <_printf_i+0xf4>
 8005c22:	4827      	ldr	r0, [pc, #156]	@ (8005cc0 <_printf_i+0x238>)
 8005c24:	e7e9      	b.n	8005bfa <_printf_i+0x172>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	f023 0320 	bic.w	r3, r3, #32
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	e7f6      	b.n	8005c1e <_printf_i+0x196>
 8005c30:	4616      	mov	r6, r2
 8005c32:	e7bd      	b.n	8005bb0 <_printf_i+0x128>
 8005c34:	6833      	ldr	r3, [r6, #0]
 8005c36:	6825      	ldr	r5, [r4, #0]
 8005c38:	6961      	ldr	r1, [r4, #20]
 8005c3a:	1d18      	adds	r0, r3, #4
 8005c3c:	6030      	str	r0, [r6, #0]
 8005c3e:	062e      	lsls	r6, r5, #24
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	d501      	bpl.n	8005c48 <_printf_i+0x1c0>
 8005c44:	6019      	str	r1, [r3, #0]
 8005c46:	e002      	b.n	8005c4e <_printf_i+0x1c6>
 8005c48:	0668      	lsls	r0, r5, #25
 8005c4a:	d5fb      	bpl.n	8005c44 <_printf_i+0x1bc>
 8005c4c:	8019      	strh	r1, [r3, #0]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	4616      	mov	r6, r2
 8005c54:	e7bc      	b.n	8005bd0 <_printf_i+0x148>
 8005c56:	6833      	ldr	r3, [r6, #0]
 8005c58:	1d1a      	adds	r2, r3, #4
 8005c5a:	6032      	str	r2, [r6, #0]
 8005c5c:	681e      	ldr	r6, [r3, #0]
 8005c5e:	6862      	ldr	r2, [r4, #4]
 8005c60:	2100      	movs	r1, #0
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7fa fabc 	bl	80001e0 <memchr>
 8005c68:	b108      	cbz	r0, 8005c6e <_printf_i+0x1e6>
 8005c6a:	1b80      	subs	r0, r0, r6
 8005c6c:	6060      	str	r0, [r4, #4]
 8005c6e:	6863      	ldr	r3, [r4, #4]
 8005c70:	6123      	str	r3, [r4, #16]
 8005c72:	2300      	movs	r3, #0
 8005c74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c78:	e7aa      	b.n	8005bd0 <_printf_i+0x148>
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	4632      	mov	r2, r6
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4640      	mov	r0, r8
 8005c82:	47d0      	blx	sl
 8005c84:	3001      	adds	r0, #1
 8005c86:	d0ad      	beq.n	8005be4 <_printf_i+0x15c>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	079b      	lsls	r3, r3, #30
 8005c8c:	d413      	bmi.n	8005cb6 <_printf_i+0x22e>
 8005c8e:	68e0      	ldr	r0, [r4, #12]
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	4298      	cmp	r0, r3
 8005c94:	bfb8      	it	lt
 8005c96:	4618      	movlt	r0, r3
 8005c98:	e7a6      	b.n	8005be8 <_printf_i+0x160>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	47d0      	blx	sl
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d09d      	beq.n	8005be4 <_printf_i+0x15c>
 8005ca8:	3501      	adds	r5, #1
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	9903      	ldr	r1, [sp, #12]
 8005cae:	1a5b      	subs	r3, r3, r1
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	dcf2      	bgt.n	8005c9a <_printf_i+0x212>
 8005cb4:	e7eb      	b.n	8005c8e <_printf_i+0x206>
 8005cb6:	2500      	movs	r5, #0
 8005cb8:	f104 0619 	add.w	r6, r4, #25
 8005cbc:	e7f5      	b.n	8005caa <_printf_i+0x222>
 8005cbe:	bf00      	nop
 8005cc0:	080060f5 	.word	0x080060f5
 8005cc4:	08006106 	.word	0x08006106

08005cc8 <__sflush_r>:
 8005cc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd0:	0716      	lsls	r6, r2, #28
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	d454      	bmi.n	8005d82 <__sflush_r+0xba>
 8005cd8:	684b      	ldr	r3, [r1, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	dc02      	bgt.n	8005ce4 <__sflush_r+0x1c>
 8005cde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dd48      	ble.n	8005d76 <__sflush_r+0xae>
 8005ce4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ce6:	2e00      	cmp	r6, #0
 8005ce8:	d045      	beq.n	8005d76 <__sflush_r+0xae>
 8005cea:	2300      	movs	r3, #0
 8005cec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005cf0:	682f      	ldr	r7, [r5, #0]
 8005cf2:	6a21      	ldr	r1, [r4, #32]
 8005cf4:	602b      	str	r3, [r5, #0]
 8005cf6:	d030      	beq.n	8005d5a <__sflush_r+0x92>
 8005cf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	0759      	lsls	r1, r3, #29
 8005cfe:	d505      	bpl.n	8005d0c <__sflush_r+0x44>
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	1ad2      	subs	r2, r2, r3
 8005d04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d06:	b10b      	cbz	r3, 8005d0c <__sflush_r+0x44>
 8005d08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d0a:	1ad2      	subs	r2, r2, r3
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d10:	6a21      	ldr	r1, [r4, #32]
 8005d12:	4628      	mov	r0, r5
 8005d14:	47b0      	blx	r6
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	d106      	bne.n	8005d2a <__sflush_r+0x62>
 8005d1c:	6829      	ldr	r1, [r5, #0]
 8005d1e:	291d      	cmp	r1, #29
 8005d20:	d82b      	bhi.n	8005d7a <__sflush_r+0xb2>
 8005d22:	4a2a      	ldr	r2, [pc, #168]	@ (8005dcc <__sflush_r+0x104>)
 8005d24:	410a      	asrs	r2, r1
 8005d26:	07d6      	lsls	r6, r2, #31
 8005d28:	d427      	bmi.n	8005d7a <__sflush_r+0xb2>
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	6062      	str	r2, [r4, #4]
 8005d2e:	04d9      	lsls	r1, r3, #19
 8005d30:	6922      	ldr	r2, [r4, #16]
 8005d32:	6022      	str	r2, [r4, #0]
 8005d34:	d504      	bpl.n	8005d40 <__sflush_r+0x78>
 8005d36:	1c42      	adds	r2, r0, #1
 8005d38:	d101      	bne.n	8005d3e <__sflush_r+0x76>
 8005d3a:	682b      	ldr	r3, [r5, #0]
 8005d3c:	b903      	cbnz	r3, 8005d40 <__sflush_r+0x78>
 8005d3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d42:	602f      	str	r7, [r5, #0]
 8005d44:	b1b9      	cbz	r1, 8005d76 <__sflush_r+0xae>
 8005d46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d4a:	4299      	cmp	r1, r3
 8005d4c:	d002      	beq.n	8005d54 <__sflush_r+0x8c>
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f7ff fca0 	bl	8005694 <_free_r>
 8005d54:	2300      	movs	r3, #0
 8005d56:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d58:	e00d      	b.n	8005d76 <__sflush_r+0xae>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	47b0      	blx	r6
 8005d60:	4602      	mov	r2, r0
 8005d62:	1c50      	adds	r0, r2, #1
 8005d64:	d1c9      	bne.n	8005cfa <__sflush_r+0x32>
 8005d66:	682b      	ldr	r3, [r5, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0c6      	beq.n	8005cfa <__sflush_r+0x32>
 8005d6c:	2b1d      	cmp	r3, #29
 8005d6e:	d001      	beq.n	8005d74 <__sflush_r+0xac>
 8005d70:	2b16      	cmp	r3, #22
 8005d72:	d11e      	bne.n	8005db2 <__sflush_r+0xea>
 8005d74:	602f      	str	r7, [r5, #0]
 8005d76:	2000      	movs	r0, #0
 8005d78:	e022      	b.n	8005dc0 <__sflush_r+0xf8>
 8005d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d7e:	b21b      	sxth	r3, r3
 8005d80:	e01b      	b.n	8005dba <__sflush_r+0xf2>
 8005d82:	690f      	ldr	r7, [r1, #16]
 8005d84:	2f00      	cmp	r7, #0
 8005d86:	d0f6      	beq.n	8005d76 <__sflush_r+0xae>
 8005d88:	0793      	lsls	r3, r2, #30
 8005d8a:	680e      	ldr	r6, [r1, #0]
 8005d8c:	bf08      	it	eq
 8005d8e:	694b      	ldreq	r3, [r1, #20]
 8005d90:	600f      	str	r7, [r1, #0]
 8005d92:	bf18      	it	ne
 8005d94:	2300      	movne	r3, #0
 8005d96:	eba6 0807 	sub.w	r8, r6, r7
 8005d9a:	608b      	str	r3, [r1, #8]
 8005d9c:	f1b8 0f00 	cmp.w	r8, #0
 8005da0:	dde9      	ble.n	8005d76 <__sflush_r+0xae>
 8005da2:	6a21      	ldr	r1, [r4, #32]
 8005da4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005da6:	4643      	mov	r3, r8
 8005da8:	463a      	mov	r2, r7
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b0      	blx	r6
 8005dae:	2800      	cmp	r0, #0
 8005db0:	dc08      	bgt.n	8005dc4 <__sflush_r+0xfc>
 8005db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dba:	81a3      	strh	r3, [r4, #12]
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dc4:	4407      	add	r7, r0
 8005dc6:	eba8 0800 	sub.w	r8, r8, r0
 8005dca:	e7e7      	b.n	8005d9c <__sflush_r+0xd4>
 8005dcc:	dfbffffe 	.word	0xdfbffffe

08005dd0 <_fflush_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	690b      	ldr	r3, [r1, #16]
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	b913      	cbnz	r3, 8005de0 <_fflush_r+0x10>
 8005dda:	2500      	movs	r5, #0
 8005ddc:	4628      	mov	r0, r5
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	b118      	cbz	r0, 8005dea <_fflush_r+0x1a>
 8005de2:	6a03      	ldr	r3, [r0, #32]
 8005de4:	b90b      	cbnz	r3, 8005dea <_fflush_r+0x1a>
 8005de6:	f7ff fb2f 	bl	8005448 <__sinit>
 8005dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0f3      	beq.n	8005dda <_fflush_r+0xa>
 8005df2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005df4:	07d0      	lsls	r0, r2, #31
 8005df6:	d404      	bmi.n	8005e02 <_fflush_r+0x32>
 8005df8:	0599      	lsls	r1, r3, #22
 8005dfa:	d402      	bmi.n	8005e02 <_fflush_r+0x32>
 8005dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dfe:	f7ff fc38 	bl	8005672 <__retarget_lock_acquire_recursive>
 8005e02:	4628      	mov	r0, r5
 8005e04:	4621      	mov	r1, r4
 8005e06:	f7ff ff5f 	bl	8005cc8 <__sflush_r>
 8005e0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e0c:	07da      	lsls	r2, r3, #31
 8005e0e:	4605      	mov	r5, r0
 8005e10:	d4e4      	bmi.n	8005ddc <_fflush_r+0xc>
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	059b      	lsls	r3, r3, #22
 8005e16:	d4e1      	bmi.n	8005ddc <_fflush_r+0xc>
 8005e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e1a:	f7ff fc2b 	bl	8005674 <__retarget_lock_release_recursive>
 8005e1e:	e7dd      	b.n	8005ddc <_fflush_r+0xc>

08005e20 <__swbuf_r>:
 8005e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e22:	460e      	mov	r6, r1
 8005e24:	4614      	mov	r4, r2
 8005e26:	4605      	mov	r5, r0
 8005e28:	b118      	cbz	r0, 8005e32 <__swbuf_r+0x12>
 8005e2a:	6a03      	ldr	r3, [r0, #32]
 8005e2c:	b90b      	cbnz	r3, 8005e32 <__swbuf_r+0x12>
 8005e2e:	f7ff fb0b 	bl	8005448 <__sinit>
 8005e32:	69a3      	ldr	r3, [r4, #24]
 8005e34:	60a3      	str	r3, [r4, #8]
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	071a      	lsls	r2, r3, #28
 8005e3a:	d501      	bpl.n	8005e40 <__swbuf_r+0x20>
 8005e3c:	6923      	ldr	r3, [r4, #16]
 8005e3e:	b943      	cbnz	r3, 8005e52 <__swbuf_r+0x32>
 8005e40:	4621      	mov	r1, r4
 8005e42:	4628      	mov	r0, r5
 8005e44:	f000 f82a 	bl	8005e9c <__swsetup_r>
 8005e48:	b118      	cbz	r0, 8005e52 <__swbuf_r+0x32>
 8005e4a:	f04f 37ff 	mov.w	r7, #4294967295
 8005e4e:	4638      	mov	r0, r7
 8005e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	6922      	ldr	r2, [r4, #16]
 8005e56:	1a98      	subs	r0, r3, r2
 8005e58:	6963      	ldr	r3, [r4, #20]
 8005e5a:	b2f6      	uxtb	r6, r6
 8005e5c:	4283      	cmp	r3, r0
 8005e5e:	4637      	mov	r7, r6
 8005e60:	dc05      	bgt.n	8005e6e <__swbuf_r+0x4e>
 8005e62:	4621      	mov	r1, r4
 8005e64:	4628      	mov	r0, r5
 8005e66:	f7ff ffb3 	bl	8005dd0 <_fflush_r>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d1ed      	bne.n	8005e4a <__swbuf_r+0x2a>
 8005e6e:	68a3      	ldr	r3, [r4, #8]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	60a3      	str	r3, [r4, #8]
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	6022      	str	r2, [r4, #0]
 8005e7a:	701e      	strb	r6, [r3, #0]
 8005e7c:	6962      	ldr	r2, [r4, #20]
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d004      	beq.n	8005e8e <__swbuf_r+0x6e>
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	07db      	lsls	r3, r3, #31
 8005e88:	d5e1      	bpl.n	8005e4e <__swbuf_r+0x2e>
 8005e8a:	2e0a      	cmp	r6, #10
 8005e8c:	d1df      	bne.n	8005e4e <__swbuf_r+0x2e>
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4628      	mov	r0, r5
 8005e92:	f7ff ff9d 	bl	8005dd0 <_fflush_r>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d0d9      	beq.n	8005e4e <__swbuf_r+0x2e>
 8005e9a:	e7d6      	b.n	8005e4a <__swbuf_r+0x2a>

08005e9c <__swsetup_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4b29      	ldr	r3, [pc, #164]	@ (8005f44 <__swsetup_r+0xa8>)
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	b118      	cbz	r0, 8005eb0 <__swsetup_r+0x14>
 8005ea8:	6a03      	ldr	r3, [r0, #32]
 8005eaa:	b90b      	cbnz	r3, 8005eb0 <__swsetup_r+0x14>
 8005eac:	f7ff facc 	bl	8005448 <__sinit>
 8005eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb4:	0719      	lsls	r1, r3, #28
 8005eb6:	d422      	bmi.n	8005efe <__swsetup_r+0x62>
 8005eb8:	06da      	lsls	r2, r3, #27
 8005eba:	d407      	bmi.n	8005ecc <__swsetup_r+0x30>
 8005ebc:	2209      	movs	r2, #9
 8005ebe:	602a      	str	r2, [r5, #0]
 8005ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ec4:	81a3      	strh	r3, [r4, #12]
 8005ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eca:	e033      	b.n	8005f34 <__swsetup_r+0x98>
 8005ecc:	0758      	lsls	r0, r3, #29
 8005ece:	d512      	bpl.n	8005ef6 <__swsetup_r+0x5a>
 8005ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ed2:	b141      	cbz	r1, 8005ee6 <__swsetup_r+0x4a>
 8005ed4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ed8:	4299      	cmp	r1, r3
 8005eda:	d002      	beq.n	8005ee2 <__swsetup_r+0x46>
 8005edc:	4628      	mov	r0, r5
 8005ede:	f7ff fbd9 	bl	8005694 <_free_r>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005eec:	81a3      	strh	r3, [r4, #12]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6063      	str	r3, [r4, #4]
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	f043 0308 	orr.w	r3, r3, #8
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	6923      	ldr	r3, [r4, #16]
 8005f00:	b94b      	cbnz	r3, 8005f16 <__swsetup_r+0x7a>
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f0c:	d003      	beq.n	8005f16 <__swsetup_r+0x7a>
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 f83f 	bl	8005f94 <__smakebuf_r>
 8005f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f1a:	f013 0201 	ands.w	r2, r3, #1
 8005f1e:	d00a      	beq.n	8005f36 <__swsetup_r+0x9a>
 8005f20:	2200      	movs	r2, #0
 8005f22:	60a2      	str	r2, [r4, #8]
 8005f24:	6962      	ldr	r2, [r4, #20]
 8005f26:	4252      	negs	r2, r2
 8005f28:	61a2      	str	r2, [r4, #24]
 8005f2a:	6922      	ldr	r2, [r4, #16]
 8005f2c:	b942      	cbnz	r2, 8005f40 <__swsetup_r+0xa4>
 8005f2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f32:	d1c5      	bne.n	8005ec0 <__swsetup_r+0x24>
 8005f34:	bd38      	pop	{r3, r4, r5, pc}
 8005f36:	0799      	lsls	r1, r3, #30
 8005f38:	bf58      	it	pl
 8005f3a:	6962      	ldrpl	r2, [r4, #20]
 8005f3c:	60a2      	str	r2, [r4, #8]
 8005f3e:	e7f4      	b.n	8005f2a <__swsetup_r+0x8e>
 8005f40:	2000      	movs	r0, #0
 8005f42:	e7f7      	b.n	8005f34 <__swsetup_r+0x98>
 8005f44:	20000018 	.word	0x20000018

08005f48 <__swhatbuf_r>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f50:	2900      	cmp	r1, #0
 8005f52:	b096      	sub	sp, #88	@ 0x58
 8005f54:	4615      	mov	r5, r2
 8005f56:	461e      	mov	r6, r3
 8005f58:	da0d      	bge.n	8005f76 <__swhatbuf_r+0x2e>
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f60:	f04f 0100 	mov.w	r1, #0
 8005f64:	bf14      	ite	ne
 8005f66:	2340      	movne	r3, #64	@ 0x40
 8005f68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	6031      	str	r1, [r6, #0]
 8005f70:	602b      	str	r3, [r5, #0]
 8005f72:	b016      	add	sp, #88	@ 0x58
 8005f74:	bd70      	pop	{r4, r5, r6, pc}
 8005f76:	466a      	mov	r2, sp
 8005f78:	f000 f848 	bl	800600c <_fstat_r>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	dbec      	blt.n	8005f5a <__swhatbuf_r+0x12>
 8005f80:	9901      	ldr	r1, [sp, #4]
 8005f82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f8a:	4259      	negs	r1, r3
 8005f8c:	4159      	adcs	r1, r3
 8005f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f92:	e7eb      	b.n	8005f6c <__swhatbuf_r+0x24>

08005f94 <__smakebuf_r>:
 8005f94:	898b      	ldrh	r3, [r1, #12]
 8005f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f98:	079d      	lsls	r5, r3, #30
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	d507      	bpl.n	8005fb0 <__smakebuf_r+0x1c>
 8005fa0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	6123      	str	r3, [r4, #16]
 8005fa8:	2301      	movs	r3, #1
 8005faa:	6163      	str	r3, [r4, #20]
 8005fac:	b003      	add	sp, #12
 8005fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb0:	ab01      	add	r3, sp, #4
 8005fb2:	466a      	mov	r2, sp
 8005fb4:	f7ff ffc8 	bl	8005f48 <__swhatbuf_r>
 8005fb8:	9f00      	ldr	r7, [sp, #0]
 8005fba:	4605      	mov	r5, r0
 8005fbc:	4639      	mov	r1, r7
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f7ff f92a 	bl	8005218 <_malloc_r>
 8005fc4:	b948      	cbnz	r0, 8005fda <__smakebuf_r+0x46>
 8005fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fca:	059a      	lsls	r2, r3, #22
 8005fcc:	d4ee      	bmi.n	8005fac <__smakebuf_r+0x18>
 8005fce:	f023 0303 	bic.w	r3, r3, #3
 8005fd2:	f043 0302 	orr.w	r3, r3, #2
 8005fd6:	81a3      	strh	r3, [r4, #12]
 8005fd8:	e7e2      	b.n	8005fa0 <__smakebuf_r+0xc>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	6020      	str	r0, [r4, #0]
 8005fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	9b01      	ldr	r3, [sp, #4]
 8005fe6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005fea:	b15b      	cbz	r3, 8006004 <__smakebuf_r+0x70>
 8005fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f000 f81d 	bl	8006030 <_isatty_r>
 8005ff6:	b128      	cbz	r0, 8006004 <__smakebuf_r+0x70>
 8005ff8:	89a3      	ldrh	r3, [r4, #12]
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	81a3      	strh	r3, [r4, #12]
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	431d      	orrs	r5, r3
 8006008:	81a5      	strh	r5, [r4, #12]
 800600a:	e7cf      	b.n	8005fac <__smakebuf_r+0x18>

0800600c <_fstat_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4d07      	ldr	r5, [pc, #28]	@ (800602c <_fstat_r+0x20>)
 8006010:	2300      	movs	r3, #0
 8006012:	4604      	mov	r4, r0
 8006014:	4608      	mov	r0, r1
 8006016:	4611      	mov	r1, r2
 8006018:	602b      	str	r3, [r5, #0]
 800601a:	f7fa fbc8 	bl	80007ae <_fstat>
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	d102      	bne.n	8006028 <_fstat_r+0x1c>
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	b103      	cbz	r3, 8006028 <_fstat_r+0x1c>
 8006026:	6023      	str	r3, [r4, #0]
 8006028:	bd38      	pop	{r3, r4, r5, pc}
 800602a:	bf00      	nop
 800602c:	20000524 	.word	0x20000524

08006030 <_isatty_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4d06      	ldr	r5, [pc, #24]	@ (800604c <_isatty_r+0x1c>)
 8006034:	2300      	movs	r3, #0
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	602b      	str	r3, [r5, #0]
 800603c:	f7fa fbc7 	bl	80007ce <_isatty>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_isatty_r+0x1a>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_isatty_r+0x1a>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	20000524 	.word	0x20000524

08006050 <_init>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	bf00      	nop
 8006054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006056:	bc08      	pop	{r3}
 8006058:	469e      	mov	lr, r3
 800605a:	4770      	bx	lr

0800605c <_fini>:
 800605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605e:	bf00      	nop
 8006060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006062:	bc08      	pop	{r3}
 8006064:	469e      	mov	lr, r3
 8006066:	4770      	bx	lr


Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f38  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080040cc  080040cc  000050cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004104  08004104  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004104  08004104  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004104  08004104  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004104  08004104  00005104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004108  08004108  00005108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800410c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000001d4  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8d9  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002196  00000000  00000000  00011915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  00013ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000636  00000000  00000000  000142f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002057a  00000000  00000000  0001492e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de78  00000000  00000000  00034ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfc52  00000000  00000000  00042d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102972  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e98  00000000  00000000  001029b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00104850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080040b4 	.word	0x080040b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080040b4 	.word	0x080040b4

080001d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001da:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <MX_DMA_Init+0x38>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a0b      	ldr	r2, [pc, #44]	@ (800020c <MX_DMA_Init+0x38>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6153      	str	r3, [r2, #20]
 80001e6:	4b09      	ldr	r3, [pc, #36]	@ (800020c <MX_DMA_Init+0x38>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2100      	movs	r1, #0
 80001f6:	2010      	movs	r0, #16
 80001f8:	f000 fbb9 	bl	800096e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80001fc:	2010      	movs	r0, #16
 80001fe:	f000 fbd2 	bl	80009a6 <HAL_NVIC_EnableIRQ>

}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40021000 	.word	0x40021000

08000210 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b08a      	sub	sp, #40	@ 0x28
 8000214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000226:	4b4b      	ldr	r3, [pc, #300]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a4a      	ldr	r2, [pc, #296]	@ (8000354 <MX_GPIO_Init+0x144>)
 800022c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b48      	ldr	r3, [pc, #288]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800023a:	613b      	str	r3, [r7, #16]
 800023c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800023e:	4b45      	ldr	r3, [pc, #276]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a44      	ldr	r2, [pc, #272]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000244:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b42      	ldr	r3, [pc, #264]	@ (8000354 <MX_GPIO_Init+0x144>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000256:	4b3f      	ldr	r3, [pc, #252]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	4a3e      	ldr	r2, [pc, #248]	@ (8000354 <MX_GPIO_Init+0x144>)
 800025c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000260:	6153      	str	r3, [r2, #20]
 8000262:	4b3c      	ldr	r3, [pc, #240]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800026a:	60bb      	str	r3, [r7, #8]
 800026c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	4b39      	ldr	r3, [pc, #228]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a38      	ldr	r2, [pc, #224]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000278:	6153      	str	r3, [r2, #20]
 800027a:	4b36      	ldr	r3, [pc, #216]	@ (8000354 <MX_GPIO_Init+0x144>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000282:	607b      	str	r3, [r7, #4]
 8000284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000286:	4b33      	ldr	r3, [pc, #204]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a32      	ldr	r2, [pc, #200]	@ (8000354 <MX_GPIO_Init+0x144>)
 800028c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b30      	ldr	r3, [pc, #192]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2120      	movs	r1, #32
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f000 ff51 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80002b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	4619      	mov	r1, r3
 80002c0:	4825      	ldr	r0, [pc, #148]	@ (8000358 <MX_GPIO_Init+0x148>)
 80002c2:	f000 fdb9 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002c6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80002ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002cc:	2303      	movs	r3, #3
 80002ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	4619      	mov	r1, r3
 80002da:	481f      	ldr	r0, [pc, #124]	@ (8000358 <MX_GPIO_Init+0x148>)
 80002dc:	f000 fdac 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80002e0:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 80002e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e6:	2303      	movs	r3, #3
 80002e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4619      	mov	r1, r3
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f8:	f000 fd9e 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002fc:	2320      	movs	r3, #32
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000300:	2301      	movs	r3, #1
 8000302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	2300      	movs	r3, #0
 8000306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000308:	2300      	movs	r3, #0
 800030a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	4619      	mov	r1, r3
 8000312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000316:	f000 fd8f 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800031a:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 800031e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000320:	2303      	movs	r3, #3
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	4619      	mov	r1, r3
 800032e:	480b      	ldr	r0, [pc, #44]	@ (800035c <MX_GPIO_Init+0x14c>)
 8000330:	f000 fd82 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000334:	2304      	movs	r3, #4
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000338:	2303      	movs	r3, #3
 800033a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	4619      	mov	r1, r3
 8000346:	4806      	ldr	r0, [pc, #24]	@ (8000360 <MX_GPIO_Init+0x150>)
 8000348:	f000 fd76 	bl	8000e38 <HAL_GPIO_Init>

}
 800034c:	bf00      	nop
 800034e:	3728      	adds	r7, #40	@ 0x28
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000
 8000358:	48000800 	.word	0x48000800
 800035c:	48000400 	.word	0x48000400
 8000360:	48000c00 	.word	0x48000c00

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 f9c0 	bl	80006ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f812 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f7ff ff4e 	bl	8000210 <MX_GPIO_Init>
  MX_DMA_Init();
 8000374:	f7ff ff2e 	bl	80001d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000378:	f000 f8ea 	bl	8000550 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  serial_uart_receiveToIdle( &huart2 );
 800037c:	4804      	ldr	r0, [pc, #16]	@ (8000390 <main+0x2c>)
 800037e:	f003 fe27 	bl	8003fd0 <serial_uart_receiveToIdle>

  scheduler_init();
 8000382:	f003 fd61 	bl	8003e48 <scheduler_init>
  scheduler_run();
 8000386:	f003 fdc3 	bl	8003f10 <scheduler_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800038a:	bf00      	nop
 800038c:	e7fd      	b.n	800038a <main+0x26>
 800038e:	bf00      	nop
 8000390:	20000028 	.word	0x20000028

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b0a6      	sub	sp, #152	@ 0x98
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800039e:	2228      	movs	r2, #40	@ 0x28
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f003 fe5a 	bl	800405c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2258      	movs	r2, #88	@ 0x58
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f003 fe4c 	bl	800405c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c4:	2302      	movs	r3, #2
 80003c6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c8:	2301      	movs	r3, #1
 80003ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003cc:	2310      	movs	r3, #16
 80003ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 fedc 	bl	80011b0 <HAL_RCC_OscConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003fe:	f000 f827 	bl	8000450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	230f      	movs	r3, #15
 8000404:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000406:	2302      	movs	r3, #2
 8000408:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800040e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000412:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000418:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800041c:	2102      	movs	r1, #2
 800041e:	4618      	mov	r0, r3
 8000420:	f001 ff1a 	bl	8002258 <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800042a:	f000 f811 	bl	8000450 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800042e:	2302      	movs	r3, #2
 8000430:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4618      	mov	r0, r3
 800043a:	f002 f92d 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000444:	f000 f804 	bl	8000450 <Error_Handler>
  }
}
 8000448:	bf00      	nop
 800044a:	3798      	adds	r7, #152	@ 0x98
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <Error_Handler+0x8>

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <HAL_MspInit+0x44>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a0e      	ldr	r2, [pc, #56]	@ (80004a0 <HAL_MspInit+0x44>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <HAL_MspInit+0x44>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <HAL_MspInit+0x44>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a08      	ldr	r2, [pc, #32]	@ (80004a0 <HAL_MspInit+0x44>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <HAL_MspInit+0x44>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000492:	2007      	movs	r0, #7
 8000494:	f000 fa60 	bl	8000958 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40021000 	.word	0x40021000

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <NMI_Handler+0x4>

080004ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <HardFault_Handler+0x4>

080004b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <MemManage_Handler+0x4>

080004bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <BusFault_Handler+0x4>

080004c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <UsageFault_Handler+0x4>

080004cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fa:	f000 f93d 	bl	8000778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000508:	4802      	ldr	r0, [pc, #8]	@ (8000514 <DMA1_Channel6_IRQHandler+0x10>)
 800050a:	f000 fb88 	bl	8000c1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000b0 	.word	0x200000b0

08000518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800051c:	4802      	ldr	r0, [pc, #8]	@ (8000528 <USART2_IRQHandler+0x10>)
 800051e:	f002 fb27 	bl	8002b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000028 	.word	0x20000028

0800052c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <SystemInit+0x20>)
 8000532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000536:	4a05      	ldr	r2, [pc, #20]	@ (800054c <SystemInit+0x20>)
 8000538:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800053c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000554:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000556:	4a15      	ldr	r2, [pc, #84]	@ (80005ac <MX_USART2_UART_Init+0x5c>)
 8000558:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800055a:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 800055c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000560:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000562:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000576:	220c      	movs	r2, #12
 8000578:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000586:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <MX_USART2_UART_Init+0x58>)
 8000594:	f002 fa9e 	bl	8002ad4 <HAL_UART_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800059e:	f7ff ff57 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028
 80005ac:	40004400 	.word	0x40004400

080005b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a2e      	ldr	r2, [pc, #184]	@ (8000688 <HAL_UART_MspInit+0xd8>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d156      	bne.n	8000680 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005d2:	4b2e      	ldr	r3, [pc, #184]	@ (800068c <HAL_UART_MspInit+0xdc>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a2d      	ldr	r2, [pc, #180]	@ (800068c <HAL_UART_MspInit+0xdc>)
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b2b      	ldr	r3, [pc, #172]	@ (800068c <HAL_UART_MspInit+0xdc>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <HAL_UART_MspInit+0xdc>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a27      	ldr	r2, [pc, #156]	@ (800068c <HAL_UART_MspInit+0xdc>)
 80005f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b25      	ldr	r3, [pc, #148]	@ (800068c <HAL_UART_MspInit+0xdc>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000602:	230c      	movs	r3, #12
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	2302      	movs	r3, #2
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000612:	2307      	movs	r3, #7
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000620:	f000 fc0a 	bl	8000e38 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000624:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <HAL_UART_MspInit+0xe0>)
 8000626:	4a1b      	ldr	r2, [pc, #108]	@ (8000694 <HAL_UART_MspInit+0xe4>)
 8000628:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800062a:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <HAL_UART_MspInit+0xe0>)
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000630:	4b17      	ldr	r3, [pc, #92]	@ (8000690 <HAL_UART_MspInit+0xe0>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <HAL_UART_MspInit+0xe0>)
 8000638:	2280      	movs	r2, #128	@ 0x80
 800063a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800063c:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <HAL_UART_MspInit+0xe0>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <HAL_UART_MspInit+0xe0>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000648:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <HAL_UART_MspInit+0xe0>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <HAL_UART_MspInit+0xe0>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000654:	480e      	ldr	r0, [pc, #56]	@ (8000690 <HAL_UART_MspInit+0xe0>)
 8000656:	f000 f9c0 	bl	80009da <HAL_DMA_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000660:	f7ff fef6 	bl	8000450 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <HAL_UART_MspInit+0xe0>)
 8000668:	675a      	str	r2, [r3, #116]	@ 0x74
 800066a:	4a09      	ldr	r2, [pc, #36]	@ (8000690 <HAL_UART_MspInit+0xe0>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2026      	movs	r0, #38	@ 0x26
 8000676:	f000 f97a 	bl	800096e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800067a:	2026      	movs	r0, #38	@ 0x26
 800067c:	f000 f993 	bl	80009a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000680:	bf00      	nop
 8000682:	3728      	adds	r7, #40	@ 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40004400 	.word	0x40004400
 800068c:	40021000 	.word	0x40021000
 8000690:	200000b0 	.word	0x200000b0
 8000694:	4002006c 	.word	0x4002006c

08000698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000698:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800069c:	f7ff ff46 	bl	800052c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	@ (80006d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	@ (80006dc <LoopForever+0xe>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	@ (80006e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	@ (80006e4 <LoopForever+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c6:	f003 fcd1 	bl	800406c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ca:	f7ff fe4b 	bl	8000364 <main>

080006ce <LoopForever>:

LoopForever:
    b LoopForever
 80006ce:	e7fe      	b.n	80006ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006dc:	0800410c 	.word	0x0800410c
  ldr r2, =_sbss
 80006e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006e4:	200001e0 	.word	0x200001e0

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <HAL_Init+0x28>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a07      	ldr	r2, [pc, #28]	@ (8000714 <HAL_Init+0x28>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f92b 	bl	8000958 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000702:	2000      	movs	r0, #0
 8000704:	f000 f808 	bl	8000718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000708:	f7ff fea8 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40022000 	.word	0x40022000

08000718 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <HAL_InitTick+0x54>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <HAL_InitTick+0x58>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f943 	bl	80009c2 <HAL_SYSTICK_Config>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e00e      	b.n	8000764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d80a      	bhi.n	8000762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074c:	2200      	movs	r2, #0
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f000 f90b 	bl	800096e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000758:	4a06      	ldr	r2, [pc, #24]	@ (8000774 <HAL_InitTick+0x5c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	e000      	b.n	8000764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	20000008 	.word	0x20000008
 8000774:	20000004 	.word	0x20000004

08000778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <HAL_IncTick+0x20>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_IncTick+0x24>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a04      	ldr	r2, [pc, #16]	@ (800079c <HAL_IncTick+0x24>)
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000008 	.word	0x20000008
 800079c:	200000f4 	.word	0x200000f4

080007a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007a4:	4b03      	ldr	r3, [pc, #12]	@ (80007b4 <HAL_GetTick+0x14>)
 80007a6:	681b      	ldr	r3, [r3, #0]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	200000f4 	.word	0x200000f4

080007b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <__NVIC_SetPriorityGrouping+0x44>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007d4:	4013      	ands	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ea:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <__NVIC_SetPriorityGrouping+0x44>)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	60d3      	str	r3, [r2, #12]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000804:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <__NVIC_GetPriorityGrouping+0x18>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	f003 0307 	and.w	r3, r3, #7
}
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	2b00      	cmp	r3, #0
 800082c:	db0b      	blt.n	8000846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 021f 	and.w	r2, r3, #31
 8000834:	4907      	ldr	r1, [pc, #28]	@ (8000854 <__NVIC_EnableIRQ+0x38>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	095b      	lsrs	r3, r3, #5
 800083c:	2001      	movs	r0, #1
 800083e:	fa00 f202 	lsl.w	r2, r0, r2
 8000842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e100 	.word	0xe000e100

08000858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	db0a      	blt.n	8000882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	b2da      	uxtb	r2, r3
 8000870:	490c      	ldr	r1, [pc, #48]	@ (80008a4 <__NVIC_SetPriority+0x4c>)
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	0112      	lsls	r2, r2, #4
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	440b      	add	r3, r1
 800087c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000880:	e00a      	b.n	8000898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4908      	ldr	r1, [pc, #32]	@ (80008a8 <__NVIC_SetPriority+0x50>)
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	f003 030f 	and.w	r3, r3, #15
 800088e:	3b04      	subs	r3, #4
 8000890:	0112      	lsls	r2, r2, #4
 8000892:	b2d2      	uxtb	r2, r2
 8000894:	440b      	add	r3, r1
 8000896:	761a      	strb	r2, [r3, #24]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000e100 	.word	0xe000e100
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b089      	sub	sp, #36	@ 0x24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	f1c3 0307 	rsb	r3, r3, #7
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	bf28      	it	cs
 80008ca:	2304      	movcs	r3, #4
 80008cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3304      	adds	r3, #4
 80008d2:	2b06      	cmp	r3, #6
 80008d4:	d902      	bls.n	80008dc <NVIC_EncodePriority+0x30>
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3b03      	subs	r3, #3
 80008da:	e000      	b.n	80008de <NVIC_EncodePriority+0x32>
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	f04f 32ff 	mov.w	r2, #4294967295
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43da      	mvns	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	401a      	ands	r2, r3
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f4:	f04f 31ff 	mov.w	r1, #4294967295
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa01 f303 	lsl.w	r3, r1, r3
 80008fe:	43d9      	mvns	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	4313      	orrs	r3, r2
         );
}
 8000906:	4618      	mov	r0, r3
 8000908:	3724      	adds	r7, #36	@ 0x24
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000924:	d301      	bcc.n	800092a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000926:	2301      	movs	r3, #1
 8000928:	e00f      	b.n	800094a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092a:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <SysTick_Config+0x40>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000932:	210f      	movs	r1, #15
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	f7ff ff8e 	bl	8000858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800093c:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <SysTick_Config+0x40>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000942:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <SysTick_Config+0x40>)
 8000944:	2207      	movs	r2, #7
 8000946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	e000e010 	.word	0xe000e010

08000958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ff29 	bl	80007b8 <__NVIC_SetPriorityGrouping>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b086      	sub	sp, #24
 8000972:	af00      	add	r7, sp, #0
 8000974:	4603      	mov	r3, r0
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
 800097a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000980:	f7ff ff3e 	bl	8000800 <__NVIC_GetPriorityGrouping>
 8000984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	68b9      	ldr	r1, [r7, #8]
 800098a:	6978      	ldr	r0, [r7, #20]
 800098c:	f7ff ff8e 	bl	80008ac <NVIC_EncodePriority>
 8000990:	4602      	mov	r2, r0
 8000992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000996:	4611      	mov	r1, r2
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff5d 	bl	8000858 <__NVIC_SetPriority>
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff31 	bl	800081c <__NVIC_EnableIRQ>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff ffa2 	bl	8000914 <SysTick_Config>
 80009d0:	4603      	mov	r3, r0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d101      	bne.n	80009f0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	e037      	b.n	8000a60 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2202      	movs	r2, #2
 80009f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000a06:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000a0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f000 f9bc 	bl	8000dc0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2201      	movs	r2, #1
 8000a52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d101      	bne.n	8000a88 <HAL_DMA_Start_IT+0x20>
 8000a84:	2302      	movs	r3, #2
 8000a86:	e04a      	b.n	8000b1e <HAL_DMA_Start_IT+0xb6>
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d13a      	bne.n	8000b10 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f022 0201 	bic.w	r2, r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f000 f950 	bl	8000d64 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d008      	beq.n	8000ade <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 020e 	orr.w	r2, r2, #14
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	e00f      	b.n	8000afe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f042 020a 	orr.w	r2, r2, #10
 8000aec:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f022 0204 	bic.w	r2, r2, #4
 8000afc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f042 0201 	orr.w	r2, r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	e005      	b.n	8000b1c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e02e      	b.n	8000b96 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d008      	beq.n	8000b54 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2204      	movs	r2, #4
 8000b46:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e020      	b.n	8000b96 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 020e 	bic.w	r2, r2, #14
 8000b62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0201 	bic.w	r2, r2, #1
 8000b72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b82:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2201      	movs	r2, #1
 8000b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d005      	beq.n	8000bc4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2204      	movs	r2, #4
 8000bbc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e027      	b.n	8000c14 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 020e 	bic.w	r2, r2, #14
 8000bd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0201 	bic.w	r2, r2, #1
 8000be2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bec:	2101      	movs	r1, #1
 8000bee:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	4798      	blx	r3
    }
  }
  return status;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b084      	sub	sp, #16
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	409a      	lsls	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d024      	beq.n	8000c90 <HAL_DMA_IRQHandler+0x72>
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d01f      	beq.n	8000c90 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0320 	and.w	r3, r3, #32
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d107      	bne.n	8000c6e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 0204 	bic.w	r2, r2, #4
 8000c6c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c76:	2104      	movs	r1, #4
 8000c78:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d06a      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000c8e:	e065      	b.n	8000d5c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	2202      	movs	r2, #2
 8000c96:	409a      	lsls	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d02c      	beq.n	8000cfa <HAL_DMA_IRQHandler+0xdc>
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d027      	beq.n	8000cfa <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0320 	and.w	r3, r3, #32
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10b      	bne.n	8000cd0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 020a 	bic.w	r2, r2, #10
 8000cc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cd8:	2102      	movs	r1, #2
 8000cda:	fa01 f202 	lsl.w	r2, r1, r2
 8000cde:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d035      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000cf8:	e030      	b.n	8000d5c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	2208      	movs	r2, #8
 8000d00:	409a      	lsls	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4013      	ands	r3, r2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d028      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x13e>
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d023      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 020e 	bic.w	r2, r2, #14
 8000d22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2201      	movs	r2, #1
 8000d38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d004      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	4798      	blx	r3
    }
  }
}
 8000d5a:	e7ff      	b.n	8000d5c <HAL_DMA_IRQHandler+0x13e>
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b10      	cmp	r3, #16
 8000d90:	d108      	bne.n	8000da4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000da2:	e007      	b.n	8000db4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	60da      	str	r2, [r3, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <DMA_CalcBaseAndBitshift+0x60>)
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d80f      	bhi.n	8000df4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <DMA_CalcBaseAndBitshift+0x64>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <DMA_CalcBaseAndBitshift+0x68>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	009a      	lsls	r2, r3, #2
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <DMA_CalcBaseAndBitshift+0x6c>)
 8000df0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000df2:	e00e      	b.n	8000e12 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <DMA_CalcBaseAndBitshift+0x70>)
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <DMA_CalcBaseAndBitshift+0x68>)
 8000e00:	fba2 2303 	umull	r2, r3, r2, r3
 8000e04:	091b      	lsrs	r3, r3, #4
 8000e06:	009a      	lsls	r2, r3, #2
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a09      	ldr	r2, [pc, #36]	@ (8000e34 <DMA_CalcBaseAndBitshift+0x74>)
 8000e10:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40020407 	.word	0x40020407
 8000e24:	bffdfff8 	.word	0xbffdfff8
 8000e28:	cccccccd 	.word	0xcccccccd
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	bffdfbf8 	.word	0xbffdfbf8
 8000e34:	40020400 	.word	0x40020400

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	e160      	b.n	800110a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 8152 	beq.w	8001104 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d005      	beq.n	8000e78 <HAL_GPIO_Init+0x40>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d130      	bne.n	8000eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	f003 0201 	and.w	r2, r3, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d017      	beq.n	8000f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d123      	bne.n	8000f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	6939      	ldr	r1, [r7, #16]
 8000f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0203 	and.w	r2, r3, #3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 80ac 	beq.w	8001104 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fac:	4b5e      	ldr	r3, [pc, #376]	@ (8001128 <HAL_GPIO_Init+0x2f0>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a5d      	ldr	r2, [pc, #372]	@ (8001128 <HAL_GPIO_Init+0x2f0>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b5b      	ldr	r3, [pc, #364]	@ (8001128 <HAL_GPIO_Init+0x2f0>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc4:	4a59      	ldr	r2, [pc, #356]	@ (800112c <HAL_GPIO_Init+0x2f4>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fee:	d025      	beq.n	800103c <HAL_GPIO_Init+0x204>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a4f      	ldr	r2, [pc, #316]	@ (8001130 <HAL_GPIO_Init+0x2f8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d01f      	beq.n	8001038 <HAL_GPIO_Init+0x200>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a4e      	ldr	r2, [pc, #312]	@ (8001134 <HAL_GPIO_Init+0x2fc>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d019      	beq.n	8001034 <HAL_GPIO_Init+0x1fc>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a4d      	ldr	r2, [pc, #308]	@ (8001138 <HAL_GPIO_Init+0x300>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d013      	beq.n	8001030 <HAL_GPIO_Init+0x1f8>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a4c      	ldr	r2, [pc, #304]	@ (800113c <HAL_GPIO_Init+0x304>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d00d      	beq.n	800102c <HAL_GPIO_Init+0x1f4>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a4b      	ldr	r2, [pc, #300]	@ (8001140 <HAL_GPIO_Init+0x308>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d007      	beq.n	8001028 <HAL_GPIO_Init+0x1f0>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a4a      	ldr	r2, [pc, #296]	@ (8001144 <HAL_GPIO_Init+0x30c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d101      	bne.n	8001024 <HAL_GPIO_Init+0x1ec>
 8001020:	2306      	movs	r3, #6
 8001022:	e00c      	b.n	800103e <HAL_GPIO_Init+0x206>
 8001024:	2307      	movs	r3, #7
 8001026:	e00a      	b.n	800103e <HAL_GPIO_Init+0x206>
 8001028:	2305      	movs	r3, #5
 800102a:	e008      	b.n	800103e <HAL_GPIO_Init+0x206>
 800102c:	2304      	movs	r3, #4
 800102e:	e006      	b.n	800103e <HAL_GPIO_Init+0x206>
 8001030:	2303      	movs	r3, #3
 8001032:	e004      	b.n	800103e <HAL_GPIO_Init+0x206>
 8001034:	2302      	movs	r3, #2
 8001036:	e002      	b.n	800103e <HAL_GPIO_Init+0x206>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <HAL_GPIO_Init+0x206>
 800103c:	2300      	movs	r3, #0
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	f002 0203 	and.w	r2, r2, #3
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	4093      	lsls	r3, r2
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800104e:	4937      	ldr	r1, [pc, #220]	@ (800112c <HAL_GPIO_Init+0x2f4>)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105c:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <HAL_GPIO_Init+0x310>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001080:	4a31      	ldr	r2, [pc, #196]	@ (8001148 <HAL_GPIO_Init+0x310>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001086:	4b30      	ldr	r3, [pc, #192]	@ (8001148 <HAL_GPIO_Init+0x310>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010aa:	4a27      	ldr	r2, [pc, #156]	@ (8001148 <HAL_GPIO_Init+0x310>)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010b0:	4b25      	ldr	r3, [pc, #148]	@ (8001148 <HAL_GPIO_Init+0x310>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001148 <HAL_GPIO_Init+0x310>)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010da:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <HAL_GPIO_Init+0x310>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010fe:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <HAL_GPIO_Init+0x310>)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3301      	adds	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	fa22 f303 	lsr.w	r3, r2, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	f47f ae97 	bne.w	8000e48 <HAL_GPIO_Init+0x10>
  }
}
 800111a:	bf00      	nop
 800111c:	bf00      	nop
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40021000 	.word	0x40021000
 800112c:	40010000 	.word	0x40010000
 8001130:	48000400 	.word	0x48000400
 8001134:	48000800 	.word	0x48000800
 8001138:	48000c00 	.word	0x48000c00
 800113c:	48001000 	.word	0x48001000
 8001140:	48001400 	.word	0x48001400
 8001144:	48001800 	.word	0x48001800
 8001148:	40010400 	.word	0x40010400

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001168:	e002      	b.n	8001170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4013      	ands	r3, r2
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43d9      	mvns	r1, r3
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	400b      	ands	r3, r1
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	f001 b83a 	b.w	800224a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 816f 	beq.w	80014ca <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011ec:	4bb5      	ldr	r3, [pc, #724]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d00c      	beq.n	8001212 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011f8:	4bb2      	ldr	r3, [pc, #712]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b08      	cmp	r3, #8
 8001202:	d15c      	bne.n	80012be <HAL_RCC_OscConfig+0x10e>
 8001204:	4baf      	ldr	r3, [pc, #700]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001210:	d155      	bne.n	80012be <HAL_RCC_OscConfig+0x10e>
 8001212:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001216:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800121e:	fa93 f3a3 	rbit	r3, r3
 8001222:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001226:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	095b      	lsrs	r3, r3, #5
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d102      	bne.n	8001244 <HAL_RCC_OscConfig+0x94>
 800123e:	4ba1      	ldr	r3, [pc, #644]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	e015      	b.n	8001270 <HAL_RCC_OscConfig+0xc0>
 8001244:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001248:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001258:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800125c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001260:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800126c:	4b95      	ldr	r3, [pc, #596]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 800126e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001270:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001274:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001278:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800127c:	fa92 f2a2 	rbit	r2, r2
 8001280:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001284:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001288:	fab2 f282 	clz	r2, r2
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	f042 0220 	orr.w	r2, r2, #32
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	f002 021f 	and.w	r2, r2, #31
 8001298:	2101      	movs	r1, #1
 800129a:	fa01 f202 	lsl.w	r2, r1, r2
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 8111 	beq.w	80014c8 <HAL_RCC_OscConfig+0x318>
 80012a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f040 8108 	bne.w	80014c8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	f000 bfc6 	b.w	800224a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ce:	d106      	bne.n	80012de <HAL_RCC_OscConfig+0x12e>
 80012d0:	4b7c      	ldr	r3, [pc, #496]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a7b      	ldr	r2, [pc, #492]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e036      	b.n	800134c <HAL_RCC_OscConfig+0x19c>
 80012de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0x158>
 80012ee:	4b75      	ldr	r3, [pc, #468]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a74      	ldr	r2, [pc, #464]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 80012f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b72      	ldr	r3, [pc, #456]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a71      	ldr	r2, [pc, #452]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 8001300:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e021      	b.n	800134c <HAL_RCC_OscConfig+0x19c>
 8001308:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800130c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001318:	d10c      	bne.n	8001334 <HAL_RCC_OscConfig+0x184>
 800131a:	4b6a      	ldr	r3, [pc, #424]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a69      	ldr	r2, [pc, #420]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 8001320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b67      	ldr	r3, [pc, #412]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a66      	ldr	r2, [pc, #408]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e00b      	b.n	800134c <HAL_RCC_OscConfig+0x19c>
 8001334:	4b63      	ldr	r3, [pc, #396]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a62      	ldr	r2, [pc, #392]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 800133a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b60      	ldr	r3, [pc, #384]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a5f      	ldr	r2, [pc, #380]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 8001346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800134a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800134c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001350:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d059      	beq.n	8001410 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fa20 	bl	80007a0 <HAL_GetTick>
 8001360:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001366:	f7ff fa1b 	bl	80007a0 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	@ 0x64
 8001374:	d902      	bls.n	800137c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	f000 bf67 	b.w	800224a <HAL_RCC_OscConfig+0x109a>
 800137c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001380:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001390:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001394:	fab3 f383 	clz	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d102      	bne.n	80013ae <HAL_RCC_OscConfig+0x1fe>
 80013a8:	4b46      	ldr	r3, [pc, #280]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	e015      	b.n	80013da <HAL_RCC_OscConfig+0x22a>
 80013ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013b2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80013c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013c6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80013ca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80013ce:	fa93 f3a3 	rbit	r3, r3
 80013d2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80013d6:	4b3b      	ldr	r3, [pc, #236]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 80013d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013de:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80013e2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80013e6:	fa92 f2a2 	rbit	r2, r2
 80013ea:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80013ee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80013f2:	fab2 f282 	clz	r2, r2
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	f042 0220 	orr.w	r2, r2, #32
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	f002 021f 	and.w	r2, r2, #31
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0ab      	beq.n	8001366 <HAL_RCC_OscConfig+0x1b6>
 800140e:	e05c      	b.n	80014ca <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff f9c6 	bl	80007a0 <HAL_GetTick>
 8001414:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141a:	f7ff f9c1 	bl	80007a0 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	@ 0x64
 8001428:	d902      	bls.n	8001430 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	f000 bf0d 	b.w	800224a <HAL_RCC_OscConfig+0x109a>
 8001430:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001434:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001438:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800143c:	fa93 f3a3 	rbit	r3, r3
 8001440:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001444:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001448:	fab3 f383 	clz	r3, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d102      	bne.n	8001462 <HAL_RCC_OscConfig+0x2b2>
 800145c:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	e015      	b.n	800148e <HAL_RCC_OscConfig+0x2de>
 8001462:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001466:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800146e:	fa93 f3a3 	rbit	r3, r3
 8001472:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001476:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800147a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800147e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <HAL_RCC_OscConfig+0x314>)
 800148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001492:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001496:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800149a:	fa92 f2a2 	rbit	r2, r2
 800149e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80014a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80014a6:	fab2 f282 	clz	r2, r2
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	f042 0220 	orr.w	r2, r2, #32
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	f002 021f 	and.w	r2, r2, #31
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f202 	lsl.w	r2, r1, r2
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1ab      	bne.n	800141a <HAL_RCC_OscConfig+0x26a>
 80014c2:	e002      	b.n	80014ca <HAL_RCC_OscConfig+0x31a>
 80014c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 817f 	beq.w	80017de <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014e0:	4ba7      	ldr	r3, [pc, #668]	@ (8001780 <HAL_RCC_OscConfig+0x5d0>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 030c 	and.w	r3, r3, #12
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00c      	beq.n	8001506 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014ec:	4ba4      	ldr	r3, [pc, #656]	@ (8001780 <HAL_RCC_OscConfig+0x5d0>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d173      	bne.n	80015e0 <HAL_RCC_OscConfig+0x430>
 80014f8:	4ba1      	ldr	r3, [pc, #644]	@ (8001780 <HAL_RCC_OscConfig+0x5d0>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001504:	d16c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x430>
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001510:	fa93 f3a3 	rbit	r3, r3
 8001514:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001518:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151c:	fab3 f383 	clz	r3, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d102      	bne.n	8001536 <HAL_RCC_OscConfig+0x386>
 8001530:	4b93      	ldr	r3, [pc, #588]	@ (8001780 <HAL_RCC_OscConfig+0x5d0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	e013      	b.n	800155e <HAL_RCC_OscConfig+0x3ae>
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800154e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800155a:	4b89      	ldr	r3, [pc, #548]	@ (8001780 <HAL_RCC_OscConfig+0x5d0>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	2202      	movs	r2, #2
 8001560:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001564:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001568:	fa92 f2a2 	rbit	r2, r2
 800156c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001570:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001574:	fab2 f282 	clz	r2, r2
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	f042 0220 	orr.w	r2, r2, #32
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	f002 021f 	and.w	r2, r2, #31
 8001584:	2101      	movs	r1, #1
 8001586:	fa01 f202 	lsl.w	r2, r1, r2
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00a      	beq.n	80015a6 <HAL_RCC_OscConfig+0x3f6>
 8001590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001594:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d002      	beq.n	80015a6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	f000 be52 	b.w	800224a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	4b76      	ldr	r3, [pc, #472]	@ (8001780 <HAL_RCC_OscConfig+0x5d0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	21f8      	movs	r1, #248	@ 0xf8
 80015bc:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80015c4:	fa91 f1a1 	rbit	r1, r1
 80015c8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80015cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80015d0:	fab1 f181 	clz	r1, r1
 80015d4:	b2c9      	uxtb	r1, r1
 80015d6:	408b      	lsls	r3, r1
 80015d8:	4969      	ldr	r1, [pc, #420]	@ (8001780 <HAL_RCC_OscConfig+0x5d0>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015de:	e0fe      	b.n	80017de <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 8088 	beq.w	8001702 <HAL_RCC_OscConfig+0x552>
 80015f2:	2301      	movs	r3, #1
 80015f4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80015fc:	fa93 f3a3 	rbit	r3, r3
 8001600:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001604:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001608:	fab3 f383 	clz	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001612:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	461a      	mov	r2, r3
 800161a:	2301      	movs	r3, #1
 800161c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff f8bf 	bl	80007a0 <HAL_GetTick>
 8001622:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001628:	f7ff f8ba 	bl	80007a0 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d902      	bls.n	800163e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	f000 be06 	b.w	800224a <HAL_RCC_OscConfig+0x109a>
 800163e:	2302      	movs	r3, #2
 8001640:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001648:	fa93 f3a3 	rbit	r3, r3
 800164c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001650:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d102      	bne.n	800166e <HAL_RCC_OscConfig+0x4be>
 8001668:	4b45      	ldr	r3, [pc, #276]	@ (8001780 <HAL_RCC_OscConfig+0x5d0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	e013      	b.n	8001696 <HAL_RCC_OscConfig+0x4e6>
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001680:	2302      	movs	r3, #2
 8001682:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001686:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001692:	4b3b      	ldr	r3, [pc, #236]	@ (8001780 <HAL_RCC_OscConfig+0x5d0>)
 8001694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001696:	2202      	movs	r2, #2
 8001698:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800169c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80016a0:	fa92 f2a2 	rbit	r2, r2
 80016a4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80016a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80016ac:	fab2 f282 	clz	r2, r2
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	f042 0220 	orr.w	r2, r2, #32
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	f002 021f 	and.w	r2, r2, #31
 80016bc:	2101      	movs	r1, #1
 80016be:	fa01 f202 	lsl.w	r2, r1, r2
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0af      	beq.n	8001628 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <HAL_RCC_OscConfig+0x5d0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	21f8      	movs	r1, #248	@ 0xf8
 80016de:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80016e6:	fa91 f1a1 	rbit	r1, r1
 80016ea:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80016ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80016f2:	fab1 f181 	clz	r1, r1
 80016f6:	b2c9      	uxtb	r1, r1
 80016f8:	408b      	lsls	r3, r1
 80016fa:	4921      	ldr	r1, [pc, #132]	@ (8001780 <HAL_RCC_OscConfig+0x5d0>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
 8001700:	e06d      	b.n	80017de <HAL_RCC_OscConfig+0x62e>
 8001702:	2301      	movs	r3, #1
 8001704:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001714:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001722:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	461a      	mov	r2, r3
 800172a:	2300      	movs	r3, #0
 800172c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff f837 	bl	80007a0 <HAL_GetTick>
 8001732:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	e00a      	b.n	800174e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001738:	f7ff f832 	bl	80007a0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d902      	bls.n	800174e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	f000 bd7e 	b.w	800224a <HAL_RCC_OscConfig+0x109a>
 800174e:	2302      	movs	r3, #2
 8001750:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001760:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <HAL_RCC_OscConfig+0x5d4>
 8001778:	4b01      	ldr	r3, [pc, #4]	@ (8001780 <HAL_RCC_OscConfig+0x5d0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	e016      	b.n	80017ac <HAL_RCC_OscConfig+0x5fc>
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	2302      	movs	r3, #2
 8001786:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001796:	2302      	movs	r3, #2
 8001798:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800179c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80017a8:	4bbf      	ldr	r3, [pc, #764]	@ (8001aa8 <HAL_RCC_OscConfig+0x8f8>)
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	2202      	movs	r2, #2
 80017ae:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80017b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80017b6:	fa92 f2a2 	rbit	r2, r2
 80017ba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80017be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80017c2:	fab2 f282 	clz	r2, r2
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	f042 0220 	orr.w	r2, r2, #32
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	f002 021f 	and.w	r2, r2, #31
 80017d2:	2101      	movs	r1, #1
 80017d4:	fa01 f202 	lsl.w	r2, r1, r2
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ac      	bne.n	8001738 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8113 	beq.w	8001a1a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d07c      	beq.n	80018fe <HAL_RCC_OscConfig+0x74e>
 8001804:	2301      	movs	r3, #1
 8001806:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001816:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	4ba2      	ldr	r3, [pc, #648]	@ (8001aac <HAL_RCC_OscConfig+0x8fc>)
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	461a      	mov	r2, r3
 800182a:	2301      	movs	r3, #1
 800182c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182e:	f7fe ffb7 	bl	80007a0 <HAL_GetTick>
 8001832:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001836:	e00a      	b.n	800184e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001838:	f7fe ffb2 	bl	80007a0 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d902      	bls.n	800184e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	f000 bcfe 	b.w	800224a <HAL_RCC_OscConfig+0x109a>
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001860:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800186a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001892:	2202      	movs	r2, #2
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800189a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80018ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ae:	4b7e      	ldr	r3, [pc, #504]	@ (8001aa8 <HAL_RCC_OscConfig+0x8f8>)
 80018b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018ba:	2102      	movs	r1, #2
 80018bc:	6019      	str	r1, [r3, #0]
 80018be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	fa93 f1a3 	rbit	r1, r3
 80018cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80018d4:	6019      	str	r1, [r3, #0]
  return result;
 80018d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d09d      	beq.n	8001838 <HAL_RCC_OscConfig+0x688>
 80018fc:	e08d      	b.n	8001a1a <HAL_RCC_OscConfig+0x86a>
 80018fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001902:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800190e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fa93 f2a3 	rbit	r2, r3
 8001918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001920:	601a      	str	r2, [r3, #0]
  return result;
 8001922:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001926:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800192a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	4b5d      	ldr	r3, [pc, #372]	@ (8001aac <HAL_RCC_OscConfig+0x8fc>)
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	461a      	mov	r2, r3
 800193c:	2300      	movs	r3, #0
 800193e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001940:	f7fe ff2e 	bl	80007a0 <HAL_GetTick>
 8001944:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194a:	f7fe ff29 	bl	80007a0 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d902      	bls.n	8001960 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	f000 bc75 	b.w	800224a <HAL_RCC_OscConfig+0x109a>
 8001960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001964:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001968:	2202      	movs	r2, #2
 800196a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001970:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	fa93 f2a3 	rbit	r2, r3
 800197a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001988:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800198c:	2202      	movs	r2, #2
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001994:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	fa93 f2a3 	rbit	r2, r3
 800199e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019b0:	2202      	movs	r2, #2
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	fa93 f2a3 	rbit	r2, r3
 80019c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019cc:	4b36      	ldr	r3, [pc, #216]	@ (8001aa8 <HAL_RCC_OscConfig+0x8f8>)
 80019ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80019d8:	2102      	movs	r1, #2
 80019da:	6019      	str	r1, [r3, #0]
 80019dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	fa93 f1a3 	rbit	r1, r3
 80019ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ee:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80019f2:	6019      	str	r1, [r3, #0]
  return result;
 80019f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	2101      	movs	r1, #1
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d197      	bne.n	800194a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 81a5 	beq.w	8001d7a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <HAL_RCC_OscConfig+0x8f8>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d116      	bne.n	8001a70 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <HAL_RCC_OscConfig+0x8f8>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a18      	ldr	r2, [pc, #96]	@ (8001aa8 <HAL_RCC_OscConfig+0x8f8>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <HAL_RCC_OscConfig+0x8f8>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001a56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a68:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <HAL_RCC_OscConfig+0x900>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d121      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <HAL_RCC_OscConfig+0x900>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab0 <HAL_RCC_OscConfig+0x900>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a86:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a88:	f7fe fe8a 	bl	80007a0 <HAL_GetTick>
 8001a8c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	e010      	b.n	8001ab4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a92:	f7fe fe85 	bl	80007a0 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	@ 0x64
 8001aa0:	d908      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e3d1      	b.n	800224a <HAL_RCC_OscConfig+0x109a>
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	10908120 	.word	0x10908120
 8001ab0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab4:	4b8d      	ldr	r3, [pc, #564]	@ (8001cec <HAL_RCC_OscConfig+0xb3c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0e8      	beq.n	8001a92 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x92e>
 8001ad0:	4b87      	ldr	r3, [pc, #540]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a86      	ldr	r2, [pc, #536]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	e035      	b.n	8001b4a <HAL_RCC_OscConfig+0x99a>
 8001ade:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x958>
 8001aee:	4b80      	ldr	r3, [pc, #512]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a7f      	ldr	r2, [pc, #508]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6213      	str	r3, [r2, #32]
 8001afa:	4b7d      	ldr	r3, [pc, #500]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4a7c      	ldr	r2, [pc, #496]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001b00:	f023 0304 	bic.w	r3, r3, #4
 8001b04:	6213      	str	r3, [r2, #32]
 8001b06:	e020      	b.n	8001b4a <HAL_RCC_OscConfig+0x99a>
 8001b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d10c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x982>
 8001b18:	4b75      	ldr	r3, [pc, #468]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4a74      	ldr	r2, [pc, #464]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6213      	str	r3, [r2, #32]
 8001b24:	4b72      	ldr	r3, [pc, #456]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4a71      	ldr	r2, [pc, #452]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6213      	str	r3, [r2, #32]
 8001b30:	e00b      	b.n	8001b4a <HAL_RCC_OscConfig+0x99a>
 8001b32:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a6e      	ldr	r2, [pc, #440]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6213      	str	r3, [r2, #32]
 8001b3e:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a6b      	ldr	r2, [pc, #428]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8081 	beq.w	8001c5e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5c:	f7fe fe20 	bl	80007a0 <HAL_GetTick>
 8001b60:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b64:	e00b      	b.n	8001b7e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7fe fe1b 	bl	80007a0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e365      	b.n	800224a <HAL_RCC_OscConfig+0x109a>
 8001b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b82:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b86:	2202      	movs	r2, #2
 8001b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001baa:	2202      	movs	r2, #2
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001bc4:	601a      	str	r2, [r3, #0]
  return result;
 8001bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bca:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001bce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d102      	bne.n	8001bea <HAL_RCC_OscConfig+0xa3a>
 8001be4:	4b42      	ldr	r3, [pc, #264]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	e013      	b.n	8001c12 <HAL_RCC_OscConfig+0xa62>
 8001bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bfa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f2a3 	rbit	r2, r3
 8001c04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c08:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	4b38      	ldr	r3, [pc, #224]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c16:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	6011      	str	r1, [r2, #0]
 8001c1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c22:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	fa92 f1a2 	rbit	r1, r2
 8001c2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c30:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001c34:	6011      	str	r1, [r2, #0]
  return result;
 8001c36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c3a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	fab2 f282 	clz	r2, r2
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f002 021f 	and.w	r2, r2, #31
 8001c50:	2101      	movs	r1, #1
 8001c52:	fa01 f202 	lsl.w	r2, r1, r2
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d084      	beq.n	8001b66 <HAL_RCC_OscConfig+0x9b6>
 8001c5c:	e083      	b.n	8001d66 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5e:	f7fe fd9f 	bl	80007a0 <HAL_GetTick>
 8001c62:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7fe fd9a 	bl	80007a0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e2e4      	b.n	800224a <HAL_RCC_OscConfig+0x109a>
 8001c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c84:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c88:	2202      	movs	r2, #2
 8001c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c90:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fa93 f2a3 	rbit	r2, r3
 8001c9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001cac:	2202      	movs	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	fa93 f2a3 	rbit	r2, r3
 8001cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001cc6:	601a      	str	r2, [r3, #0]
  return result;
 8001cc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ccc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001cd0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	095b      	lsrs	r3, r3, #5
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d106      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xb44>
 8001ce6:	4b02      	ldr	r3, [pc, #8]	@ (8001cf0 <HAL_RCC_OscConfig+0xb40>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	e017      	b.n	8001d1c <HAL_RCC_OscConfig+0xb6c>
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d04:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d12:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	4bb3      	ldr	r3, [pc, #716]	@ (8001fe8 <HAL_RCC_OscConfig+0xe38>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d20:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d24:	2102      	movs	r1, #2
 8001d26:	6011      	str	r1, [r2, #0]
 8001d28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d2c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	fa92 f1a2 	rbit	r1, r2
 8001d36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d3a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001d3e:	6011      	str	r1, [r2, #0]
  return result;
 8001d40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d44:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	fab2 f282 	clz	r2, r2
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f002 021f 	and.w	r2, r2, #31
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d180      	bne.n	8001c68 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d66:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d105      	bne.n	8001d7a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b9e      	ldr	r3, [pc, #632]	@ (8001fe8 <HAL_RCC_OscConfig+0xe38>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a9d      	ldr	r2, [pc, #628]	@ (8001fe8 <HAL_RCC_OscConfig+0xe38>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 825e 	beq.w	8002248 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8c:	4b96      	ldr	r3, [pc, #600]	@ (8001fe8 <HAL_RCC_OscConfig+0xe38>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	f000 821f 	beq.w	80021d8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	f040 8170 	bne.w	800208c <HAL_RCC_OscConfig+0xedc>
 8001dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001db4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dbe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	fa93 f2a3 	rbit	r2, r3
 8001dc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dcc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001dd0:	601a      	str	r2, [r3, #0]
  return result;
 8001dd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001dda:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001de6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	461a      	mov	r2, r3
 8001dee:	2300      	movs	r3, #0
 8001df0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe fcd5 	bl	80007a0 <HAL_GetTick>
 8001df6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	e009      	b.n	8001e10 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7fe fcd0 	bl	80007a0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e21c      	b.n	800224a <HAL_RCC_OscConfig+0x109a>
 8001e10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e14:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e22:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e30:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e34:	601a      	str	r2, [r3, #0]
  return result;
 8001e36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d102      	bne.n	8001e5a <HAL_RCC_OscConfig+0xcaa>
 8001e54:	4b64      	ldr	r3, [pc, #400]	@ (8001fe8 <HAL_RCC_OscConfig+0xe38>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	e027      	b.n	8001eaa <HAL_RCC_OscConfig+0xcfa>
 8001e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e5e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001e62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f2a3 	rbit	r2, r3
 8001e76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e84:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001e88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e92:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	fa93 f2a3 	rbit	r2, r3
 8001e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	4b50      	ldr	r3, [pc, #320]	@ (8001fe8 <HAL_RCC_OscConfig+0xe38>)
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001eae:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001eb2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001eb6:	6011      	str	r1, [r2, #0]
 8001eb8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ebc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	fa92 f1a2 	rbit	r1, r2
 8001ec6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001eca:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001ece:	6011      	str	r1, [r2, #0]
  return result;
 8001ed0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ed4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	fab2 f282 	clz	r2, r2
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f042 0220 	orr.w	r2, r2, #32
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f002 021f 	and.w	r2, r2, #31
 8001eea:	2101      	movs	r1, #1
 8001eec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d182      	bne.n	8001dfc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe8 <HAL_RCC_OscConfig+0xe38>)
 8001ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efa:	f023 020f 	bic.w	r2, r3, #15
 8001efe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	4937      	ldr	r1, [pc, #220]	@ (8001fe8 <HAL_RCC_OscConfig+0xe38>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001f10:	4b35      	ldr	r3, [pc, #212]	@ (8001fe8 <HAL_RCC_OscConfig+0xe38>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001f18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6a19      	ldr	r1, [r3, #32]
 8001f24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	492d      	ldr	r1, [pc, #180]	@ (8001fe8 <HAL_RCC_OscConfig+0xe38>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
 8001f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	fa93 f2a3 	rbit	r2, r3
 8001f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f58:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f5c:	601a      	str	r2, [r3, #0]
  return result;
 8001f5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f62:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f66:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f72:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7fe fc0f 	bl	80007a0 <HAL_GetTick>
 8001f82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f86:	e009      	b.n	8001f9c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f88:	f7fe fc0a 	bl	80007a0 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e156      	b.n	800224a <HAL_RCC_OscConfig+0x109a>
 8001f9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001fa4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fae:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f2a3 	rbit	r2, r3
 8001fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fbc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001fc0:	601a      	str	r2, [r3, #0]
  return result;
 8001fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001fca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_RCC_OscConfig+0xe3c>
 8001fe0:	4b01      	ldr	r3, [pc, #4]	@ (8001fe8 <HAL_RCC_OscConfig+0xe38>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	e02a      	b.n	800203c <HAL_RCC_OscConfig+0xe8c>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ff4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ffe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fa93 f2a3 	rbit	r2, r3
 8002008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002016:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800201a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002024:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002032:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	4b86      	ldr	r3, [pc, #536]	@ (8002254 <HAL_RCC_OscConfig+0x10a4>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002040:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002044:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002048:	6011      	str	r1, [r2, #0]
 800204a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800204e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	fa92 f1a2 	rbit	r1, r2
 8002058:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800205c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002060:	6011      	str	r1, [r2, #0]
  return result;
 8002062:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002066:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	fab2 f282 	clz	r2, r2
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	f042 0220 	orr.w	r2, r2, #32
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f002 021f 	and.w	r2, r2, #31
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f202 	lsl.w	r2, r1, r2
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	f43f af7f 	beq.w	8001f88 <HAL_RCC_OscConfig+0xdd8>
 800208a:	e0dd      	b.n	8002248 <HAL_RCC_OscConfig+0x1098>
 800208c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002090:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002094:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800209e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	fa93 f2a3 	rbit	r2, r3
 80020a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80020b0:	601a      	str	r2, [r3, #0]
  return result;
 80020b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80020ba:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020c6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	461a      	mov	r2, r3
 80020ce:	2300      	movs	r3, #0
 80020d0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7fe fb65 	bl	80007a0 <HAL_GetTick>
 80020d6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020da:	e009      	b.n	80020f0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020dc:	f7fe fb60 	bl	80007a0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0ac      	b.n	800224a <HAL_RCC_OscConfig+0x109a>
 80020f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80020f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002102:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002110:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002114:	601a      	str	r2, [r3, #0]
  return result;
 8002116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800211e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d102      	bne.n	800213a <HAL_RCC_OscConfig+0xf8a>
 8002134:	4b47      	ldr	r3, [pc, #284]	@ (8002254 <HAL_RCC_OscConfig+0x10a4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	e027      	b.n	800218a <HAL_RCC_OscConfig+0xfda>
 800213a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002142:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	fa93 f2a3 	rbit	r2, r3
 8002156:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800215a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002164:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002168:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002172:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	fa93 f2a3 	rbit	r2, r3
 800217c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002180:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	4b33      	ldr	r3, [pc, #204]	@ (8002254 <HAL_RCC_OscConfig+0x10a4>)
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800218e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002192:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002196:	6011      	str	r1, [r2, #0]
 8002198:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800219c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	fa92 f1a2 	rbit	r1, r2
 80021a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021aa:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80021ae:	6011      	str	r1, [r2, #0]
  return result;
 80021b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021b4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	fab2 f282 	clz	r2, r2
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f042 0220 	orr.w	r2, r2, #32
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	f002 021f 	and.w	r2, r2, #31
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f202 	lsl.w	r2, r1, r2
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d182      	bne.n	80020dc <HAL_RCC_OscConfig+0xf2c>
 80021d6:	e037      	b.n	8002248 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e02e      	b.n	800224a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021ec:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <HAL_RCC_OscConfig+0x10a4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80021f4:	4b17      	ldr	r3, [pc, #92]	@ (8002254 <HAL_RCC_OscConfig+0x10a4>)
 80021f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002200:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002204:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002208:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	429a      	cmp	r2, r3
 8002212:	d117      	bne.n	8002244 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002214:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002218:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800221c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002220:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002228:	429a      	cmp	r2, r3
 800222a:	d10b      	bne.n	8002244 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800222c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002230:	f003 020f 	and.w	r2, r3, #15
 8002234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002238:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000

08002258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b09e      	sub	sp, #120	@ 0x78
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e162      	b.n	8002536 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b90      	ldr	r3, [pc, #576]	@ (80024b4 <HAL_RCC_ClockConfig+0x25c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d910      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b8d      	ldr	r3, [pc, #564]	@ (80024b4 <HAL_RCC_ClockConfig+0x25c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 0207 	bic.w	r2, r3, #7
 8002286:	498b      	ldr	r1, [pc, #556]	@ (80024b4 <HAL_RCC_ClockConfig+0x25c>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b89      	ldr	r3, [pc, #548]	@ (80024b4 <HAL_RCC_ClockConfig+0x25c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e14a      	b.n	8002536 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ac:	4b82      	ldr	r3, [pc, #520]	@ (80024b8 <HAL_RCC_ClockConfig+0x260>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	497f      	ldr	r1, [pc, #508]	@ (80024b8 <HAL_RCC_ClockConfig+0x260>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80dc 	beq.w	8002484 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d13c      	bne.n	800234e <HAL_RCC_ClockConfig+0xf6>
 80022d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022d8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80022e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d102      	bne.n	80022fe <HAL_RCC_ClockConfig+0xa6>
 80022f8:	4b6f      	ldr	r3, [pc, #444]	@ (80024b8 <HAL_RCC_ClockConfig+0x260>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	e00f      	b.n	800231e <HAL_RCC_ClockConfig+0xc6>
 80022fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002302:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	667b      	str	r3, [r7, #100]	@ 0x64
 800230c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002310:	663b      	str	r3, [r7, #96]	@ 0x60
 8002312:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800231a:	4b67      	ldr	r3, [pc, #412]	@ (80024b8 <HAL_RCC_ClockConfig+0x260>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002322:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002324:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002326:	fa92 f2a2 	rbit	r2, r2
 800232a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800232c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800232e:	fab2 f282 	clz	r2, r2
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	f042 0220 	orr.w	r2, r2, #32
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f002 021f 	and.w	r2, r2, #31
 800233e:	2101      	movs	r1, #1
 8002340:	fa01 f202 	lsl.w	r2, r1, r2
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d17b      	bne.n	8002442 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0f3      	b.n	8002536 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d13c      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x178>
 8002356:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800235a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	095b      	lsrs	r3, r3, #5
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d102      	bne.n	8002380 <HAL_RCC_ClockConfig+0x128>
 800237a:	4b4f      	ldr	r3, [pc, #316]	@ (80024b8 <HAL_RCC_ClockConfig+0x260>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	e00f      	b.n	80023a0 <HAL_RCC_ClockConfig+0x148>
 8002380:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002384:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	647b      	str	r3, [r7, #68]	@ 0x44
 800238e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002392:	643b      	str	r3, [r7, #64]	@ 0x40
 8002394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800239c:	4b46      	ldr	r3, [pc, #280]	@ (80024b8 <HAL_RCC_ClockConfig+0x260>)
 800239e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023a4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80023a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023a8:	fa92 f2a2 	rbit	r2, r2
 80023ac:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80023ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023b0:	fab2 f282 	clz	r2, r2
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	f042 0220 	orr.w	r2, r2, #32
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	f002 021f 	and.w	r2, r2, #31
 80023c0:	2101      	movs	r1, #1
 80023c2:	fa01 f202 	lsl.w	r2, r1, r2
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d13a      	bne.n	8002442 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0b2      	b.n	8002536 <HAL_RCC_ClockConfig+0x2de>
 80023d0:	2302      	movs	r3, #2
 80023d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80023dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d102      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x1a0>
 80023f2:	4b31      	ldr	r3, [pc, #196]	@ (80024b8 <HAL_RCC_ClockConfig+0x260>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	e00d      	b.n	8002414 <HAL_RCC_ClockConfig+0x1bc>
 80023f8:	2302      	movs	r3, #2
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
 8002404:	2302      	movs	r3, #2
 8002406:	623b      	str	r3, [r7, #32]
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	4b29      	ldr	r3, [pc, #164]	@ (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	2202      	movs	r2, #2
 8002416:	61ba      	str	r2, [r7, #24]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	fa92 f2a2 	rbit	r2, r2
 800241e:	617a      	str	r2, [r7, #20]
  return result;
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	fab2 f282 	clz	r2, r2
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	f042 0220 	orr.w	r2, r2, #32
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	f002 021f 	and.w	r2, r2, #31
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f202 	lsl.w	r2, r1, r2
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e079      	b.n	8002536 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	491a      	ldr	r1, [pc, #104]	@ (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7fe f9a4 	bl	80007a0 <HAL_GetTick>
 8002458:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7fe f9a0 	bl	80007a0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e061      	b.n	8002536 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 020c 	and.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	429a      	cmp	r2, r3
 8002482:	d1eb      	bne.n	800245c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <HAL_RCC_ClockConfig+0x25c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d214      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <HAL_RCC_ClockConfig+0x25c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 0207 	bic.w	r2, r3, #7
 800249a:	4906      	ldr	r1, [pc, #24]	@ (80024b4 <HAL_RCC_ClockConfig+0x25c>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <HAL_RCC_ClockConfig+0x25c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e040      	b.n	8002536 <HAL_RCC_ClockConfig+0x2de>
 80024b4:	40022000 	.word	0x40022000
 80024b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <HAL_RCC_ClockConfig+0x2e8>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	491a      	ldr	r1, [pc, #104]	@ (8002540 <HAL_RCC_ClockConfig+0x2e8>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e6:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <HAL_RCC_ClockConfig+0x2e8>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4912      	ldr	r1, [pc, #72]	@ (8002540 <HAL_RCC_ClockConfig+0x2e8>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024fa:	f000 f829 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 80024fe:	4601      	mov	r1, r0
 8002500:	4b0f      	ldr	r3, [pc, #60]	@ (8002540 <HAL_RCC_ClockConfig+0x2e8>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002508:	22f0      	movs	r2, #240	@ 0xf0
 800250a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	fa92 f2a2 	rbit	r2, r2
 8002512:	60fa      	str	r2, [r7, #12]
  return result;
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	fab2 f282 	clz	r2, r2
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	40d3      	lsrs	r3, r2
 800251e:	4a09      	ldr	r2, [pc, #36]	@ (8002544 <HAL_RCC_ClockConfig+0x2ec>)
 8002520:	5cd3      	ldrb	r3, [r2, r3]
 8002522:	fa21 f303 	lsr.w	r3, r1, r3
 8002526:	4a08      	ldr	r2, [pc, #32]	@ (8002548 <HAL_RCC_ClockConfig+0x2f0>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800252a:	4b08      	ldr	r3, [pc, #32]	@ (800254c <HAL_RCC_ClockConfig+0x2f4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f8f2 	bl	8000718 <HAL_InitTick>
  
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3778      	adds	r7, #120	@ 0x78
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	080040cc 	.word	0x080040cc
 8002548:	20000000 	.word	0x20000000
 800254c:	20000004 	.word	0x20000004

08002550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800256a:	4b1f      	ldr	r3, [pc, #124]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x98>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b04      	cmp	r3, #4
 8002578:	d002      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x30>
 800257a:	2b08      	cmp	r3, #8
 800257c:	d003      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x36>
 800257e:	e029      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002580:	4b1a      	ldr	r3, [pc, #104]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002582:	613b      	str	r3, [r7, #16]
      break;
 8002584:	e029      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	0c9b      	lsrs	r3, r3, #18
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	4a18      	ldr	r2, [pc, #96]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002590:	5cd3      	ldrb	r3, [r2, r3]
 8002592:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002594:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	4a15      	ldr	r2, [pc, #84]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025ac:	4a0f      	ldr	r2, [pc, #60]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x9c>)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e007      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025be:	4a0b      	ldr	r2, [pc, #44]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x9c>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	613b      	str	r3, [r7, #16]
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x9c>)
 80025d6:	613b      	str	r3, [r7, #16]
      break;
 80025d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025da:	693b      	ldr	r3, [r7, #16]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40021000 	.word	0x40021000
 80025ec:	007a1200 	.word	0x007a1200
 80025f0:	080040e4 	.word	0x080040e4
 80025f4:	080040f4 	.word	0x080040f4

080025f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025fc:	4b03      	ldr	r3, [pc, #12]	@ (800260c <HAL_RCC_GetHCLKFreq+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000000 	.word	0x20000000

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002616:	f7ff ffef 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 800261a:	4601      	mov	r1, r0
 800261c:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002624:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002628:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	fa92 f2a2 	rbit	r2, r2
 8002630:	603a      	str	r2, [r7, #0]
  return result;
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	fab2 f282 	clz	r2, r2
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	40d3      	lsrs	r3, r2
 800263c:	4a04      	ldr	r2, [pc, #16]	@ (8002650 <HAL_RCC_GetPCLK1Freq+0x40>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	080040dc 	.word	0x080040dc

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800265a:	f7ff ffcd 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 800265e:	4601      	mov	r1, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002668:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800266c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	fa92 f2a2 	rbit	r2, r2
 8002674:	603a      	str	r2, [r7, #0]
  return result;
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	fab2 f282 	clz	r2, r2
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	40d3      	lsrs	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	@ (8002694 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	080040dc 	.word	0x080040dc

08002698 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b092      	sub	sp, #72	@ 0x48
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80d4 	beq.w	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026bc:	4b4e      	ldr	r3, [pc, #312]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10e      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	4b4b      	ldr	r3, [pc, #300]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	4a4a      	ldr	r2, [pc, #296]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d2:	61d3      	str	r3, [r2, #28]
 80026d4:	4b48      	ldr	r3, [pc, #288]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	4b45      	ldr	r3, [pc, #276]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d118      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f2:	4b42      	ldr	r3, [pc, #264]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a41      	ldr	r2, [pc, #260]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fe:	f7fe f84f 	bl	80007a0 <HAL_GetTick>
 8002702:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	e008      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002706:	f7fe f84b 	bl	80007a0 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b64      	cmp	r3, #100	@ 0x64
 8002712:	d901      	bls.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1d6      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	4b38      	ldr	r3, [pc, #224]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002724:	4b34      	ldr	r3, [pc, #208]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800272c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800272e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8084 	beq.w	800283e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800273e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002740:	429a      	cmp	r2, r3
 8002742:	d07c      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002744:	4b2c      	ldr	r3, [pc, #176]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800274c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800274e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002752:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800275c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	4b26      	ldr	r3, [pc, #152]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	461a      	mov	r2, r3
 800276e:	2301      	movs	r3, #1
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002776:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	4b1d      	ldr	r3, [pc, #116]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	461a      	mov	r2, r3
 8002792:	2300      	movs	r3, #0
 8002794:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002796:	4a18      	ldr	r2, [pc, #96]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800279a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800279c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d04b      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7fd fffb 	bl	80007a0 <HAL_GetTick>
 80027aa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fd fff7 	bl	80007a0 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e180      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80027c4:	2302      	movs	r3, #2
 80027c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d0:	2302      	movs	r3, #2
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	61fb      	str	r3, [r7, #28]
  return result;
 80027dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d108      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027f2:	4b01      	ldr	r3, [pc, #4]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	e00d      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
 8002800:	10908100 	.word	0x10908100
 8002804:	2302      	movs	r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	4b9a      	ldr	r3, [pc, #616]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	2202      	movs	r2, #2
 8002816:	613a      	str	r2, [r7, #16]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	fa92 f2a2 	rbit	r2, r2
 800281e:	60fa      	str	r2, [r7, #12]
  return result;
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	fab2 f282 	clz	r2, r2
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f002 021f 	and.w	r2, r2, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0b7      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800283e:	4b8f      	ldr	r3, [pc, #572]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	498c      	ldr	r1, [pc, #560]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002850:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002858:	4b88      	ldr	r3, [pc, #544]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	4a87      	ldr	r2, [pc, #540]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002862:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002870:	4b82      	ldr	r3, [pc, #520]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002874:	f023 0203 	bic.w	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	497f      	ldr	r1, [pc, #508]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800288e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	4978      	ldr	r1, [pc, #480]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ac:	4b73      	ldr	r3, [pc, #460]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	4970      	ldr	r1, [pc, #448]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ca:	4b6c      	ldr	r3, [pc, #432]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	f023 0210 	bic.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	4969      	ldr	r1, [pc, #420]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028e8:	4b64      	ldr	r3, [pc, #400]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f4:	4961      	ldr	r1, [pc, #388]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002906:	4b5d      	ldr	r3, [pc, #372]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f023 0220 	bic.w	r2, r3, #32
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	495a      	ldr	r1, [pc, #360]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002924:	4b55      	ldr	r3, [pc, #340]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	4952      	ldr	r1, [pc, #328]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002942:	4b4e      	ldr	r3, [pc, #312]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	494b      	ldr	r1, [pc, #300]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002960:	4b46      	ldr	r3, [pc, #280]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002964:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	4943      	ldr	r1, [pc, #268]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800297e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	493c      	ldr	r1, [pc, #240]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800299c:	4b37      	ldr	r3, [pc, #220]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	4934      	ldr	r1, [pc, #208]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80029ba:	4b30      	ldr	r3, [pc, #192]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029be:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	492d      	ldr	r1, [pc, #180]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029d8:	4b28      	ldr	r3, [pc, #160]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e4:	4925      	ldr	r1, [pc, #148]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80029f6:	4b21      	ldr	r3, [pc, #132]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	491e      	ldr	r1, [pc, #120]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a14:	4b19      	ldr	r3, [pc, #100]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a20:	4916      	ldr	r1, [pc, #88]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a32:	4b12      	ldr	r3, [pc, #72]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3e:	490f      	ldr	r1, [pc, #60]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a50:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a54:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5c:	4907      	ldr	r1, [pc, #28]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a6e:	4b03      	ldr	r3, [pc, #12]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	e002      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a82:	4913      	ldr	r1, [pc, #76]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa0:	490b      	ldr	r1, [pc, #44]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002ab2:	4b07      	ldr	r3, [pc, #28]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002abe:	4904      	ldr	r1, [pc, #16]	@ (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3748      	adds	r7, #72	@ 0x48
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e040      	b.n	8002b68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fd fd5a 	bl	80005b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	@ 0x24
 8002b00:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fd0a 	bl	8003534 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fb33 	bl	800318c <UART_SetConfig>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e01b      	b.n	8002b68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fd89 	bl	8003678 <UART_CheckIdleState>
 8002b66:	4603      	mov	r3, r0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0ba      	sub	sp, #232	@ 0xe8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002b9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d115      	bne.n	8002bd8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00f      	beq.n	8002bd8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d009      	beq.n	8002bd8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 82ab 	beq.w	8003124 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
      }
      return;
 8002bd6:	e2a5      	b.n	8003124 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8117 	beq.w	8002e10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002bee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002bf2:	4b85      	ldr	r3, [pc, #532]	@ (8002e08 <HAL_UART_IRQHandler+0x298>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 810a 	beq.w	8002e10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d011      	beq.n	8002c2c <HAL_UART_IRQHandler+0xbc>
 8002c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00b      	beq.n	8002c2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d011      	beq.n	8002c5c <HAL_UART_IRQHandler+0xec>
 8002c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00b      	beq.n	8002c5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c52:	f043 0204 	orr.w	r2, r3, #4
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d011      	beq.n	8002c8c <HAL_UART_IRQHandler+0x11c>
 8002c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00b      	beq.n	8002c8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c82:	f043 0202 	orr.w	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d017      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ca8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00b      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cbe:	f043 0208 	orr.w	r2, r3, #8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d012      	beq.n	8002cfa <HAL_UART_IRQHandler+0x18a>
 8002cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00c      	beq.n	8002cfa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8211 	beq.w	8003128 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d42:	2b40      	cmp	r3, #64	@ 0x40
 8002d44:	d005      	beq.n	8002d52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d04f      	beq.n	8002df2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fe6c 	bl	8003a30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d62:	2b40      	cmp	r3, #64	@ 0x40
 8002d64:	d141      	bne.n	8002dea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1d9      	bne.n	8002d66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d013      	beq.n	8002de2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dbe:	4a13      	ldr	r2, [pc, #76]	@ (8002e0c <HAL_UART_IRQHandler+0x29c>)
 8002dc0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd feeb 	bl	8000ba2 <HAL_DMA_Abort_IT>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d017      	beq.n	8002e02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de0:	e00f      	b.n	8002e02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9c8 	bl	8003178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de8:	e00b      	b.n	8002e02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9c4 	bl	8003178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df0:	e007      	b.n	8002e02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f9c0 	bl	8003178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002e00:	e192      	b.n	8003128 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e02:	bf00      	nop
    return;
 8002e04:	e190      	b.n	8003128 <HAL_UART_IRQHandler+0x5b8>
 8002e06:	bf00      	nop
 8002e08:	04000120 	.word	0x04000120
 8002e0c:	08003cdb 	.word	0x08003cdb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	f040 814b 	bne.w	80030b0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8144 	beq.w	80030b0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 813d 	beq.w	80030b0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e48:	2b40      	cmp	r3, #64	@ 0x40
 8002e4a:	f040 80b5 	bne.w	8002fb8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8164 	beq.w	800312c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	f080 815c 	bcs.w	800312c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	f000 8086 	beq.w	8002f96 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ea2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ea6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002eb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002eb8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ec0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1da      	bne.n	8002e8a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3308      	adds	r3, #8
 8002eda:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ede:	e853 3f00 	ldrex	r3, [r3]
 8002ee2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ee4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ef8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002efc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e1      	bne.n	8002ed4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3308      	adds	r3, #8
 8002f16:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3308      	adds	r3, #8
 8002f30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e3      	bne.n	8002f10 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f5e:	e853 3f00 	ldrex	r3, [r3]
 8002f62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f66:	f023 0310 	bic.w	r3, r3, #16
 8002f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f80:	e841 2300 	strex	r3, r2, [r1]
 8002f84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1e4      	bne.n	8002f56 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fdc8 	bl	8000b26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f001 f831 	bl	8004018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fb6:	e0b9      	b.n	800312c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80ab 	beq.w	8003130 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002fda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80a6 	beq.w	8003130 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fec:	e853 3f00 	ldrex	r3, [r3]
 8002ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003006:	647b      	str	r3, [r7, #68]	@ 0x44
 8003008:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800300c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800300e:	e841 2300 	strex	r3, r2, [r1]
 8003012:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e4      	bne.n	8002fe4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3308      	adds	r3, #8
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	623b      	str	r3, [r7, #32]
   return(result);
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3308      	adds	r3, #8
 800303a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800303e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003040:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800304c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e3      	bne.n	800301a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	e853 3f00 	ldrex	r3, [r3]
 8003072:	60fb      	str	r3, [r7, #12]
   return(result);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0310 	bic.w	r3, r3, #16
 800307a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	617b      	str	r3, [r7, #20]
   return(result);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e4      	bne.n	8003066 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 ffb5 	bl	8004018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030ae:	e03f      	b.n	8003130 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00e      	beq.n	80030da <HAL_UART_IRQHandler+0x56a>
 80030bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80030d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fe41 	bl	8003d5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030d8:	e02d      	b.n	8003136 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d01c      	beq.n	8003134 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
    }
    return;
 8003102:	e017      	b.n	8003134 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d012      	beq.n	8003136 <HAL_UART_IRQHandler+0x5c6>
 8003110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00c      	beq.n	8003136 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fdf2 	bl	8003d06 <UART_EndTransmit_IT>
    return;
 8003122:	e008      	b.n	8003136 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003124:	bf00      	nop
 8003126:	e006      	b.n	8003136 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003128:	bf00      	nop
 800312a:	e004      	b.n	8003136 <HAL_UART_IRQHandler+0x5c6>
      return;
 800312c:	bf00      	nop
 800312e:	e002      	b.n	8003136 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003130:	bf00      	nop
 8003132:	e000      	b.n	8003136 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003134:	bf00      	nop
  }

}
 8003136:	37e8      	adds	r7, #232	@ 0xe8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b92      	ldr	r3, [pc, #584]	@ (8003400 <UART_SetConfig+0x274>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	6979      	ldr	r1, [r7, #20]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a80      	ldr	r2, [pc, #512]	@ (8003404 <UART_SetConfig+0x278>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d120      	bne.n	800324a <UART_SetConfig+0xbe>
 8003208:	4b7f      	ldr	r3, [pc, #508]	@ (8003408 <UART_SetConfig+0x27c>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b03      	cmp	r3, #3
 8003212:	d817      	bhi.n	8003244 <UART_SetConfig+0xb8>
 8003214:	a201      	add	r2, pc, #4	@ (adr r2, 800321c <UART_SetConfig+0x90>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	0800322d 	.word	0x0800322d
 8003220:	08003239 	.word	0x08003239
 8003224:	0800323f 	.word	0x0800323f
 8003228:	08003233 	.word	0x08003233
 800322c:	2301      	movs	r3, #1
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e0b5      	b.n	800339e <UART_SetConfig+0x212>
 8003232:	2302      	movs	r3, #2
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e0b2      	b.n	800339e <UART_SetConfig+0x212>
 8003238:	2304      	movs	r3, #4
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e0af      	b.n	800339e <UART_SetConfig+0x212>
 800323e:	2308      	movs	r3, #8
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	e0ac      	b.n	800339e <UART_SetConfig+0x212>
 8003244:	2310      	movs	r3, #16
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	e0a9      	b.n	800339e <UART_SetConfig+0x212>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6f      	ldr	r2, [pc, #444]	@ (800340c <UART_SetConfig+0x280>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d124      	bne.n	800329e <UART_SetConfig+0x112>
 8003254:	4b6c      	ldr	r3, [pc, #432]	@ (8003408 <UART_SetConfig+0x27c>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800325c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003260:	d011      	beq.n	8003286 <UART_SetConfig+0xfa>
 8003262:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003266:	d817      	bhi.n	8003298 <UART_SetConfig+0x10c>
 8003268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800326c:	d011      	beq.n	8003292 <UART_SetConfig+0x106>
 800326e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003272:	d811      	bhi.n	8003298 <UART_SetConfig+0x10c>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <UART_SetConfig+0xf4>
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800327c:	d006      	beq.n	800328c <UART_SetConfig+0x100>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x10c>
 8003280:	2300      	movs	r3, #0
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e08b      	b.n	800339e <UART_SetConfig+0x212>
 8003286:	2302      	movs	r3, #2
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e088      	b.n	800339e <UART_SetConfig+0x212>
 800328c:	2304      	movs	r3, #4
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e085      	b.n	800339e <UART_SetConfig+0x212>
 8003292:	2308      	movs	r3, #8
 8003294:	77fb      	strb	r3, [r7, #31]
 8003296:	e082      	b.n	800339e <UART_SetConfig+0x212>
 8003298:	2310      	movs	r3, #16
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e07f      	b.n	800339e <UART_SetConfig+0x212>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003410 <UART_SetConfig+0x284>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d124      	bne.n	80032f2 <UART_SetConfig+0x166>
 80032a8:	4b57      	ldr	r3, [pc, #348]	@ (8003408 <UART_SetConfig+0x27c>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80032b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032b4:	d011      	beq.n	80032da <UART_SetConfig+0x14e>
 80032b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032ba:	d817      	bhi.n	80032ec <UART_SetConfig+0x160>
 80032bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032c0:	d011      	beq.n	80032e6 <UART_SetConfig+0x15a>
 80032c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032c6:	d811      	bhi.n	80032ec <UART_SetConfig+0x160>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <UART_SetConfig+0x148>
 80032cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032d0:	d006      	beq.n	80032e0 <UART_SetConfig+0x154>
 80032d2:	e00b      	b.n	80032ec <UART_SetConfig+0x160>
 80032d4:	2300      	movs	r3, #0
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e061      	b.n	800339e <UART_SetConfig+0x212>
 80032da:	2302      	movs	r3, #2
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e05e      	b.n	800339e <UART_SetConfig+0x212>
 80032e0:	2304      	movs	r3, #4
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e05b      	b.n	800339e <UART_SetConfig+0x212>
 80032e6:	2308      	movs	r3, #8
 80032e8:	77fb      	strb	r3, [r7, #31]
 80032ea:	e058      	b.n	800339e <UART_SetConfig+0x212>
 80032ec:	2310      	movs	r3, #16
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	e055      	b.n	800339e <UART_SetConfig+0x212>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a47      	ldr	r2, [pc, #284]	@ (8003414 <UART_SetConfig+0x288>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d124      	bne.n	8003346 <UART_SetConfig+0x1ba>
 80032fc:	4b42      	ldr	r3, [pc, #264]	@ (8003408 <UART_SetConfig+0x27c>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003300:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003304:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003308:	d011      	beq.n	800332e <UART_SetConfig+0x1a2>
 800330a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800330e:	d817      	bhi.n	8003340 <UART_SetConfig+0x1b4>
 8003310:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003314:	d011      	beq.n	800333a <UART_SetConfig+0x1ae>
 8003316:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800331a:	d811      	bhi.n	8003340 <UART_SetConfig+0x1b4>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <UART_SetConfig+0x19c>
 8003320:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003324:	d006      	beq.n	8003334 <UART_SetConfig+0x1a8>
 8003326:	e00b      	b.n	8003340 <UART_SetConfig+0x1b4>
 8003328:	2300      	movs	r3, #0
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e037      	b.n	800339e <UART_SetConfig+0x212>
 800332e:	2302      	movs	r3, #2
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e034      	b.n	800339e <UART_SetConfig+0x212>
 8003334:	2304      	movs	r3, #4
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e031      	b.n	800339e <UART_SetConfig+0x212>
 800333a:	2308      	movs	r3, #8
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e02e      	b.n	800339e <UART_SetConfig+0x212>
 8003340:	2310      	movs	r3, #16
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	e02b      	b.n	800339e <UART_SetConfig+0x212>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a33      	ldr	r2, [pc, #204]	@ (8003418 <UART_SetConfig+0x28c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d124      	bne.n	800339a <UART_SetConfig+0x20e>
 8003350:	4b2d      	ldr	r3, [pc, #180]	@ (8003408 <UART_SetConfig+0x27c>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003358:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800335c:	d011      	beq.n	8003382 <UART_SetConfig+0x1f6>
 800335e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003362:	d817      	bhi.n	8003394 <UART_SetConfig+0x208>
 8003364:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003368:	d011      	beq.n	800338e <UART_SetConfig+0x202>
 800336a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800336e:	d811      	bhi.n	8003394 <UART_SetConfig+0x208>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <UART_SetConfig+0x1f0>
 8003374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003378:	d006      	beq.n	8003388 <UART_SetConfig+0x1fc>
 800337a:	e00b      	b.n	8003394 <UART_SetConfig+0x208>
 800337c:	2300      	movs	r3, #0
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e00d      	b.n	800339e <UART_SetConfig+0x212>
 8003382:	2302      	movs	r3, #2
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e00a      	b.n	800339e <UART_SetConfig+0x212>
 8003388:	2304      	movs	r3, #4
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e007      	b.n	800339e <UART_SetConfig+0x212>
 800338e:	2308      	movs	r3, #8
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e004      	b.n	800339e <UART_SetConfig+0x212>
 8003394:	2310      	movs	r3, #16
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	e001      	b.n	800339e <UART_SetConfig+0x212>
 800339a:	2310      	movs	r3, #16
 800339c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a6:	d16b      	bne.n	8003480 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80033a8:	7ffb      	ldrb	r3, [r7, #31]
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d838      	bhi.n	8003420 <UART_SetConfig+0x294>
 80033ae:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <UART_SetConfig+0x228>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	080033e1 	.word	0x080033e1
 80033bc:	080033e9 	.word	0x080033e9
 80033c0:	08003421 	.word	0x08003421
 80033c4:	080033ef 	.word	0x080033ef
 80033c8:	08003421 	.word	0x08003421
 80033cc:	08003421 	.word	0x08003421
 80033d0:	08003421 	.word	0x08003421
 80033d4:	080033f7 	.word	0x080033f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d8:	f7ff f91a 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 80033dc:	61b8      	str	r0, [r7, #24]
        break;
 80033de:	e024      	b.n	800342a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e0:	f7ff f938 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 80033e4:	61b8      	str	r0, [r7, #24]
        break;
 80033e6:	e020      	b.n	800342a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <UART_SetConfig+0x290>)
 80033ea:	61bb      	str	r3, [r7, #24]
        break;
 80033ec:	e01d      	b.n	800342a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ee:	f7ff f8af 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 80033f2:	61b8      	str	r0, [r7, #24]
        break;
 80033f4:	e019      	b.n	800342a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033fa:	61bb      	str	r3, [r7, #24]
        break;
 80033fc:	e015      	b.n	800342a <UART_SetConfig+0x29e>
 80033fe:	bf00      	nop
 8003400:	efff69f3 	.word	0xefff69f3
 8003404:	40013800 	.word	0x40013800
 8003408:	40021000 	.word	0x40021000
 800340c:	40004400 	.word	0x40004400
 8003410:	40004800 	.word	0x40004800
 8003414:	40004c00 	.word	0x40004c00
 8003418:	40005000 	.word	0x40005000
 800341c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	77bb      	strb	r3, [r7, #30]
        break;
 8003428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d073      	beq.n	8003518 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	005a      	lsls	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	441a      	add	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b0f      	cmp	r3, #15
 800344a:	d916      	bls.n	800347a <UART_SetConfig+0x2ee>
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003452:	d212      	bcs.n	800347a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	b29b      	uxth	r3, r3
 8003458:	f023 030f 	bic.w	r3, r3, #15
 800345c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	b29b      	uxth	r3, r3
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	b29a      	uxth	r2, r3
 800346a:	89fb      	ldrh	r3, [r7, #14]
 800346c:	4313      	orrs	r3, r2
 800346e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	89fa      	ldrh	r2, [r7, #14]
 8003476:	60da      	str	r2, [r3, #12]
 8003478:	e04e      	b.n	8003518 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	77bb      	strb	r3, [r7, #30]
 800347e:	e04b      	b.n	8003518 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003480:	7ffb      	ldrb	r3, [r7, #31]
 8003482:	2b08      	cmp	r3, #8
 8003484:	d827      	bhi.n	80034d6 <UART_SetConfig+0x34a>
 8003486:	a201      	add	r2, pc, #4	@ (adr r2, 800348c <UART_SetConfig+0x300>)
 8003488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348c:	080034b1 	.word	0x080034b1
 8003490:	080034b9 	.word	0x080034b9
 8003494:	080034c1 	.word	0x080034c1
 8003498:	080034d7 	.word	0x080034d7
 800349c:	080034c7 	.word	0x080034c7
 80034a0:	080034d7 	.word	0x080034d7
 80034a4:	080034d7 	.word	0x080034d7
 80034a8:	080034d7 	.word	0x080034d7
 80034ac:	080034cf 	.word	0x080034cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034b0:	f7ff f8ae 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 80034b4:	61b8      	str	r0, [r7, #24]
        break;
 80034b6:	e013      	b.n	80034e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b8:	f7ff f8cc 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 80034bc:	61b8      	str	r0, [r7, #24]
        break;
 80034be:	e00f      	b.n	80034e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <UART_SetConfig+0x3a4>)
 80034c2:	61bb      	str	r3, [r7, #24]
        break;
 80034c4:	e00c      	b.n	80034e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c6:	f7ff f843 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 80034ca:	61b8      	str	r0, [r7, #24]
        break;
 80034cc:	e008      	b.n	80034e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034d2:	61bb      	str	r3, [r7, #24]
        break;
 80034d4:	e004      	b.n	80034e0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	77bb      	strb	r3, [r7, #30]
        break;
 80034de:	bf00      	nop
    }

    if (pclk != 0U)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d018      	beq.n	8003518 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	085a      	lsrs	r2, r3, #1
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	441a      	add	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b0f      	cmp	r3, #15
 80034fe:	d909      	bls.n	8003514 <UART_SetConfig+0x388>
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003506:	d205      	bcs.n	8003514 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	b29a      	uxth	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	e001      	b.n	8003518 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003524:	7fbb      	ldrb	r3, [r7, #30]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	007a1200 	.word	0x007a1200

08003534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01a      	beq.n	800364a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003632:	d10a      	bne.n	800364a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
  }
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b098      	sub	sp, #96	@ 0x60
 800367c:	af02      	add	r7, sp, #8
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003688:	f7fd f88a 	bl	80007a0 <HAL_GetTick>
 800368c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b08      	cmp	r3, #8
 800369a:	d12e      	bne.n	80036fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800369c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a4:	2200      	movs	r2, #0
 80036a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f88c 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d021      	beq.n	80036fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e6      	bne.n	80036b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e062      	b.n	80037c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b04      	cmp	r3, #4
 8003706:	d149      	bne.n	800379c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003708:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003710:	2200      	movs	r2, #0
 8003712:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f856 	bl	80037c8 <UART_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d03c      	beq.n	800379c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	623b      	str	r3, [r7, #32]
   return(result);
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003740:	633b      	str	r3, [r7, #48]	@ 0x30
 8003742:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800374e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e6      	bne.n	8003722 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3308      	adds	r3, #8
 800375a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	60fb      	str	r3, [r7, #12]
   return(result);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3308      	adds	r3, #8
 8003772:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003774:	61fa      	str	r2, [r7, #28]
 8003776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	69b9      	ldr	r1, [r7, #24]
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	617b      	str	r3, [r7, #20]
   return(result);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e5      	bne.n	8003754 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e011      	b.n	80037c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3758      	adds	r7, #88	@ 0x58
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d8:	e04f      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d04b      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fc ffdd 	bl	80007a0 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e04e      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d037      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b80      	cmp	r3, #128	@ 0x80
 800380e:	d034      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b40      	cmp	r3, #64	@ 0x40
 8003814:	d031      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b08      	cmp	r3, #8
 8003822:	d110      	bne.n	8003846 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2208      	movs	r2, #8
 800382a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f8ff 	bl	8003a30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2208      	movs	r2, #8
 8003836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e029      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003854:	d111      	bne.n	800387a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800385e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f8e5 	bl	8003a30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e00f      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d0a0      	beq.n	80037da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b096      	sub	sp, #88	@ 0x58
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2222      	movs	r2, #34	@ 0x22
 80038cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d028      	beq.n	800392a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038dc:	4a3e      	ldr	r2, [pc, #248]	@ (80039d8 <UART_Start_Receive_DMA+0x134>)
 80038de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e4:	4a3d      	ldr	r2, [pc, #244]	@ (80039dc <UART_Start_Receive_DMA+0x138>)
 80038e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ec:	4a3c      	ldr	r2, [pc, #240]	@ (80039e0 <UART_Start_Receive_DMA+0x13c>)
 80038ee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f4:	2200      	movs	r2, #0
 80038f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3324      	adds	r3, #36	@ 0x24
 8003902:	4619      	mov	r1, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003908:	461a      	mov	r2, r3
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	f7fd f8ac 	bl	8000a68 <HAL_DMA_Start_IT>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2210      	movs	r2, #16
 800391a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e051      	b.n	80039ce <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d018      	beq.n	8003964 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003946:	657b      	str	r3, [r7, #84]	@ 0x54
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003952:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800395e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e6      	bne.n	8003932 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3308      	adds	r3, #8
 800396a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	653b      	str	r3, [r7, #80]	@ 0x50
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3308      	adds	r3, #8
 8003982:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003984:	637a      	str	r2, [r7, #52]	@ 0x34
 8003986:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800398a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e5      	bne.n	8003964 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3308      	adds	r3, #8
 800399e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	613b      	str	r3, [r7, #16]
   return(result);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3308      	adds	r3, #8
 80039b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039b8:	623a      	str	r2, [r7, #32]
 80039ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	69f9      	ldr	r1, [r7, #28]
 80039be:	6a3a      	ldr	r2, [r7, #32]
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e5      	bne.n	8003998 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3758      	adds	r7, #88	@ 0x58
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	08003af9 	.word	0x08003af9
 80039dc:	08003c1f 	.word	0x08003c1f
 80039e0:	08003c5d 	.word	0x08003c5d

080039e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	@ 0x24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6979      	ldr	r1, [r7, #20]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	613b      	str	r3, [r7, #16]
   return(result);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e6      	bne.n	80039ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003a24:	bf00      	nop
 8003a26:	3724      	adds	r7, #36	@ 0x24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b095      	sub	sp, #84	@ 0x54
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a56:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e6      	bne.n	8003a38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3308      	adds	r3, #8
 8003a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3308      	adds	r3, #8
 8003a88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a92:	e841 2300 	strex	r3, r2, [r1]
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e5      	bne.n	8003a6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d118      	bne.n	8003ad8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f023 0310 	bic.w	r3, r3, #16
 8003aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6979      	ldr	r1, [r7, #20]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e6      	bne.n	8003aa6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003aec:	bf00      	nop
 8003aee:	3754      	adds	r7, #84	@ 0x54
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b09c      	sub	sp, #112	@ 0x70
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d071      	beq.n	8003bf2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003b0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b36:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e6      	bne.n	8003b16 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003b68:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b6a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e5      	bne.n	8003b48 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3308      	adds	r3, #8
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b92:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003b9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e5      	bne.n	8003b7c <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d118      	bne.n	8003bf2 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f023 0310 	bic.w	r3, r3, #16
 8003bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	69b9      	ldr	r1, [r7, #24]
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	617b      	str	r3, [r7, #20]
   return(result);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e6      	bne.n	8003bc0 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c06:	4619      	mov	r1, r3
 8003c08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c0a:	f000 fa05 	bl	8004018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c0e:	e002      	b.n	8003c16 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003c10:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c12:	f7ff fa9d 	bl	8003150 <HAL_UART_RxCpltCallback>
}
 8003c16:	bf00      	nop
 8003c18:	3770      	adds	r7, #112	@ 0x70
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d109      	bne.n	8003c4e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c40:	085b      	lsrs	r3, r3, #1
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4619      	mov	r1, r3
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f9e6 	bl	8004018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c4c:	e002      	b.n	8003c54 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f7ff fa88 	bl	8003164 <HAL_UART_RxHalfCpltCallback>
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c6e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c82:	2b80      	cmp	r3, #128	@ 0x80
 8003c84:	d109      	bne.n	8003c9a <UART_DMAError+0x3e>
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b21      	cmp	r3, #33	@ 0x21
 8003c8a:	d106      	bne.n	8003c9a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8003c94:	6978      	ldr	r0, [r7, #20]
 8003c96:	f7ff fea5 	bl	80039e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca4:	2b40      	cmp	r3, #64	@ 0x40
 8003ca6:	d109      	bne.n	8003cbc <UART_DMAError+0x60>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b22      	cmp	r3, #34	@ 0x22
 8003cac:	d106      	bne.n	8003cbc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8003cb6:	6978      	ldr	r0, [r7, #20]
 8003cb8:	f7ff feba 	bl	8003a30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cc2:	f043 0210 	orr.w	r2, r3, #16
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ccc:	6978      	ldr	r0, [r7, #20]
 8003cce:	f7ff fa53 	bl	8003178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cd2:	bf00      	nop
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff fa3d 	bl	8003178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b088      	sub	sp, #32
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6979      	ldr	r1, [r7, #20]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	613b      	str	r3, [r7, #16]
   return(result);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e6      	bne.n	8003d0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff f9f5 	bl	800313c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d52:	bf00      	nop
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b08c      	sub	sp, #48	@ 0x30
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d142      	bne.n	8003e0c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e03b      	b.n	8003e0e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	461a      	mov	r2, r3
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7ff fd7b 	bl	80038a4 <UART_Start_Receive_DMA>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003db4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d124      	bne.n	8003e06 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d11d      	bne.n	8003e00 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2210      	movs	r2, #16
 8003dca:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f043 0310 	orr.w	r3, r3, #16
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dec:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6a39      	ldr	r1, [r7, #32]
 8003df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e6      	bne.n	8003dcc <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8003dfe:	e002      	b.n	8003e06 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003e06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e0a:	e000      	b.n	8003e0e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3730      	adds	r7, #48	@ 0x30
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <led_toggle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_toggle( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin )
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin( GPIOx, GPIO_Pin );
 8003e22:	887b      	ldrh	r3, [r7, #2]
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fd f9a8 	bl	800117c <HAL_GPIO_TogglePin>
	return;
 8003e2c:	bf00      	nop
}
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <led_run>:


void led_run()
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
	led_toggle( LD2_GPIO_Port, LD2_Pin);
 8003e38:	2120      	movs	r1, #32
 8003e3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e3e:	f7ff ffea 	bl	8003e16 <led_toggle>
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <scheduler_init>:
/*
 * function
 * */

void scheduler_init( void )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
	schedulerVars.nrOfTasks = 0;
 8003e4e:	4b18      	ldr	r3, [pc, #96]	@ (8003eb0 <scheduler_init+0x68>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8003e56:	2300      	movs	r3, #0
 8003e58:	71fb      	strb	r3, [r7, #7]
 8003e5a:	e01f      	b.n	8003e9c <scheduler_init+0x54>
	{
		schedulerVars.taskList[i].pTask = NULL;
 8003e5c:	79fa      	ldrb	r2, [r7, #7]
 8003e5e:	4914      	ldr	r1, [pc, #80]	@ (8003eb0 <scheduler_init+0x68>)
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].delay = 0;
 8003e6e:	79fa      	ldrb	r2, [r7, #7]
 8003e70:	490f      	ldr	r1, [pc, #60]	@ (8003eb0 <scheduler_init+0x68>)
 8003e72:	4613      	mov	r3, r2
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].lastExecutionTime = 0;
 8003e82:	79fa      	ldrb	r2, [r7, #7]
 8003e84:	490a      	ldr	r1, [pc, #40]	@ (8003eb0 <scheduler_init+0x68>)
 8003e86:	4613      	mov	r3, r2
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	3308      	adds	r3, #8
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	71fb      	strb	r3, [r7, #7]
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	d9dc      	bls.n	8003e5c <scheduler_init+0x14>
	}
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	200000f8 	.word	0x200000f8

08003eb4 <scheduler_runTask>:
	// no available task was found
	return 0;
}

uint8_t scheduler_runTask( void (*pTask)(void) )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	e019      	b.n	8003ef6 <scheduler_runTask+0x42>
	{
		// search for available task.
		if ( schedulerVars.runOnceTaskList[i].pTask == NULL )
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	4a11      	ldr	r2, [pc, #68]	@ (8003f0c <scheduler_runTask+0x58>)
 8003ec6:	331e      	adds	r3, #30
 8003ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10f      	bne.n	8003ef0 <scheduler_runTask+0x3c>
		{
			schedulerVars.runOnceTaskList[i].pTask = pTask;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	490e      	ldr	r1, [pc, #56]	@ (8003f0c <scheduler_runTask+0x58>)
 8003ed4:	331e      	adds	r3, #30
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			schedulerVars.nrOfRunOnceTasks += 1;
 8003edc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f0c <scheduler_runTask+0x58>)
 8003ede:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	4b09      	ldr	r3, [pc, #36]	@ (8003f0c <scheduler_runTask+0x58>)
 8003ee8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			return 1;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e006      	b.n	8003efe <scheduler_runTask+0x4a>
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b09      	cmp	r3, #9
 8003efa:	d9e2      	bls.n	8003ec2 <scheduler_runTask+0xe>
		}
	}
	// no available task was found
	return 0;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	200000f8 	.word	0x200000f8

08003f10 <scheduler_run>:

/*
 * function
 * */
void scheduler_run( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	603b      	str	r3, [r7, #0]
	while( 1 )
	{
		// run once tasks:
		for ( uint8_t i = 0; i < schedulerVars.nrOfRunOnceTasks; i += 1 )
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	71fb      	strb	r3, [r7, #7]
 8003f1e:	e016      	b.n	8003f4e <scheduler_run+0x3e>
		{
			// execute task
			schedulerVars.runOnceTaskList[i].pTask();
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	4a2a      	ldr	r2, [pc, #168]	@ (8003fcc <scheduler_run+0xbc>)
 8003f24:	331e      	adds	r3, #30
 8003f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2a:	4798      	blx	r3

			// remove task from list:
			schedulerVars.runOnceTaskList[i].pTask = NULL;
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	4a27      	ldr	r2, [pc, #156]	@ (8003fcc <scheduler_run+0xbc>)
 8003f30:	331e      	adds	r3, #30
 8003f32:	2100      	movs	r1, #0
 8003f34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			schedulerVars.nrOfRunOnceTasks -= 1;
 8003f38:	4b24      	ldr	r3, [pc, #144]	@ (8003fcc <scheduler_run+0xbc>)
 8003f3a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	4b22      	ldr	r3, [pc, #136]	@ (8003fcc <scheduler_run+0xbc>)
 8003f44:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
		for ( uint8_t i = 0; i < schedulerVars.nrOfRunOnceTasks; i += 1 )
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	71fb      	strb	r3, [r7, #7]
 8003f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003fcc <scheduler_run+0xbc>)
 8003f50:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003f54:	79fa      	ldrb	r2, [r7, #7]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d3e2      	bcc.n	8003f20 <scheduler_run+0x10>
		}

		// repeated tasks:
		now = HAL_GetTick();
 8003f5a:	f7fc fc21 	bl	80007a0 <HAL_GetTick>
 8003f5e:	6038      	str	r0, [r7, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8003f60:	2300      	movs	r3, #0
 8003f62:	71bb      	strb	r3, [r7, #6]
 8003f64:	e02b      	b.n	8003fbe <scheduler_run+0xae>
		{
			if ( now - schedulerVars.taskList[i].lastExecutionTime  >= schedulerVars.taskList[i].delay )
 8003f66:	79ba      	ldrb	r2, [r7, #6]
 8003f68:	4918      	ldr	r1, [pc, #96]	@ (8003fcc <scheduler_run+0xbc>)
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	3308      	adds	r3, #8
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	1ad1      	subs	r1, r2, r3
 8003f7c:	79ba      	ldrb	r2, [r7, #6]
 8003f7e:	4813      	ldr	r0, [pc, #76]	@ (8003fcc <scheduler_run+0xbc>)
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4403      	add	r3, r0
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4299      	cmp	r1, r3
 8003f90:	d312      	bcc.n	8003fb8 <scheduler_run+0xa8>
			{
				// execute task
				schedulerVars.taskList[i].pTask();
 8003f92:	79ba      	ldrb	r2, [r7, #6]
 8003f94:	490d      	ldr	r1, [pc, #52]	@ (8003fcc <scheduler_run+0xbc>)
 8003f96:	4613      	mov	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4798      	blx	r3
				schedulerVars.taskList[i].lastExecutionTime = now;
 8003fa4:	79ba      	ldrb	r2, [r7, #6]
 8003fa6:	4909      	ldr	r1, [pc, #36]	@ (8003fcc <scheduler_run+0xbc>)
 8003fa8:	4613      	mov	r3, r2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	601a      	str	r2, [r3, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8003fb8:	79bb      	ldrb	r3, [r7, #6]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	71bb      	strb	r3, [r7, #6]
 8003fbe:	4b03      	ldr	r3, [pc, #12]	@ (8003fcc <scheduler_run+0xbc>)
 8003fc0:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003fc4:	79ba      	ldrb	r2, [r7, #6]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d3cd      	bcc.n	8003f66 <scheduler_run+0x56>
		for ( uint8_t i = 0; i < schedulerVars.nrOfRunOnceTasks; i += 1 )
 8003fca:	e7a6      	b.n	8003f1a <scheduler_run+0xa>
 8003fcc:	200000f8 	.word	0x200000f8

08003fd0 <serial_uart_receiveToIdle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t serial_uart_receiveToIdle( UART_HandleTypeDef *huart )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	puart = huart;
 8003fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8004010 <serial_uart_receiveToIdle+0x40>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6013      	str	r3, [r2, #0]
	HAL_UARTEx_ReceiveToIdle_DMA( puart, uart_dma_rxBuf, RX_BUF_SIZE );
 8003fde:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <serial_uart_receiveToIdle+0x40>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2240      	movs	r2, #64	@ 0x40
 8003fe4:	490b      	ldr	r1, [pc, #44]	@ (8004014 <serial_uart_receiveToIdle+0x44>)
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fec1 	bl	8003d6e <HAL_UARTEx_ReceiveToIdle_DMA>

	  // not interested of half transfer interrupt.
	  __HAL_DMA_DISABLE_IT( puart->hdmarx, DMA_IT_HT );
 8003fec:	4b08      	ldr	r3, [pc, #32]	@ (8004010 <serial_uart_receiveToIdle+0x40>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <serial_uart_receiveToIdle+0x40>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0204 	bic.w	r2, r2, #4
 8004002:	601a      	str	r2, [r3, #0]
	return 0;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200001dc 	.word	0x200001dc
 8004014:	2000019c 	.word	0x2000019c

08004018 <HAL_UARTEx_RxEventCallback>:
 * 					function
 * ********************************************/


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	807b      	strh	r3, [r7, #2]
	if ( huart->Instance == USART2 )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a08      	ldr	r2, [pc, #32]	@ (800404c <HAL_UARTEx_RxEventCallback+0x34>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10a      	bne.n	8004044 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		// restart receiving data.
		HAL_UARTEx_ReceiveToIdle_DMA( puart, uart_dma_rxBuf, RX_BUF_SIZE);
 800402e:	4b08      	ldr	r3, [pc, #32]	@ (8004050 <HAL_UARTEx_RxEventCallback+0x38>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2240      	movs	r2, #64	@ 0x40
 8004034:	4907      	ldr	r1, [pc, #28]	@ (8004054 <HAL_UARTEx_RxEventCallback+0x3c>)
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fe99 	bl	8003d6e <HAL_UARTEx_ReceiveToIdle_DMA>
		scheduler_runTask( led_run );
 800403c:	4806      	ldr	r0, [pc, #24]	@ (8004058 <HAL_UARTEx_RxEventCallback+0x40>)
 800403e:	f7ff ff39 	bl	8003eb4 <scheduler_runTask>
	}
	return;
 8004042:	bf00      	nop
 8004044:	bf00      	nop
}
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40004400 	.word	0x40004400
 8004050:	200001dc 	.word	0x200001dc
 8004054:	2000019c 	.word	0x2000019c
 8004058:	08003e35 	.word	0x08003e35

0800405c <memset>:
 800405c:	4402      	add	r2, r0
 800405e:	4603      	mov	r3, r0
 8004060:	4293      	cmp	r3, r2
 8004062:	d100      	bne.n	8004066 <memset+0xa>
 8004064:	4770      	bx	lr
 8004066:	f803 1b01 	strb.w	r1, [r3], #1
 800406a:	e7f9      	b.n	8004060 <memset+0x4>

0800406c <__libc_init_array>:
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	4d0d      	ldr	r5, [pc, #52]	@ (80040a4 <__libc_init_array+0x38>)
 8004070:	4c0d      	ldr	r4, [pc, #52]	@ (80040a8 <__libc_init_array+0x3c>)
 8004072:	1b64      	subs	r4, r4, r5
 8004074:	10a4      	asrs	r4, r4, #2
 8004076:	2600      	movs	r6, #0
 8004078:	42a6      	cmp	r6, r4
 800407a:	d109      	bne.n	8004090 <__libc_init_array+0x24>
 800407c:	4d0b      	ldr	r5, [pc, #44]	@ (80040ac <__libc_init_array+0x40>)
 800407e:	4c0c      	ldr	r4, [pc, #48]	@ (80040b0 <__libc_init_array+0x44>)
 8004080:	f000 f818 	bl	80040b4 <_init>
 8004084:	1b64      	subs	r4, r4, r5
 8004086:	10a4      	asrs	r4, r4, #2
 8004088:	2600      	movs	r6, #0
 800408a:	42a6      	cmp	r6, r4
 800408c:	d105      	bne.n	800409a <__libc_init_array+0x2e>
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	f855 3b04 	ldr.w	r3, [r5], #4
 8004094:	4798      	blx	r3
 8004096:	3601      	adds	r6, #1
 8004098:	e7ee      	b.n	8004078 <__libc_init_array+0xc>
 800409a:	f855 3b04 	ldr.w	r3, [r5], #4
 800409e:	4798      	blx	r3
 80040a0:	3601      	adds	r6, #1
 80040a2:	e7f2      	b.n	800408a <__libc_init_array+0x1e>
 80040a4:	08004104 	.word	0x08004104
 80040a8:	08004104 	.word	0x08004104
 80040ac:	08004104 	.word	0x08004104
 80040b0:	08004108 	.word	0x08004108

080040b4 <_init>:
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b6:	bf00      	nop
 80040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ba:	bc08      	pop	{r3}
 80040bc:	469e      	mov	lr, r3
 80040be:	4770      	bx	lr

080040c0 <_fini>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	bf00      	nop
 80040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c6:	bc08      	pop	{r3}
 80040c8:	469e      	mov	lr, r3
 80040ca:	4770      	bx	lr

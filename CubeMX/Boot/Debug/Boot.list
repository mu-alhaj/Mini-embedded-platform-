
Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d60  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003ef4  08003ef4  00004ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f2c  08003f2c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f2c  08003f2c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f2c  08003f2c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f2c  08003f2c  00004f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f30  08003f30  00004f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003f34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000016c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000178  20000178  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aeec  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dff  00000000  00000000  0000ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  00011d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e4  00000000  00000000  000124f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff3a  00000000  00000000  00012ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c66a  00000000  00000000  00032a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf9c1  00000000  00000000  0003f078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fea39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d94  00000000  00000000  000fea7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00100810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003edc 	.word	0x08003edc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003edc 	.word	0x08003edc

080001d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001da:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <MX_DMA_Init+0x38>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a0b      	ldr	r2, [pc, #44]	@ (800020c <MX_DMA_Init+0x38>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6153      	str	r3, [r2, #20]
 80001e6:	4b09      	ldr	r3, [pc, #36]	@ (800020c <MX_DMA_Init+0x38>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2100      	movs	r1, #0
 80001f6:	2010      	movs	r0, #16
 80001f8:	f000 fbfb 	bl	80009f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80001fc:	2010      	movs	r0, #16
 80001fe:	f000 fc14 	bl	8000a2a <HAL_NVIC_EnableIRQ>

}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40021000 	.word	0x40021000

08000210 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b08a      	sub	sp, #40	@ 0x28
 8000214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000226:	4b4b      	ldr	r3, [pc, #300]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a4a      	ldr	r2, [pc, #296]	@ (8000354 <MX_GPIO_Init+0x144>)
 800022c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b48      	ldr	r3, [pc, #288]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800023a:	613b      	str	r3, [r7, #16]
 800023c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800023e:	4b45      	ldr	r3, [pc, #276]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a44      	ldr	r2, [pc, #272]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000244:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b42      	ldr	r3, [pc, #264]	@ (8000354 <MX_GPIO_Init+0x144>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000256:	4b3f      	ldr	r3, [pc, #252]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	4a3e      	ldr	r2, [pc, #248]	@ (8000354 <MX_GPIO_Init+0x144>)
 800025c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000260:	6153      	str	r3, [r2, #20]
 8000262:	4b3c      	ldr	r3, [pc, #240]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800026a:	60bb      	str	r3, [r7, #8]
 800026c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	4b39      	ldr	r3, [pc, #228]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a38      	ldr	r2, [pc, #224]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000278:	6153      	str	r3, [r2, #20]
 800027a:	4b36      	ldr	r3, [pc, #216]	@ (8000354 <MX_GPIO_Init+0x144>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000282:	607b      	str	r3, [r7, #4]
 8000284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000286:	4b33      	ldr	r3, [pc, #204]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a32      	ldr	r2, [pc, #200]	@ (8000354 <MX_GPIO_Init+0x144>)
 800028c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b30      	ldr	r3, [pc, #192]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2120      	movs	r1, #32
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f000 ff93 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80002b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	4619      	mov	r1, r3
 80002c0:	4825      	ldr	r0, [pc, #148]	@ (8000358 <MX_GPIO_Init+0x148>)
 80002c2:	f000 fdfb 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002c6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80002ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002cc:	2303      	movs	r3, #3
 80002ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	4619      	mov	r1, r3
 80002da:	481f      	ldr	r0, [pc, #124]	@ (8000358 <MX_GPIO_Init+0x148>)
 80002dc:	f000 fdee 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80002e0:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 80002e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e6:	2303      	movs	r3, #3
 80002e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4619      	mov	r1, r3
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f8:	f000 fde0 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002fc:	2320      	movs	r3, #32
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000300:	2301      	movs	r3, #1
 8000302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	2300      	movs	r3, #0
 8000306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000308:	2300      	movs	r3, #0
 800030a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	4619      	mov	r1, r3
 8000312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000316:	f000 fdd1 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800031a:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 800031e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000320:	2303      	movs	r3, #3
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	4619      	mov	r1, r3
 800032e:	480b      	ldr	r0, [pc, #44]	@ (800035c <MX_GPIO_Init+0x14c>)
 8000330:	f000 fdc4 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000334:	2304      	movs	r3, #4
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000338:	2303      	movs	r3, #3
 800033a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	4619      	mov	r1, r3
 8000346:	4806      	ldr	r0, [pc, #24]	@ (8000360 <MX_GPIO_Init+0x150>)
 8000348:	f000 fdb8 	bl	8000ebc <HAL_GPIO_Init>

}
 800034c:	bf00      	nop
 800034e:	3728      	adds	r7, #40	@ 0x28
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000
 8000358:	48000800 	.word	0x48000800
 800035c:	48000400 	.word	0x48000400
 8000360:	48000c00 	.word	0x48000c00

08000364 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	807b      	strh	r3, [r7, #2]
	if ( huart->Instance == USART2 )
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a08      	ldr	r2, [pc, #32]	@ (8000398 <HAL_UARTEx_RxEventCallback+0x34>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d10a      	bne.n	8000390 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		memcpy(buf, rxBuf, Size);
 800037a:	887b      	ldrh	r3, [r7, #2]
 800037c:	461a      	mov	r2, r3
 800037e:	4907      	ldr	r1, [pc, #28]	@ (800039c <HAL_UARTEx_RxEventCallback+0x38>)
 8000380:	4807      	ldr	r0, [pc, #28]	@ (80003a0 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000382:	f003 fd9d 	bl	8003ec0 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuf, RX_BUF_SIZE);
 8000386:	2240      	movs	r2, #64	@ 0x40
 8000388:	4904      	ldr	r1, [pc, #16]	@ (800039c <HAL_UARTEx_RxEventCallback+0x38>)
 800038a:	4806      	ldr	r0, [pc, #24]	@ (80003a4 <HAL_UARTEx_RxEventCallback+0x40>)
 800038c:	f003 fd17 	bl	8003dbe <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40004400 	.word	0x40004400
 800039c:	20000028 	.word	0x20000028
 80003a0:	20000068 	.word	0x20000068
 80003a4:	200000a8 	.word	0x200000a8

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f000 f9e0 	bl	8000770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f832 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f7ff ff2c 	bl	8000210 <MX_GPIO_Init>
  MX_DMA_Init();
 80003b8:	f7ff ff0c 	bl	80001d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80003bc:	f000 f90a 	bl	80005d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA( &huart2, rxBuf, RX_BUF_SIZE );
 80003c0:	2240      	movs	r2, #64	@ 0x40
 80003c2:	4912      	ldr	r1, [pc, #72]	@ (800040c <main+0x64>)
 80003c4:	4812      	ldr	r0, [pc, #72]	@ (8000410 <main+0x68>)
 80003c6:	f003 fcfa 	bl	8003dbe <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT( huart2.hdmarx, DMA_IT_HT );	// not interested of half transfer interrupt.
 80003ca:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <main+0x68>)
 80003cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <main+0x68>)
 80003d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f022 0204 	bic.w	r2, r2, #4
 80003dc:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (buf[0] - 48 == 0 )
 80003de:	4b0d      	ldr	r3, [pc, #52]	@ (8000414 <main+0x6c>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b30      	cmp	r3, #48	@ 0x30
 80003e4:	d106      	bne.n	80003f4 <main+0x4c>
		  HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, 0 );
 80003e6:	2200      	movs	r2, #0
 80003e8:	2120      	movs	r1, #32
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ee:	f000 feef 	bl	80011d0 <HAL_GPIO_WritePin>
 80003f2:	e7f4      	b.n	80003de <main+0x36>
	  else if (buf[0] - 48 == 1 )
 80003f4:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <main+0x6c>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b31      	cmp	r3, #49	@ 0x31
 80003fa:	d1f0      	bne.n	80003de <main+0x36>
		  HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, 1 );
 80003fc:	2201      	movs	r2, #1
 80003fe:	2120      	movs	r1, #32
 8000400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000404:	f000 fee4 	bl	80011d0 <HAL_GPIO_WritePin>
	  if (buf[0] - 48 == 0 )
 8000408:	e7e9      	b.n	80003de <main+0x36>
 800040a:	bf00      	nop
 800040c:	20000028 	.word	0x20000028
 8000410:	200000a8 	.word	0x200000a8
 8000414:	20000068 	.word	0x20000068

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b0a6      	sub	sp, #152	@ 0x98
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000422:	2228      	movs	r2, #40	@ 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f003 fd1d 	bl	8003e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2258      	movs	r2, #88	@ 0x58
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f003 fd0f 	bl	8003e66 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000448:	2302      	movs	r3, #2
 800044a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044c:	2301      	movs	r3, #1
 800044e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000450:	2310      	movs	r3, #16
 8000452:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000456:	2302      	movs	r3, #2
 8000458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800045c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000460:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000464:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000468:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000472:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fec2 	bl	8001200 <HAL_RCC_OscConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000482:	f000 f827 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000486:	230f      	movs	r3, #15
 8000488:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048a:	2302      	movs	r3, #2
 800048c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000496:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80004a0:	2102      	movs	r1, #2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f001 ff00 	bl	80022a8 <HAL_RCC_ClockConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004ae:	f000 f811 	bl	80004d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004b2:	2302      	movs	r3, #2
 80004b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	4618      	mov	r0, r3
 80004be:	f002 f913 	bl	80026e8 <HAL_RCCEx_PeriphCLKConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004c8:	f000 f804 	bl	80004d4 <Error_Handler>
  }
}
 80004cc:	bf00      	nop
 80004ce:	3798      	adds	r7, #152	@ 0x98
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <Error_Handler+0x8>

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <HAL_MspInit+0x44>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000524 <HAL_MspInit+0x44>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <HAL_MspInit+0x44>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <HAL_MspInit+0x44>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <HAL_MspInit+0x44>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <HAL_MspInit+0x44>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000516:	2007      	movs	r0, #7
 8000518:	f000 fa60 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000

08000528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <NMI_Handler+0x4>

08000530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <HardFault_Handler+0x4>

08000538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <MemManage_Handler+0x4>

08000540 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <UsageFault_Handler+0x4>

08000550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057e:	f000 f93d 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800058c:	4802      	ldr	r0, [pc, #8]	@ (8000598 <DMA1_Channel6_IRQHandler+0x10>)
 800058e:	f000 fb88 	bl	8000ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000130 	.word	0x20000130

0800059c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005a0:	4802      	ldr	r0, [pc, #8]	@ (80005ac <USART2_IRQHandler+0x10>)
 80005a2:	f002 fb0d 	bl	8002bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000a8 	.word	0x200000a8

080005b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <SystemInit+0x20>)
 80005b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ba:	4a05      	ldr	r2, [pc, #20]	@ (80005d0 <SystemInit+0x20>)
 80005bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d8:	4b14      	ldr	r3, [pc, #80]	@ (800062c <MX_USART2_UART_Init+0x58>)
 80005da:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <MX_USART2_UART_Init+0x5c>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005de:	4b13      	ldr	r3, [pc, #76]	@ (800062c <MX_USART2_UART_Init+0x58>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_USART2_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <MX_USART2_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <MX_USART2_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <MX_USART2_UART_Init+0x58>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <MX_USART2_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b09      	ldr	r3, [pc, #36]	@ (800062c <MX_USART2_UART_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_USART2_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000616:	4805      	ldr	r0, [pc, #20]	@ (800062c <MX_USART2_UART_Init+0x58>)
 8000618:	f002 fa84 	bl	8002b24 <HAL_UART_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000622:	f7ff ff57 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000a8 	.word	0x200000a8
 8000630:	40004400 	.word	0x40004400

08000634 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	@ 0x28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a2e      	ldr	r2, [pc, #184]	@ (800070c <HAL_UART_MspInit+0xd8>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d156      	bne.n	8000704 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000656:	4b2e      	ldr	r3, [pc, #184]	@ (8000710 <HAL_UART_MspInit+0xdc>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a2d      	ldr	r2, [pc, #180]	@ (8000710 <HAL_UART_MspInit+0xdc>)
 800065c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b2b      	ldr	r3, [pc, #172]	@ (8000710 <HAL_UART_MspInit+0xdc>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <HAL_UART_MspInit+0xdc>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a27      	ldr	r2, [pc, #156]	@ (8000710 <HAL_UART_MspInit+0xdc>)
 8000674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <HAL_UART_MspInit+0xdc>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000686:	230c      	movs	r3, #12
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000696:	2307      	movs	r3, #7
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a4:	f000 fc0a 	bl	8000ebc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <HAL_UART_MspInit+0xe0>)
 80006aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000718 <HAL_UART_MspInit+0xe4>)
 80006ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ae:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <HAL_UART_MspInit+0xe0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006b4:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <HAL_UART_MspInit+0xe0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006ba:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <HAL_UART_MspInit+0xe0>)
 80006bc:	2280      	movs	r2, #128	@ 0x80
 80006be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <HAL_UART_MspInit+0xe0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006c6:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <HAL_UART_MspInit+0xe0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <HAL_UART_MspInit+0xe0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <HAL_UART_MspInit+0xe0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80006d8:	480e      	ldr	r0, [pc, #56]	@ (8000714 <HAL_UART_MspInit+0xe0>)
 80006da:	f000 f9c0 	bl	8000a5e <HAL_DMA_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80006e4:	f7ff fef6 	bl	80004d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000714 <HAL_UART_MspInit+0xe0>)
 80006ec:	675a      	str	r2, [r3, #116]	@ 0x74
 80006ee:	4a09      	ldr	r2, [pc, #36]	@ (8000714 <HAL_UART_MspInit+0xe0>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	2026      	movs	r0, #38	@ 0x26
 80006fa:	f000 f97a 	bl	80009f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006fe:	2026      	movs	r0, #38	@ 0x26
 8000700:	f000 f993 	bl	8000a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	@ 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40004400 	.word	0x40004400
 8000710:	40021000 	.word	0x40021000
 8000714:	20000130 	.word	0x20000130
 8000718:	4002006c 	.word	0x4002006c

0800071c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800071c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000754 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000720:	f7ff ff46 	bl	80005b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000724:	480c      	ldr	r0, [pc, #48]	@ (8000758 <LoopForever+0x6>)
  ldr r1, =_edata
 8000726:	490d      	ldr	r1, [pc, #52]	@ (800075c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000728:	4a0d      	ldr	r2, [pc, #52]	@ (8000760 <LoopForever+0xe>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800072c:	e002      	b.n	8000734 <LoopCopyDataInit>

0800072e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000732:	3304      	adds	r3, #4

08000734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000738:	d3f9      	bcc.n	800072e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073a:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <LoopForever+0x12>)
  ldr r4, =_ebss
 800073c:	4c0a      	ldr	r4, [pc, #40]	@ (8000768 <LoopForever+0x16>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000740:	e001      	b.n	8000746 <LoopFillZerobss>

08000742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000744:	3204      	adds	r2, #4

08000746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000748:	d3fb      	bcc.n	8000742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800074a:	f003 fb95 	bl	8003e78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800074e:	f7ff fe2b 	bl	80003a8 <main>

08000752 <LoopForever>:

LoopForever:
    b LoopForever
 8000752:	e7fe      	b.n	8000752 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000754:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800075c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000760:	08003f34 	.word	0x08003f34
  ldr r2, =_sbss
 8000764:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000768:	20000178 	.word	0x20000178

0800076c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC1_2_IRQHandler>
	...

08000770 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <HAL_Init+0x28>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a07      	ldr	r2, [pc, #28]	@ (8000798 <HAL_Init+0x28>)
 800077a:	f043 0310 	orr.w	r3, r3, #16
 800077e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f92b 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000786:	2000      	movs	r0, #0
 8000788:	f000 f808 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078c:	f7ff fea8 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <HAL_InitTick+0x54>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <HAL_InitTick+0x58>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f943 	bl	8000a46 <HAL_SYSTICK_Config>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00e      	b.n	80007e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d80a      	bhi.n	80007e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f000 f90b 	bl	80009f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007dc:	4a06      	ldr	r2, [pc, #24]	@ (80007f8 <HAL_InitTick+0x5c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e000      	b.n	80007e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000004 	.word	0x20000004

080007fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_IncTick+0x20>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <HAL_IncTick+0x24>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <HAL_IncTick+0x24>)
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000008 	.word	0x20000008
 8000820:	20000174 	.word	0x20000174

08000824 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return uwTick;  
 8000828:	4b03      	ldr	r3, [pc, #12]	@ (8000838 <HAL_GetTick+0x14>)
 800082a:	681b      	ldr	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000174 	.word	0x20000174

0800083c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000858:	4013      	ands	r3, r2
 800085a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800086c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086e:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	60d3      	str	r3, [r2, #12]
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000888:	4b04      	ldr	r3, [pc, #16]	@ (800089c <__NVIC_GetPriorityGrouping+0x18>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	f003 0307 	and.w	r3, r3, #7
}
 8000892:	4618      	mov	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	db0b      	blt.n	80008ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	f003 021f 	and.w	r2, r3, #31
 80008b8:	4907      	ldr	r1, [pc, #28]	@ (80008d8 <__NVIC_EnableIRQ+0x38>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	095b      	lsrs	r3, r3, #5
 80008c0:	2001      	movs	r0, #1
 80008c2:	fa00 f202 	lsl.w	r2, r0, r2
 80008c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e100 	.word	0xe000e100

080008dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db0a      	blt.n	8000906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	490c      	ldr	r1, [pc, #48]	@ (8000928 <__NVIC_SetPriority+0x4c>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	0112      	lsls	r2, r2, #4
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	440b      	add	r3, r1
 8000900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000904:	e00a      	b.n	800091c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4908      	ldr	r1, [pc, #32]	@ (800092c <__NVIC_SetPriority+0x50>)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	f003 030f 	and.w	r3, r3, #15
 8000912:	3b04      	subs	r3, #4
 8000914:	0112      	lsls	r2, r2, #4
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	440b      	add	r3, r1
 800091a:	761a      	strb	r2, [r3, #24]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000e100 	.word	0xe000e100
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000930:	b480      	push	{r7}
 8000932:	b089      	sub	sp, #36	@ 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f1c3 0307 	rsb	r3, r3, #7
 800094a:	2b04      	cmp	r3, #4
 800094c:	bf28      	it	cs
 800094e:	2304      	movcs	r3, #4
 8000950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3304      	adds	r3, #4
 8000956:	2b06      	cmp	r3, #6
 8000958:	d902      	bls.n	8000960 <NVIC_EncodePriority+0x30>
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3b03      	subs	r3, #3
 800095e:	e000      	b.n	8000962 <NVIC_EncodePriority+0x32>
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	f04f 32ff 	mov.w	r2, #4294967295
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43da      	mvns	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	401a      	ands	r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000978:	f04f 31ff 	mov.w	r1, #4294967295
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	43d9      	mvns	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	4313      	orrs	r3, r2
         );
}
 800098a:	4618      	mov	r0, r3
 800098c:	3724      	adds	r7, #36	@ 0x24
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009a8:	d301      	bcc.n	80009ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00f      	b.n	80009ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <SysTick_Config+0x40>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b6:	210f      	movs	r1, #15
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f7ff ff8e 	bl	80008dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <SysTick_Config+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <SysTick_Config+0x40>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	e000e010 	.word	0xe000e010

080009dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff29 	bl	800083c <__NVIC_SetPriorityGrouping>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a04:	f7ff ff3e 	bl	8000884 <__NVIC_GetPriorityGrouping>
 8000a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff ff8e 	bl	8000930 <NVIC_EncodePriority>
 8000a14:	4602      	mov	r2, r0
 8000a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff5d 	bl	80008dc <__NVIC_SetPriority>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff31 	bl	80008a0 <__NVIC_EnableIRQ>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffa2 	bl	8000998 <SysTick_Config>
 8000a54:	4603      	mov	r3, r0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b084      	sub	sp, #16
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d101      	bne.n	8000a74 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e037      	b.n	8000ae4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2202      	movs	r2, #2
 8000a78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000a8a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000a8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f000 f9bc 	bl	8000e44 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d101      	bne.n	8000b0c <HAL_DMA_Start_IT+0x20>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e04a      	b.n	8000ba2 <HAL_DMA_Start_IT+0xb6>
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d13a      	bne.n	8000b94 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2202      	movs	r2, #2
 8000b22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f022 0201 	bic.w	r2, r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f000 f950 	bl	8000de8 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d008      	beq.n	8000b62 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f042 020e 	orr.w	r2, r2, #14
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	e00f      	b.n	8000b82 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f042 020a 	orr.w	r2, r2, #10
 8000b70:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 0204 	bic.w	r2, r2, #4
 8000b80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 0201 	orr.w	r2, r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e005      	b.n	8000ba0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e02e      	b.n	8000c1a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d008      	beq.n	8000bd8 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2204      	movs	r2, #4
 8000bca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e020      	b.n	8000c1a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f022 020e 	bic.w	r2, r2, #14
 8000be6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f022 0201 	bic.w	r2, r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c00:	2101      	movs	r1, #1
 8000c02:	fa01 f202 	lsl.w	r2, r1, r2
 8000c06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b084      	sub	sp, #16
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d005      	beq.n	8000c48 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2204      	movs	r2, #4
 8000c40:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e027      	b.n	8000c98 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 020e 	bic.w	r2, r2, #14
 8000c56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0201 	bic.w	r2, r2, #1
 8000c66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c70:	2101      	movs	r1, #1
 8000c72:	fa01 f202 	lsl.w	r2, r1, r2
 8000c76:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	4798      	blx	r3
    }
  }
  return status;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b084      	sub	sp, #16
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d024      	beq.n	8000d14 <HAL_DMA_IRQHandler+0x72>
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d01f      	beq.n	8000d14 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d107      	bne.n	8000cf2 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0204 	bic.w	r2, r2, #4
 8000cf0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000d00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d06a      	beq.n	8000de0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d12:	e065      	b.n	8000de0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	2202      	movs	r2, #2
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d02c      	beq.n	8000d7e <HAL_DMA_IRQHandler+0xdc>
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d027      	beq.n	8000d7e <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0320 	and.w	r3, r3, #32
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d10b      	bne.n	8000d54 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 020a 	bic.w	r2, r2, #10
 8000d4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d035      	beq.n	8000de0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d7c:	e030      	b.n	8000de0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	2208      	movs	r2, #8
 8000d84:	409a      	lsls	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d028      	beq.n	8000de0 <HAL_DMA_IRQHandler+0x13e>
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d023      	beq.n	8000de0 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 020e 	bic.w	r2, r2, #14
 8000da6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000db0:	2101      	movs	r1, #1
 8000db2:	fa01 f202 	lsl.w	r2, r1, r2
 8000db6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d004      	beq.n	8000de0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	4798      	blx	r3
    }
  }
}
 8000dde:	e7ff      	b.n	8000de0 <HAL_DMA_IRQHandler+0x13e>
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dfe:	2101      	movs	r1, #1
 8000e00:	fa01 f202 	lsl.w	r2, r1, r2
 8000e04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b10      	cmp	r3, #16
 8000e14:	d108      	bne.n	8000e28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e26:	e007      	b.n	8000e38 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	60da      	str	r2, [r3, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <DMA_CalcBaseAndBitshift+0x60>)
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d80f      	bhi.n	8000e78 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <DMA_CalcBaseAndBitshift+0x64>)
 8000e60:	4413      	add	r3, r2
 8000e62:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <DMA_CalcBaseAndBitshift+0x68>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	009a      	lsls	r2, r3, #2
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb0 <DMA_CalcBaseAndBitshift+0x6c>)
 8000e74:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000e76:	e00e      	b.n	8000e96 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <DMA_CalcBaseAndBitshift+0x70>)
 8000e80:	4413      	add	r3, r2
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <DMA_CalcBaseAndBitshift+0x68>)
 8000e84:	fba2 2303 	umull	r2, r3, r2, r3
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	009a      	lsls	r2, r3, #2
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a09      	ldr	r2, [pc, #36]	@ (8000eb8 <DMA_CalcBaseAndBitshift+0x74>)
 8000e94:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40020407 	.word	0x40020407
 8000ea8:	bffdfff8 	.word	0xbffdfff8
 8000eac:	cccccccd 	.word	0xcccccccd
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	bffdfbf8 	.word	0xbffdfbf8
 8000eb8:	40020400 	.word	0x40020400

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eca:	e160      	b.n	800118e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 8152 	beq.w	8001188 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d005      	beq.n	8000efc <HAL_GPIO_Init+0x40>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d130      	bne.n	8000f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f32:	2201      	movs	r2, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	f003 0201 	and.w	r2, r3, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d017      	beq.n	8000f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d123      	bne.n	8000fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	6939      	ldr	r1, [r7, #16]
 8000fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0203 	and.w	r2, r3, #3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 80ac 	beq.w	8001188 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001030:	4b5e      	ldr	r3, [pc, #376]	@ (80011ac <HAL_GPIO_Init+0x2f0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a5d      	ldr	r2, [pc, #372]	@ (80011ac <HAL_GPIO_Init+0x2f0>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b5b      	ldr	r3, [pc, #364]	@ (80011ac <HAL_GPIO_Init+0x2f0>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001048:	4a59      	ldr	r2, [pc, #356]	@ (80011b0 <HAL_GPIO_Init+0x2f4>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001072:	d025      	beq.n	80010c0 <HAL_GPIO_Init+0x204>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a4f      	ldr	r2, [pc, #316]	@ (80011b4 <HAL_GPIO_Init+0x2f8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d01f      	beq.n	80010bc <HAL_GPIO_Init+0x200>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a4e      	ldr	r2, [pc, #312]	@ (80011b8 <HAL_GPIO_Init+0x2fc>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d019      	beq.n	80010b8 <HAL_GPIO_Init+0x1fc>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4d      	ldr	r2, [pc, #308]	@ (80011bc <HAL_GPIO_Init+0x300>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d013      	beq.n	80010b4 <HAL_GPIO_Init+0x1f8>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4c      	ldr	r2, [pc, #304]	@ (80011c0 <HAL_GPIO_Init+0x304>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d00d      	beq.n	80010b0 <HAL_GPIO_Init+0x1f4>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a4b      	ldr	r2, [pc, #300]	@ (80011c4 <HAL_GPIO_Init+0x308>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d007      	beq.n	80010ac <HAL_GPIO_Init+0x1f0>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a4a      	ldr	r2, [pc, #296]	@ (80011c8 <HAL_GPIO_Init+0x30c>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d101      	bne.n	80010a8 <HAL_GPIO_Init+0x1ec>
 80010a4:	2306      	movs	r3, #6
 80010a6:	e00c      	b.n	80010c2 <HAL_GPIO_Init+0x206>
 80010a8:	2307      	movs	r3, #7
 80010aa:	e00a      	b.n	80010c2 <HAL_GPIO_Init+0x206>
 80010ac:	2305      	movs	r3, #5
 80010ae:	e008      	b.n	80010c2 <HAL_GPIO_Init+0x206>
 80010b0:	2304      	movs	r3, #4
 80010b2:	e006      	b.n	80010c2 <HAL_GPIO_Init+0x206>
 80010b4:	2303      	movs	r3, #3
 80010b6:	e004      	b.n	80010c2 <HAL_GPIO_Init+0x206>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e002      	b.n	80010c2 <HAL_GPIO_Init+0x206>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <HAL_GPIO_Init+0x206>
 80010c0:	2300      	movs	r3, #0
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	f002 0203 	and.w	r2, r2, #3
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	4093      	lsls	r3, r2
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010d2:	4937      	ldr	r1, [pc, #220]	@ (80011b0 <HAL_GPIO_Init+0x2f4>)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e0:	4b3a      	ldr	r3, [pc, #232]	@ (80011cc <HAL_GPIO_Init+0x310>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001104:	4a31      	ldr	r2, [pc, #196]	@ (80011cc <HAL_GPIO_Init+0x310>)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800110a:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <HAL_GPIO_Init+0x310>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800112e:	4a27      	ldr	r2, [pc, #156]	@ (80011cc <HAL_GPIO_Init+0x310>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001134:	4b25      	ldr	r3, [pc, #148]	@ (80011cc <HAL_GPIO_Init+0x310>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001158:	4a1c      	ldr	r2, [pc, #112]	@ (80011cc <HAL_GPIO_Init+0x310>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <HAL_GPIO_Init+0x310>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001182:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <HAL_GPIO_Init+0x310>)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa22 f303 	lsr.w	r3, r2, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	f47f ae97 	bne.w	8000ecc <HAL_GPIO_Init+0x10>
  }
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000
 80011b4:	48000400 	.word	0x48000400
 80011b8:	48000800 	.word	0x48000800
 80011bc:	48000c00 	.word	0x48000c00
 80011c0:	48001000 	.word	0x48001000
 80011c4:	48001400 	.word	0x48001400
 80011c8:	48001800 	.word	0x48001800
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001206:	af00      	add	r7, sp, #0
 8001208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800120c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001210:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001216:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	f001 b83a 	b.w	800229a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800122a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 816f 	beq.w	800151a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800123c:	4bb5      	ldr	r3, [pc, #724]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b04      	cmp	r3, #4
 8001246:	d00c      	beq.n	8001262 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001248:	4bb2      	ldr	r3, [pc, #712]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b08      	cmp	r3, #8
 8001252:	d15c      	bne.n	800130e <HAL_RCC_OscConfig+0x10e>
 8001254:	4baf      	ldr	r3, [pc, #700]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001260:	d155      	bne.n	800130e <HAL_RCC_OscConfig+0x10e>
 8001262:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001266:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001276:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127a:	fab3 f383 	clz	r3, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	095b      	lsrs	r3, r3, #5
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <HAL_RCC_OscConfig+0x94>
 800128e:	4ba1      	ldr	r3, [pc, #644]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	e015      	b.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 8001294:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001298:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80012a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012ac:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80012b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80012bc:	4b95      	ldr	r3, [pc, #596]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 80012be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012c4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80012c8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80012cc:	fa92 f2a2 	rbit	r2, r2
 80012d0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80012d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80012d8:	fab2 f282 	clz	r2, r2
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	f042 0220 	orr.w	r2, r2, #32
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	f002 021f 	and.w	r2, r2, #31
 80012e8:	2101      	movs	r1, #1
 80012ea:	fa01 f202 	lsl.w	r2, r1, r2
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 8111 	beq.w	8001518 <HAL_RCC_OscConfig+0x318>
 80012f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f040 8108 	bne.w	8001518 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	f000 bfc6 	b.w	800229a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001312:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x12e>
 8001320:	4b7c      	ldr	r3, [pc, #496]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a7b      	ldr	r2, [pc, #492]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e036      	b.n	800139c <HAL_RCC_OscConfig+0x19c>
 800132e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001332:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x158>
 800133e:	4b75      	ldr	r3, [pc, #468]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a74      	ldr	r2, [pc, #464]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b72      	ldr	r3, [pc, #456]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a71      	ldr	r2, [pc, #452]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001350:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e021      	b.n	800139c <HAL_RCC_OscConfig+0x19c>
 8001358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800135c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x184>
 800136a:	4b6a      	ldr	r3, [pc, #424]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a69      	ldr	r2, [pc, #420]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b67      	ldr	r3, [pc, #412]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a66      	ldr	r2, [pc, #408]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0x19c>
 8001384:	4b63      	ldr	r3, [pc, #396]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a62      	ldr	r2, [pc, #392]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 800138a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b60      	ldr	r3, [pc, #384]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a5f      	ldr	r2, [pc, #380]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800139a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800139c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d059      	beq.n	8001460 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fa3a 	bl	8000824 <HAL_GetTick>
 80013b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b6:	f7ff fa35 	bl	8000824 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	@ 0x64
 80013c4:	d902      	bls.n	80013cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	f000 bf67 	b.w	800229a <HAL_RCC_OscConfig+0x109a>
 80013cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013d0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80013e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e4:	fab3 f383 	clz	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d102      	bne.n	80013fe <HAL_RCC_OscConfig+0x1fe>
 80013f8:	4b46      	ldr	r3, [pc, #280]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x22a>
 80013fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001402:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001412:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001416:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800141a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001426:	4b3b      	ldr	r3, [pc, #236]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800142e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001432:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001436:	fa92 f2a2 	rbit	r2, r2
 800143a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800143e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001442:	fab2 f282 	clz	r2, r2
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	f042 0220 	orr.w	r2, r2, #32
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	f002 021f 	and.w	r2, r2, #31
 8001452:	2101      	movs	r1, #1
 8001454:	fa01 f202 	lsl.w	r2, r1, r2
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0ab      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1b6>
 800145e:	e05c      	b.n	800151a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff f9e0 	bl	8000824 <HAL_GetTick>
 8001464:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001468:	e00a      	b.n	8001480 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146a:	f7ff f9db 	bl	8000824 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	@ 0x64
 8001478:	d902      	bls.n	8001480 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	f000 bf0d 	b.w	800229a <HAL_RCC_OscConfig+0x109a>
 8001480:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001484:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001494:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001498:	fab3 f383 	clz	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d102      	bne.n	80014b2 <HAL_RCC_OscConfig+0x2b2>
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	e015      	b.n	80014de <HAL_RCC_OscConfig+0x2de>
 80014b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014b6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80014c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014ca:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80014ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <HAL_RCC_OscConfig+0x314>)
 80014dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014e2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80014e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80014ea:	fa92 f2a2 	rbit	r2, r2
 80014ee:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80014f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80014f6:	fab2 f282 	clz	r2, r2
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	f042 0220 	orr.w	r2, r2, #32
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	f002 021f 	and.w	r2, r2, #31
 8001506:	2101      	movs	r1, #1
 8001508:	fa01 f202 	lsl.w	r2, r1, r2
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1ab      	bne.n	800146a <HAL_RCC_OscConfig+0x26a>
 8001512:	e002      	b.n	800151a <HAL_RCC_OscConfig+0x31a>
 8001514:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800151e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 817f 	beq.w	800182e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001530:	4ba7      	ldr	r3, [pc, #668]	@ (80017d0 <HAL_RCC_OscConfig+0x5d0>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00c      	beq.n	8001556 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800153c:	4ba4      	ldr	r3, [pc, #656]	@ (80017d0 <HAL_RCC_OscConfig+0x5d0>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	2b08      	cmp	r3, #8
 8001546:	d173      	bne.n	8001630 <HAL_RCC_OscConfig+0x430>
 8001548:	4ba1      	ldr	r3, [pc, #644]	@ (80017d0 <HAL_RCC_OscConfig+0x5d0>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001554:	d16c      	bne.n	8001630 <HAL_RCC_OscConfig+0x430>
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001560:	fa93 f3a3 	rbit	r3, r3
 8001564:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001568:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156c:	fab3 f383 	clz	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b01      	cmp	r3, #1
 800157e:	d102      	bne.n	8001586 <HAL_RCC_OscConfig+0x386>
 8001580:	4b93      	ldr	r3, [pc, #588]	@ (80017d0 <HAL_RCC_OscConfig+0x5d0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e013      	b.n	80015ae <HAL_RCC_OscConfig+0x3ae>
 8001586:	2302      	movs	r3, #2
 8001588:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001590:	fa93 f3a3 	rbit	r3, r3
 8001594:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001598:	2302      	movs	r3, #2
 800159a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800159e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80015a2:	fa93 f3a3 	rbit	r3, r3
 80015a6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80015aa:	4b89      	ldr	r3, [pc, #548]	@ (80017d0 <HAL_RCC_OscConfig+0x5d0>)
 80015ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ae:	2202      	movs	r2, #2
 80015b0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80015b4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80015b8:	fa92 f2a2 	rbit	r2, r2
 80015bc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80015c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80015c4:	fab2 f282 	clz	r2, r2
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	f042 0220 	orr.w	r2, r2, #32
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	f002 021f 	and.w	r2, r2, #31
 80015d4:	2101      	movs	r1, #1
 80015d6:	fa01 f202 	lsl.w	r2, r1, r2
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00a      	beq.n	80015f6 <HAL_RCC_OscConfig+0x3f6>
 80015e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d002      	beq.n	80015f6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	f000 be52 	b.w	800229a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	4b76      	ldr	r3, [pc, #472]	@ (80017d0 <HAL_RCC_OscConfig+0x5d0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001602:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	21f8      	movs	r1, #248	@ 0xf8
 800160c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001610:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001614:	fa91 f1a1 	rbit	r1, r1
 8001618:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800161c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001620:	fab1 f181 	clz	r1, r1
 8001624:	b2c9      	uxtb	r1, r1
 8001626:	408b      	lsls	r3, r1
 8001628:	4969      	ldr	r1, [pc, #420]	@ (80017d0 <HAL_RCC_OscConfig+0x5d0>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	e0fe      	b.n	800182e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001630:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001634:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8088 	beq.w	8001752 <HAL_RCC_OscConfig+0x552>
 8001642:	2301      	movs	r3, #1
 8001644:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001654:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001658:	fab3 f383 	clz	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001662:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	461a      	mov	r2, r3
 800166a:	2301      	movs	r3, #1
 800166c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff f8d9 	bl	8000824 <HAL_GetTick>
 8001672:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001676:	e00a      	b.n	800168e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff f8d4 	bl	8000824 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d902      	bls.n	800168e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	f000 be06 	b.w	800229a <HAL_RCC_OscConfig+0x109a>
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80016a0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d102      	bne.n	80016be <HAL_RCC_OscConfig+0x4be>
 80016b8:	4b45      	ldr	r3, [pc, #276]	@ (80017d0 <HAL_RCC_OscConfig+0x5d0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	e013      	b.n	80016e6 <HAL_RCC_OscConfig+0x4e6>
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80016c8:	fa93 f3a3 	rbit	r3, r3
 80016cc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80016d6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80016e2:	4b3b      	ldr	r3, [pc, #236]	@ (80017d0 <HAL_RCC_OscConfig+0x5d0>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	2202      	movs	r2, #2
 80016e8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80016ec:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80016f0:	fa92 f2a2 	rbit	r2, r2
 80016f4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80016f8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80016fc:	fab2 f282 	clz	r2, r2
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	f042 0220 	orr.w	r2, r2, #32
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	f002 021f 	and.w	r2, r2, #31
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0af      	beq.n	8001678 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b2d      	ldr	r3, [pc, #180]	@ (80017d0 <HAL_RCC_OscConfig+0x5d0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001720:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001724:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	21f8      	movs	r1, #248	@ 0xf8
 800172e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001736:	fa91 f1a1 	rbit	r1, r1
 800173a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800173e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001742:	fab1 f181 	clz	r1, r1
 8001746:	b2c9      	uxtb	r1, r1
 8001748:	408b      	lsls	r3, r1
 800174a:	4921      	ldr	r1, [pc, #132]	@ (80017d0 <HAL_RCC_OscConfig+0x5d0>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
 8001750:	e06d      	b.n	800182e <HAL_RCC_OscConfig+0x62e>
 8001752:	2301      	movs	r3, #1
 8001754:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001764:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001772:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	461a      	mov	r2, r3
 800177a:	2300      	movs	r3, #0
 800177c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff f851 	bl	8000824 <HAL_GetTick>
 8001782:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001788:	f7ff f84c 	bl	8000824 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d902      	bls.n	800179e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	f000 bd7e 	b.w	800229a <HAL_RCC_OscConfig+0x109a>
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80017b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_RCC_OscConfig+0x5d4>
 80017c8:	4b01      	ldr	r3, [pc, #4]	@ (80017d0 <HAL_RCC_OscConfig+0x5d0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	e016      	b.n	80017fc <HAL_RCC_OscConfig+0x5fc>
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	2302      	movs	r3, #2
 80017d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80017ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80017f8:	4bbf      	ldr	r3, [pc, #764]	@ (8001af8 <HAL_RCC_OscConfig+0x8f8>)
 80017fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fc:	2202      	movs	r2, #2
 80017fe:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001802:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001806:	fa92 f2a2 	rbit	r2, r2
 800180a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800180e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001812:	fab2 f282 	clz	r2, r2
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f042 0220 	orr.w	r2, r2, #32
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	f002 021f 	and.w	r2, r2, #31
 8001822:	2101      	movs	r1, #1
 8001824:	fa01 f202 	lsl.w	r2, r1, r2
 8001828:	4013      	ands	r3, r2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ac      	bne.n	8001788 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001832:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8113 	beq.w	8001a6a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001848:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d07c      	beq.n	800194e <HAL_RCC_OscConfig+0x74e>
 8001854:	2301      	movs	r3, #1
 8001856:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001866:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	4ba2      	ldr	r3, [pc, #648]	@ (8001afc <HAL_RCC_OscConfig+0x8fc>)
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	461a      	mov	r2, r3
 800187a:	2301      	movs	r3, #1
 800187c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7fe ffd1 	bl	8000824 <HAL_GetTick>
 8001882:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001886:	e00a      	b.n	800189e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001888:	f7fe ffcc 	bl	8000824 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d902      	bls.n	800189e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	f000 bcfe 	b.w	800229a <HAL_RCC_OscConfig+0x109a>
 800189e:	2302      	movs	r3, #2
 80018a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80018a8:	fa93 f2a3 	rbit	r2, r3
 80018ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018be:	2202      	movs	r2, #2
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	fa93 f2a3 	rbit	r2, r3
 80018d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018e2:	2202      	movs	r2, #2
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	fa93 f2a3 	rbit	r2, r3
 80018f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80018fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	4b7e      	ldr	r3, [pc, #504]	@ (8001af8 <HAL_RCC_OscConfig+0x8f8>)
 8001900:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001902:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001906:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800190a:	2102      	movs	r1, #2
 800190c:	6019      	str	r1, [r3, #0]
 800190e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001912:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fa93 f1a3 	rbit	r1, r3
 800191c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001920:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001924:	6019      	str	r1, [r3, #0]
  return result;
 8001926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d09d      	beq.n	8001888 <HAL_RCC_OscConfig+0x688>
 800194c:	e08d      	b.n	8001a6a <HAL_RCC_OscConfig+0x86a>
 800194e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001952:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800195e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	fa93 f2a3 	rbit	r2, r3
 8001968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001970:	601a      	str	r2, [r3, #0]
  return result;
 8001972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001976:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800197a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	4b5d      	ldr	r3, [pc, #372]	@ (8001afc <HAL_RCC_OscConfig+0x8fc>)
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	461a      	mov	r2, r3
 800198c:	2300      	movs	r3, #0
 800198e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001990:	f7fe ff48 	bl	8000824 <HAL_GetTick>
 8001994:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800199a:	f7fe ff43 	bl	8000824 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d902      	bls.n	80019b0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	f000 bc75 	b.w	800229a <HAL_RCC_OscConfig+0x109a>
 80019b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019b8:	2202      	movs	r2, #2
 80019ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	fa93 f2a3 	rbit	r2, r3
 80019ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019dc:	2202      	movs	r2, #2
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	fa93 f2a3 	rbit	r2, r3
 80019ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a00:	2202      	movs	r2, #2
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f2a3 	rbit	r2, r3
 8001a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a16:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1c:	4b36      	ldr	r3, [pc, #216]	@ (8001af8 <HAL_RCC_OscConfig+0x8f8>)
 8001a1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a28:	2102      	movs	r1, #2
 8001a2a:	6019      	str	r1, [r3, #0]
 8001a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f1a3 	rbit	r1, r3
 8001a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a42:	6019      	str	r1, [r3, #0]
  return result;
 8001a44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a48:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d197      	bne.n	800199a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 81a5 	beq.w	8001dca <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <HAL_RCC_OscConfig+0x8f8>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d116      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <HAL_RCC_OscConfig+0x8f8>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a18      	ldr	r2, [pc, #96]	@ (8001af8 <HAL_RCC_OscConfig+0x8f8>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <HAL_RCC_OscConfig+0x8f8>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aaa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ab8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <HAL_RCC_OscConfig+0x900>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d121      	bne.n	8001b10 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001acc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <HAL_RCC_OscConfig+0x900>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <HAL_RCC_OscConfig+0x900>)
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad8:	f7fe fea4 	bl	8000824 <HAL_GetTick>
 8001adc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e010      	b.n	8001b04 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7fe fe9f 	bl	8000824 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	@ 0x64
 8001af0:	d908      	bls.n	8001b04 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e3d1      	b.n	800229a <HAL_RCC_OscConfig+0x109a>
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	10908120 	.word	0x10908120
 8001b00:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	4b8d      	ldr	r3, [pc, #564]	@ (8001d3c <HAL_RCC_OscConfig+0xb3c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0e8      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x92e>
 8001b20:	4b87      	ldr	r3, [pc, #540]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4a86      	ldr	r2, [pc, #536]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6213      	str	r3, [r2, #32]
 8001b2c:	e035      	b.n	8001b9a <HAL_RCC_OscConfig+0x99a>
 8001b2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x958>
 8001b3e:	4b80      	ldr	r3, [pc, #512]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a7f      	ldr	r2, [pc, #508]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	6213      	str	r3, [r2, #32]
 8001b4a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a7c      	ldr	r2, [pc, #496]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	e020      	b.n	8001b9a <HAL_RCC_OscConfig+0x99a>
 8001b58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d10c      	bne.n	8001b82 <HAL_RCC_OscConfig+0x982>
 8001b68:	4b75      	ldr	r3, [pc, #468]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4a74      	ldr	r2, [pc, #464]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	4b72      	ldr	r3, [pc, #456]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4a71      	ldr	r2, [pc, #452]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6213      	str	r3, [r2, #32]
 8001b80:	e00b      	b.n	8001b9a <HAL_RCC_OscConfig+0x99a>
 8001b82:	4b6f      	ldr	r3, [pc, #444]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a6e      	ldr	r2, [pc, #440]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	4b6c      	ldr	r3, [pc, #432]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a6b      	ldr	r2, [pc, #428]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8081 	beq.w	8001cae <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7fe fe3a 	bl	8000824 <HAL_GetTick>
 8001bb0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb4:	e00b      	b.n	8001bce <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7fe fe35 	bl	8000824 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e365      	b.n	800229a <HAL_RCC_OscConfig+0x109a>
 8001bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bde:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fa93 f2a3 	rbit	r2, r3
 8001be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c02:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c10:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c14:	601a      	str	r2, [r3, #0]
  return result;
 8001c16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c1a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d102      	bne.n	8001c3a <HAL_RCC_OscConfig+0xa3a>
 8001c34:	4b42      	ldr	r3, [pc, #264]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	e013      	b.n	8001c62 <HAL_RCC_OscConfig+0xa62>
 8001c3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c42:	2202      	movs	r2, #2
 8001c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fa93 f2a3 	rbit	r2, r3
 8001c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c58:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	4b38      	ldr	r3, [pc, #224]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c66:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	6011      	str	r1, [r2, #0]
 8001c6e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c72:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	fa92 f1a2 	rbit	r1, r2
 8001c7c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c80:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001c84:	6011      	str	r1, [r2, #0]
  return result;
 8001c86:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c8a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	fab2 f282 	clz	r2, r2
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f002 021f 	and.w	r2, r2, #31
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d084      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x9b6>
 8001cac:	e083      	b.n	8001db6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7fe fdb9 	bl	8000824 <HAL_GetTick>
 8001cb2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb6:	e00b      	b.n	8001cd0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7fe fdb4 	bl	8000824 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e2e4      	b.n	800229a <HAL_RCC_OscConfig+0x109a>
 8001cd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001cd8:	2202      	movs	r2, #2
 8001cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	fa93 f2a3 	rbit	r2, r3
 8001cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d04:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d12:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d16:	601a      	str	r2, [r3, #0]
  return result;
 8001d18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d1c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	095b      	lsrs	r3, r3, #5
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d106      	bne.n	8001d44 <HAL_RCC_OscConfig+0xb44>
 8001d36:	4b02      	ldr	r3, [pc, #8]	@ (8001d40 <HAL_RCC_OscConfig+0xb40>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	e017      	b.n	8001d6c <HAL_RCC_OscConfig+0xb6c>
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	40021000 	.word	0x40021000
 8001d44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d48:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d54:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d62:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	4bb3      	ldr	r3, [pc, #716]	@ (8002038 <HAL_RCC_OscConfig+0xe38>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d70:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d74:	2102      	movs	r1, #2
 8001d76:	6011      	str	r1, [r2, #0]
 8001d78:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d7c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	fa92 f1a2 	rbit	r1, r2
 8001d86:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d8a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001d8e:	6011      	str	r1, [r2, #0]
  return result;
 8001d90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d94:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	fab2 f282 	clz	r2, r2
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	f002 021f 	and.w	r2, r2, #31
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f202 	lsl.w	r2, r1, r2
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d180      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001db6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d105      	bne.n	8001dca <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dbe:	4b9e      	ldr	r3, [pc, #632]	@ (8002038 <HAL_RCC_OscConfig+0xe38>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a9d      	ldr	r2, [pc, #628]	@ (8002038 <HAL_RCC_OscConfig+0xe38>)
 8001dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 825e 	beq.w	8002298 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ddc:	4b96      	ldr	r3, [pc, #600]	@ (8002038 <HAL_RCC_OscConfig+0xe38>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	f000 821f 	beq.w	8002228 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	f040 8170 	bne.w	80020dc <HAL_RCC_OscConfig+0xedc>
 8001dfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e00:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fa93 f2a3 	rbit	r2, r3
 8001e18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e20:	601a      	str	r2, [r3, #0]
  return result;
 8001e22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e26:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e2a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e36:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2300      	movs	r3, #0
 8001e40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe fcef 	bl	8000824 <HAL_GetTick>
 8001e46:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4a:	e009      	b.n	8001e60 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7fe fcea 	bl	8000824 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e21c      	b.n	800229a <HAL_RCC_OscConfig+0x109a>
 8001e60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e64:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e72:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	fa93 f2a3 	rbit	r2, r3
 8001e7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e80:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e84:	601a      	str	r2, [r3, #0]
  return result;
 8001e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e8a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d102      	bne.n	8001eaa <HAL_RCC_OscConfig+0xcaa>
 8001ea4:	4b64      	ldr	r3, [pc, #400]	@ (8002038 <HAL_RCC_OscConfig+0xe38>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	e027      	b.n	8001efa <HAL_RCC_OscConfig+0xcfa>
 8001eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001eb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ebc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	fa93 f2a3 	rbit	r2, r3
 8001ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ed8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	fa93 f2a3 	rbit	r2, r3
 8001eec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	4b50      	ldr	r3, [pc, #320]	@ (8002038 <HAL_RCC_OscConfig+0xe38>)
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001efe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f02:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f06:	6011      	str	r1, [r2, #0]
 8001f08:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f0c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	fa92 f1a2 	rbit	r1, r2
 8001f16:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f1a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001f1e:	6011      	str	r1, [r2, #0]
  return result;
 8001f20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f24:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	fab2 f282 	clz	r2, r2
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f042 0220 	orr.w	r2, r2, #32
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	f002 021f 	and.w	r2, r2, #31
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d182      	bne.n	8001e4c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f46:	4b3c      	ldr	r3, [pc, #240]	@ (8002038 <HAL_RCC_OscConfig+0xe38>)
 8001f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4a:	f023 020f 	bic.w	r2, r3, #15
 8001f4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	4937      	ldr	r1, [pc, #220]	@ (8002038 <HAL_RCC_OscConfig+0xe38>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001f60:	4b35      	ldr	r3, [pc, #212]	@ (8002038 <HAL_RCC_OscConfig+0xe38>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001f68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6a19      	ldr	r1, [r3, #32]
 8001f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	492d      	ldr	r1, [pc, #180]	@ (8002038 <HAL_RCC_OscConfig+0xe38>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
 8001f88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f8c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	fa93 f2a3 	rbit	r2, r3
 8001fa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001fac:	601a      	str	r2, [r3, #0]
  return result;
 8001fae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001fb6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fc2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2301      	movs	r3, #1
 8001fcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7fe fc29 	bl	8000824 <HAL_GetTick>
 8001fd2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd6:	e009      	b.n	8001fec <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe fc24 	bl	8000824 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e156      	b.n	800229a <HAL_RCC_OscConfig+0x109a>
 8001fec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ff4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ffe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fa93 f2a3 	rbit	r2, r3
 8002008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002010:	601a      	str	r2, [r3, #0]
  return result;
 8002012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002016:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800201a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d105      	bne.n	800203c <HAL_RCC_OscConfig+0xe3c>
 8002030:	4b01      	ldr	r3, [pc, #4]	@ (8002038 <HAL_RCC_OscConfig+0xe38>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	e02a      	b.n	800208c <HAL_RCC_OscConfig+0xe8c>
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002040:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002044:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	fa93 f2a3 	rbit	r2, r3
 8002058:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800205c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002066:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800206a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002074:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002082:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	4b86      	ldr	r3, [pc, #536]	@ (80022a4 <HAL_RCC_OscConfig+0x10a4>)
 800208a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002090:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002094:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002098:	6011      	str	r1, [r2, #0]
 800209a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800209e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	fa92 f1a2 	rbit	r1, r2
 80020a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020ac:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80020b0:	6011      	str	r1, [r2, #0]
  return result;
 80020b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020b6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	fab2 f282 	clz	r2, r2
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	f042 0220 	orr.w	r2, r2, #32
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	f002 021f 	and.w	r2, r2, #31
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f202 	lsl.w	r2, r1, r2
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f43f af7f 	beq.w	8001fd8 <HAL_RCC_OscConfig+0xdd8>
 80020da:	e0dd      	b.n	8002298 <HAL_RCC_OscConfig+0x1098>
 80020dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80020e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	fa93 f2a3 	rbit	r2, r3
 80020f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020fc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002100:	601a      	str	r2, [r3, #0]
  return result;
 8002102:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002106:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800210a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210c:	fab3 f383 	clz	r3, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002116:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	461a      	mov	r2, r3
 800211e:	2300      	movs	r3, #0
 8002120:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7fe fb7f 	bl	8000824 <HAL_GetTick>
 8002126:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212a:	e009      	b.n	8002140 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212c:	f7fe fb7a 	bl	8000824 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0ac      	b.n	800229a <HAL_RCC_OscConfig+0x109a>
 8002140:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002144:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002148:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800214c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002152:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	fa93 f2a3 	rbit	r2, r3
 800215c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002160:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002164:	601a      	str	r2, [r3, #0]
  return result;
 8002166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800216e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d102      	bne.n	800218a <HAL_RCC_OscConfig+0xf8a>
 8002184:	4b47      	ldr	r3, [pc, #284]	@ (80022a4 <HAL_RCC_OscConfig+0x10a4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	e027      	b.n	80021da <HAL_RCC_OscConfig+0xfda>
 800218a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002192:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	fa93 f2a3 	rbit	r2, r3
 80021a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021aa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80021b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	4b33      	ldr	r3, [pc, #204]	@ (80022a4 <HAL_RCC_OscConfig+0x10a4>)
 80021d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021de:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80021e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021e6:	6011      	str	r1, [r2, #0]
 80021e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021ec:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	fa92 f1a2 	rbit	r1, r2
 80021f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021fa:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80021fe:	6011      	str	r1, [r2, #0]
  return result;
 8002200:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002204:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f042 0220 	orr.w	r2, r2, #32
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f002 021f 	and.w	r2, r2, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d182      	bne.n	800212c <HAL_RCC_OscConfig+0xf2c>
 8002226:	e037      	b.n	8002298 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002228:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e02e      	b.n	800229a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800223c:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <HAL_RCC_OscConfig+0x10a4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002244:	4b17      	ldr	r3, [pc, #92]	@ (80022a4 <HAL_RCC_OscConfig+0x10a4>)
 8002246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002248:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800224c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002250:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002258:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	429a      	cmp	r2, r3
 8002262:	d117      	bne.n	8002294 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002264:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002268:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800226c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002270:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002278:	429a      	cmp	r2, r3
 800227a:	d10b      	bne.n	8002294 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800227c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002280:	f003 020f 	and.w	r2, r3, #15
 8002284:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002288:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000

080022a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b09e      	sub	sp, #120	@ 0x78
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e162      	b.n	8002586 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b90      	ldr	r3, [pc, #576]	@ (8002504 <HAL_RCC_ClockConfig+0x25c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d910      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002504 <HAL_RCC_ClockConfig+0x25c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0207 	bic.w	r2, r3, #7
 80022d6:	498b      	ldr	r1, [pc, #556]	@ (8002504 <HAL_RCC_ClockConfig+0x25c>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b89      	ldr	r3, [pc, #548]	@ (8002504 <HAL_RCC_ClockConfig+0x25c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e14a      	b.n	8002586 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b82      	ldr	r3, [pc, #520]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	497f      	ldr	r1, [pc, #508]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80dc 	beq.w	80024d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d13c      	bne.n	800239e <HAL_RCC_ClockConfig+0xf6>
 8002324:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002328:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d102      	bne.n	800234e <HAL_RCC_ClockConfig+0xa6>
 8002348:	4b6f      	ldr	r3, [pc, #444]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	e00f      	b.n	800236e <HAL_RCC_ClockConfig+0xc6>
 800234e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002352:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	667b      	str	r3, [r7, #100]	@ 0x64
 800235c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002360:	663b      	str	r3, [r7, #96]	@ 0x60
 8002362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800236a:	4b67      	ldr	r3, [pc, #412]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002372:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002374:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002376:	fa92 f2a2 	rbit	r2, r2
 800237a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800237c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800237e:	fab2 f282 	clz	r2, r2
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	f042 0220 	orr.w	r2, r2, #32
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	f002 021f 	and.w	r2, r2, #31
 800238e:	2101      	movs	r1, #1
 8002390:	fa01 f202 	lsl.w	r2, r1, r2
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d17b      	bne.n	8002492 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e0f3      	b.n	8002586 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d13c      	bne.n	8002420 <HAL_RCC_ClockConfig+0x178>
 80023a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023aa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80023b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x128>
 80023ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	e00f      	b.n	80023f0 <HAL_RCC_ClockConfig+0x148>
 80023d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80023de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80023e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023ec:	4b46      	ldr	r3, [pc, #280]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023f4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80023f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023f8:	fa92 f2a2 	rbit	r2, r2
 80023fc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80023fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002400:	fab2 f282 	clz	r2, r2
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f042 0220 	orr.w	r2, r2, #32
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f002 021f 	and.w	r2, r2, #31
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f202 	lsl.w	r2, r1, r2
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d13a      	bne.n	8002492 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b2      	b.n	8002586 <HAL_RCC_ClockConfig+0x2de>
 8002420:	2302      	movs	r3, #2
 8002422:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800242c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d102      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
 8002442:	4b31      	ldr	r3, [pc, #196]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	e00d      	b.n	8002464 <HAL_RCC_ClockConfig+0x1bc>
 8002448:	2302      	movs	r3, #2
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
 8002454:	2302      	movs	r3, #2
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	4b29      	ldr	r3, [pc, #164]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	2202      	movs	r2, #2
 8002466:	61ba      	str	r2, [r7, #24]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	fa92 f2a2 	rbit	r2, r2
 800246e:	617a      	str	r2, [r7, #20]
  return result;
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	fab2 f282 	clz	r2, r2
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	f042 0220 	orr.w	r2, r2, #32
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f002 021f 	and.w	r2, r2, #31
 8002482:	2101      	movs	r1, #1
 8002484:	fa01 f202 	lsl.w	r2, r1, r2
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e079      	b.n	8002586 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	491a      	ldr	r1, [pc, #104]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a4:	f7fe f9be 	bl	8000824 <HAL_GetTick>
 80024a8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7fe f9ba 	bl	8000824 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e061      	b.n	8002586 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 020c 	and.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1eb      	bne.n	80024ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_ClockConfig+0x25c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d214      	bcs.n	800250c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b08      	ldr	r3, [pc, #32]	@ (8002504 <HAL_RCC_ClockConfig+0x25c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 0207 	bic.w	r2, r3, #7
 80024ea:	4906      	ldr	r1, [pc, #24]	@ (8002504 <HAL_RCC_ClockConfig+0x25c>)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b04      	ldr	r3, [pc, #16]	@ (8002504 <HAL_RCC_ClockConfig+0x25c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e040      	b.n	8002586 <HAL_RCC_ClockConfig+0x2de>
 8002504:	40022000 	.word	0x40022000
 8002508:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002518:	4b1d      	ldr	r3, [pc, #116]	@ (8002590 <HAL_RCC_ClockConfig+0x2e8>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	491a      	ldr	r1, [pc, #104]	@ (8002590 <HAL_RCC_ClockConfig+0x2e8>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002536:	4b16      	ldr	r3, [pc, #88]	@ (8002590 <HAL_RCC_ClockConfig+0x2e8>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4912      	ldr	r1, [pc, #72]	@ (8002590 <HAL_RCC_ClockConfig+0x2e8>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800254a:	f000 f829 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 800254e:	4601      	mov	r1, r0
 8002550:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <HAL_RCC_ClockConfig+0x2e8>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002558:	22f0      	movs	r2, #240	@ 0xf0
 800255a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	fa92 f2a2 	rbit	r2, r2
 8002562:	60fa      	str	r2, [r7, #12]
  return result;
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	fab2 f282 	clz	r2, r2
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	40d3      	lsrs	r3, r2
 800256e:	4a09      	ldr	r2, [pc, #36]	@ (8002594 <HAL_RCC_ClockConfig+0x2ec>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	fa21 f303 	lsr.w	r3, r1, r3
 8002576:	4a08      	ldr	r2, [pc, #32]	@ (8002598 <HAL_RCC_ClockConfig+0x2f0>)
 8002578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800257a:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_RCC_ClockConfig+0x2f4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe f90c 	bl	800079c <HAL_InitTick>
  
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3778      	adds	r7, #120	@ 0x78
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	08003ef4 	.word	0x08003ef4
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004

080025a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80025ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x98>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d002      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0x30>
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0x36>
 80025ce:	e029      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025d0:	4b1a      	ldr	r3, [pc, #104]	@ (800263c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025d2:	613b      	str	r3, [r7, #16]
      break;
 80025d4:	e029      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	0c9b      	lsrs	r3, r3, #18
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	4a18      	ldr	r2, [pc, #96]	@ (8002640 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025e0:	5cd3      	ldrb	r3, [r2, r3]
 80025e2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80025e4:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x98>)
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	4a15      	ldr	r2, [pc, #84]	@ (8002644 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025fc:	4a0f      	ldr	r2, [pc, #60]	@ (800263c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	fbb2 f2f3 	udiv	r2, r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	e007      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800260e:	4a0b      	ldr	r2, [pc, #44]	@ (800263c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	fbb2 f2f3 	udiv	r2, r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	613b      	str	r3, [r7, #16]
      break;
 8002622:	e002      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002626:	613b      	str	r3, [r7, #16]
      break;
 8002628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262a:	693b      	ldr	r3, [r7, #16]
}
 800262c:	4618      	mov	r0, r3
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40021000 	.word	0x40021000
 800263c:	007a1200 	.word	0x007a1200
 8002640:	08003f0c 	.word	0x08003f0c
 8002644:	08003f1c 	.word	0x08003f1c

08002648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800264c:	4b03      	ldr	r3, [pc, #12]	@ (800265c <HAL_RCC_GetHCLKFreq+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000000 	.word	0x20000000

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002666:	f7ff ffef 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 800266a:	4601      	mov	r1, r0
 800266c:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002674:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002678:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	fa92 f2a2 	rbit	r2, r2
 8002680:	603a      	str	r2, [r7, #0]
  return result;
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	fab2 f282 	clz	r2, r2
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	40d3      	lsrs	r3, r2
 800268c:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	08003f04 	.word	0x08003f04

080026a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026aa:	f7ff ffcd 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 80026ae:	4601      	mov	r1, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80026b8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80026bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	fa92 f2a2 	rbit	r2, r2
 80026c4:	603a      	str	r2, [r7, #0]
  return result;
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	fab2 f282 	clz	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	40d3      	lsrs	r3, r2
 80026d0:	4a04      	ldr	r2, [pc, #16]	@ (80026e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08003f04 	.word	0x08003f04

080026e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b092      	sub	sp, #72	@ 0x48
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80d4 	beq.w	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270c:	4b4e      	ldr	r3, [pc, #312]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10e      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	4b4b      	ldr	r3, [pc, #300]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	4a4a      	ldr	r2, [pc, #296]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002722:	61d3      	str	r3, [r2, #28]
 8002724:	4b48      	ldr	r3, [pc, #288]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	4b45      	ldr	r3, [pc, #276]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d118      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002742:	4b42      	ldr	r3, [pc, #264]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a41      	ldr	r2, [pc, #260]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274e:	f7fe f869 	bl	8000824 <HAL_GetTick>
 8002752:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	e008      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002756:	f7fe f865 	bl	8000824 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b64      	cmp	r3, #100	@ 0x64
 8002762:	d901      	bls.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1d6      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b38      	ldr	r3, [pc, #224]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002774:	4b34      	ldr	r3, [pc, #208]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800277c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800277e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8084 	beq.w	800288e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800278e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002790:	429a      	cmp	r2, r3
 8002792:	d07c      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002794:	4b2c      	ldr	r3, [pc, #176]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800279c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800279e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80027ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b26      	ldr	r3, [pc, #152]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	461a      	mov	r2, r3
 80027be:	2301      	movs	r3, #1
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80027d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	4b1d      	ldr	r3, [pc, #116]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	461a      	mov	r2, r3
 80027e2:	2300      	movs	r3, #0
 80027e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027e6:	4a18      	ldr	r2, [pc, #96]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d04b      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe f815 	bl	8000824 <HAL_GetTick>
 80027fa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe f811 	bl	8000824 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e180      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002814:	2302      	movs	r3, #2
 8002816:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002820:	2302      	movs	r3, #2
 8002822:	623b      	str	r3, [r7, #32]
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	61fb      	str	r3, [r7, #28]
  return result;
 800282c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d108      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002842:	4b01      	ldr	r3, [pc, #4]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	e00d      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002848:	40021000 	.word	0x40021000
 800284c:	40007000 	.word	0x40007000
 8002850:	10908100 	.word	0x10908100
 8002854:	2302      	movs	r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	4b9a      	ldr	r3, [pc, #616]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	2202      	movs	r2, #2
 8002866:	613a      	str	r2, [r7, #16]
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	fa92 f2a2 	rbit	r2, r2
 800286e:	60fa      	str	r2, [r7, #12]
  return result;
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0b7      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800288e:	4b8f      	ldr	r3, [pc, #572]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	498c      	ldr	r1, [pc, #560]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a8:	4b88      	ldr	r3, [pc, #544]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	4a87      	ldr	r2, [pc, #540]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c0:	4b82      	ldr	r3, [pc, #520]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	f023 0203 	bic.w	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	497f      	ldr	r1, [pc, #508]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028de:	4b7b      	ldr	r3, [pc, #492]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	4978      	ldr	r1, [pc, #480]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028fc:	4b73      	ldr	r3, [pc, #460]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002900:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	4970      	ldr	r1, [pc, #448]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800291a:	4b6c      	ldr	r3, [pc, #432]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f023 0210 	bic.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4969      	ldr	r1, [pc, #420]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002938:	4b64      	ldr	r3, [pc, #400]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002944:	4961      	ldr	r1, [pc, #388]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002956:	4b5d      	ldr	r3, [pc, #372]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f023 0220 	bic.w	r2, r3, #32
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	495a      	ldr	r1, [pc, #360]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002974:	4b55      	ldr	r3, [pc, #340]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	4952      	ldr	r1, [pc, #328]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002992:	4b4e      	ldr	r3, [pc, #312]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	494b      	ldr	r1, [pc, #300]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029b0:	4b46      	ldr	r3, [pc, #280]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4943      	ldr	r1, [pc, #268]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029ce:	4b3f      	ldr	r3, [pc, #252]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	493c      	ldr	r1, [pc, #240]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029ec:	4b37      	ldr	r3, [pc, #220]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f8:	4934      	ldr	r1, [pc, #208]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a0a:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	492d      	ldr	r1, [pc, #180]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a28:	4b28      	ldr	r3, [pc, #160]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a34:	4925      	ldr	r1, [pc, #148]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a46:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	491e      	ldr	r1, [pc, #120]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a64:	4b19      	ldr	r3, [pc, #100]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a68:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a70:	4916      	ldr	r1, [pc, #88]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a82:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8e:	490f      	ldr	r1, [pc, #60]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aac:	4907      	ldr	r1, [pc, #28]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002abe:	4b03      	ldr	r3, [pc, #12]	@ (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	e002      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad2:	4913      	ldr	r1, [pc, #76]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af0:	490b      	ldr	r1, [pc, #44]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002b02:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b0e:	4904      	ldr	r1, [pc, #16]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3748      	adds	r7, #72	@ 0x48
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000

08002b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e040      	b.n	8002bb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fd fd74 	bl	8000634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	@ 0x24
 8002b50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fd0a 	bl	8003584 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fb33 	bl	80031dc <UART_SetConfig>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e01b      	b.n	8002bb8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fd89 	bl	80036c8 <UART_CheckIdleState>
 8002bb6:	4603      	mov	r3, r0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b0ba      	sub	sp, #232	@ 0xe8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002be6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002bea:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002bee:	4013      	ands	r3, r2
 8002bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d115      	bne.n	8002c28 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00f      	beq.n	8002c28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d009      	beq.n	8002c28 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 82ab 	beq.w	8003174 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
      }
      return;
 8002c26:	e2a5      	b.n	8003174 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8117 	beq.w	8002e60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002c42:	4b85      	ldr	r3, [pc, #532]	@ (8002e58 <HAL_UART_IRQHandler+0x298>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 810a 	beq.w	8002e60 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d011      	beq.n	8002c7c <HAL_UART_IRQHandler+0xbc>
 8002c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c72:	f043 0201 	orr.w	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d011      	beq.n	8002cac <HAL_UART_IRQHandler+0xec>
 8002c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ca2:	f043 0204 	orr.w	r2, r3, #4
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d011      	beq.n	8002cdc <HAL_UART_IRQHandler+0x11c>
 8002cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2204      	movs	r2, #4
 8002cca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cd2:	f043 0202 	orr.w	r2, r3, #2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d017      	beq.n	8002d18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cf8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00b      	beq.n	8002d18 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2208      	movs	r2, #8
 8002d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d0e:	f043 0208 	orr.w	r2, r3, #8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d012      	beq.n	8002d4a <HAL_UART_IRQHandler+0x18a>
 8002d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00c      	beq.n	8002d4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8211 	beq.w	8003178 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00d      	beq.n	8002d7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d92:	2b40      	cmp	r3, #64	@ 0x40
 8002d94:	d005      	beq.n	8002da2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d04f      	beq.n	8002e42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fe6c 	bl	8003a80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db2:	2b40      	cmp	r3, #64	@ 0x40
 8002db4:	d141      	bne.n	8002e3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3308      	adds	r3, #8
 8002dbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3308      	adds	r3, #8
 8002dde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002de2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002dee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002df2:	e841 2300 	strex	r3, r2, [r1]
 8002df6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1d9      	bne.n	8002db6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d013      	beq.n	8002e32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0e:	4a13      	ldr	r2, [pc, #76]	@ (8002e5c <HAL_UART_IRQHandler+0x29c>)
 8002e10:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd ff05 	bl	8000c26 <HAL_DMA_Abort_IT>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d017      	beq.n	8002e52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e30:	e00f      	b.n	8002e52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f9c8 	bl	80031c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e38:	e00b      	b.n	8002e52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f9c4 	bl	80031c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e40:	e007      	b.n	8002e52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f9c0 	bl	80031c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002e50:	e192      	b.n	8003178 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e52:	bf00      	nop
    return;
 8002e54:	e190      	b.n	8003178 <HAL_UART_IRQHandler+0x5b8>
 8002e56:	bf00      	nop
 8002e58:	04000120 	.word	0x04000120
 8002e5c:	08003d2b 	.word	0x08003d2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	f040 814b 	bne.w	8003100 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8144 	beq.w	8003100 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 813d 	beq.w	8003100 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e98:	2b40      	cmp	r3, #64	@ 0x40
 8002e9a:	f040 80b5 	bne.w	8003008 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002eaa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8164 	beq.w	800317c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	f080 815c 	bcs.w	800317c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002eca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	f000 8086 	beq.w	8002fe6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ef2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f08:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f10:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1da      	bne.n	8002eda <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3308      	adds	r3, #8
 8002f2a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3308      	adds	r3, #8
 8002f44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f48:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f50:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e1      	bne.n	8002f24 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3308      	adds	r3, #8
 8002f66:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f6a:	e853 3f00 	ldrex	r3, [r3]
 8002f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3308      	adds	r3, #8
 8002f80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f84:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f88:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f8a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f8c:	e841 2300 	strex	r3, r2, [r1]
 8002f90:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e3      	bne.n	8002f60 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fae:	e853 3f00 	ldrex	r3, [r3]
 8002fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fb6:	f023 0310 	bic.w	r3, r3, #16
 8002fba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fd0:	e841 2300 	strex	r3, r2, [r1]
 8002fd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e4      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fde2 	bl	8000baa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	4619      	mov	r1, r3
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7fd f9af 	bl	8000364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003006:	e0b9      	b.n	800317c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003014:	b29b      	uxth	r3, r3
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80ab 	beq.w	8003180 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800302a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80a6 	beq.w	8003180 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003048:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003056:	647b      	str	r3, [r7, #68]	@ 0x44
 8003058:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800305c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e4      	bne.n	8003034 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3308      	adds	r3, #8
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	623b      	str	r3, [r7, #32]
   return(result);
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3308      	adds	r3, #8
 800308a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800308e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003090:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800309c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e3      	bne.n	800306a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	e853 3f00 	ldrex	r3, [r3]
 80030c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0310 	bic.w	r3, r3, #16
 80030ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	69b9      	ldr	r1, [r7, #24]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	e841 2300 	strex	r3, r2, [r1]
 80030e4:	617b      	str	r3, [r7, #20]
   return(result);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e4      	bne.n	80030b6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030f6:	4619      	mov	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7fd f933 	bl	8000364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030fe:	e03f      	b.n	8003180 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00e      	beq.n	800312a <HAL_UART_IRQHandler+0x56a>
 800310c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003110:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003120:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fe41 	bl	8003daa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003128:	e02d      	b.n	8003186 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00e      	beq.n	8003154 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800313a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01c      	beq.n	8003184 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	4798      	blx	r3
    }
    return;
 8003152:	e017      	b.n	8003184 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d012      	beq.n	8003186 <HAL_UART_IRQHandler+0x5c6>
 8003160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00c      	beq.n	8003186 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fdf2 	bl	8003d56 <UART_EndTransmit_IT>
    return;
 8003172:	e008      	b.n	8003186 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003174:	bf00      	nop
 8003176:	e006      	b.n	8003186 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003178:	bf00      	nop
 800317a:	e004      	b.n	8003186 <HAL_UART_IRQHandler+0x5c6>
      return;
 800317c:	bf00      	nop
 800317e:	e002      	b.n	8003186 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003180:	bf00      	nop
 8003182:	e000      	b.n	8003186 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003184:	bf00      	nop
  }

}
 8003186:	37e8      	adds	r7, #232	@ 0xe8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b92      	ldr	r3, [pc, #584]	@ (8003450 <UART_SetConfig+0x274>)
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	6979      	ldr	r1, [r7, #20]
 8003210:	430b      	orrs	r3, r1
 8003212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	430a      	orrs	r2, r1
 800324c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a80      	ldr	r2, [pc, #512]	@ (8003454 <UART_SetConfig+0x278>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d120      	bne.n	800329a <UART_SetConfig+0xbe>
 8003258:	4b7f      	ldr	r3, [pc, #508]	@ (8003458 <UART_SetConfig+0x27c>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b03      	cmp	r3, #3
 8003262:	d817      	bhi.n	8003294 <UART_SetConfig+0xb8>
 8003264:	a201      	add	r2, pc, #4	@ (adr r2, 800326c <UART_SetConfig+0x90>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	0800327d 	.word	0x0800327d
 8003270:	08003289 	.word	0x08003289
 8003274:	0800328f 	.word	0x0800328f
 8003278:	08003283 	.word	0x08003283
 800327c:	2301      	movs	r3, #1
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e0b5      	b.n	80033ee <UART_SetConfig+0x212>
 8003282:	2302      	movs	r3, #2
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e0b2      	b.n	80033ee <UART_SetConfig+0x212>
 8003288:	2304      	movs	r3, #4
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e0af      	b.n	80033ee <UART_SetConfig+0x212>
 800328e:	2308      	movs	r3, #8
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e0ac      	b.n	80033ee <UART_SetConfig+0x212>
 8003294:	2310      	movs	r3, #16
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e0a9      	b.n	80033ee <UART_SetConfig+0x212>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6f      	ldr	r2, [pc, #444]	@ (800345c <UART_SetConfig+0x280>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d124      	bne.n	80032ee <UART_SetConfig+0x112>
 80032a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003458 <UART_SetConfig+0x27c>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032b0:	d011      	beq.n	80032d6 <UART_SetConfig+0xfa>
 80032b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032b6:	d817      	bhi.n	80032e8 <UART_SetConfig+0x10c>
 80032b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032bc:	d011      	beq.n	80032e2 <UART_SetConfig+0x106>
 80032be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032c2:	d811      	bhi.n	80032e8 <UART_SetConfig+0x10c>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <UART_SetConfig+0xf4>
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032cc:	d006      	beq.n	80032dc <UART_SetConfig+0x100>
 80032ce:	e00b      	b.n	80032e8 <UART_SetConfig+0x10c>
 80032d0:	2300      	movs	r3, #0
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e08b      	b.n	80033ee <UART_SetConfig+0x212>
 80032d6:	2302      	movs	r3, #2
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	e088      	b.n	80033ee <UART_SetConfig+0x212>
 80032dc:	2304      	movs	r3, #4
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e085      	b.n	80033ee <UART_SetConfig+0x212>
 80032e2:	2308      	movs	r3, #8
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e082      	b.n	80033ee <UART_SetConfig+0x212>
 80032e8:	2310      	movs	r3, #16
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e07f      	b.n	80033ee <UART_SetConfig+0x212>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003460 <UART_SetConfig+0x284>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d124      	bne.n	8003342 <UART_SetConfig+0x166>
 80032f8:	4b57      	ldr	r3, [pc, #348]	@ (8003458 <UART_SetConfig+0x27c>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003300:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003304:	d011      	beq.n	800332a <UART_SetConfig+0x14e>
 8003306:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800330a:	d817      	bhi.n	800333c <UART_SetConfig+0x160>
 800330c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003310:	d011      	beq.n	8003336 <UART_SetConfig+0x15a>
 8003312:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003316:	d811      	bhi.n	800333c <UART_SetConfig+0x160>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <UART_SetConfig+0x148>
 800331c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003320:	d006      	beq.n	8003330 <UART_SetConfig+0x154>
 8003322:	e00b      	b.n	800333c <UART_SetConfig+0x160>
 8003324:	2300      	movs	r3, #0
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e061      	b.n	80033ee <UART_SetConfig+0x212>
 800332a:	2302      	movs	r3, #2
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e05e      	b.n	80033ee <UART_SetConfig+0x212>
 8003330:	2304      	movs	r3, #4
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e05b      	b.n	80033ee <UART_SetConfig+0x212>
 8003336:	2308      	movs	r3, #8
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e058      	b.n	80033ee <UART_SetConfig+0x212>
 800333c:	2310      	movs	r3, #16
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e055      	b.n	80033ee <UART_SetConfig+0x212>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a47      	ldr	r2, [pc, #284]	@ (8003464 <UART_SetConfig+0x288>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d124      	bne.n	8003396 <UART_SetConfig+0x1ba>
 800334c:	4b42      	ldr	r3, [pc, #264]	@ (8003458 <UART_SetConfig+0x27c>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003350:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003354:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003358:	d011      	beq.n	800337e <UART_SetConfig+0x1a2>
 800335a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800335e:	d817      	bhi.n	8003390 <UART_SetConfig+0x1b4>
 8003360:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003364:	d011      	beq.n	800338a <UART_SetConfig+0x1ae>
 8003366:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800336a:	d811      	bhi.n	8003390 <UART_SetConfig+0x1b4>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <UART_SetConfig+0x19c>
 8003370:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003374:	d006      	beq.n	8003384 <UART_SetConfig+0x1a8>
 8003376:	e00b      	b.n	8003390 <UART_SetConfig+0x1b4>
 8003378:	2300      	movs	r3, #0
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e037      	b.n	80033ee <UART_SetConfig+0x212>
 800337e:	2302      	movs	r3, #2
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e034      	b.n	80033ee <UART_SetConfig+0x212>
 8003384:	2304      	movs	r3, #4
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e031      	b.n	80033ee <UART_SetConfig+0x212>
 800338a:	2308      	movs	r3, #8
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	e02e      	b.n	80033ee <UART_SetConfig+0x212>
 8003390:	2310      	movs	r3, #16
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e02b      	b.n	80033ee <UART_SetConfig+0x212>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a33      	ldr	r2, [pc, #204]	@ (8003468 <UART_SetConfig+0x28c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d124      	bne.n	80033ea <UART_SetConfig+0x20e>
 80033a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003458 <UART_SetConfig+0x27c>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80033a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033ac:	d011      	beq.n	80033d2 <UART_SetConfig+0x1f6>
 80033ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033b2:	d817      	bhi.n	80033e4 <UART_SetConfig+0x208>
 80033b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033b8:	d011      	beq.n	80033de <UART_SetConfig+0x202>
 80033ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033be:	d811      	bhi.n	80033e4 <UART_SetConfig+0x208>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <UART_SetConfig+0x1f0>
 80033c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033c8:	d006      	beq.n	80033d8 <UART_SetConfig+0x1fc>
 80033ca:	e00b      	b.n	80033e4 <UART_SetConfig+0x208>
 80033cc:	2300      	movs	r3, #0
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e00d      	b.n	80033ee <UART_SetConfig+0x212>
 80033d2:	2302      	movs	r3, #2
 80033d4:	77fb      	strb	r3, [r7, #31]
 80033d6:	e00a      	b.n	80033ee <UART_SetConfig+0x212>
 80033d8:	2304      	movs	r3, #4
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	e007      	b.n	80033ee <UART_SetConfig+0x212>
 80033de:	2308      	movs	r3, #8
 80033e0:	77fb      	strb	r3, [r7, #31]
 80033e2:	e004      	b.n	80033ee <UART_SetConfig+0x212>
 80033e4:	2310      	movs	r3, #16
 80033e6:	77fb      	strb	r3, [r7, #31]
 80033e8:	e001      	b.n	80033ee <UART_SetConfig+0x212>
 80033ea:	2310      	movs	r3, #16
 80033ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f6:	d16b      	bne.n	80034d0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80033f8:	7ffb      	ldrb	r3, [r7, #31]
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d838      	bhi.n	8003470 <UART_SetConfig+0x294>
 80033fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003404 <UART_SetConfig+0x228>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	08003429 	.word	0x08003429
 8003408:	08003431 	.word	0x08003431
 800340c:	08003439 	.word	0x08003439
 8003410:	08003471 	.word	0x08003471
 8003414:	0800343f 	.word	0x0800343f
 8003418:	08003471 	.word	0x08003471
 800341c:	08003471 	.word	0x08003471
 8003420:	08003471 	.word	0x08003471
 8003424:	08003447 	.word	0x08003447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003428:	f7ff f91a 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 800342c:	61b8      	str	r0, [r7, #24]
        break;
 800342e:	e024      	b.n	800347a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003430:	f7ff f938 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8003434:	61b8      	str	r0, [r7, #24]
        break;
 8003436:	e020      	b.n	800347a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003438:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <UART_SetConfig+0x290>)
 800343a:	61bb      	str	r3, [r7, #24]
        break;
 800343c:	e01d      	b.n	800347a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800343e:	f7ff f8af 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 8003442:	61b8      	str	r0, [r7, #24]
        break;
 8003444:	e019      	b.n	800347a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800344a:	61bb      	str	r3, [r7, #24]
        break;
 800344c:	e015      	b.n	800347a <UART_SetConfig+0x29e>
 800344e:	bf00      	nop
 8003450:	efff69f3 	.word	0xefff69f3
 8003454:	40013800 	.word	0x40013800
 8003458:	40021000 	.word	0x40021000
 800345c:	40004400 	.word	0x40004400
 8003460:	40004800 	.word	0x40004800
 8003464:	40004c00 	.word	0x40004c00
 8003468:	40005000 	.word	0x40005000
 800346c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	77bb      	strb	r3, [r7, #30]
        break;
 8003478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d073      	beq.n	8003568 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	005a      	lsls	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	441a      	add	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b0f      	cmp	r3, #15
 800349a:	d916      	bls.n	80034ca <UART_SetConfig+0x2ee>
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a2:	d212      	bcs.n	80034ca <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f023 030f 	bic.w	r3, r3, #15
 80034ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	89fb      	ldrh	r3, [r7, #14]
 80034bc:	4313      	orrs	r3, r2
 80034be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	89fa      	ldrh	r2, [r7, #14]
 80034c6:	60da      	str	r2, [r3, #12]
 80034c8:	e04e      	b.n	8003568 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	77bb      	strb	r3, [r7, #30]
 80034ce:	e04b      	b.n	8003568 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034d0:	7ffb      	ldrb	r3, [r7, #31]
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d827      	bhi.n	8003526 <UART_SetConfig+0x34a>
 80034d6:	a201      	add	r2, pc, #4	@ (adr r2, 80034dc <UART_SetConfig+0x300>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	08003501 	.word	0x08003501
 80034e0:	08003509 	.word	0x08003509
 80034e4:	08003511 	.word	0x08003511
 80034e8:	08003527 	.word	0x08003527
 80034ec:	08003517 	.word	0x08003517
 80034f0:	08003527 	.word	0x08003527
 80034f4:	08003527 	.word	0x08003527
 80034f8:	08003527 	.word	0x08003527
 80034fc:	0800351f 	.word	0x0800351f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003500:	f7ff f8ae 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8003504:	61b8      	str	r0, [r7, #24]
        break;
 8003506:	e013      	b.n	8003530 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003508:	f7ff f8cc 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 800350c:	61b8      	str	r0, [r7, #24]
        break;
 800350e:	e00f      	b.n	8003530 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003510:	4b1b      	ldr	r3, [pc, #108]	@ (8003580 <UART_SetConfig+0x3a4>)
 8003512:	61bb      	str	r3, [r7, #24]
        break;
 8003514:	e00c      	b.n	8003530 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003516:	f7ff f843 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 800351a:	61b8      	str	r0, [r7, #24]
        break;
 800351c:	e008      	b.n	8003530 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800351e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003522:	61bb      	str	r3, [r7, #24]
        break;
 8003524:	e004      	b.n	8003530 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	77bb      	strb	r3, [r7, #30]
        break;
 800352e:	bf00      	nop
    }

    if (pclk != 0U)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d018      	beq.n	8003568 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	085a      	lsrs	r2, r3, #1
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	441a      	add	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b0f      	cmp	r3, #15
 800354e:	d909      	bls.n	8003564 <UART_SetConfig+0x388>
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003556:	d205      	bcs.n	8003564 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	b29a      	uxth	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	e001      	b.n	8003568 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003574:	7fbb      	ldrb	r3, [r7, #30]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	007a1200 	.word	0x007a1200

08003584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01a      	beq.n	800369a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003682:	d10a      	bne.n	800369a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b098      	sub	sp, #96	@ 0x60
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036d8:	f7fd f8a4 	bl	8000824 <HAL_GetTick>
 80036dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d12e      	bne.n	800374a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f4:	2200      	movs	r2, #0
 80036f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f88c 	bl	8003818 <UART_WaitOnFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d021      	beq.n	800374a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800371a:	653b      	str	r3, [r7, #80]	@ 0x50
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003724:	647b      	str	r3, [r7, #68]	@ 0x44
 8003726:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800372a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800372c:	e841 2300 	strex	r3, r2, [r1]
 8003730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e6      	bne.n	8003706 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e062      	b.n	8003810 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b04      	cmp	r3, #4
 8003756:	d149      	bne.n	80037ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003758:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003760:	2200      	movs	r2, #0
 8003762:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f856 	bl	8003818 <UART_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d03c      	beq.n	80037ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	623b      	str	r3, [r7, #32]
   return(result);
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003790:	633b      	str	r3, [r7, #48]	@ 0x30
 8003792:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800379e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e6      	bne.n	8003772 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3308      	adds	r3, #8
 80037aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3308      	adds	r3, #8
 80037c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037c4:	61fa      	str	r2, [r7, #28]
 80037c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	69b9      	ldr	r1, [r7, #24]
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	617b      	str	r3, [r7, #20]
   return(result);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e011      	b.n	8003810 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3758      	adds	r7, #88	@ 0x58
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003828:	e04f      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d04b      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7fc fff7 	bl	8000824 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <UART_WaitOnFlagUntilTimeout+0x30>
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e04e      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d037      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b80      	cmp	r3, #128	@ 0x80
 800385e:	d034      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b40      	cmp	r3, #64	@ 0x40
 8003864:	d031      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b08      	cmp	r3, #8
 8003872:	d110      	bne.n	8003896 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2208      	movs	r2, #8
 800387a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f8ff 	bl	8003a80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2208      	movs	r2, #8
 8003886:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e029      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038a4:	d111      	bne.n	80038ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f8e5 	bl	8003a80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e00f      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d0a0      	beq.n	800382a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b096      	sub	sp, #88	@ 0x58
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2222      	movs	r2, #34	@ 0x22
 800391c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003924:	2b00      	cmp	r3, #0
 8003926:	d028      	beq.n	800397a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a28 <UART_Start_Receive_DMA+0x134>)
 800392e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003934:	4a3d      	ldr	r2, [pc, #244]	@ (8003a2c <UART_Start_Receive_DMA+0x138>)
 8003936:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a30 <UART_Start_Receive_DMA+0x13c>)
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003944:	2200      	movs	r2, #0
 8003946:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3324      	adds	r3, #36	@ 0x24
 8003952:	4619      	mov	r1, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003958:	461a      	mov	r2, r3
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	f7fd f8c6 	bl	8000aec <HAL_DMA_Start_IT>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2210      	movs	r2, #16
 800396a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e051      	b.n	8003a1e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d018      	beq.n	80039b4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003996:	657b      	str	r3, [r7, #84]	@ 0x54
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039a2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80039a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80039ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e6      	bne.n	8003982 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80039d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80039d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80039e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e5      	bne.n	80039b4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3308      	adds	r3, #8
 80039ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	613b      	str	r3, [r7, #16]
   return(result);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3308      	adds	r3, #8
 8003a06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a08:	623a      	str	r2, [r7, #32]
 8003a0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	69f9      	ldr	r1, [r7, #28]
 8003a0e:	6a3a      	ldr	r2, [r7, #32]
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e5      	bne.n	80039e8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3758      	adds	r7, #88	@ 0x58
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	08003b49 	.word	0x08003b49
 8003a2c:	08003c6f 	.word	0x08003c6f
 8003a30:	08003cad 	.word	0x08003cad

08003a34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b089      	sub	sp, #36	@ 0x24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6979      	ldr	r1, [r7, #20]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	613b      	str	r3, [r7, #16]
   return(result);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e6      	bne.n	8003a3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003a74:	bf00      	nop
 8003a76:	3724      	adds	r7, #36	@ 0x24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b095      	sub	sp, #84	@ 0x54
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aa6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e6      	bne.n	8003a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3308      	adds	r3, #8
 8003ac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003adc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e5      	bne.n	8003aba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d118      	bne.n	8003b28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f023 0310 	bic.w	r3, r3, #16
 8003b0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6979      	ldr	r1, [r7, #20]
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	613b      	str	r3, [r7, #16]
   return(result);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e6      	bne.n	8003af6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b3c:	bf00      	nop
 8003b3e:	3754      	adds	r7, #84	@ 0x54
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b09c      	sub	sp, #112	@ 0x70
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d071      	beq.n	8003c42 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b86:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e6      	bne.n	8003b66 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003bb8:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e5      	bne.n	8003b98 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd6:	e853 3f00 	ldrex	r3, [r3]
 8003bda:	623b      	str	r3, [r7, #32]
   return(result);
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003be2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3308      	adds	r3, #8
 8003bea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003bec:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e5      	bne.n	8003bcc <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c02:	2220      	movs	r2, #32
 8003c04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d118      	bne.n	8003c42 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f023 0310 	bic.w	r3, r3, #16
 8003c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	69b9      	ldr	r1, [r7, #24]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e6      	bne.n	8003c10 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c44:	2200      	movs	r2, #0
 8003c46:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c56:	4619      	mov	r1, r3
 8003c58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c5a:	f7fc fb83 	bl	8000364 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c5e:	e002      	b.n	8003c66 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003c60:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c62:	f7ff fa9d 	bl	80031a0 <HAL_UART_RxCpltCallback>
}
 8003c66:	bf00      	nop
 8003c68:	3770      	adds	r7, #112	@ 0x70
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d109      	bne.n	8003c9e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	4619      	mov	r1, r3
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7fc fb64 	bl	8000364 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c9c:	e002      	b.n	8003ca4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f7ff fa88 	bl	80031b4 <HAL_UART_RxHalfCpltCallback>
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cbe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd2:	2b80      	cmp	r3, #128	@ 0x80
 8003cd4:	d109      	bne.n	8003cea <UART_DMAError+0x3e>
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b21      	cmp	r3, #33	@ 0x21
 8003cda:	d106      	bne.n	8003cea <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8003ce4:	6978      	ldr	r0, [r7, #20]
 8003ce6:	f7ff fea5 	bl	8003a34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf4:	2b40      	cmp	r3, #64	@ 0x40
 8003cf6:	d109      	bne.n	8003d0c <UART_DMAError+0x60>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b22      	cmp	r3, #34	@ 0x22
 8003cfc:	d106      	bne.n	8003d0c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8003d06:	6978      	ldr	r0, [r7, #20]
 8003d08:	f7ff feba 	bl	8003a80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d12:	f043 0210 	orr.w	r2, r3, #16
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d1c:	6978      	ldr	r0, [r7, #20]
 8003d1e:	f7ff fa53 	bl	80031c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d22:	bf00      	nop
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f7ff fa3d 	bl	80031c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b088      	sub	sp, #32
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6979      	ldr	r1, [r7, #20]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e6      	bne.n	8003d5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff f9f5 	bl	800318c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003da2:	bf00      	nop
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b08c      	sub	sp, #48	@ 0x30
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d142      	bne.n	8003e5c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e03b      	b.n	8003e5e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	461a      	mov	r2, r3
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7ff fd7b 	bl	80038f4 <UART_Start_Receive_DMA>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003e04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d124      	bne.n	8003e56 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d11d      	bne.n	8003e50 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2210      	movs	r2, #16
 8003e1a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	617b      	str	r3, [r7, #20]
   return(result);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f043 0310 	orr.w	r3, r3, #16
 8003e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6a39      	ldr	r1, [r7, #32]
 8003e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e6      	bne.n	8003e1c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8003e4e:	e002      	b.n	8003e56 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003e56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e5a:	e000      	b.n	8003e5e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3730      	adds	r7, #48	@ 0x30
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <memset>:
 8003e66:	4402      	add	r2, r0
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d100      	bne.n	8003e70 <memset+0xa>
 8003e6e:	4770      	bx	lr
 8003e70:	f803 1b01 	strb.w	r1, [r3], #1
 8003e74:	e7f9      	b.n	8003e6a <memset+0x4>
	...

08003e78 <__libc_init_array>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	4d0d      	ldr	r5, [pc, #52]	@ (8003eb0 <__libc_init_array+0x38>)
 8003e7c:	4c0d      	ldr	r4, [pc, #52]	@ (8003eb4 <__libc_init_array+0x3c>)
 8003e7e:	1b64      	subs	r4, r4, r5
 8003e80:	10a4      	asrs	r4, r4, #2
 8003e82:	2600      	movs	r6, #0
 8003e84:	42a6      	cmp	r6, r4
 8003e86:	d109      	bne.n	8003e9c <__libc_init_array+0x24>
 8003e88:	4d0b      	ldr	r5, [pc, #44]	@ (8003eb8 <__libc_init_array+0x40>)
 8003e8a:	4c0c      	ldr	r4, [pc, #48]	@ (8003ebc <__libc_init_array+0x44>)
 8003e8c:	f000 f826 	bl	8003edc <_init>
 8003e90:	1b64      	subs	r4, r4, r5
 8003e92:	10a4      	asrs	r4, r4, #2
 8003e94:	2600      	movs	r6, #0
 8003e96:	42a6      	cmp	r6, r4
 8003e98:	d105      	bne.n	8003ea6 <__libc_init_array+0x2e>
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea0:	4798      	blx	r3
 8003ea2:	3601      	adds	r6, #1
 8003ea4:	e7ee      	b.n	8003e84 <__libc_init_array+0xc>
 8003ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eaa:	4798      	blx	r3
 8003eac:	3601      	adds	r6, #1
 8003eae:	e7f2      	b.n	8003e96 <__libc_init_array+0x1e>
 8003eb0:	08003f2c 	.word	0x08003f2c
 8003eb4:	08003f2c 	.word	0x08003f2c
 8003eb8:	08003f2c 	.word	0x08003f2c
 8003ebc:	08003f30 	.word	0x08003f30

08003ec0 <memcpy>:
 8003ec0:	440a      	add	r2, r1
 8003ec2:	4291      	cmp	r1, r2
 8003ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ec8:	d100      	bne.n	8003ecc <memcpy+0xc>
 8003eca:	4770      	bx	lr
 8003ecc:	b510      	push	{r4, lr}
 8003ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ed6:	4291      	cmp	r1, r2
 8003ed8:	d1f9      	bne.n	8003ece <memcpy+0xe>
 8003eda:	bd10      	pop	{r4, pc}

08003edc <_init>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	bf00      	nop
 8003ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee2:	bc08      	pop	{r3}
 8003ee4:	469e      	mov	lr, r3
 8003ee6:	4770      	bx	lr

08003ee8 <_fini>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	bf00      	nop
 8003eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eee:	bc08      	pop	{r3}
 8003ef0:	469e      	mov	lr, r3
 8003ef2:	4770      	bx	lr


Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005e94  08005e94  00006e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f3c  08005f3c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005f3c  08005f3c  00006f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f44  08005f44  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f44  08005f44  00006f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f48  08005f48  00006f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005f4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          000006a0  20000068  20000068  00007068  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000708  20000708  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec99  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003289  00000000  00000000  00015d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  00018fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088d  00000000  00000000  00019b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022592  00000000  00000000  0001a3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012bc8  00000000  00000000  0003c95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3117  00000000  00000000  0004f527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011263e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003238  00000000  00000000  00112684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  001158bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e7c 	.word	0x08005e7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005e7c 	.word	0x08005e7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000286:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <MX_DMA_Init+0x38>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a0b      	ldr	r2, [pc, #44]	@ (80002b8 <MX_DMA_Init+0x38>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <MX_DMA_Init+0x38>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800029e:	2200      	movs	r2, #0
 80002a0:	2100      	movs	r1, #0
 80002a2:	2010      	movs	r0, #16
 80002a4:	f000 fca9 	bl	8000bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002a8:	2010      	movs	r0, #16
 80002aa:	f000 fcc2 	bl	8000c32 <HAL_NVIC_EnableIRQ>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000

080002bc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08a      	sub	sp, #40	@ 0x28
 80002c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d2:	4b4f      	ldr	r3, [pc, #316]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a4e      	ldr	r2, [pc, #312]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b4c      	ldr	r3, [pc, #304]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002e6:	613b      	str	r3, [r7, #16]
 80002e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ea:	4b49      	ldr	r3, [pc, #292]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a48      	ldr	r2, [pc, #288]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b46      	ldr	r3, [pc, #280]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	4b43      	ldr	r3, [pc, #268]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a42      	ldr	r2, [pc, #264]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800030c:	6153      	str	r3, [r2, #20]
 800030e:	4b40      	ldr	r3, [pc, #256]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b3d      	ldr	r3, [pc, #244]	@ (8000410 <MX_GPIO_Init+0x154>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	4a3c      	ldr	r2, [pc, #240]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000324:	6153      	str	r3, [r2, #20]
 8000326:	4b3a      	ldr	r3, [pc, #232]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000332:	4b37      	ldr	r3, [pc, #220]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	4a36      	ldr	r2, [pc, #216]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000338:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800033c:	6153      	str	r3, [r2, #20]
 800033e:	4b34      	ldr	r3, [pc, #208]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2120      	movs	r1, #32
 800034e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000352:	f001 fa19 	bl	8001788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000356:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800035c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	4619      	mov	r1, r3
 800036c:	4829      	ldr	r0, [pc, #164]	@ (8000414 <MX_GPIO_Init+0x158>)
 800036e:	f001 f881 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000372:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000376:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000378:	2303      	movs	r3, #3
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	4619      	mov	r1, r3
 8000386:	4823      	ldr	r0, [pc, #140]	@ (8000414 <MX_GPIO_Init+0x158>)
 8000388:	f001 f874 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 800038c:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 8000390:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000392:	2303      	movs	r3, #3
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	4619      	mov	r1, r3
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003a4:	f001 f866 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003a8:	2320      	movs	r3, #32
 80003aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2300      	movs	r3, #0
 80003b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	4619      	mov	r1, r3
 80003be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c2:	f001 f857 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80003c6:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80003ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003cc:	2303      	movs	r3, #3
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4619      	mov	r1, r3
 80003da:	480f      	ldr	r0, [pc, #60]	@ (8000418 <MX_GPIO_Init+0x15c>)
 80003dc:	f001 f84a 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003e0:	2304      	movs	r3, #4
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e4:	2303      	movs	r3, #3
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	4619      	mov	r1, r3
 80003f2:	480a      	ldr	r0, [pc, #40]	@ (800041c <MX_GPIO_Init+0x160>)
 80003f4:	f001 f83e 	bl	8001474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2100      	movs	r1, #0
 80003fc:	2028      	movs	r0, #40	@ 0x28
 80003fe:	f000 fbfc 	bl	8000bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000402:	2028      	movs	r0, #40	@ 0x28
 8000404:	f000 fc15 	bl	8000c32 <HAL_NVIC_EnableIRQ>

}
 8000408:	bf00      	nop
 800040a:	3728      	adds	r7, #40	@ 0x28
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40021000 	.word	0x40021000
 8000414:	48000800 	.word	0x48000800
 8000418:	48000400 	.word	0x48000400
 800041c:	48000c00 	.word	0x48000c00

08000420 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000428:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800042c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	2b00      	cmp	r3, #0
 8000436:	d013      	beq.n	8000460 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000438:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800043c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000440:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000444:	2b00      	cmp	r3, #0
 8000446:	d00b      	beq.n	8000460 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000448:	e000      	b.n	800044c <ITM_SendChar+0x2c>
    {
      __NOP();
 800044a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800044c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000456:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	b2d2      	uxtb	r2, r2
 800045e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <_write>:
{
	return;
}

int _write(int file, char *ptr, int len)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b086      	sub	sp, #24
 8000472:	af00      	add	r7, sp, #0
 8000474:	60f8      	str	r0, [r7, #12]
 8000476:	60b9      	str	r1, [r7, #8]
 8000478:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	e009      	b.n	8000494 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	1c5a      	adds	r2, r3, #1
 8000484:	60ba      	str	r2, [r7, #8]
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ffc9 	bl	8000420 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	3301      	adds	r3, #1
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	697a      	ldr	r2, [r7, #20]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	429a      	cmp	r2, r3
 800049a:	dbf1      	blt.n	8000480 <_write+0x12>
  }
  return len;
 800049c:	687b      	ldr	r3, [r7, #4]
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b082      	sub	sp, #8
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	4603      	mov	r3, r0
 80004ae:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == B1_Pin )
 80004b0:	88fb      	ldrh	r3, [r7, #6]
 80004b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004b6:	d101      	bne.n	80004bc <HAL_GPIO_EXTI_Callback+0x16>
	{
		led_run();
 80004b8:	f004 fb7f 	bl	8004bba <led_run>
	}
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fa56 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f818 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f7ff fef4 	bl	80002bc <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f7ff fed4 	bl	8000280 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f980 	bl	80007dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // initiate command handler first to be ready to register other modules.
  cmdhandler_init( &huart2 );
 80004dc:	4807      	ldr	r0, [pc, #28]	@ (80004fc <main+0x38>)
 80004de:	f004 f8c5 	bl	800466c <cmdhandler_init>

  led_init();
 80004e2:	f004 fb47 	bl	8004b74 <led_init>
  flash_init();
 80004e6:	f004 f999 	bl	800481c <flash_init>
  fwUpgrade_init();
 80004ea:	f004 fac5 	bl	8004a78 <fwUpgrade_init>



  scheduler_init();
 80004ee:	f004 fbbd 	bl	8004c6c <scheduler_init>
  //scheduler_addTask(500, excute);
  scheduler_run();
 80004f2:	f004 fc61 	bl	8004db8 <scheduler_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	bf00      	nop
 80004f8:	e7fd      	b.n	80004f6 <main+0x32>
 80004fa:	bf00      	nop
 80004fc:	20000088 	.word	0x20000088

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b0a6      	sub	sp, #152	@ 0x98
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800050a:	2228      	movs	r2, #40	@ 0x28
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f004 fe8d 	bl	800522e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2258      	movs	r2, #88	@ 0x58
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f004 fe7f 	bl	800522e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000530:	2302      	movs	r3, #2
 8000532:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000534:	2301      	movs	r3, #1
 8000536:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000538:	2310      	movs	r3, #16
 800053a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000544:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000548:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800054c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000550:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800055e:	4618      	mov	r0, r3
 8000560:	f001 f95c 	bl	800181c <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800056a:	f000 f827 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800057e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000584:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000588:	2102      	movs	r1, #2
 800058a:	4618      	mov	r0, r3
 800058c:	f002 f99a 	bl	80028c4 <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000596:	f000 f811 	bl	80005bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800059a:	2302      	movs	r3, #2
 800059c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fbad 	bl	8002d04 <HAL_RCCEx_PeriphCLKConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005b0:	f000 f804 	bl	80005bc <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3798      	adds	r7, #152	@ 0x98
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <Error_Handler+0x8>

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <HAL_MspInit+0x44>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	4a0e      	ldr	r2, [pc, #56]	@ (800060c <HAL_MspInit+0x44>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6193      	str	r3, [r2, #24]
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <HAL_MspInit+0x44>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <HAL_MspInit+0x44>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	4a08      	ldr	r2, [pc, #32]	@ (800060c <HAL_MspInit+0x44>)
 80005ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	61d3      	str	r3, [r2, #28]
 80005f2:	4b06      	ldr	r3, [pc, #24]	@ (800060c <HAL_MspInit+0x44>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005fe:	2007      	movs	r0, #7
 8000600:	f000 faf0 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <NMI_Handler+0x4>

08000618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <HardFault_Handler+0x4>

08000620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <MemManage_Handler+0x4>

08000628 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <UsageFault_Handler+0x4>

08000638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000666:	f000 f9cd 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000674:	4802      	ldr	r0, [pc, #8]	@ (8000680 <DMA1_Channel6_IRQHandler+0x10>)
 8000676:	f000 fc18 	bl	8000eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000110 	.word	0x20000110

08000684 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000688:	4802      	ldr	r0, [pc, #8]	@ (8000694 <USART2_IRQHandler+0x10>)
 800068a:	f002 fda7 	bl	80031dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000088 	.word	0x20000088

08000698 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800069c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006a0:	f001 f8a4 	bl	80017ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	e00a      	b.n	80006d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006ba:	f3af 8000 	nop.w
 80006be:	4601      	mov	r1, r0
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	60ba      	str	r2, [r7, #8]
 80006c6:	b2ca      	uxtb	r2, r1
 80006c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3301      	adds	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbf0      	blt.n	80006ba <_read+0x12>
  }

  return len;
 80006d8:	687b      	ldr	r3, [r7, #4]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800070a:	605a      	str	r2, [r3, #4]
  return 0;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <_isatty>:

int _isatty(int file)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000722:	2301      	movs	r3, #1
}
 8000724:	4618      	mov	r0, r3
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000754:	4a14      	ldr	r2, [pc, #80]	@ (80007a8 <_sbrk+0x5c>)
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <_sbrk+0x60>)
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <_sbrk+0x64>)
 800076a:	4a12      	ldr	r2, [pc, #72]	@ (80007b4 <_sbrk+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	429a      	cmp	r2, r3
 800077a:	d207      	bcs.n	800078c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800077c:	f004 fda6 	bl	80052cc <__errno>
 8000780:	4603      	mov	r3, r0
 8000782:	220c      	movs	r2, #12
 8000784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	e009      	b.n	80007a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800078c:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000792:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <_sbrk+0x64>)
 800079c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800079e:	68fb      	ldr	r3, [r7, #12]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20010000 	.word	0x20010000
 80007ac:	00000400 	.word	0x00000400
 80007b0:	20000084 	.word	0x20000084
 80007b4:	20000708 	.word	0x20000708

080007b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <SystemInit+0x20>)
 80007be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007c2:	4a05      	ldr	r2, [pc, #20]	@ (80007d8 <SystemInit+0x20>)
 80007c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007e2:	4a15      	ldr	r2, [pc, #84]	@ (8000838 <MX_USART2_UART_Init+0x5c>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000820:	f002 fc8e 	bl	8003140 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800082a:	f7ff fec7 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000088 	.word	0x20000088
 8000838:	40004400 	.word	0x40004400

0800083c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a2e      	ldr	r2, [pc, #184]	@ (8000914 <HAL_UART_MspInit+0xd8>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d156      	bne.n	800090c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085e:	4b2e      	ldr	r3, [pc, #184]	@ (8000918 <HAL_UART_MspInit+0xdc>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a2d      	ldr	r2, [pc, #180]	@ (8000918 <HAL_UART_MspInit+0xdc>)
 8000864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <HAL_UART_MspInit+0xdc>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <HAL_UART_MspInit+0xdc>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a27      	ldr	r2, [pc, #156]	@ (8000918 <HAL_UART_MspInit+0xdc>)
 800087c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <HAL_UART_MspInit+0xdc>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800088e:	230c      	movs	r3, #12
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089e:	2307      	movs	r3, #7
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ac:	f000 fde2 	bl	8001474 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <HAL_UART_MspInit+0xe0>)
 80008b2:	4a1b      	ldr	r2, [pc, #108]	@ (8000920 <HAL_UART_MspInit+0xe4>)
 80008b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b6:	4b19      	ldr	r3, [pc, #100]	@ (800091c <HAL_UART_MspInit+0xe0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008bc:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_UART_MspInit+0xe0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c2:	4b16      	ldr	r3, [pc, #88]	@ (800091c <HAL_UART_MspInit+0xe0>)
 80008c4:	2280      	movs	r2, #128	@ 0x80
 80008c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c8:	4b14      	ldr	r3, [pc, #80]	@ (800091c <HAL_UART_MspInit+0xe0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ce:	4b13      	ldr	r3, [pc, #76]	@ (800091c <HAL_UART_MspInit+0xe0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008d4:	4b11      	ldr	r3, [pc, #68]	@ (800091c <HAL_UART_MspInit+0xe0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008da:	4b10      	ldr	r3, [pc, #64]	@ (800091c <HAL_UART_MspInit+0xe0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008e0:	480e      	ldr	r0, [pc, #56]	@ (800091c <HAL_UART_MspInit+0xe0>)
 80008e2:	f000 f9c0 	bl	8000c66 <HAL_DMA_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80008ec:	f7ff fe66 	bl	80005bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <HAL_UART_MspInit+0xe0>)
 80008f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80008f6:	4a09      	ldr	r2, [pc, #36]	@ (800091c <HAL_UART_MspInit+0xe0>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	2026      	movs	r0, #38	@ 0x26
 8000902:	f000 f97a 	bl	8000bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000906:	2026      	movs	r0, #38	@ 0x26
 8000908:	f000 f993 	bl	8000c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	@ 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40004400 	.word	0x40004400
 8000918:	40021000 	.word	0x40021000
 800091c:	20000110 	.word	0x20000110
 8000920:	4002006c 	.word	0x4002006c

08000924 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800095c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000928:	f7ff ff46 	bl	80007b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	@ (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	@ (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000952:	f004 fcc1 	bl	80052d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000956:	f7ff fdb5 	bl	80004c4 <main>

0800095a <LoopForever>:

LoopForever:
    b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800095c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000968:	08005f4c 	.word	0x08005f4c
  ldr r2, =_sbss
 800096c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000970:	20000708 	.word	0x20000708

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <HAL_Init+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_Init+0x28>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f92b 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fe18 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f943 	bl	8000c4e <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 f90b 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000154 	.word	0x20000154

08000a2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000154 	.word	0x20000154

08000a44 <__NVIC_SetPriorityGrouping>:
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_EnableIRQ>:
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db0b      	blt.n	8000ad2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 021f 	and.w	r2, r3, #31
 8000ac0:	4907      	ldr	r1, [pc, #28]	@ (8000ae0 <__NVIC_EnableIRQ+0x38>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <__NVIC_SetPriority>:
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	@ (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	@ (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	@ 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	@ 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SysTick_Config>:
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff8e 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff29 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff3e 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff8e 	bl	8000b38 <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff31 	bl	8000aa8 <__NVIC_EnableIRQ>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffa2 	bl	8000ba0 <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b084      	sub	sp, #16
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e037      	b.n	8000cec <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2202      	movs	r2, #2
 8000c80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000c92:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000c96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 f9bc 	bl	800104c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <HAL_DMA_Start_IT+0x20>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e04a      	b.n	8000daa <HAL_DMA_Start_IT+0xb6>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d13a      	bne.n	8000d9c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2202      	movs	r2, #2
 8000d2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2200      	movs	r2, #0
 8000d32:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0201 	bic.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f000 f950 	bl	8000ff0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d008      	beq.n	8000d6a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 020e 	orr.w	r2, r2, #14
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	e00f      	b.n	8000d8a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f042 020a 	orr.w	r2, r2, #10
 8000d78:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0204 	bic.w	r2, r2, #4
 8000d88:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f042 0201 	orr.w	r2, r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e005      	b.n	8000da8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000da4:	2302      	movs	r3, #2
 8000da6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d101      	bne.n	8000dc4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e02e      	b.n	8000e22 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d008      	beq.n	8000de0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e020      	b.n	8000e22 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 020e 	bic.w	r2, r2, #14
 8000dee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0201 	bic.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d005      	beq.n	8000e50 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2204      	movs	r2, #4
 8000e48:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e027      	b.n	8000ea0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 020e 	bic.w	r2, r2, #14
 8000e5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0201 	bic.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e78:	2101      	movs	r1, #1
 8000e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	4798      	blx	r3
    }
  }
  return status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d024      	beq.n	8000f1c <HAL_DMA_IRQHandler+0x72>
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d01f      	beq.n	8000f1c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d107      	bne.n	8000efa <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 0204 	bic.w	r2, r2, #4
 8000ef8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f02:	2104      	movs	r1, #4
 8000f04:	fa01 f202 	lsl.w	r2, r1, r2
 8000f08:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d06a      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f1a:	e065      	b.n	8000fe8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	2202      	movs	r2, #2
 8000f22:	409a      	lsls	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d02c      	beq.n	8000f86 <HAL_DMA_IRQHandler+0xdc>
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d027      	beq.n	8000f86 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10b      	bne.n	8000f5c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 020a 	bic.w	r2, r2, #10
 8000f52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f64:	2102      	movs	r1, #2
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d035      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f84:	e030      	b.n	8000fe8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d028      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x13e>
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d023      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 020e 	bic.w	r2, r2, #14
 8000fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fb8:	2101      	movs	r1, #1
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	4798      	blx	r3
    }
  }
}
 8000fe6:	e7ff      	b.n	8000fe8 <HAL_DMA_IRQHandler+0x13e>
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001006:	2101      	movs	r1, #1
 8001008:	fa01 f202 	lsl.w	r2, r1, r2
 800100c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b10      	cmp	r3, #16
 800101c:	d108      	bne.n	8001030 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800102e:	e007      	b.n	8001040 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	60da      	str	r2, [r3, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <DMA_CalcBaseAndBitshift+0x60>)
 800105c:	429a      	cmp	r2, r3
 800105e:	d80f      	bhi.n	8001080 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <DMA_CalcBaseAndBitshift+0x64>)
 8001068:	4413      	add	r3, r2
 800106a:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <DMA_CalcBaseAndBitshift+0x68>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	009a      	lsls	r2, r3, #2
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a0f      	ldr	r2, [pc, #60]	@ (80010b8 <DMA_CalcBaseAndBitshift+0x6c>)
 800107c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800107e:	e00e      	b.n	800109e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <DMA_CalcBaseAndBitshift+0x70>)
 8001088:	4413      	add	r3, r2
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <DMA_CalcBaseAndBitshift+0x68>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	009a      	lsls	r2, r3, #2
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a09      	ldr	r2, [pc, #36]	@ (80010c0 <DMA_CalcBaseAndBitshift+0x74>)
 800109c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40020407 	.word	0x40020407
 80010b0:	bffdfff8 	.word	0xbffdfff8
 80010b4:	cccccccd 	.word	0xcccccccd
 80010b8:	40020000 	.word	0x40020000
 80010bc:	bffdfbf8 	.word	0xbffdfbf8
 80010c0:	40020400 	.word	0x40020400

080010c4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80010da:	2300      	movs	r3, #0
 80010dc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010de:	4b2f      	ldr	r3, [pc, #188]	@ (800119c <HAL_FLASH_Program+0xd8>)
 80010e0:	7e1b      	ldrb	r3, [r3, #24]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d101      	bne.n	80010ea <HAL_FLASH_Program+0x26>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e054      	b.n	8001194 <HAL_FLASH_Program+0xd0>
 80010ea:	4b2c      	ldr	r3, [pc, #176]	@ (800119c <HAL_FLASH_Program+0xd8>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010f4:	f000 f8a8 	bl	8001248 <FLASH_WaitForLastOperation>
 80010f8:	4603      	mov	r3, r0
 80010fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d144      	bne.n	800118c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d102      	bne.n	800110e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001108:	2301      	movs	r3, #1
 800110a:	757b      	strb	r3, [r7, #21]
 800110c:	e007      	b.n	800111e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d102      	bne.n	800111a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001114:	2302      	movs	r3, #2
 8001116:	757b      	strb	r3, [r7, #21]
 8001118:	e001      	b.n	800111e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800111a:	2304      	movs	r3, #4
 800111c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800111e:	2300      	movs	r3, #0
 8001120:	75bb      	strb	r3, [r7, #22]
 8001122:	e02d      	b.n	8001180 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001124:	7dbb      	ldrb	r3, [r7, #22]
 8001126:	005a      	lsls	r2, r3, #1
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	eb02 0c03 	add.w	ip, r2, r3
 800112e:	7dbb      	ldrb	r3, [r7, #22]
 8001130:	0119      	lsls	r1, r3, #4
 8001132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001136:	f1c1 0620 	rsb	r6, r1, #32
 800113a:	f1a1 0020 	sub.w	r0, r1, #32
 800113e:	fa22 f401 	lsr.w	r4, r2, r1
 8001142:	fa03 f606 	lsl.w	r6, r3, r6
 8001146:	4334      	orrs	r4, r6
 8001148:	fa23 f000 	lsr.w	r0, r3, r0
 800114c:	4304      	orrs	r4, r0
 800114e:	fa23 f501 	lsr.w	r5, r3, r1
 8001152:	b2a3      	uxth	r3, r4
 8001154:	4619      	mov	r1, r3
 8001156:	4660      	mov	r0, ip
 8001158:	f000 f85a 	bl	8001210 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800115c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001160:	f000 f872 	bl	8001248 <FLASH_WaitForLastOperation>
 8001164:	4603      	mov	r3, r0
 8001166:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001168:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <HAL_FLASH_Program+0xdc>)
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	4a0c      	ldr	r2, [pc, #48]	@ (80011a0 <HAL_FLASH_Program+0xdc>)
 800116e:	f023 0301 	bic.w	r3, r3, #1
 8001172:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d107      	bne.n	800118a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800117a:	7dbb      	ldrb	r3, [r7, #22]
 800117c:	3301      	adds	r3, #1
 800117e:	75bb      	strb	r3, [r7, #22]
 8001180:	7dba      	ldrb	r2, [r7, #22]
 8001182:	7d7b      	ldrb	r3, [r7, #21]
 8001184:	429a      	cmp	r2, r3
 8001186:	d3cd      	bcc.n	8001124 <HAL_FLASH_Program+0x60>
 8001188:	e000      	b.n	800118c <HAL_FLASH_Program+0xc8>
      {
        break;
 800118a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <HAL_FLASH_Program+0xd8>)
 800118e:	2200      	movs	r2, #0
 8001190:	761a      	strb	r2, [r3, #24]

  return status;
 8001192:	7dfb      	ldrb	r3, [r7, #23]
}
 8001194:	4618      	mov	r0, r3
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119c:	20000158 	.word	0x20000158
 80011a0:	40022000 	.word	0x40022000

080011a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <HAL_FLASH_Unlock+0x40>)
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00d      	beq.n	80011d6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <HAL_FLASH_Unlock+0x40>)
 80011bc:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <HAL_FLASH_Unlock+0x44>)
 80011be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <HAL_FLASH_Unlock+0x40>)
 80011c2:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <HAL_FLASH_Unlock+0x48>)
 80011c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <HAL_FLASH_Unlock+0x40>)
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40022000 	.word	0x40022000
 80011e8:	45670123 	.word	0x45670123
 80011ec:	cdef89ab 	.word	0xcdef89ab

080011f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <HAL_FLASH_Lock+0x1c>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	4a04      	ldr	r2, [pc, #16]	@ (800120c <HAL_FLASH_Lock+0x1c>)
 80011fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	40022000 	.word	0x40022000

08001210 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <FLASH_Program_HalfWord+0x30>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <FLASH_Program_HalfWord+0x34>)
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	4a07      	ldr	r2, [pc, #28]	@ (8001244 <FLASH_Program_HalfWord+0x34>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	887a      	ldrh	r2, [r7, #2]
 8001232:	801a      	strh	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	20000158 	.word	0x20000158
 8001244:	40022000 	.word	0x40022000

08001248 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff fbec 	bl	8000a2c <HAL_GetTick>
 8001254:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001256:	e010      	b.n	800127a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125e:	d00c      	beq.n	800127a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <FLASH_WaitForLastOperation+0x2e>
 8001266:	f7ff fbe1 	bl	8000a2c <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	d201      	bcs.n	800127a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e01f      	b.n	80012ba <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800127a:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <FLASH_WaitForLastOperation+0x7c>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b01      	cmp	r3, #1
 8001284:	d0e8      	beq.n	8001258 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <FLASH_WaitForLastOperation+0x7c>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	f003 0320 	and.w	r3, r3, #32
 800128e:	2b20      	cmp	r3, #32
 8001290:	d102      	bne.n	8001298 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <FLASH_WaitForLastOperation+0x7c>)
 8001294:	2220      	movs	r2, #32
 8001296:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001298:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <FLASH_WaitForLastOperation+0x7c>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	d005      	beq.n	80012b0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012a4:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <FLASH_WaitForLastOperation+0x7c>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d103      	bne.n	80012b8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012b0:	f000 f80a 	bl	80012c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40022000 	.word	0x40022000

080012c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80012d2:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <FLASH_SetErrorCode+0x5c>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2b10      	cmp	r3, #16
 80012dc:	d109      	bne.n	80012f2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <FLASH_SetErrorCode+0x60>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f043 0302 	orr.w	r3, r3, #2
 80012e6:	4a10      	ldr	r2, [pc, #64]	@ (8001328 <FLASH_SetErrorCode+0x60>)
 80012e8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f043 0310 	orr.w	r3, r3, #16
 80012f0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <FLASH_SetErrorCode+0x5c>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d109      	bne.n	8001312 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80012fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <FLASH_SetErrorCode+0x60>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	4a08      	ldr	r2, [pc, #32]	@ (8001328 <FLASH_SetErrorCode+0x60>)
 8001308:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001312:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <FLASH_SetErrorCode+0x5c>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60d3      	str	r3, [r2, #12]
}  
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40022000 	.word	0x40022000
 8001328:	20000158 	.word	0x20000158

0800132c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800133e:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <HAL_FLASHEx_Erase+0xcc>)
 8001340:	7e1b      	ldrb	r3, [r3, #24]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <HAL_FLASHEx_Erase+0x1e>
 8001346:	2302      	movs	r3, #2
 8001348:	e052      	b.n	80013f0 <HAL_FLASHEx_Erase+0xc4>
 800134a:	4b2b      	ldr	r3, [pc, #172]	@ (80013f8 <HAL_FLASHEx_Erase+0xcc>)
 800134c:	2201      	movs	r2, #1
 800134e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d115      	bne.n	8001384 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001358:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800135c:	f7ff ff74 	bl	8001248 <FLASH_WaitForLastOperation>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d140      	bne.n	80013e8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001366:	f000 f84b 	bl	8001400 <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800136a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800136e:	f7ff ff6b 	bl	8001248 <FLASH_WaitForLastOperation>
 8001372:	4603      	mov	r3, r0
 8001374:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <HAL_FLASHEx_Erase+0xd0>)
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	4a20      	ldr	r2, [pc, #128]	@ (80013fc <HAL_FLASHEx_Erase+0xd0>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	6113      	str	r3, [r2, #16]
 8001382:	e031      	b.n	80013e8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001384:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001388:	f7ff ff5e 	bl	8001248 <FLASH_WaitForLastOperation>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d12a      	bne.n	80013e8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f04f 32ff 	mov.w	r2, #4294967295
 8001398:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	e019      	b.n	80013d6 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80013a2:	68b8      	ldr	r0, [r7, #8]
 80013a4:	f000 f846 	bl	8001434 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013ac:	f7ff ff4c 	bl	8001248 <FLASH_WaitForLastOperation>
 80013b0:	4603      	mov	r3, r0
 80013b2:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80013b4:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <HAL_FLASHEx_Erase+0xd0>)
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	4a10      	ldr	r2, [pc, #64]	@ (80013fc <HAL_FLASHEx_Erase+0xd0>)
 80013ba:	f023 0302 	bic.w	r3, r3, #2
 80013be:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	601a      	str	r2, [r3, #0]
            break;
 80013cc:	e00c      	b.n	80013e8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013d4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	02da      	lsls	r2, r3, #11
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d3dc      	bcc.n	80013a2 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013e8:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <HAL_FLASHEx_Erase+0xcc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	761a      	strb	r2, [r3, #24]

  return status;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000158 	.word	0x20000158
 80013fc:	40022000 	.word	0x40022000

08001400 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <FLASH_MassErase+0x2c>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <FLASH_MassErase+0x30>)
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	4a08      	ldr	r2, [pc, #32]	@ (8001430 <FLASH_MassErase+0x30>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <FLASH_MassErase+0x30>)
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <FLASH_MassErase+0x30>)
 800141c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001420:	6113      	str	r3, [r2, #16]
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	20000158 	.word	0x20000158
 8001430:	40022000 	.word	0x40022000

08001434 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <FLASH_PageErase+0x38>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001442:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <FLASH_PageErase+0x3c>)
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <FLASH_PageErase+0x3c>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800144e:	4a08      	ldr	r2, [pc, #32]	@ (8001470 <FLASH_PageErase+0x3c>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <FLASH_PageErase+0x3c>)
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <FLASH_PageErase+0x3c>)
 800145a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800145e:	6113      	str	r3, [r2, #16]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	20000158 	.word	0x20000158
 8001470:	40022000 	.word	0x40022000

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001482:	e160      	b.n	8001746 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8152 	beq.w	8001740 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d005      	beq.n	80014b4 <HAL_GPIO_Init+0x40>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d130      	bne.n	8001516 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ea:	2201      	movs	r2, #1
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	f003 0201 	and.w	r2, r3, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b03      	cmp	r3, #3
 8001520:	d017      	beq.n	8001552 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d123      	bne.n	80015a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	08da      	lsrs	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3208      	adds	r2, #8
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	691a      	ldr	r2, [r3, #16]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	6939      	ldr	r1, [r7, #16]
 80015a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0203 	and.w	r2, r3, #3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80ac 	beq.w	8001740 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001764 <HAL_GPIO_Init+0x2f0>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001764 <HAL_GPIO_Init+0x2f0>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001764 <HAL_GPIO_Init+0x2f0>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001600:	4a59      	ldr	r2, [pc, #356]	@ (8001768 <HAL_GPIO_Init+0x2f4>)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800162a:	d025      	beq.n	8001678 <HAL_GPIO_Init+0x204>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a4f      	ldr	r2, [pc, #316]	@ (800176c <HAL_GPIO_Init+0x2f8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d01f      	beq.n	8001674 <HAL_GPIO_Init+0x200>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a4e      	ldr	r2, [pc, #312]	@ (8001770 <HAL_GPIO_Init+0x2fc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d019      	beq.n	8001670 <HAL_GPIO_Init+0x1fc>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a4d      	ldr	r2, [pc, #308]	@ (8001774 <HAL_GPIO_Init+0x300>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d013      	beq.n	800166c <HAL_GPIO_Init+0x1f8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a4c      	ldr	r2, [pc, #304]	@ (8001778 <HAL_GPIO_Init+0x304>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00d      	beq.n	8001668 <HAL_GPIO_Init+0x1f4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a4b      	ldr	r2, [pc, #300]	@ (800177c <HAL_GPIO_Init+0x308>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d007      	beq.n	8001664 <HAL_GPIO_Init+0x1f0>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a4a      	ldr	r2, [pc, #296]	@ (8001780 <HAL_GPIO_Init+0x30c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_GPIO_Init+0x1ec>
 800165c:	2306      	movs	r3, #6
 800165e:	e00c      	b.n	800167a <HAL_GPIO_Init+0x206>
 8001660:	2307      	movs	r3, #7
 8001662:	e00a      	b.n	800167a <HAL_GPIO_Init+0x206>
 8001664:	2305      	movs	r3, #5
 8001666:	e008      	b.n	800167a <HAL_GPIO_Init+0x206>
 8001668:	2304      	movs	r3, #4
 800166a:	e006      	b.n	800167a <HAL_GPIO_Init+0x206>
 800166c:	2303      	movs	r3, #3
 800166e:	e004      	b.n	800167a <HAL_GPIO_Init+0x206>
 8001670:	2302      	movs	r3, #2
 8001672:	e002      	b.n	800167a <HAL_GPIO_Init+0x206>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_GPIO_Init+0x206>
 8001678:	2300      	movs	r3, #0
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	f002 0203 	and.w	r2, r2, #3
 8001680:	0092      	lsls	r2, r2, #2
 8001682:	4093      	lsls	r3, r2
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800168a:	4937      	ldr	r1, [pc, #220]	@ (8001768 <HAL_GPIO_Init+0x2f4>)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001698:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <HAL_GPIO_Init+0x310>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016bc:	4a31      	ldr	r2, [pc, #196]	@ (8001784 <HAL_GPIO_Init+0x310>)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c2:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <HAL_GPIO_Init+0x310>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016e6:	4a27      	ldr	r2, [pc, #156]	@ (8001784 <HAL_GPIO_Init+0x310>)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ec:	4b25      	ldr	r3, [pc, #148]	@ (8001784 <HAL_GPIO_Init+0x310>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001710:	4a1c      	ldr	r2, [pc, #112]	@ (8001784 <HAL_GPIO_Init+0x310>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001716:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <HAL_GPIO_Init+0x310>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800173a:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <HAL_GPIO_Init+0x310>)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	f47f ae97 	bne.w	8001484 <HAL_GPIO_Init+0x10>
  }
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40021000 	.word	0x40021000
 8001768:	40010000 	.word	0x40010000
 800176c:	48000400 	.word	0x48000400
 8001770:	48000800 	.word	0x48000800
 8001774:	48000c00 	.word	0x48000c00
 8001778:	48001000 	.word	0x48001000
 800177c:	48001400 	.word	0x48001400
 8001780:	48001800 	.word	0x48001800
 8001784:	40010400 	.word	0x40010400

08001788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
 8001794:	4613      	mov	r3, r2
 8001796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001798:	787b      	ldrb	r3, [r7, #1]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017a4:	e002      	b.n	80017ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4013      	ands	r3, r2
 80017d0:	041a      	lsls	r2, r3, #16
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	43d9      	mvns	r1, r3
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	400b      	ands	r3, r1
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001802:	4a05      	ldr	r2, [pc, #20]	@ (8001818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fe4b 	bl	80004a6 <HAL_GPIO_EXTI_Callback>
  }
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40010400 	.word	0x40010400

0800181c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001822:	af00      	add	r7, sp, #0
 8001824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001828:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800182c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800182e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001832:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	f001 b83a 	b.w	80028b6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001846:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 816f 	beq.w	8001b36 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001858:	4bb5      	ldr	r3, [pc, #724]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b04      	cmp	r3, #4
 8001862:	d00c      	beq.n	800187e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001864:	4bb2      	ldr	r3, [pc, #712]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b08      	cmp	r3, #8
 800186e:	d15c      	bne.n	800192a <HAL_RCC_OscConfig+0x10e>
 8001870:	4baf      	ldr	r3, [pc, #700]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800187c:	d155      	bne.n	800192a <HAL_RCC_OscConfig+0x10e>
 800187e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001882:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001892:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_OscConfig+0x94>
 80018aa:	4ba1      	ldr	r3, [pc, #644]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	e015      	b.n	80018dc <HAL_RCC_OscConfig+0xc0>
 80018b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018b4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80018c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018c8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80018cc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80018d8:	4b95      	ldr	r3, [pc, #596]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018e0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80018e4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80018e8:	fa92 f2a2 	rbit	r2, r2
 80018ec:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80018f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80018f4:	fab2 f282 	clz	r2, r2
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f042 0220 	orr.w	r2, r2, #32
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	f002 021f 	and.w	r2, r2, #31
 8001904:	2101      	movs	r1, #1
 8001906:	fa01 f202 	lsl.w	r2, r1, r2
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8111 	beq.w	8001b34 <HAL_RCC_OscConfig+0x318>
 8001912:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001916:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 8108 	bne.w	8001b34 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	f000 bfc6 	b.w	80028b6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x12e>
 800193c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a7b      	ldr	r2, [pc, #492]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 8001942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e036      	b.n	80019b8 <HAL_RCC_OscConfig+0x19c>
 800194a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x158>
 800195a:	4b75      	ldr	r3, [pc, #468]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a74      	ldr	r2, [pc, #464]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 8001960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b72      	ldr	r3, [pc, #456]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a71      	ldr	r2, [pc, #452]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 800196c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e021      	b.n	80019b8 <HAL_RCC_OscConfig+0x19c>
 8001974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001978:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x184>
 8001986:	4b6a      	ldr	r3, [pc, #424]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a69      	ldr	r2, [pc, #420]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b67      	ldr	r3, [pc, #412]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a66      	ldr	r2, [pc, #408]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0x19c>
 80019a0:	4b63      	ldr	r3, [pc, #396]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a62      	ldr	r2, [pc, #392]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b60      	ldr	r3, [pc, #384]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a5f      	ldr	r2, [pc, #380]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019b6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d059      	beq.n	8001a7c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff f830 	bl	8000a2c <HAL_GetTick>
 80019cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d2:	f7ff f82b 	bl	8000a2c <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	@ 0x64
 80019e0:	d902      	bls.n	80019e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	f000 bf67 	b.w	80028b6 <HAL_RCC_OscConfig+0x109a>
 80019e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ec:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80019fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d102      	bne.n	8001a1a <HAL_RCC_OscConfig+0x1fe>
 8001a14:	4b46      	ldr	r3, [pc, #280]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	e015      	b.n	8001a46 <HAL_RCC_OscConfig+0x22a>
 8001a1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a1e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001a2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a32:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001a36:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001a3a:	fa93 f3a3 	rbit	r3, r3
 8001a3e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001a42:	4b3b      	ldr	r3, [pc, #236]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a4a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001a4e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001a52:	fa92 f2a2 	rbit	r2, r2
 8001a56:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001a5a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001a5e:	fab2 f282 	clz	r2, r2
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	f042 0220 	orr.w	r2, r2, #32
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	f002 021f 	and.w	r2, r2, #31
 8001a6e:	2101      	movs	r1, #1
 8001a70:	fa01 f202 	lsl.w	r2, r1, r2
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0ab      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1b6>
 8001a7a:	e05c      	b.n	8001b36 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7fe ffd6 	bl	8000a2c <HAL_GetTick>
 8001a80:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a86:	f7fe ffd1 	bl	8000a2c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	@ 0x64
 8001a94:	d902      	bls.n	8001a9c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	f000 bf0d 	b.w	80028b6 <HAL_RCC_OscConfig+0x109a>
 8001a9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001ab0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d102      	bne.n	8001ace <HAL_RCC_OscConfig+0x2b2>
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x2de>
 8001ace:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ad2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001ae2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ae6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001aea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001af6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <HAL_RCC_OscConfig+0x314>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001afe:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001b02:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001b06:	fa92 f2a2 	rbit	r2, r2
 8001b0a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001b0e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001b12:	fab2 f282 	clz	r2, r2
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	f042 0220 	orr.w	r2, r2, #32
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	f002 021f 	and.w	r2, r2, #31
 8001b22:	2101      	movs	r1, #1
 8001b24:	fa01 f202 	lsl.w	r2, r1, r2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ab      	bne.n	8001a86 <HAL_RCC_OscConfig+0x26a>
 8001b2e:	e002      	b.n	8001b36 <HAL_RCC_OscConfig+0x31a>
 8001b30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 817f 	beq.w	8001e4a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b4c:	4ba7      	ldr	r3, [pc, #668]	@ (8001dec <HAL_RCC_OscConfig+0x5d0>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00c      	beq.n	8001b72 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b58:	4ba4      	ldr	r3, [pc, #656]	@ (8001dec <HAL_RCC_OscConfig+0x5d0>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d173      	bne.n	8001c4c <HAL_RCC_OscConfig+0x430>
 8001b64:	4ba1      	ldr	r3, [pc, #644]	@ (8001dec <HAL_RCC_OscConfig+0x5d0>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001b6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b70:	d16c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x430>
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001b84:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x386>
 8001b9c:	4b93      	ldr	r3, [pc, #588]	@ (8001dec <HAL_RCC_OscConfig+0x5d0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	e013      	b.n	8001bca <HAL_RCC_OscConfig+0x3ae>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001bba:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001bc6:	4b89      	ldr	r3, [pc, #548]	@ (8001dec <HAL_RCC_OscConfig+0x5d0>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001bd0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001bd4:	fa92 f2a2 	rbit	r2, r2
 8001bd8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001bdc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001be0:	fab2 f282 	clz	r2, r2
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f042 0220 	orr.w	r2, r2, #32
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f002 021f 	and.w	r2, r2, #31
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00a      	beq.n	8001c12 <HAL_RCC_OscConfig+0x3f6>
 8001bfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d002      	beq.n	8001c12 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	f000 be52 	b.w	80028b6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b76      	ldr	r3, [pc, #472]	@ (8001dec <HAL_RCC_OscConfig+0x5d0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	21f8      	movs	r1, #248	@ 0xf8
 8001c28:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001c30:	fa91 f1a1 	rbit	r1, r1
 8001c34:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001c38:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001c3c:	fab1 f181 	clz	r1, r1
 8001c40:	b2c9      	uxtb	r1, r1
 8001c42:	408b      	lsls	r3, r1
 8001c44:	4969      	ldr	r1, [pc, #420]	@ (8001dec <HAL_RCC_OscConfig+0x5d0>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	e0fe      	b.n	8001e4a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8088 	beq.w	8001d6e <HAL_RCC_OscConfig+0x552>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001c70:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c7e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	461a      	mov	r2, r3
 8001c86:	2301      	movs	r3, #1
 8001c88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7fe fecf 	bl	8000a2c <HAL_GetTick>
 8001c8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c94:	f7fe feca 	bl	8000a2c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d902      	bls.n	8001caa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	f000 be06 	b.w	80028b6 <HAL_RCC_OscConfig+0x109a>
 8001caa:	2302      	movs	r3, #2
 8001cac:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001cbc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d102      	bne.n	8001cda <HAL_RCC_OscConfig+0x4be>
 8001cd4:	4b45      	ldr	r3, [pc, #276]	@ (8001dec <HAL_RCC_OscConfig+0x5d0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	e013      	b.n	8001d02 <HAL_RCC_OscConfig+0x4e6>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001cec:	2302      	movs	r3, #2
 8001cee:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001cf2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001dec <HAL_RCC_OscConfig+0x5d0>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	2202      	movs	r2, #2
 8001d04:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001d08:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001d0c:	fa92 f2a2 	rbit	r2, r2
 8001d10:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001d14:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001d18:	fab2 f282 	clz	r2, r2
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	f042 0220 	orr.w	r2, r2, #32
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	f002 021f 	and.w	r2, r2, #31
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0af      	beq.n	8001c94 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d34:	4b2d      	ldr	r3, [pc, #180]	@ (8001dec <HAL_RCC_OscConfig+0x5d0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	21f8      	movs	r1, #248	@ 0xf8
 8001d4a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001d52:	fa91 f1a1 	rbit	r1, r1
 8001d56:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001d5a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001d5e:	fab1 f181 	clz	r1, r1
 8001d62:	b2c9      	uxtb	r1, r1
 8001d64:	408b      	lsls	r3, r1
 8001d66:	4921      	ldr	r1, [pc, #132]	@ (8001dec <HAL_RCC_OscConfig+0x5d0>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]
 8001d6c:	e06d      	b.n	8001e4a <HAL_RCC_OscConfig+0x62e>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001d80:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d8e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	461a      	mov	r2, r3
 8001d96:	2300      	movs	r3, #0
 8001d98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7fe fe47 	bl	8000a2c <HAL_GetTick>
 8001d9e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da4:	f7fe fe42 	bl	8000a2c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d902      	bls.n	8001dba <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	f000 bd7e 	b.w	80028b6 <HAL_RCC_OscConfig+0x109a>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001dcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x5d4>
 8001de4:	4b01      	ldr	r3, [pc, #4]	@ (8001dec <HAL_RCC_OscConfig+0x5d0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	e016      	b.n	8001e18 <HAL_RCC_OscConfig+0x5fc>
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	2302      	movs	r3, #2
 8001df2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001e02:	2302      	movs	r3, #2
 8001e04:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001e08:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001e14:	4bbf      	ldr	r3, [pc, #764]	@ (8002114 <HAL_RCC_OscConfig+0x8f8>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	2202      	movs	r2, #2
 8001e1a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001e1e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001e22:	fa92 f2a2 	rbit	r2, r2
 8001e26:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001e2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001e2e:	fab2 f282 	clz	r2, r2
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	f042 0220 	orr.w	r2, r2, #32
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	f002 021f 	and.w	r2, r2, #31
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f202 	lsl.w	r2, r1, r2
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1ac      	bne.n	8001da4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8113 	beq.w	8002086 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d07c      	beq.n	8001f6a <HAL_RCC_OscConfig+0x74e>
 8001e70:	2301      	movs	r3, #1
 8001e72:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001e82:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4ba2      	ldr	r3, [pc, #648]	@ (8002118 <HAL_RCC_OscConfig+0x8fc>)
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	461a      	mov	r2, r3
 8001e96:	2301      	movs	r3, #1
 8001e98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9a:	f7fe fdc7 	bl	8000a2c <HAL_GetTick>
 8001e9e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7fe fdc2 	bl	8000a2c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d902      	bls.n	8001eba <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	f000 bcfe 	b.w	80028b6 <HAL_RCC_OscConfig+0x109a>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ec4:	fa93 f2a3 	rbit	r2, r3
 8001ec8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ecc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001eda:	2202      	movs	r2, #2
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	fa93 f2a3 	rbit	r2, r3
 8001eec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001efe:	2202      	movs	r2, #2
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f2a3 	rbit	r2, r3
 8001f10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	4b7e      	ldr	r3, [pc, #504]	@ (8002114 <HAL_RCC_OscConfig+0x8f8>)
 8001f1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f26:	2102      	movs	r1, #2
 8001f28:	6019      	str	r1, [r3, #0]
 8001f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f1a3 	rbit	r1, r3
 8001f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f40:	6019      	str	r1, [r3, #0]
  return result;
 8001f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f46:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d09d      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x688>
 8001f68:	e08d      	b.n	8002086 <HAL_RCC_OscConfig+0x86a>
 8001f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f7a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fa93 f2a3 	rbit	r2, r3
 8001f84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f88:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f8c:	601a      	str	r2, [r3, #0]
  return result;
 8001f8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f92:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f96:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4b5d      	ldr	r3, [pc, #372]	@ (8002118 <HAL_RCC_OscConfig+0x8fc>)
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2300      	movs	r3, #0
 8001faa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fac:	f7fe fd3e 	bl	8000a2c <HAL_GetTick>
 8001fb0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb6:	f7fe fd39 	bl	8000a2c <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d902      	bls.n	8001fcc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	f000 bc75 	b.w	80028b6 <HAL_RCC_OscConfig+0x109a>
 8001fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fdc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	fa93 f2a3 	rbit	r2, r3
 8001fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002000:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fa93 f2a3 	rbit	r2, r3
 800200a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002018:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800201c:	2202      	movs	r2, #2
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002024:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002032:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002036:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	4b36      	ldr	r3, [pc, #216]	@ (8002114 <HAL_RCC_OscConfig+0x8f8>)
 800203a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800203c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002040:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002044:	2102      	movs	r1, #2
 8002046:	6019      	str	r1, [r3, #0]
 8002048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	fa93 f1a3 	rbit	r1, r3
 8002056:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800205a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800205e:	6019      	str	r1, [r3, #0]
  return result;
 8002060:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002064:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d197      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 81a5 	beq.w	80023e6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <HAL_RCC_OscConfig+0x8f8>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <HAL_RCC_OscConfig+0x8f8>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4a18      	ldr	r2, [pc, #96]	@ (8002114 <HAL_RCC_OscConfig+0x8f8>)
 80020b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	61d3      	str	r3, [r2, #28]
 80020ba:	4b16      	ldr	r3, [pc, #88]	@ (8002114 <HAL_RCC_OscConfig+0x8f8>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80020c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020d6:	2301      	movs	r3, #1
 80020d8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	4b0f      	ldr	r3, [pc, #60]	@ (800211c <HAL_RCC_OscConfig+0x900>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d121      	bne.n	800212c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <HAL_RCC_OscConfig+0x900>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0b      	ldr	r2, [pc, #44]	@ (800211c <HAL_RCC_OscConfig+0x900>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f4:	f7fe fc9a 	bl	8000a2c <HAL_GetTick>
 80020f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	e010      	b.n	8002120 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fe:	f7fe fc95 	bl	8000a2c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	@ 0x64
 800210c:	d908      	bls.n	8002120 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e3d1      	b.n	80028b6 <HAL_RCC_OscConfig+0x109a>
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	10908120 	.word	0x10908120
 800211c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	4b8d      	ldr	r3, [pc, #564]	@ (8002358 <HAL_RCC_OscConfig+0xb3c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0e8      	beq.n	80020fe <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002130:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x92e>
 800213c:	4b87      	ldr	r3, [pc, #540]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a86      	ldr	r2, [pc, #536]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	e035      	b.n	80021b6 <HAL_RCC_OscConfig+0x99a>
 800214a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x958>
 800215a:	4b80      	ldr	r3, [pc, #512]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a7f      	ldr	r2, [pc, #508]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	6213      	str	r3, [r2, #32]
 8002166:	4b7d      	ldr	r3, [pc, #500]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4a7c      	ldr	r2, [pc, #496]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 800216c:	f023 0304 	bic.w	r3, r3, #4
 8002170:	6213      	str	r3, [r2, #32]
 8002172:	e020      	b.n	80021b6 <HAL_RCC_OscConfig+0x99a>
 8002174:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002178:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d10c      	bne.n	800219e <HAL_RCC_OscConfig+0x982>
 8002184:	4b75      	ldr	r3, [pc, #468]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a74      	ldr	r2, [pc, #464]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	4b72      	ldr	r3, [pc, #456]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4a71      	ldr	r2, [pc, #452]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6213      	str	r3, [r2, #32]
 800219c:	e00b      	b.n	80021b6 <HAL_RCC_OscConfig+0x99a>
 800219e:	4b6f      	ldr	r3, [pc, #444]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a6e      	ldr	r2, [pc, #440]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	6213      	str	r3, [r2, #32]
 80021aa:	4b6c      	ldr	r3, [pc, #432]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a6b      	ldr	r2, [pc, #428]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8081 	beq.w	80022ca <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c8:	f7fe fc30 	bl	8000a2c <HAL_GetTick>
 80021cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	e00b      	b.n	80021ea <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7fe fc2b 	bl	8000a2c <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e365      	b.n	80028b6 <HAL_RCC_OscConfig+0x109a>
 80021ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021f2:	2202      	movs	r2, #2
 80021f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	fa93 f2a3 	rbit	r2, r3
 8002204:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002208:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002212:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002216:	2202      	movs	r2, #2
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	fa93 f2a3 	rbit	r2, r3
 8002228:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002230:	601a      	str	r2, [r3, #0]
  return result;
 8002232:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002236:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800223a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d102      	bne.n	8002256 <HAL_RCC_OscConfig+0xa3a>
 8002250:	4b42      	ldr	r3, [pc, #264]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	e013      	b.n	800227e <HAL_RCC_OscConfig+0xa62>
 8002256:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800225a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800225e:	2202      	movs	r2, #2
 8002260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002266:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fa93 f2a3 	rbit	r2, r3
 8002270:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002274:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	4b38      	ldr	r3, [pc, #224]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002282:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002286:	2102      	movs	r1, #2
 8002288:	6011      	str	r1, [r2, #0]
 800228a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800228e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	fa92 f1a2 	rbit	r1, r2
 8002298:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800229c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80022a0:	6011      	str	r1, [r2, #0]
  return result;
 80022a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022a6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	fab2 f282 	clz	r2, r2
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	f002 021f 	and.w	r2, r2, #31
 80022bc:	2101      	movs	r1, #1
 80022be:	fa01 f202 	lsl.w	r2, r1, r2
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d084      	beq.n	80021d2 <HAL_RCC_OscConfig+0x9b6>
 80022c8:	e083      	b.n	80023d2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ca:	f7fe fbaf 	bl	8000a2c <HAL_GetTick>
 80022ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d2:	e00b      	b.n	80022ec <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7fe fbaa 	bl	8000a2c <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e2e4      	b.n	80028b6 <HAL_RCC_OscConfig+0x109a>
 80022ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022f4:	2202      	movs	r2, #2
 80022f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	fa93 f2a3 	rbit	r2, r3
 8002306:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002314:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002318:	2202      	movs	r2, #2
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002320:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002332:	601a      	str	r2, [r3, #0]
  return result;
 8002334:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002338:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800233c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0xb44>
 8002352:	4b02      	ldr	r3, [pc, #8]	@ (800235c <HAL_RCC_OscConfig+0xb40>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	e017      	b.n	8002388 <HAL_RCC_OscConfig+0xb6c>
 8002358:	40007000 	.word	0x40007000
 800235c:	40021000 	.word	0x40021000
 8002360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002364:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002368:	2202      	movs	r2, #2
 800236a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002370:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	fa93 f2a3 	rbit	r2, r3
 800237a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800237e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	4bb3      	ldr	r3, [pc, #716]	@ (8002654 <HAL_RCC_OscConfig+0xe38>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800238c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002390:	2102      	movs	r1, #2
 8002392:	6011      	str	r1, [r2, #0]
 8002394:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002398:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	fa92 f1a2 	rbit	r1, r2
 80023a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023a6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80023aa:	6011      	str	r1, [r2, #0]
  return result;
 80023ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023b0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	fab2 f282 	clz	r2, r2
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f002 021f 	and.w	r2, r2, #31
 80023c6:	2101      	movs	r1, #1
 80023c8:	fa01 f202 	lsl.w	r2, r1, r2
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d180      	bne.n	80022d4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b9e      	ldr	r3, [pc, #632]	@ (8002654 <HAL_RCC_OscConfig+0xe38>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a9d      	ldr	r2, [pc, #628]	@ (8002654 <HAL_RCC_OscConfig+0xe38>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 825e 	beq.w	80028b4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f8:	4b96      	ldr	r3, [pc, #600]	@ (8002654 <HAL_RCC_OscConfig+0xe38>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	f000 821f 	beq.w	8002844 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800240a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b02      	cmp	r3, #2
 8002414:	f040 8170 	bne.w	80026f8 <HAL_RCC_OscConfig+0xedc>
 8002418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002420:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002424:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800242a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	fa93 f2a3 	rbit	r2, r3
 8002434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002438:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800243c:	601a      	str	r2, [r3, #0]
  return result;
 800243e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002442:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002446:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002452:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	461a      	mov	r2, r3
 800245a:	2300      	movs	r3, #0
 800245c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7fe fae5 	bl	8000a2c <HAL_GetTick>
 8002462:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002466:	e009      	b.n	800247c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fae0 	bl	8000a2c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e21c      	b.n	80028b6 <HAL_RCC_OscConfig+0x109a>
 800247c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002480:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002484:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fa93 f2a3 	rbit	r2, r3
 8002498:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80024a0:	601a      	str	r2, [r3, #0]
  return result;
 80024a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80024aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d102      	bne.n	80024c6 <HAL_RCC_OscConfig+0xcaa>
 80024c0:	4b64      	ldr	r3, [pc, #400]	@ (8002654 <HAL_RCC_OscConfig+0xe38>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	e027      	b.n	8002516 <HAL_RCC_OscConfig+0xcfa>
 80024c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ca:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80024ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	fa93 f2a3 	rbit	r2, r3
 80024e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800250c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	4b50      	ldr	r3, [pc, #320]	@ (8002654 <HAL_RCC_OscConfig+0xe38>)
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800251a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800251e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002522:	6011      	str	r1, [r2, #0]
 8002524:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002528:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	fa92 f1a2 	rbit	r1, r2
 8002532:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002536:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800253a:	6011      	str	r1, [r2, #0]
  return result;
 800253c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002540:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	fab2 f282 	clz	r2, r2
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	f042 0220 	orr.w	r2, r2, #32
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f002 021f 	and.w	r2, r2, #31
 8002556:	2101      	movs	r1, #1
 8002558:	fa01 f202 	lsl.w	r2, r1, r2
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d182      	bne.n	8002468 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002562:	4b3c      	ldr	r3, [pc, #240]	@ (8002654 <HAL_RCC_OscConfig+0xe38>)
 8002564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002566:	f023 020f 	bic.w	r2, r3, #15
 800256a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800256e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	4937      	ldr	r1, [pc, #220]	@ (8002654 <HAL_RCC_OscConfig+0xe38>)
 8002578:	4313      	orrs	r3, r2
 800257a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800257c:	4b35      	ldr	r3, [pc, #212]	@ (8002654 <HAL_RCC_OscConfig+0xe38>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002584:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002588:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6a19      	ldr	r1, [r3, #32]
 8002590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002594:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	430b      	orrs	r3, r1
 800259e:	492d      	ldr	r1, [pc, #180]	@ (8002654 <HAL_RCC_OscConfig+0xe38>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
 80025a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80025ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	fa93 f2a3 	rbit	r2, r3
 80025c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025c8:	601a      	str	r2, [r3, #0]
  return result;
 80025ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ce:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025d2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d4:	fab3 f383 	clz	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	461a      	mov	r2, r3
 80025e6:	2301      	movs	r3, #1
 80025e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7fe fa1f 	bl	8000a2c <HAL_GetTick>
 80025ee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f2:	e009      	b.n	8002608 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fa1a 	bl	8000a2c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e156      	b.n	80028b6 <HAL_RCC_OscConfig+0x109a>
 8002608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800260c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002610:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	fa93 f2a3 	rbit	r2, r3
 8002624:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002628:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800262c:	601a      	str	r2, [r3, #0]
  return result;
 800262e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002632:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002636:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_RCC_OscConfig+0xe3c>
 800264c:	4b01      	ldr	r3, [pc, #4]	@ (8002654 <HAL_RCC_OscConfig+0xe38>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	e02a      	b.n	80026a8 <HAL_RCC_OscConfig+0xe8c>
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800265c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002660:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	fa93 f2a3 	rbit	r2, r3
 8002674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002678:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002682:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002686:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002690:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	fa93 f2a3 	rbit	r2, r3
 800269a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	4b86      	ldr	r3, [pc, #536]	@ (80028c0 <HAL_RCC_OscConfig+0x10a4>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026ac:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80026b0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026b4:	6011      	str	r1, [r2, #0]
 80026b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026ba:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	fa92 f1a2 	rbit	r1, r2
 80026c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026c8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80026cc:	6011      	str	r1, [r2, #0]
  return result;
 80026ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026d2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	fab2 f282 	clz	r2, r2
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	f002 021f 	and.w	r2, r2, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f43f af7f 	beq.w	80025f4 <HAL_RCC_OscConfig+0xdd8>
 80026f6:	e0dd      	b.n	80028b4 <HAL_RCC_OscConfig+0x1098>
 80026f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002700:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	fa93 f2a3 	rbit	r2, r3
 8002714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002718:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800271c:	601a      	str	r2, [r3, #0]
  return result;
 800271e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002722:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002726:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002732:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	461a      	mov	r2, r3
 800273a:	2300      	movs	r3, #0
 800273c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe f975 	bl	8000a2c <HAL_GetTick>
 8002742:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002746:	e009      	b.n	800275c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe f970 	bl	8000a2c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0ac      	b.n	80028b6 <HAL_RCC_OscConfig+0x109a>
 800275c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002760:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002764:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	fa93 f2a3 	rbit	r2, r3
 8002778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800277c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002780:	601a      	str	r2, [r3, #0]
  return result;
 8002782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002786:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800278a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_RCC_OscConfig+0xf8a>
 80027a0:	4b47      	ldr	r3, [pc, #284]	@ (80028c0 <HAL_RCC_OscConfig+0x10a4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	e027      	b.n	80027f6 <HAL_RCC_OscConfig+0xfda>
 80027a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027aa:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80027ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027de:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f2a3 	rbit	r2, r3
 80027e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ec:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	4b33      	ldr	r3, [pc, #204]	@ (80028c0 <HAL_RCC_OscConfig+0x10a4>)
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027fa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027fe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002802:	6011      	str	r1, [r2, #0]
 8002804:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002808:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	fa92 f1a2 	rbit	r1, r2
 8002812:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002816:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800281a:	6011      	str	r1, [r2, #0]
  return result;
 800281c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002820:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	fab2 f282 	clz	r2, r2
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f042 0220 	orr.w	r2, r2, #32
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f002 021f 	and.w	r2, r2, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d182      	bne.n	8002748 <HAL_RCC_OscConfig+0xf2c>
 8002842:	e037      	b.n	80028b4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002848:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e02e      	b.n	80028b6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002858:	4b19      	ldr	r3, [pc, #100]	@ (80028c0 <HAL_RCC_OscConfig+0x10a4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002860:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <HAL_RCC_OscConfig+0x10a4>)
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002868:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800286c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002874:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	429a      	cmp	r2, r3
 800287e:	d117      	bne.n	80028b0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002880:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002884:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800288c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002894:	429a      	cmp	r2, r3
 8002896:	d10b      	bne.n	80028b0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800289c:	f003 020f 	and.w	r2, r3, #15
 80028a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b09e      	sub	sp, #120	@ 0x78
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e162      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028dc:	4b90      	ldr	r3, [pc, #576]	@ (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d910      	bls.n	800290c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 0207 	bic.w	r2, r3, #7
 80028f2:	498b      	ldr	r1, [pc, #556]	@ (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b89      	ldr	r3, [pc, #548]	@ (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e14a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b82      	ldr	r3, [pc, #520]	@ (8002b24 <HAL_RCC_ClockConfig+0x260>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	497f      	ldr	r1, [pc, #508]	@ (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80dc 	beq.w	8002af0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d13c      	bne.n	80029ba <HAL_RCC_ClockConfig+0xf6>
 8002940:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002944:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800294e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d102      	bne.n	800296a <HAL_RCC_ClockConfig+0xa6>
 8002964:	4b6f      	ldr	r3, [pc, #444]	@ (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	e00f      	b.n	800298a <HAL_RCC_ClockConfig+0xc6>
 800296a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800296e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	667b      	str	r3, [r7, #100]	@ 0x64
 8002978:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800297c:	663b      	str	r3, [r7, #96]	@ 0x60
 800297e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002986:	4b67      	ldr	r3, [pc, #412]	@ (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800298e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002990:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002992:	fa92 f2a2 	rbit	r2, r2
 8002996:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002998:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800299a:	fab2 f282 	clz	r2, r2
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f042 0220 	orr.w	r2, r2, #32
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f002 021f 	and.w	r2, r2, #31
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f202 	lsl.w	r2, r1, r2
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d17b      	bne.n	8002aae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0f3      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d13c      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x178>
 80029c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80029d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d102      	bne.n	80029ec <HAL_RCC_ClockConfig+0x128>
 80029e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002b24 <HAL_RCC_ClockConfig+0x260>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	e00f      	b.n	8002a0c <HAL_RCC_ClockConfig+0x148>
 80029ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80029fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a08:	4b46      	ldr	r3, [pc, #280]	@ (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a10:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002a12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a14:	fa92 f2a2 	rbit	r2, r2
 8002a18:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002a1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f042 0220 	orr.w	r2, r2, #32
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d13a      	bne.n	8002aae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0b2      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d102      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x1a0>
 8002a5e:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	e00d      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1bc>
 8002a64:	2302      	movs	r3, #2
 8002a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a70:	2302      	movs	r3, #2
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	4b29      	ldr	r3, [pc, #164]	@ (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	2202      	movs	r2, #2
 8002a82:	61ba      	str	r2, [r7, #24]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	fa92 f2a2 	rbit	r2, r2
 8002a8a:	617a      	str	r2, [r7, #20]
  return result;
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	fab2 f282 	clz	r2, r2
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	f042 0220 	orr.w	r2, r2, #32
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	f002 021f 	and.w	r2, r2, #31
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e079      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aae:	4b1d      	ldr	r3, [pc, #116]	@ (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	491a      	ldr	r1, [pc, #104]	@ (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac0:	f7fd ffb4 	bl	8000a2c <HAL_GetTick>
 8002ac4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac8:	f7fd ffb0 	bl	8000a2c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e061      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 020c 	and.w	r2, r3, #12
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d1eb      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d214      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b08      	ldr	r3, [pc, #32]	@ (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 0207 	bic.w	r2, r3, #7
 8002b06:	4906      	ldr	r1, [pc, #24]	@ (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0e:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e040      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
 8002b20:	40022000 	.word	0x40022000
 8002b24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <HAL_RCC_ClockConfig+0x2e8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	491a      	ldr	r1, [pc, #104]	@ (8002bac <HAL_RCC_ClockConfig+0x2e8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b52:	4b16      	ldr	r3, [pc, #88]	@ (8002bac <HAL_RCC_ClockConfig+0x2e8>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4912      	ldr	r1, [pc, #72]	@ (8002bac <HAL_RCC_ClockConfig+0x2e8>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b66:	f000 f829 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bac <HAL_RCC_ClockConfig+0x2e8>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b74:	22f0      	movs	r2, #240	@ 0xf0
 8002b76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	fa92 f2a2 	rbit	r2, r2
 8002b7e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	fab2 f282 	clz	r2, r2
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	40d3      	lsrs	r3, r2
 8002b8a:	4a09      	ldr	r2, [pc, #36]	@ (8002bb0 <HAL_RCC_ClockConfig+0x2ec>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b92:	4a08      	ldr	r2, [pc, #32]	@ (8002bb4 <HAL_RCC_ClockConfig+0x2f0>)
 8002b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b96:	4b08      	ldr	r3, [pc, #32]	@ (8002bb8 <HAL_RCC_ClockConfig+0x2f4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd ff02 	bl	80009a4 <HAL_InitTick>
  
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3778      	adds	r7, #120	@ 0x78
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	08005ed0 	.word	0x08005ed0
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x30>
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bea:	e029      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bec:	4b1a      	ldr	r3, [pc, #104]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bee:	613b      	str	r3, [r7, #16]
      break;
 8002bf0:	e029      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	0c9b      	lsrs	r3, r3, #18
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	4a18      	ldr	r2, [pc, #96]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bfc:	5cd3      	ldrb	r3, [r2, r3]
 8002bfe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002c00:	4b14      	ldr	r3, [pc, #80]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	4a15      	ldr	r2, [pc, #84]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c0a:	5cd3      	ldrb	r3, [r2, r3]
 8002c0c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c18:	4a0f      	ldr	r2, [pc, #60]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	e007      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
      break;
 8002c3e:	e002      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c42:	613b      	str	r3, [r7, #16]
      break;
 8002c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c46:	693b      	ldr	r3, [r7, #16]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	40021000 	.word	0x40021000
 8002c58:	007a1200 	.word	0x007a1200
 8002c5c:	08005ee8 	.word	0x08005ee8
 8002c60:	08005ef8 	.word	0x08005ef8

08002c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b03      	ldr	r3, [pc, #12]	@ (8002c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000000 	.word	0x20000000

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c82:	f7ff ffef 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c86:	4601      	mov	r1, r0
 8002c88:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c90:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	fa92 f2a2 	rbit	r2, r2
 8002c9c:	603a      	str	r2, [r7, #0]
  return result;
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	fab2 f282 	clz	r2, r2
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	40d3      	lsrs	r3, r2
 8002ca8:	4a04      	ldr	r2, [pc, #16]	@ (8002cbc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	08005ee0 	.word	0x08005ee0

08002cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cc6:	f7ff ffcd 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002cca:	4601      	mov	r1, r0
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002cd4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002cd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	fa92 f2a2 	rbit	r2, r2
 8002ce0:	603a      	str	r2, [r7, #0]
  return result;
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	fab2 f282 	clz	r2, r2
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	40d3      	lsrs	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08005ee0 	.word	0x08005ee0

08002d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b092      	sub	sp, #72	@ 0x48
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80d4 	beq.w	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d28:	4b4e      	ldr	r3, [pc, #312]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10e      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	4b4b      	ldr	r3, [pc, #300]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	4a4a      	ldr	r2, [pc, #296]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	61d3      	str	r3, [r2, #28]
 8002d40:	4b48      	ldr	r3, [pc, #288]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d52:	4b45      	ldr	r3, [pc, #276]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d118      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d5e:	4b42      	ldr	r3, [pc, #264]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a41      	ldr	r2, [pc, #260]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6a:	f7fd fe5f 	bl	8000a2c <HAL_GetTick>
 8002d6e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d70:	e008      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d72:	f7fd fe5b 	bl	8000a2c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b64      	cmp	r3, #100	@ 0x64
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e1d6      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d84:	4b38      	ldr	r3, [pc, #224]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d90:	4b34      	ldr	r3, [pc, #208]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8084 	beq.w	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002daa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d07c      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b26      	ldr	r3, [pc, #152]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2301      	movs	r3, #1
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002de2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2300      	movs	r3, #0
 8002e00:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e02:	4a18      	ldr	r2, [pc, #96]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e06:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d04b      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fd fe0b 	bl	8000a2c <HAL_GetTick>
 8002e16:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fd fe07 	bl	8000a2c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e180      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e30:	2302      	movs	r3, #2
 8002e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	623b      	str	r3, [r7, #32]
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	61fb      	str	r3, [r7, #28]
  return result;
 8002e48:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d108      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e5e:	4b01      	ldr	r3, [pc, #4]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	e00d      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	10908100 	.word	0x10908100
 8002e70:	2302      	movs	r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	4b9a      	ldr	r3, [pc, #616]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	2202      	movs	r2, #2
 8002e82:	613a      	str	r2, [r7, #16]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	fa92 f2a2 	rbit	r2, r2
 8002e8a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	fab2 f282 	clz	r2, r2
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f002 021f 	and.w	r2, r2, #31
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0b7      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002eaa:	4b8f      	ldr	r3, [pc, #572]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	498c      	ldr	r1, [pc, #560]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ebc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec4:	4b88      	ldr	r3, [pc, #544]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	4a87      	ldr	r2, [pc, #540]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002edc:	4b82      	ldr	r3, [pc, #520]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee0:	f023 0203 	bic.w	r2, r3, #3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	497f      	ldr	r1, [pc, #508]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002efa:	4b7b      	ldr	r3, [pc, #492]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4978      	ldr	r1, [pc, #480]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f18:	4b73      	ldr	r3, [pc, #460]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	4970      	ldr	r1, [pc, #448]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f36:	4b6c      	ldr	r3, [pc, #432]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	f023 0210 	bic.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4969      	ldr	r1, [pc, #420]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f54:	4b64      	ldr	r3, [pc, #400]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f60:	4961      	ldr	r1, [pc, #388]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f72:	4b5d      	ldr	r3, [pc, #372]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	f023 0220 	bic.w	r2, r3, #32
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	495a      	ldr	r1, [pc, #360]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f90:	4b55      	ldr	r3, [pc, #340]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f94:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	4952      	ldr	r1, [pc, #328]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fae:	4b4e      	ldr	r3, [pc, #312]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	494b      	ldr	r1, [pc, #300]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fcc:	4b46      	ldr	r3, [pc, #280]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	4943      	ldr	r1, [pc, #268]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fea:	4b3f      	ldr	r3, [pc, #252]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	493c      	ldr	r1, [pc, #240]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003008:	4b37      	ldr	r3, [pc, #220]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	4934      	ldr	r1, [pc, #208]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003026:	4b30      	ldr	r3, [pc, #192]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	492d      	ldr	r1, [pc, #180]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003044:	4b28      	ldr	r3, [pc, #160]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003050:	4925      	ldr	r1, [pc, #148]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003062:	4b21      	ldr	r3, [pc, #132]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	491e      	ldr	r1, [pc, #120]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003070:	4313      	orrs	r3, r2
 8003072:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003080:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003084:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308c:	4916      	ldr	r1, [pc, #88]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800309e:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030aa:	490f      	ldr	r1, [pc, #60]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030bc:	4b0a      	ldr	r3, [pc, #40]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	4907      	ldr	r1, [pc, #28]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00c      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80030da:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	e002      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ee:	4913      	ldr	r1, [pc, #76]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003100:	4b0e      	ldr	r3, [pc, #56]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003104:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310c:	490b      	ldr	r1, [pc, #44]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800310e:	4313      	orrs	r3, r2
 8003110:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800311e:	4b07      	ldr	r3, [pc, #28]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800312a:	4904      	ldr	r1, [pc, #16]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800312c:	4313      	orrs	r3, r2
 800312e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3748      	adds	r7, #72	@ 0x48
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e040      	b.n	80031d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fb6a 	bl	800083c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2224      	movs	r2, #36	@ 0x24
 800316c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fd0a 	bl	8003ba0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fb33 	bl	80037f8 <UART_SetConfig>
 8003192:	4603      	mov	r3, r0
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e01b      	b.n	80031d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fd89 	bl	8003ce4 <UART_CheckIdleState>
 80031d2:	4603      	mov	r3, r0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b0ba      	sub	sp, #232	@ 0xe8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003202:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003206:	f640 030f 	movw	r3, #2063	@ 0x80f
 800320a:	4013      	ands	r3, r2
 800320c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d115      	bne.n	8003244 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00f      	beq.n	8003244 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d009      	beq.n	8003244 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 82ab 	beq.w	8003790 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
      }
      return;
 8003242:	e2a5      	b.n	8003790 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8117 	beq.w	800347c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800324e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800325a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800325e:	4b85      	ldr	r3, [pc, #532]	@ (8003474 <HAL_UART_IRQHandler+0x298>)
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 810a 	beq.w	800347c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d011      	beq.n	8003298 <HAL_UART_IRQHandler+0xbc>
 8003274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00b      	beq.n	8003298 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2201      	movs	r2, #1
 8003286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800328e:	f043 0201 	orr.w	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d011      	beq.n	80032c8 <HAL_UART_IRQHandler+0xec>
 80032a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2202      	movs	r2, #2
 80032b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032be:	f043 0204 	orr.w	r2, r3, #4
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d011      	beq.n	80032f8 <HAL_UART_IRQHandler+0x11c>
 80032d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2204      	movs	r2, #4
 80032e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ee:	f043 0202 	orr.w	r2, r3, #2
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d017      	beq.n	8003334 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003314:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2208      	movs	r2, #8
 8003322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800332a:	f043 0208 	orr.w	r2, r3, #8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <HAL_UART_IRQHandler+0x18a>
 8003340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003344:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00c      	beq.n	8003366 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8211 	beq.w	8003794 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800337e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ae:	2b40      	cmp	r3, #64	@ 0x40
 80033b0:	d005      	beq.n	80033be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d04f      	beq.n	800345e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fe6c 	bl	800409c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ce:	2b40      	cmp	r3, #64	@ 0x40
 80033d0:	d141      	bne.n	8003456 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3308      	adds	r3, #8
 80033d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3308      	adds	r3, #8
 80033fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003402:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800340a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1d9      	bne.n	80033d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003422:	2b00      	cmp	r3, #0
 8003424:	d013      	beq.n	800344e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800342a:	4a13      	ldr	r2, [pc, #76]	@ (8003478 <HAL_UART_IRQHandler+0x29c>)
 800342c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd fcfb 	bl	8000e2e <HAL_DMA_Abort_IT>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d017      	beq.n	800346e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003448:	4610      	mov	r0, r2
 800344a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344c:	e00f      	b.n	800346e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f9c8 	bl	80037e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003454:	e00b      	b.n	800346e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9c4 	bl	80037e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345c:	e007      	b.n	800346e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f9c0 	bl	80037e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800346c:	e192      	b.n	8003794 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346e:	bf00      	nop
    return;
 8003470:	e190      	b.n	8003794 <HAL_UART_IRQHandler+0x5b8>
 8003472:	bf00      	nop
 8003474:	04000120 	.word	0x04000120
 8003478:	08004347 	.word	0x08004347

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003480:	2b01      	cmp	r3, #1
 8003482:	f040 814b 	bne.w	800371c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8144 	beq.w	800371c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 813d 	beq.w	800371c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2210      	movs	r2, #16
 80034a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b4:	2b40      	cmp	r3, #64	@ 0x40
 80034b6:	f040 80b5 	bne.w	8003624 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8164 	beq.w	8003798 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80034d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034da:	429a      	cmp	r2, r3
 80034dc:	f080 815c 	bcs.w	8003798 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	f000 8086 	beq.w	8003602 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800350a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800350e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003512:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003520:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003524:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800352c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003530:	e841 2300 	strex	r3, r2, [r1]
 8003534:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1da      	bne.n	80034f6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3308      	adds	r3, #8
 8003546:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003550:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3308      	adds	r3, #8
 8003560:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003564:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003568:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800356c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003570:	e841 2300 	strex	r3, r2, [r1]
 8003574:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003576:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e1      	bne.n	8003540 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3308      	adds	r3, #8
 8003582:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800358c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800358e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3308      	adds	r3, #8
 800359c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80035a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80035ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e3      	bne.n	800357c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035d2:	f023 0310 	bic.w	r3, r3, #16
 80035d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035e6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e4      	bne.n	80035c2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd fbd8 	bl	8000db2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003614:	b29b      	uxth	r3, r3
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	b29b      	uxth	r3, r3
 800361a:	4619      	mov	r1, r3
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f001 fcc7 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003622:	e0b9      	b.n	8003798 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003630:	b29b      	uxth	r3, r3
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80ab 	beq.w	800379c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003646:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80a6 	beq.w	800379c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800365e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003660:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003664:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003672:	647b      	str	r3, [r7, #68]	@ 0x44
 8003674:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e4      	bne.n	8003650 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3308      	adds	r3, #8
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	623b      	str	r3, [r7, #32]
   return(result);
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3308      	adds	r3, #8
 80036a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e3      	bne.n	8003686 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	60fb      	str	r3, [r7, #12]
   return(result);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0310 	bic.w	r3, r3, #16
 80036e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	69b9      	ldr	r1, [r7, #24]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	617b      	str	r3, [r7, #20]
   return(result);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e4      	bne.n	80036d2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800370e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f001 fc4b 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800371a:	e03f      	b.n	800379c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800371c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003720:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <HAL_UART_IRQHandler+0x56a>
 8003728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800372c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800373c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fe41 	bl	80043c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003744:	e02d      	b.n	80037a2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00e      	beq.n	8003770 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01c      	beq.n	80037a0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
    }
    return;
 800376e:	e017      	b.n	80037a0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d012      	beq.n	80037a2 <HAL_UART_IRQHandler+0x5c6>
 800377c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00c      	beq.n	80037a2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fdf2 	bl	8004372 <UART_EndTransmit_IT>
    return;
 800378e:	e008      	b.n	80037a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003790:	bf00      	nop
 8003792:	e006      	b.n	80037a2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003794:	bf00      	nop
 8003796:	e004      	b.n	80037a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003798:	bf00      	nop
 800379a:	e002      	b.n	80037a2 <HAL_UART_IRQHandler+0x5c6>
      return;
 800379c:	bf00      	nop
 800379e:	e000      	b.n	80037a2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80037a0:	bf00      	nop
  }

}
 80037a2:	37e8      	adds	r7, #232	@ 0xe8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b92      	ldr	r3, [pc, #584]	@ (8003a6c <UART_SetConfig+0x274>)
 8003824:	4013      	ands	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	6979      	ldr	r1, [r7, #20]
 800382c:	430b      	orrs	r3, r1
 800382e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a80      	ldr	r2, [pc, #512]	@ (8003a70 <UART_SetConfig+0x278>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d120      	bne.n	80038b6 <UART_SetConfig+0xbe>
 8003874:	4b7f      	ldr	r3, [pc, #508]	@ (8003a74 <UART_SetConfig+0x27c>)
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b03      	cmp	r3, #3
 800387e:	d817      	bhi.n	80038b0 <UART_SetConfig+0xb8>
 8003880:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <UART_SetConfig+0x90>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	08003899 	.word	0x08003899
 800388c:	080038a5 	.word	0x080038a5
 8003890:	080038ab 	.word	0x080038ab
 8003894:	0800389f 	.word	0x0800389f
 8003898:	2301      	movs	r3, #1
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e0b5      	b.n	8003a0a <UART_SetConfig+0x212>
 800389e:	2302      	movs	r3, #2
 80038a0:	77fb      	strb	r3, [r7, #31]
 80038a2:	e0b2      	b.n	8003a0a <UART_SetConfig+0x212>
 80038a4:	2304      	movs	r3, #4
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e0af      	b.n	8003a0a <UART_SetConfig+0x212>
 80038aa:	2308      	movs	r3, #8
 80038ac:	77fb      	strb	r3, [r7, #31]
 80038ae:	e0ac      	b.n	8003a0a <UART_SetConfig+0x212>
 80038b0:	2310      	movs	r3, #16
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e0a9      	b.n	8003a0a <UART_SetConfig+0x212>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003a78 <UART_SetConfig+0x280>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d124      	bne.n	800390a <UART_SetConfig+0x112>
 80038c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a74 <UART_SetConfig+0x27c>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038cc:	d011      	beq.n	80038f2 <UART_SetConfig+0xfa>
 80038ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038d2:	d817      	bhi.n	8003904 <UART_SetConfig+0x10c>
 80038d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d8:	d011      	beq.n	80038fe <UART_SetConfig+0x106>
 80038da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038de:	d811      	bhi.n	8003904 <UART_SetConfig+0x10c>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <UART_SetConfig+0xf4>
 80038e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e8:	d006      	beq.n	80038f8 <UART_SetConfig+0x100>
 80038ea:	e00b      	b.n	8003904 <UART_SetConfig+0x10c>
 80038ec:	2300      	movs	r3, #0
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e08b      	b.n	8003a0a <UART_SetConfig+0x212>
 80038f2:	2302      	movs	r3, #2
 80038f4:	77fb      	strb	r3, [r7, #31]
 80038f6:	e088      	b.n	8003a0a <UART_SetConfig+0x212>
 80038f8:	2304      	movs	r3, #4
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e085      	b.n	8003a0a <UART_SetConfig+0x212>
 80038fe:	2308      	movs	r3, #8
 8003900:	77fb      	strb	r3, [r7, #31]
 8003902:	e082      	b.n	8003a0a <UART_SetConfig+0x212>
 8003904:	2310      	movs	r3, #16
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	e07f      	b.n	8003a0a <UART_SetConfig+0x212>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a5b      	ldr	r2, [pc, #364]	@ (8003a7c <UART_SetConfig+0x284>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d124      	bne.n	800395e <UART_SetConfig+0x166>
 8003914:	4b57      	ldr	r3, [pc, #348]	@ (8003a74 <UART_SetConfig+0x27c>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800391c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003920:	d011      	beq.n	8003946 <UART_SetConfig+0x14e>
 8003922:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003926:	d817      	bhi.n	8003958 <UART_SetConfig+0x160>
 8003928:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800392c:	d011      	beq.n	8003952 <UART_SetConfig+0x15a>
 800392e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003932:	d811      	bhi.n	8003958 <UART_SetConfig+0x160>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <UART_SetConfig+0x148>
 8003938:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800393c:	d006      	beq.n	800394c <UART_SetConfig+0x154>
 800393e:	e00b      	b.n	8003958 <UART_SetConfig+0x160>
 8003940:	2300      	movs	r3, #0
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e061      	b.n	8003a0a <UART_SetConfig+0x212>
 8003946:	2302      	movs	r3, #2
 8003948:	77fb      	strb	r3, [r7, #31]
 800394a:	e05e      	b.n	8003a0a <UART_SetConfig+0x212>
 800394c:	2304      	movs	r3, #4
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e05b      	b.n	8003a0a <UART_SetConfig+0x212>
 8003952:	2308      	movs	r3, #8
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e058      	b.n	8003a0a <UART_SetConfig+0x212>
 8003958:	2310      	movs	r3, #16
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e055      	b.n	8003a0a <UART_SetConfig+0x212>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a47      	ldr	r2, [pc, #284]	@ (8003a80 <UART_SetConfig+0x288>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d124      	bne.n	80039b2 <UART_SetConfig+0x1ba>
 8003968:	4b42      	ldr	r3, [pc, #264]	@ (8003a74 <UART_SetConfig+0x27c>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003970:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003974:	d011      	beq.n	800399a <UART_SetConfig+0x1a2>
 8003976:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800397a:	d817      	bhi.n	80039ac <UART_SetConfig+0x1b4>
 800397c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003980:	d011      	beq.n	80039a6 <UART_SetConfig+0x1ae>
 8003982:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003986:	d811      	bhi.n	80039ac <UART_SetConfig+0x1b4>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <UART_SetConfig+0x19c>
 800398c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003990:	d006      	beq.n	80039a0 <UART_SetConfig+0x1a8>
 8003992:	e00b      	b.n	80039ac <UART_SetConfig+0x1b4>
 8003994:	2300      	movs	r3, #0
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e037      	b.n	8003a0a <UART_SetConfig+0x212>
 800399a:	2302      	movs	r3, #2
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e034      	b.n	8003a0a <UART_SetConfig+0x212>
 80039a0:	2304      	movs	r3, #4
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e031      	b.n	8003a0a <UART_SetConfig+0x212>
 80039a6:	2308      	movs	r3, #8
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e02e      	b.n	8003a0a <UART_SetConfig+0x212>
 80039ac:	2310      	movs	r3, #16
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e02b      	b.n	8003a0a <UART_SetConfig+0x212>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a33      	ldr	r2, [pc, #204]	@ (8003a84 <UART_SetConfig+0x28c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d124      	bne.n	8003a06 <UART_SetConfig+0x20e>
 80039bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a74 <UART_SetConfig+0x27c>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80039c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039c8:	d011      	beq.n	80039ee <UART_SetConfig+0x1f6>
 80039ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039ce:	d817      	bhi.n	8003a00 <UART_SetConfig+0x208>
 80039d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039d4:	d011      	beq.n	80039fa <UART_SetConfig+0x202>
 80039d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039da:	d811      	bhi.n	8003a00 <UART_SetConfig+0x208>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <UART_SetConfig+0x1f0>
 80039e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039e4:	d006      	beq.n	80039f4 <UART_SetConfig+0x1fc>
 80039e6:	e00b      	b.n	8003a00 <UART_SetConfig+0x208>
 80039e8:	2300      	movs	r3, #0
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e00d      	b.n	8003a0a <UART_SetConfig+0x212>
 80039ee:	2302      	movs	r3, #2
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e00a      	b.n	8003a0a <UART_SetConfig+0x212>
 80039f4:	2304      	movs	r3, #4
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e007      	b.n	8003a0a <UART_SetConfig+0x212>
 80039fa:	2308      	movs	r3, #8
 80039fc:	77fb      	strb	r3, [r7, #31]
 80039fe:	e004      	b.n	8003a0a <UART_SetConfig+0x212>
 8003a00:	2310      	movs	r3, #16
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	e001      	b.n	8003a0a <UART_SetConfig+0x212>
 8003a06:	2310      	movs	r3, #16
 8003a08:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a12:	d16b      	bne.n	8003aec <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003a14:	7ffb      	ldrb	r3, [r7, #31]
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d838      	bhi.n	8003a8c <UART_SetConfig+0x294>
 8003a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a20 <UART_SetConfig+0x228>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a45 	.word	0x08003a45
 8003a24:	08003a4d 	.word	0x08003a4d
 8003a28:	08003a55 	.word	0x08003a55
 8003a2c:	08003a8d 	.word	0x08003a8d
 8003a30:	08003a5b 	.word	0x08003a5b
 8003a34:	08003a8d 	.word	0x08003a8d
 8003a38:	08003a8d 	.word	0x08003a8d
 8003a3c:	08003a8d 	.word	0x08003a8d
 8003a40:	08003a63 	.word	0x08003a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a44:	f7ff f91a 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8003a48:	61b8      	str	r0, [r7, #24]
        break;
 8003a4a:	e024      	b.n	8003a96 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a4c:	f7ff f938 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003a50:	61b8      	str	r0, [r7, #24]
        break;
 8003a52:	e020      	b.n	8003a96 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a54:	4b0c      	ldr	r3, [pc, #48]	@ (8003a88 <UART_SetConfig+0x290>)
 8003a56:	61bb      	str	r3, [r7, #24]
        break;
 8003a58:	e01d      	b.n	8003a96 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5a:	f7ff f8af 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8003a5e:	61b8      	str	r0, [r7, #24]
        break;
 8003a60:	e019      	b.n	8003a96 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a66:	61bb      	str	r3, [r7, #24]
        break;
 8003a68:	e015      	b.n	8003a96 <UART_SetConfig+0x29e>
 8003a6a:	bf00      	nop
 8003a6c:	efff69f3 	.word	0xefff69f3
 8003a70:	40013800 	.word	0x40013800
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40004400 	.word	0x40004400
 8003a7c:	40004800 	.word	0x40004800
 8003a80:	40004c00 	.word	0x40004c00
 8003a84:	40005000 	.word	0x40005000
 8003a88:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	77bb      	strb	r3, [r7, #30]
        break;
 8003a94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d073      	beq.n	8003b84 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	005a      	lsls	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	441a      	add	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b0f      	cmp	r3, #15
 8003ab6:	d916      	bls.n	8003ae6 <UART_SetConfig+0x2ee>
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003abe:	d212      	bcs.n	8003ae6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f023 030f 	bic.w	r3, r3, #15
 8003ac8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	89fb      	ldrh	r3, [r7, #14]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	89fa      	ldrh	r2, [r7, #14]
 8003ae2:	60da      	str	r2, [r3, #12]
 8003ae4:	e04e      	b.n	8003b84 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	77bb      	strb	r3, [r7, #30]
 8003aea:	e04b      	b.n	8003b84 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aec:	7ffb      	ldrb	r3, [r7, #31]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d827      	bhi.n	8003b42 <UART_SetConfig+0x34a>
 8003af2:	a201      	add	r2, pc, #4	@ (adr r2, 8003af8 <UART_SetConfig+0x300>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b25 	.word	0x08003b25
 8003b00:	08003b2d 	.word	0x08003b2d
 8003b04:	08003b43 	.word	0x08003b43
 8003b08:	08003b33 	.word	0x08003b33
 8003b0c:	08003b43 	.word	0x08003b43
 8003b10:	08003b43 	.word	0x08003b43
 8003b14:	08003b43 	.word	0x08003b43
 8003b18:	08003b3b 	.word	0x08003b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7ff f8ae 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8003b20:	61b8      	str	r0, [r7, #24]
        break;
 8003b22:	e013      	b.n	8003b4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7ff f8cc 	bl	8002cc0 <HAL_RCC_GetPCLK2Freq>
 8003b28:	61b8      	str	r0, [r7, #24]
        break;
 8003b2a:	e00f      	b.n	8003b4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b9c <UART_SetConfig+0x3a4>)
 8003b2e:	61bb      	str	r3, [r7, #24]
        break;
 8003b30:	e00c      	b.n	8003b4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b32:	f7ff f843 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8003b36:	61b8      	str	r0, [r7, #24]
        break;
 8003b38:	e008      	b.n	8003b4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b3e:	61bb      	str	r3, [r7, #24]
        break;
 8003b40:	e004      	b.n	8003b4c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	77bb      	strb	r3, [r7, #30]
        break;
 8003b4a:	bf00      	nop
    }

    if (pclk != 0U)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d018      	beq.n	8003b84 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	085a      	lsrs	r2, r3, #1
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	441a      	add	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b0f      	cmp	r3, #15
 8003b6a:	d909      	bls.n	8003b80 <UART_SetConfig+0x388>
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b72:	d205      	bcs.n	8003b80 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	e001      	b.n	8003b84 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b90:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	007a1200 	.word	0x007a1200

08003ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01a      	beq.n	8003cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c9e:	d10a      	bne.n	8003cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]
  }
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b098      	sub	sp, #96	@ 0x60
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cf4:	f7fc fe9a 	bl	8000a2c <HAL_GetTick>
 8003cf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d12e      	bne.n	8003d66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d10:	2200      	movs	r2, #0
 8003d12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f88c 	bl	8003e34 <UART_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d021      	beq.n	8003d66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e6      	bne.n	8003d22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e062      	b.n	8003e2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d149      	bne.n	8003e08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f856 	bl	8003e34 <UART_WaitOnFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d03c      	beq.n	8003e08 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e6      	bne.n	8003d8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3308      	adds	r3, #8
 8003dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003de0:	61fa      	str	r2, [r7, #28]
 8003de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	69b9      	ldr	r1, [r7, #24]
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	617b      	str	r3, [r7, #20]
   return(result);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e5      	bne.n	8003dc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e011      	b.n	8003e2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3758      	adds	r7, #88	@ 0x58
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e44:	e04f      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d04b      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7fc fded 	bl	8000a2c <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e04e      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d037      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b80      	cmp	r3, #128	@ 0x80
 8003e7a:	d034      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b40      	cmp	r3, #64	@ 0x40
 8003e80:	d031      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d110      	bne.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2208      	movs	r2, #8
 8003e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f8ff 	bl	800409c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e029      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec0:	d111      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003eca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f8e5 	bl	800409c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e00f      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	bf0c      	ite	eq
 8003ef6:	2301      	moveq	r3, #1
 8003ef8:	2300      	movne	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d0a0      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b096      	sub	sp, #88	@ 0x58
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2222      	movs	r2, #34	@ 0x22
 8003f38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d028      	beq.n	8003f96 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f48:	4a3e      	ldr	r2, [pc, #248]	@ (8004044 <UART_Start_Receive_DMA+0x134>)
 8003f4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f50:	4a3d      	ldr	r2, [pc, #244]	@ (8004048 <UART_Start_Receive_DMA+0x138>)
 8003f52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f58:	4a3c      	ldr	r2, [pc, #240]	@ (800404c <UART_Start_Receive_DMA+0x13c>)
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f60:	2200      	movs	r2, #0
 8003f62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3324      	adds	r3, #36	@ 0x24
 8003f6e:	4619      	mov	r1, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f74:	461a      	mov	r2, r3
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	f7fc febc 	bl	8000cf4 <HAL_DMA_Start_IT>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2210      	movs	r2, #16
 8003f86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e051      	b.n	800403a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d018      	beq.n	8003fd0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fbe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e6      	bne.n	8003f9e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3308      	adds	r3, #8
 8003fee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ff0:	637a      	str	r2, [r7, #52]	@ 0x34
 8003ff2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ff6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e5      	bne.n	8003fd0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3308      	adds	r3, #8
 800400a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	613b      	str	r3, [r7, #16]
   return(result);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800401a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3308      	adds	r3, #8
 8004022:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004024:	623a      	str	r2, [r7, #32]
 8004026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	69f9      	ldr	r1, [r7, #28]
 800402a:	6a3a      	ldr	r2, [r7, #32]
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	61bb      	str	r3, [r7, #24]
   return(result);
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e5      	bne.n	8004004 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3758      	adds	r7, #88	@ 0x58
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	08004165 	.word	0x08004165
 8004048:	0800428b 	.word	0x0800428b
 800404c:	080042c9 	.word	0x080042c9

08004050 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b089      	sub	sp, #36	@ 0x24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	60bb      	str	r3, [r7, #8]
   return(result);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6979      	ldr	r1, [r7, #20]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	613b      	str	r3, [r7, #16]
   return(result);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e6      	bne.n	8004058 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004090:	bf00      	nop
 8004092:	3724      	adds	r7, #36	@ 0x24
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800409c:	b480      	push	{r7}
 800409e:	b095      	sub	sp, #84	@ 0x54
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80040c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e6      	bne.n	80040a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3308      	adds	r3, #8
 80040dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3308      	adds	r3, #8
 80040f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e5      	bne.n	80040d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410e:	2b01      	cmp	r3, #1
 8004110:	d118      	bne.n	8004144 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f023 0310 	bic.w	r3, r3, #16
 8004126:	647b      	str	r3, [r7, #68]	@ 0x44
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6979      	ldr	r1, [r7, #20]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	613b      	str	r3, [r7, #16]
   return(result);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e6      	bne.n	8004112 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004158:	bf00      	nop
 800415a:	3754      	adds	r7, #84	@ 0x54
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b09c      	sub	sp, #112	@ 0x70
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b20      	cmp	r3, #32
 8004178:	d071      	beq.n	800425e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800417a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800417c:	2200      	movs	r2, #0
 800417e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004192:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004196:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041a2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e6      	bne.n	8004182 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3308      	adds	r3, #8
 80041ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80041cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041d4:	647a      	str	r2, [r7, #68]	@ 0x44
 80041d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e5      	bne.n	80041b4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	623b      	str	r3, [r7, #32]
   return(result);
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3308      	adds	r3, #8
 8004206:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004208:	633a      	str	r2, [r7, #48]	@ 0x30
 800420a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800420e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800421c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800421e:	2220      	movs	r2, #32
 8004220:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004224:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004228:	2b01      	cmp	r3, #1
 800422a:	d118      	bne.n	800425e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	60fb      	str	r3, [r7, #12]
   return(result);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f023 0310 	bic.w	r3, r3, #16
 8004240:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	69b9      	ldr	r1, [r7, #24]
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	617b      	str	r3, [r7, #20]
   return(result);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e6      	bne.n	800422c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800425e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004260:	2200      	movs	r2, #0
 8004262:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004268:	2b01      	cmp	r3, #1
 800426a:	d107      	bne.n	800427c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800426c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800426e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004272:	4619      	mov	r1, r3
 8004274:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004276:	f000 fe9b 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800427a:	e002      	b.n	8004282 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800427c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800427e:	f7ff fa9d 	bl	80037bc <HAL_UART_RxCpltCallback>
}
 8004282:	bf00      	nop
 8004284:	3770      	adds	r7, #112	@ 0x70
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d109      	bne.n	80042ba <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4619      	mov	r1, r3
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fe7c 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042b8:	e002      	b.n	80042c0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff fa88 	bl	80037d0 <HAL_UART_RxHalfCpltCallback>
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ee:	2b80      	cmp	r3, #128	@ 0x80
 80042f0:	d109      	bne.n	8004306 <UART_DMAError+0x3e>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b21      	cmp	r3, #33	@ 0x21
 80042f6:	d106      	bne.n	8004306 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004300:	6978      	ldr	r0, [r7, #20]
 8004302:	f7ff fea5 	bl	8004050 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004310:	2b40      	cmp	r3, #64	@ 0x40
 8004312:	d109      	bne.n	8004328 <UART_DMAError+0x60>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b22      	cmp	r3, #34	@ 0x22
 8004318:	d106      	bne.n	8004328 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2200      	movs	r2, #0
 800431e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004322:	6978      	ldr	r0, [r7, #20]
 8004324:	f7ff feba 	bl	800409c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800432e:	f043 0210 	orr.w	r2, r3, #16
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004338:	6978      	ldr	r0, [r7, #20]
 800433a:	f7ff fa53 	bl	80037e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800433e:	bf00      	nop
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004352:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff fa3d 	bl	80037e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b088      	sub	sp, #32
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	60bb      	str	r3, [r7, #8]
   return(result);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6979      	ldr	r1, [r7, #20]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	613b      	str	r3, [r7, #16]
   return(result);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e6      	bne.n	800437a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff f9f5 	bl	80037a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043be:	bf00      	nop
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b08c      	sub	sp, #48	@ 0x30
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	4613      	mov	r3, r2
 80043e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d142      	bne.n	8004478 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e03b      	b.n	800447a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	461a      	mov	r2, r3
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff fd7b 	bl	8003f10 <UART_Start_Receive_DMA>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004420:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004424:	2b00      	cmp	r3, #0
 8004426:	d124      	bne.n	8004472 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442c:	2b01      	cmp	r3, #1
 800442e:	d11d      	bne.n	800446c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2210      	movs	r2, #16
 8004436:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	617b      	str	r3, [r7, #20]
   return(result);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f043 0310 	orr.w	r3, r3, #16
 800444c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
 8004458:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6a39      	ldr	r1, [r7, #32]
 800445c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	61fb      	str	r3, [r7, #28]
   return(result);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e6      	bne.n	8004438 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800446a:	e002      	b.n	8004472 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004476:	e000      	b.n	800447a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3730      	adds	r7, #48	@ 0x30
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <circularBuffer_init>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_init( tCircularBuffer* pBuffer, uint8_t* pData, uint16_t capacity )
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	4613      	mov	r3, r2
 800448e:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if ( pBuffer == NULL || pData == NULL || capacity == 0 )
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <circularBuffer_init+0x20>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <circularBuffer_init+0x20>
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <circularBuffer_init+0x24>
	{
		return 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e014      	b.n	80044d0 <circularBuffer_init+0x4e>
	}

	// initialize the buffer
	pBuffer->capacity 		= capacity;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	801a      	strh	r2, [r3, #0]
	pBuffer->head 			= 0;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	809a      	strh	r2, [r3, #4]
	pBuffer->tail   		= 0;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	805a      	strh	r2, [r3, #2]
	pBuffer->pBuffer 		= pData;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	609a      	str	r2, [r3, #8]
	memset( pBuffer->pBuffer, 1, pBuffer->capacity );
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6898      	ldr	r0, [r3, #8]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	2101      	movs	r1, #1
 80044ca:	f000 feb0 	bl	800522e <memset>

	return 0;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <circularBuffer_push>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_push( tCircularBuffer* pCbuffer, uint8_t* pInData, uint16_t length )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if( pCbuffer == NULL || pInData == NULL || pCbuffer->capacity < length )
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <circularBuffer_push+0x24>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d004      	beq.n	80044fc <circularBuffer_push+0x24>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d901      	bls.n	8004500 <circularBuffer_push+0x28>
	{
		return 1;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e037      	b.n	8004570 <circularBuffer_push+0x98>
	 *    n n s d d d d e n n
	 *    d d d e n n n s d d
	 * */

	// do we need to loop over the buffer?
	uint16_t toTheEnd = pCbuffer->capacity - pCbuffer->tail;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	881a      	ldrh	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	885b      	ldrh	r3, [r3, #2]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	82fb      	strh	r3, [r7, #22]
	uint8_t* pDes = &(*pCbuffer).pBuffer[pCbuffer->tail];
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	8852      	ldrh	r2, [r2, #2]
 8004514:	4413      	add	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
	if ( toTheEnd < length )
 8004518:	8afa      	ldrh	r2, [r7, #22]
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	429a      	cmp	r2, r3
 800451e:	d211      	bcs.n	8004544 <circularBuffer_push+0x6c>
	{
		// first copy from the end of the existing data to the end of the buffer
		memcpy( pDes, pInData, toTheEnd );
 8004520:	8afb      	ldrh	r3, [r7, #22]
 8004522:	461a      	mov	r2, r3
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	6938      	ldr	r0, [r7, #16]
 8004528:	f000 fefd 	bl	8005326 <memcpy>
		// copy the reset of the inData from the beginning of the buffer.
		memcpy( (*pCbuffer).pBuffer, &pInData[toTheEnd], ( length - toTheEnd ) );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6898      	ldr	r0, [r3, #8]
 8004530:	8afb      	ldrh	r3, [r7, #22]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	18d1      	adds	r1, r2, r3
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	8afb      	ldrh	r3, [r7, #22]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	461a      	mov	r2, r3
 800453e:	f000 fef2 	bl	8005326 <memcpy>
 8004542:	e005      	b.n	8004550 <circularBuffer_push+0x78>
	}
	else
	{
		memcpy( pDes, pInData, length );
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	461a      	mov	r2, r3
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	6938      	ldr	r0, [r7, #16]
 800454c:	f000 feeb 	bl	8005326 <memcpy>
		//pBuffer->pBuffer[pBuffer->end] = pInData[0];
	}

	pCbuffer->tail = ( pCbuffer->tail + length ) % pCbuffer->capacity;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	885b      	ldrh	r3, [r3, #2]
 8004554:	461a      	mov	r2, r3
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	4413      	add	r3, r2
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	8812      	ldrh	r2, [r2, #0]
 800455e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004562:	fb01 f202 	mul.w	r2, r1, r2
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	805a      	strh	r2, [r3, #2]

	return 0;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <circularBuffer_pop>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_pop( tCircularBuffer* pCbuffer, uint8_t* pOutData, uint16_t length )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
	if ( circularBuffer_isEmepty(pCbuffer) )
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f85d 	bl	8004646 <circularBuffer_isEmepty>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <circularBuffer_pop+0x1e>
		return 1;
 8004592:	2301      	movs	r3, #1
 8004594:	e037      	b.n	8004606 <circularBuffer_pop+0x8e>
	// do we need to loop over the buffer?
	uint16_t toTheEnd = pCbuffer->capacity - pCbuffer->head;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	881a      	ldrh	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	889b      	ldrh	r3, [r3, #4]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	82fb      	strh	r3, [r7, #22]
	uint8_t* pSource = &(*pCbuffer).pBuffer[pCbuffer->head];
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	8892      	ldrh	r2, [r2, #4]
 80045aa:	4413      	add	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
	if ( toTheEnd < length )
 80045ae:	8afa      	ldrh	r2, [r7, #22]
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d211      	bcs.n	80045da <circularBuffer_pop+0x62>
	{
		// first copy from the end of the existing data to the end of the buffer
		memcpy( pOutData, pSource, toTheEnd );
 80045b6:	8afb      	ldrh	r3, [r7, #22]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6939      	ldr	r1, [r7, #16]
 80045bc:	68b8      	ldr	r0, [r7, #8]
 80045be:	f000 feb2 	bl	8005326 <memcpy>
		// copy the reset of the inData from the beginning of the buffer.
		memcpy( &pOutData[toTheEnd], (*pCbuffer).pBuffer, ( length - toTheEnd ) );
 80045c2:	8afb      	ldrh	r3, [r7, #22]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	18d0      	adds	r0, r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6899      	ldr	r1, [r3, #8]
 80045cc:	88fa      	ldrh	r2, [r7, #6]
 80045ce:	8afb      	ldrh	r3, [r7, #22]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	f000 fea7 	bl	8005326 <memcpy>
 80045d8:	e005      	b.n	80045e6 <circularBuffer_pop+0x6e>
	}
	else
	{
		memcpy( pOutData, pSource, length );
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	461a      	mov	r2, r3
 80045de:	6939      	ldr	r1, [r7, #16]
 80045e0:	68b8      	ldr	r0, [r7, #8]
 80045e2:	f000 fea0 	bl	8005326 <memcpy>
	}

	pCbuffer->head = ( pCbuffer->head + length ) % pCbuffer->capacity;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	889b      	ldrh	r3, [r3, #4]
 80045ea:	461a      	mov	r2, r3
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	4413      	add	r3, r2
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	8812      	ldrh	r2, [r2, #0]
 80045f4:	fb93 f1f2 	sdiv	r1, r3, r2
 80045f8:	fb01 f202 	mul.w	r2, r1, r2
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	809a      	strh	r2, [r3, #4]

	return 0;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <circularBuffer_getSize>:
/************************************
 * Function
 * **********************************
 */
uint16_t circularBuffer_getSize( tCircularBuffer* pBuffer )
{
 800460e:	b480      	push	{r7}
 8004610:	b085      	sub	sp, #20
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
	uint16_t size = ( pBuffer->capacity + pBuffer->head - pBuffer->tail ) % pBuffer->capacity;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	889b      	ldrh	r3, [r3, #4]
 8004620:	4413      	add	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	8852      	ldrh	r2, [r2, #2]
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	8812      	ldrh	r2, [r2, #0]
 800462c:	fb93 f1f2 	sdiv	r1, r3, r2
 8004630:	fb01 f202 	mul.w	r2, r1, r2
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	81fb      	strh	r3, [r7, #14]
	return size;
 8004638:	89fb      	ldrh	r3, [r7, #14]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <circularBuffer_isEmepty>:
/************************************
 * Function
 * **********************************
 */
uint16_t circularBuffer_isEmepty( tCircularBuffer* pBuffer )
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
	if( pBuffer->head == pBuffer->tail )
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	889a      	ldrh	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	885b      	ldrh	r3, [r3, #2]
 8004656:	429a      	cmp	r2, r3
 8004658:	d101      	bne.n	800465e <circularBuffer_isEmepty+0x18>
		return 1;
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <circularBuffer_isEmepty+0x1a>

	return 0;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <cmdhandler_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void cmdhandler_init( UART_HandleTypeDef* huart )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	// create a circular buffer
	circularBuffer_init( &CBuffer, cbuff_data, CBUFF_DATA_SIZE );
 8004674:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004678:	4912      	ldr	r1, [pc, #72]	@ (80046c4 <cmdhandler_init+0x58>)
 800467a:	4813      	ldr	r0, [pc, #76]	@ (80046c8 <cmdhandler_init+0x5c>)
 800467c:	f7ff ff01 	bl	8004482 <circularBuffer_init>

	// init uart.
	serial_uart_init(huart, &CBuffer );
 8004680:	4911      	ldr	r1, [pc, #68]	@ (80046c8 <cmdhandler_init+0x5c>)
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fc3a 	bl	8004efc <serial_uart_init>
	serial_uart_receiveToIdle( huart );
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fc4b 	bl	8004f24 <serial_uart_receiveToIdle>

	// to let us know to uart received new data;
	serial_uart_registerCB( cmdhandler_processNewData );
 800468e:	480f      	ldr	r0, [pc, #60]	@ (80046cc <cmdhandler_init+0x60>)
 8004690:	f000 fc66 	bl	8004f60 <serial_uart_registerCB>

	// initialize cmd list.
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 8004694:	2300      	movs	r3, #0
 8004696:	73fb      	strb	r3, [r7, #15]
 8004698:	e00d      	b.n	80046b6 <cmdhandler_init+0x4a>
	{
		cmdhandler_list[i].moduleId	= MODULE_ID_NONE;
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	4a0c      	ldr	r2, [pc, #48]	@ (80046d0 <cmdhandler_init+0x64>)
 800469e:	2100      	movs	r1, #0
 80046a0:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		cmdhandler_list[i].funPtr 		= NULL;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	4a0a      	ldr	r2, [pc, #40]	@ (80046d0 <cmdhandler_init+0x64>)
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4413      	add	r3, r2
 80046ac:	2200      	movs	r2, #0
 80046ae:	605a      	str	r2, [r3, #4]
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	3301      	adds	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b09      	cmp	r3, #9
 80046ba:	d9ee      	bls.n	800469a <cmdhandler_init+0x2e>
	}
	return;
 80046bc:	bf00      	nop
}
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000178 	.word	0x20000178
 80046c8:	20000278 	.word	0x20000278
 80046cc:	0800472d 	.word	0x0800472d
 80046d0:	20000388 	.word	0x20000388

080046d4 <cmdhandler_registerModuleCmdHandler>:

uint8_t cmdhandler_registerModuleCmdHandler( tCmdhandler_moduleCmdHandler handler )
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	463b      	mov	r3, r7
 80046dc:	e883 0003 	stmia.w	r3, {r0, r1}
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80046e0:	2300      	movs	r3, #0
 80046e2:	73fb      	strb	r3, [r7, #15]
 80046e4:	e015      	b.n	8004712 <cmdhandler_registerModuleCmdHandler+0x3e>
	{
		if ( cmdhandler_list[i].moduleId == MODULE_ID_NONE )
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004728 <cmdhandler_registerModuleCmdHandler+0x54>)
 80046ea:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10c      	bne.n	800470c <cmdhandler_registerModuleCmdHandler+0x38>
		{
			cmdhandler_list[i].moduleId = handler.moduleId;
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	7839      	ldrb	r1, [r7, #0]
 80046f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004728 <cmdhandler_registerModuleCmdHandler+0x54>)
 80046f8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
			cmdhandler_list[i].funPtr 	 = handler.funPtr;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4909      	ldr	r1, [pc, #36]	@ (8004728 <cmdhandler_registerModuleCmdHandler+0x54>)
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	440b      	add	r3, r1
 8004706:	605a      	str	r2, [r3, #4]
			return 0;
 8004708:	2300      	movs	r3, #0
 800470a:	e006      	b.n	800471a <cmdhandler_registerModuleCmdHandler+0x46>
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	3301      	adds	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b09      	cmp	r3, #9
 8004716:	d9e6      	bls.n	80046e6 <cmdhandler_registerModuleCmdHandler+0x12>
		}
	}

	// if we looped through the whole list without finding an empty slot.
	return 1;
 8004718:	2301      	movs	r3, #1
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000388 	.word	0x20000388

0800472c <cmdhandler_processNewData>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void cmdhandler_processNewData()
{
 800472c:	b5b0      	push	{r4, r5, r7, lr}
 800472e:	b0c0      	sub	sp, #256	@ 0x100
 8004730:	af3e      	add	r7, sp, #248	@ 0xf8
	uint8_t oneByte 	= 0;
 8004732:	2300      	movs	r3, #0
 8004734:	71bb      	strb	r3, [r7, #6]
	uint16_t dataSize 	= 0;
 8004736:	2300      	movs	r3, #0
 8004738:	80bb      	strh	r3, [r7, #4]
	uint8_t cmd[2] 		= {0};
 800473a:	2300      	movs	r3, #0
 800473c:	803b      	strh	r3, [r7, #0]
	// find new command:
	while( !circularBuffer_isEmepty(&CBuffer) && oneByte != (uint8_t)CMD_NEW )
 800473e:	e005      	b.n	800474c <cmdhandler_processNewData+0x20>
	{
		circularBuffer_pop( &CBuffer, &oneByte, 1 );
 8004740:	1dbb      	adds	r3, r7, #6
 8004742:	2201      	movs	r2, #1
 8004744:	4619      	mov	r1, r3
 8004746:	4831      	ldr	r0, [pc, #196]	@ (800480c <cmdhandler_processNewData+0xe0>)
 8004748:	f7ff ff16 	bl	8004578 <circularBuffer_pop>
	while( !circularBuffer_isEmepty(&CBuffer) && oneByte != (uint8_t)CMD_NEW )
 800474c:	482f      	ldr	r0, [pc, #188]	@ (800480c <cmdhandler_processNewData+0xe0>)
 800474e:	f7ff ff7a 	bl	8004646 <circularBuffer_isEmepty>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <cmdhandler_processNewData+0x32>
 8004758:	79bb      	ldrb	r3, [r7, #6]
 800475a:	2bab      	cmp	r3, #171	@ 0xab
 800475c:	d1f0      	bne.n	8004740 <cmdhandler_processNewData+0x14>
	}

	if ( oneByte != (uint8_t)CMD_NEW )
 800475e:	79bb      	ldrb	r3, [r7, #6]
 8004760:	2bab      	cmp	r3, #171	@ 0xab
 8004762:	d14e      	bne.n	8004802 <cmdhandler_processNewData+0xd6>
		// the buffer is empty and we did not found a new command.
		return;
	}

	// read command
	circularBuffer_pop( &CBuffer, cmd, 2 );
 8004764:	463b      	mov	r3, r7
 8004766:	2202      	movs	r2, #2
 8004768:	4619      	mov	r1, r3
 800476a:	4828      	ldr	r0, [pc, #160]	@ (800480c <cmdhandler_processNewData+0xe0>)
 800476c:	f7ff ff04 	bl	8004578 <circularBuffer_pop>
	inCmd.id.module = cmd[1];
 8004770:	787a      	ldrb	r2, [r7, #1]
 8004772:	4b27      	ldr	r3, [pc, #156]	@ (8004810 <cmdhandler_processNewData+0xe4>)
 8004774:	701a      	strb	r2, [r3, #0]
	inCmd.id.cmd 	= cmd[0];
 8004776:	783a      	ldrb	r2, [r7, #0]
 8004778:	4b25      	ldr	r3, [pc, #148]	@ (8004810 <cmdhandler_processNewData+0xe4>)
 800477a:	705a      	strb	r2, [r3, #1]

	// read data size
	circularBuffer_pop( &CBuffer, (uint8_t*)&dataSize, 2 );
 800477c:	1d3b      	adds	r3, r7, #4
 800477e:	2202      	movs	r2, #2
 8004780:	4619      	mov	r1, r3
 8004782:	4822      	ldr	r0, [pc, #136]	@ (800480c <cmdhandler_processNewData+0xe0>)
 8004784:	f7ff fef8 	bl	8004578 <circularBuffer_pop>
	inCmd.dataSize = dataSize;
 8004788:	88ba      	ldrh	r2, [r7, #4]
 800478a:	4b21      	ldr	r3, [pc, #132]	@ (8004810 <cmdhandler_processNewData+0xe4>)
 800478c:	805a      	strh	r2, [r3, #2]

	// read data
	if ( dataSize != 0 )
 800478e:	88bb      	ldrh	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00d      	beq.n	80047b0 <cmdhandler_processNewData+0x84>
	{
		if ( circularBuffer_getSize(&CBuffer) >= dataSize )
 8004794:	481d      	ldr	r0, [pc, #116]	@ (800480c <cmdhandler_processNewData+0xe0>)
 8004796:	f7ff ff3a 	bl	800460e <circularBuffer_getSize>
 800479a:	4603      	mov	r3, r0
 800479c:	461a      	mov	r2, r3
 800479e:	88bb      	ldrh	r3, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d305      	bcc.n	80047b0 <cmdhandler_processNewData+0x84>
		{
			circularBuffer_pop( &CBuffer, &inCmd.data, dataSize );
 80047a4:	88bb      	ldrh	r3, [r7, #4]
 80047a6:	461a      	mov	r2, r3
 80047a8:	491a      	ldr	r1, [pc, #104]	@ (8004814 <cmdhandler_processNewData+0xe8>)
 80047aa:	4818      	ldr	r0, [pc, #96]	@ (800480c <cmdhandler_processNewData+0xe0>)
 80047ac:	f7ff fee4 	bl	8004578 <circularBuffer_pop>

	// to this point we have a command, either with data or without.

	// send the command to the relevant module.

	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80047b0:	2300      	movs	r3, #0
 80047b2:	71fb      	strb	r3, [r7, #7]
 80047b4:	e021      	b.n	80047fa <cmdhandler_processNewData+0xce>
	{
		if ( cmdhandler_list[i].funPtr != NULL && cmdhandler_list[i].moduleId == inCmd.id.module )
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	4a17      	ldr	r2, [pc, #92]	@ (8004818 <cmdhandler_processNewData+0xec>)
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d017      	beq.n	80047f4 <cmdhandler_processNewData+0xc8>
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	4a14      	ldr	r2, [pc, #80]	@ (8004818 <cmdhandler_processNewData+0xec>)
 80047c8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80047cc:	4b10      	ldr	r3, [pc, #64]	@ (8004810 <cmdhandler_processNewData+0xe4>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d10f      	bne.n	80047f4 <cmdhandler_processNewData+0xc8>
		{
			cmdhandler_list[i].funPtr( inCmd );
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	4a10      	ldr	r2, [pc, #64]	@ (8004818 <cmdhandler_processNewData+0xec>)
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	685d      	ldr	r5, [r3, #4]
 80047de:	4c0c      	ldr	r4, [pc, #48]	@ (8004810 <cmdhandler_processNewData+0xe4>)
 80047e0:	4668      	mov	r0, sp
 80047e2:	f104 0310 	add.w	r3, r4, #16
 80047e6:	22f4      	movs	r2, #244	@ 0xf4
 80047e8:	4619      	mov	r1, r3
 80047ea:	f000 fd9c 	bl	8005326 <memcpy>
 80047ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047f2:	47a8      	blx	r5
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	3301      	adds	r3, #1
 80047f8:	71fb      	strb	r3, [r7, #7]
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	2b09      	cmp	r3, #9
 80047fe:	d9da      	bls.n	80047b6 <cmdhandler_processNewData+0x8a>
		}
	}

	return;
 8004800:	e000      	b.n	8004804 <cmdhandler_processNewData+0xd8>
		return;
 8004802:	bf00      	nop
}
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bdb0      	pop	{r4, r5, r7, pc}
 800480a:	bf00      	nop
 800480c:	20000278 	.word	0x20000278
 8004810:	20000284 	.word	0x20000284
 8004814:	20000288 	.word	0x20000288
 8004818:	20000388 	.word	0x20000388

0800481c <flash_init>:
/************************************
 * Function
 * **********************************
 */
void flash_init()
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_FLASH, .funPtr = flash_cmd_handler };
 8004822:	4a07      	ldr	r2, [pc, #28]	@ (8004840 <flash_init+0x24>)
 8004824:	463b      	mov	r3, r7
 8004826:	e892 0003 	ldmia.w	r2, {r0, r1}
 800482a:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 800482e:	463b      	mov	r3, r7
 8004830:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004834:	f7ff ff4e 	bl	80046d4 <cmdhandler_registerModuleCmdHandler>
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	08005e94 	.word	0x08005e94

08004844 <flash_write>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_write( uint32_t Address, uint8_t* pData, uint32_t size )
{
 8004844:	b5b0      	push	{r4, r5, r7, lr}
 8004846:	b08a      	sub	sp, #40	@ 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
	// check if valid flash address.
	if ( Address < APP_START_ADD || Address > FLASH_END_ADD )
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a35      	ldr	r2, [pc, #212]	@ (8004928 <flash_write+0xe4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d903      	bls.n	8004860 <flash_write+0x1c>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4a34      	ldr	r2, [pc, #208]	@ (800492c <flash_write+0xe8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <flash_write+0x20>
	{
		// return if address is not in application flash area.
		return 1;
 8004860:	2301      	movs	r3, #1
 8004862:	e05c      	b.n	800491e <flash_write+0xda>
	}

	// check for valid input
	if ( pData == NULL && size == 0 )
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <flash_write+0x30>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <flash_write+0x30>
	{
		return 1;
 8004870:	2301      	movs	r3, #1
 8004872:	e054      	b.n	800491e <flash_write+0xda>
  __ASM volatile ("cpsid i" : : : "memory");
 8004874:	b672      	cpsid	i
}
 8004876:	bf00      	nop
	}

	// Disable interrupts
	__disable_irq();

	HAL_FLASH_Unlock();
 8004878:	f7fc fc94 	bl	80011a4 <HAL_FLASH_Unlock>
	uint32_t remaining_bytes = size;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_StatusTypeDef status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	76bb      	strb	r3, [r7, #26]
	uint32_t read_offset = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	623b      	str	r3, [r7, #32]
	uint32_t write_offset = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	61fb      	str	r3, [r7, #28]
	uint8_t oneByte= 0;
 800488c:	2300      	movs	r3, #0
 800488e:	76fb      	strb	r3, [r7, #27]

	while( remaining_bytes )
 8004890:	e03d      	b.n	800490e <flash_write+0xca>
	{
		uint16_t inData= 0xffff;
 8004892:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004896:	827b      	strh	r3, [r7, #18]
		uint32_t writing_address = Address + write_offset;
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	617b      	str	r3, [r7, #20]

		if ( remaining_bytes >= HALF_WORD )
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d906      	bls.n	80048b4 <flash_write+0x70>
			memcpy (&inData, &pData[read_offset], HALF_WORD);
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	827b      	strh	r3, [r7, #18]
 80048b2:	e006      	b.n	80048c2 <flash_write+0x7e>
		else
		{
			// if there is only one byte, move it to inData.
			memcpy (&inData, &pData[read_offset], 1);
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	4413      	add	r3, r2
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	74bb      	strb	r3, [r7, #18]
			oneByte = 1;
 80048be:	2301      	movs	r3, #1
 80048c0:	76fb      	strb	r3, [r7, #27]
		}
		status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, writing_address, inData );
 80048c2:	8a7b      	ldrh	r3, [r7, #18]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2200      	movs	r2, #0
 80048c8:	461c      	mov	r4, r3
 80048ca:	4615      	mov	r5, r2
 80048cc:	4622      	mov	r2, r4
 80048ce:	462b      	mov	r3, r5
 80048d0:	6979      	ldr	r1, [r7, #20]
 80048d2:	2001      	movs	r0, #1
 80048d4:	f7fc fbf6 	bl	80010c4 <HAL_FLASH_Program>
 80048d8:	4603      	mov	r3, r0
 80048da:	76bb      	strb	r3, [r7, #26]
		if ( status == HAL_OK )
 80048dc:	7ebb      	ldrb	r3, [r7, #26]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d115      	bne.n	800490e <flash_write+0xca>
		{
			if ( oneByte == 1 )
 80048e2:	7efb      	ldrb	r3, [r7, #27]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d109      	bne.n	80048fc <flash_write+0xb8>
			{
				remaining_bytes -= 1;
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	3b01      	subs	r3, #1
 80048ec:	627b      	str	r3, [r7, #36]	@ 0x24
				read_offset 	+= 1;
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	3301      	adds	r3, #1
 80048f2:	623b      	str	r3, [r7, #32]
				write_offset	+= 1;
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	3301      	adds	r3, #1
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	e008      	b.n	800490e <flash_write+0xca>
			}
			else
			{
				remaining_bytes -= HALF_WORD;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	3b02      	subs	r3, #2
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
				read_offset 	+= HALF_WORD;
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	3302      	adds	r3, #2
 8004906:	623b      	str	r3, [r7, #32]
				write_offset	+= HALF_WORD;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	3302      	adds	r3, #2
 800490c:	61fb      	str	r3, [r7, #28]
	while( remaining_bytes )
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1be      	bne.n	8004892 <flash_write+0x4e>

		}

	}

	HAL_FLASH_Lock();
 8004914:	f7fc fc6c 	bl	80011f0 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8004918:	b662      	cpsie	i
}
 800491a:	bf00      	nop
	// Re-enable interrupts
	__enable_irq();

	return 0;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3728      	adds	r7, #40	@ 0x28
 8004922:	46bd      	mov	sp, r7
 8004924:	bdb0      	pop	{r4, r5, r7, pc}
 8004926:	bf00      	nop
 8004928:	0803ffff 	.word	0x0803ffff
 800492c:	08080000 	.word	0x08080000

08004930 <flash_erasePage>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_erasePage( uint32_t Address, uint32_t nrPages )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
	// make sure we are not going to erase ourself
	if ( Address < APP_START_ADD )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a16      	ldr	r2, [pc, #88]	@ (8004998 <flash_erasePage+0x68>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d805      	bhi.n	800494e <flash_erasePage+0x1e>
	{
		printf( "trying to erase boot area 0x:%08x", Address );
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4815      	ldr	r0, [pc, #84]	@ (800499c <flash_erasePage+0x6c>)
 8004946:	f000 fc1d 	bl	8005184 <iprintf>
		return 1;
 800494a:	2301      	movs	r3, #1
 800494c:	e01f      	b.n	800498e <flash_erasePage+0x5e>
	}

	// find page start address.
	uint32_t pageStartAddress = ( Address / FLASH_PAGE_SIZE ) * FLASH_PAGE_SIZE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004954:	f023 0307 	bic.w	r3, r3, #7
 8004958:	61fb      	str	r3, [r7, #28]

	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages 		= nrPages;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	617b      	str	r3, [r7, #20]
	eraseInit.PageAddress 	= pageStartAddress;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	613b      	str	r3, [r7, #16]
	eraseInit.TypeErase 	= FLASH_TYPEERASE_PAGES;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]

	uint32_t pageError;

	HAL_FLASH_Unlock();
 8004966:	f7fc fc1d 	bl	80011a4 <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase( &eraseInit, &pageError);
 800496a:	f107 0208 	add.w	r2, r7, #8
 800496e:	f107 030c 	add.w	r3, r7, #12
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc fcd9 	bl	800132c <HAL_FLASHEx_Erase>
 800497a:	4603      	mov	r3, r0
 800497c:	76fb      	strb	r3, [r7, #27]
	HAL_FLASH_Lock();
 800497e:	f7fc fc37 	bl	80011f0 <HAL_FLASH_Lock>
	if ( status != HAL_OK )
 8004982:	7efb      	ldrb	r3, [r7, #27]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <flash_erasePage+0x5c>
		return 1;
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <flash_erasePage+0x5e>

	return 0;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	0803ffff 	.word	0x0803ffff
 800499c:	08005e9c 	.word	0x08005e9c

080049a0 <flash_cmd_handler>:
/************************************
 * Function
 * **********************************
 */
void flash_cmd_handler( tCmdhandler_cmd inCmd )
{
 80049a0:	b084      	sub	sp, #16
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b0c4      	sub	sp, #272	@ 0x110
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	f507 7c8c 	add.w	ip, r7, #280	@ 0x118
 80049ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if( inCmd.id.module !=  MODULE_ID_FLASH )
 80049b0:	f897 3118 	ldrb.w	r3, [r7, #280]	@ 0x118
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d156      	bne.n	8004a66 <flash_cmd_handler+0xc6>
		return;

	tCmdhandler_cmd cmd;
	memcpy( &cmd, (uint8_t*)&inCmd, sizeof(tCmdhandler_cmd) );
 80049b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049c0:	4618      	mov	r0, r3
 80049c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80049c6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80049ca:	4619      	mov	r1, r3
 80049cc:	f000 fcab 	bl	8005326 <memcpy>

	switch( cmd.id.cmd )
 80049d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d002      	beq.n	80049e4 <flash_cmd_handler+0x44>
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d026      	beq.n	8004a30 <flash_cmd_handler+0x90>
			memcpy( &address, &cmd.data[0], 4 );
			flash_erasePage( address, 1 );
			break;
		}
		default:
			break;
 80049e2:	e03f      	b.n	8004a64 <flash_cmd_handler+0xc4>
			uint32_t address = 0;
 80049e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
			memcpy( &address, &cmd.data[0], 4);
 80049f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a02:	601a      	str	r2, [r3, #0]
			uint8_t* pData 	 = &cmd.data[4];
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	3308      	adds	r3, #8
 8004a0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			flash_write(address, pData, cmd.dataSize - 4 );
 8004a0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a20:	885b      	ldrh	r3, [r3, #2]
 8004a22:	3b04      	subs	r3, #4
 8004a24:	461a      	mov	r2, r3
 8004a26:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8004a2a:	f7ff ff0b 	bl	8004844 <flash_write>
			break;
 8004a2e:	e019      	b.n	8004a64 <flash_cmd_handler+0xc4>
			uint32_t address = 0;
 8004a30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a34:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
			memcpy( &address, &cmd.data[0], 4 );
 8004a3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a4e:	601a      	str	r2, [r3, #0]
			flash_erasePage( address, 1 );
 8004a50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff67 	bl	8004930 <flash_erasePage>
			break;
 8004a62:	bf00      	nop
	}

	return;
 8004a64:	e000      	b.n	8004a68 <flash_cmd_handler+0xc8>
		return;
 8004a66:	bf00      	nop
}
 8004a68:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a72:	b004      	add	sp, #16
 8004a74:	4770      	bx	lr
	...

08004a78 <fwUpgrade_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void fwUpgrade_init()
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_FW_UPGRADE, .funPtr = fwUpgrade_cmd_handler };
 8004a7e:	4a07      	ldr	r2, [pc, #28]	@ (8004a9c <fwUpgrade_init+0x24>)
 8004a80:	463b      	mov	r3, r7
 8004a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a86:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004a90:	f7ff fe20 	bl	80046d4 <cmdhandler_registerModuleCmdHandler>
	return;
 8004a94:	bf00      	nop
}
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	08005ec0 	.word	0x08005ec0

08004aa0 <fwUpgrade_eraseApp>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void fwUpgrade_eraseApp()
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
	uint32_t address 	= APP_START_ADD;
 8004aa6:	4b08      	ldr	r3, [pc, #32]	@ (8004ac8 <fwUpgrade_eraseApp+0x28>)
 8004aa8:	60fb      	str	r3, [r7, #12]
	uint32_t eraseArea 	= FLASH_END_ADD - APP_START_ADD;
 8004aaa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004aae:	60bb      	str	r3, [r7, #8]
	uint32_t nrPages   	= eraseArea / FLASH_PAGE_SIZE ;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	0adb      	lsrs	r3, r3, #11
 8004ab4:	607b      	str	r3, [r7, #4]

	flash_erasePage( address, nrPages );
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f7ff ff39 	bl	8004930 <flash_erasePage>
	return;
 8004abe:	bf00      	nop
}
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	08040000 	.word	0x08040000

08004acc <fwUpgrade_cmd_handler>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void fwUpgrade_cmd_handler( tCmdhandler_cmd inCmd )
{
 8004acc:	b084      	sub	sp, #16
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b0c4      	sub	sp, #272	@ 0x110
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	f507 7c8c 	add.w	ip, r7, #280	@ 0x118
 8004ad8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// make sure the command is for us.
	if ( inCmd.id.module != MODULE_ID_FW_UPGRADE )
 8004adc:	f897 3118 	ldrb.w	r3, [r7, #280]	@ 0x118
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d13e      	bne.n	8004b62 <fwUpgrade_cmd_handler+0x96>
		return;

	tCmdhandler_cmd cmd;
	memcpy( &cmd, (uint8_t*)&inCmd, sizeof(tCmdhandler_cmd) );
 8004ae4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aec:	4618      	mov	r0, r3
 8004aee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004af2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004af6:	4619      	mov	r1, r3
 8004af8:	f000 fc15 	bl	8005326 <memcpy>

	switch( cmd.id.cmd )
 8004afc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b04:	785b      	ldrb	r3, [r3, #1]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d002      	beq.n	8004b10 <fwUpgrade_cmd_handler+0x44>
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d002      	beq.n	8004b14 <fwUpgrade_cmd_handler+0x48>
			// call write
			flash_write( address, pData, cmd.dataSize - 4 );
			break;
		}
		default:
			break;
 8004b0e:	e027      	b.n	8004b60 <fwUpgrade_cmd_handler+0x94>
			fwUpgrade_eraseApp();
 8004b10:	f7ff ffc6 	bl	8004aa0 <fwUpgrade_eraseApp>
			uint32_t address = 0;
 8004b14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
			memcpy( &address, &cmd.data[0], 4);
 8004b20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004b32:	601a      	str	r2, [r3, #0]
			uint8_t* pData 	 = &cmd.data[4];
 8004b34:	f107 0308 	add.w	r3, r7, #8
 8004b38:	3308      	adds	r3, #8
 8004b3a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			flash_write( address, pData, cmd.dataSize - 4 );
 8004b3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b50:	885b      	ldrh	r3, [r3, #2]
 8004b52:	3b04      	subs	r3, #4
 8004b54:	461a      	mov	r2, r3
 8004b56:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8004b5a:	f7ff fe73 	bl	8004844 <flash_write>
			break;
 8004b5e:	bf00      	nop
	}

	return;
 8004b60:	e000      	b.n	8004b64 <fwUpgrade_cmd_handler+0x98>
		return;
 8004b62:	bf00      	nop
}
 8004b64:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b6e:	b004      	add	sp, #16
 8004b70:	4770      	bx	lr
	...

08004b74 <led_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_init()
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_LED, .funPtr = led_cmd_handler };
 8004b7a:	4a07      	ldr	r2, [pc, #28]	@ (8004b98 <led_init+0x24>)
 8004b7c:	463b      	mov	r3, r7
 8004b7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b82:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 8004b86:	463b      	mov	r3, r7
 8004b88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b8c:	f7ff fda2 	bl	80046d4 <cmdhandler_registerModuleCmdHandler>
	return;
 8004b90:	bf00      	nop
}
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	08005ec8 	.word	0x08005ec8

08004b9c <led_toggle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_toggle( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin( GPIOx, GPIO_Pin );
 8004ba8:	887b      	ldrh	r3, [r7, #2]
 8004baa:	4619      	mov	r1, r3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7fc fe03 	bl	80017b8 <HAL_GPIO_TogglePin>
	return;
 8004bb2:	bf00      	nop
}
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <led_run>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_run()
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	af00      	add	r7, sp, #0
	led_toggle( LD2_GPIO_Port, LD2_Pin);
 8004bbe:	2120      	movs	r1, #32
 8004bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004bc4:	f7ff ffea 	bl	8004b9c <led_toggle>
}
 8004bc8:	bf00      	nop
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <led_cmd_handler>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_cmd_handler( tCmdhandler_cmd inCmd )
{
 8004bcc:	b084      	sub	sp, #16
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b0c2      	sub	sp, #264	@ 0x108
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	f507 7c88 	add.w	ip, r7, #272	@ 0x110
 8004bd8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// make sure the command is for us.
	if ( inCmd.id.module != MODULE_ID_LED )
 8004bdc:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d13a      	bne.n	8004c5a <led_cmd_handler+0x8e>
		return;

	tCmdhandler_cmd cmd;
	memcpy( &cmd, (uint8_t*)&inCmd, sizeof(tCmdhandler_cmd) );
 8004be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bec:	4618      	mov	r0, r3
 8004bee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004bf2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f000 fb95 	bl	8005326 <memcpy>

	switch( cmd.id.cmd )
 8004bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d002      	beq.n	8004c10 <led_cmd_handler+0x44>
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d01e      	beq.n	8004c4c <led_cmd_handler+0x80>
		{
			led_toggle( LD2_GPIO_Port, LD2_Pin);
			break;
		}
		default:
			break;
 8004c0e:	e023      	b.n	8004c58 <led_cmd_handler+0x8c>
			uint8_t set = 0;// (uint8_t)param;
 8004c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c14:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
			memcpy(&set, &cmd.data, cmd.dataSize );
 8004c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c24:	885b      	ldrh	r3, [r3, #2]
 8004c26:	461a      	mov	r2, r3
 8004c28:	1d3b      	adds	r3, r7, #4
 8004c2a:	1d19      	adds	r1, r3, #4
 8004c2c:	1cfb      	adds	r3, r7, #3
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fb79 	bl	8005326 <memcpy>
			HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, set);
 8004c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c38:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2120      	movs	r1, #32
 8004c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c46:	f7fc fd9f 	bl	8001788 <HAL_GPIO_WritePin>
			break;
 8004c4a:	e005      	b.n	8004c58 <led_cmd_handler+0x8c>
			led_toggle( LD2_GPIO_Port, LD2_Pin);
 8004c4c:	2120      	movs	r1, #32
 8004c4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c52:	f7ff ffa3 	bl	8004b9c <led_toggle>
			break;
 8004c56:	bf00      	nop
	}

	return;
 8004c58:	e000      	b.n	8004c5c <led_cmd_handler+0x90>
		return;
 8004c5a:	bf00      	nop
}
 8004c5c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004c60:	46bd      	mov	sp, r7
 8004c62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c66:	b004      	add	sp, #16
 8004c68:	4770      	bx	lr
	...

08004c6c <scheduler_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void scheduler_init( void )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
	schedulerVars.nrOfTasks = 0;
 8004c72:	4b2a      	ldr	r3, [pc, #168]	@ (8004d1c <scheduler_init+0xb0>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8004c78:	2300      	movs	r3, #0
 8004c7a:	71fb      	strb	r3, [r7, #7]
 8004c7c:	e020      	b.n	8004cc0 <scheduler_init+0x54>
	{
		schedulerVars.taskList[i].pTask = NULL;
 8004c7e:	79fa      	ldrb	r2, [r7, #7]
 8004c80:	4926      	ldr	r1, [pc, #152]	@ (8004d1c <scheduler_init+0xb0>)
 8004c82:	4613      	mov	r3, r2
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].delay = 0;
 8004c92:	79fa      	ldrb	r2, [r7, #7]
 8004c94:	4921      	ldr	r1, [pc, #132]	@ (8004d1c <scheduler_init+0xb0>)
 8004c96:	4613      	mov	r3, r2
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].lastExecutionTime = 0;
 8004ca6:	79fa      	ldrb	r2, [r7, #7]
 8004ca8:	491c      	ldr	r1, [pc, #112]	@ (8004d1c <scheduler_init+0xb0>)
 8004caa:	4613      	mov	r3, r2
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	71fb      	strb	r3, [r7, #7]
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	2b09      	cmp	r3, #9
 8004cc4:	d9db      	bls.n	8004c7e <scheduler_init+0x12>
	}

	// init run once queue.
	schedulerVars.RunOnceQueue.head  = 0;
 8004cc6:	4b15      	ldr	r3, [pc, #84]	@ (8004d1c <scheduler_init+0xb0>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	schedulerVars.RunOnceQueue.tail  = 0;
 8004cce:	4b13      	ldr	r3, [pc, #76]	@ (8004d1c <scheduler_init+0xb0>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
	schedulerVars.RunOnceQueue.full  = 0;
 8004cd6:	4b11      	ldr	r3, [pc, #68]	@ (8004d1c <scheduler_init+0xb0>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	schedulerVars.RunOnceQueue.empty = 1;
 8004cde:	4b0f      	ldr	r3, [pc, #60]	@ (8004d1c <scheduler_init+0xb0>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	schedulerVars.RunOnceQueue.size  = 0;
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d1c <scheduler_init+0xb0>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8004cee:	2300      	movs	r3, #0
 8004cf0:	71bb      	strb	r3, [r7, #6]
 8004cf2:	e009      	b.n	8004d08 <scheduler_init+0x9c>
	{
		schedulerVars.RunOnceQueue.runOnceTaskList[i].pTask = NULL;
 8004cf4:	79bb      	ldrb	r3, [r7, #6]
 8004cf6:	4a09      	ldr	r2, [pc, #36]	@ (8004d1c <scheduler_init+0xb0>)
 8004cf8:	3320      	adds	r3, #32
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	2200      	movs	r2, #0
 8004d00:	605a      	str	r2, [r3, #4]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8004d02:	79bb      	ldrb	r3, [r7, #6]
 8004d04:	3301      	adds	r3, #1
 8004d06:	71bb      	strb	r3, [r7, #6]
 8004d08:	79bb      	ldrb	r3, [r7, #6]
 8004d0a:	2b13      	cmp	r3, #19
 8004d0c:	d9f2      	bls.n	8004cf4 <scheduler_init+0x88>
	}
}
 8004d0e:	bf00      	nop
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	200003d8 	.word	0x200003d8

08004d20 <scheduler_pushTask>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t scheduler_pushTask( void (*pTask)(void) )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	// is queue full?
	if ( schedulerVars.RunOnceQueue.full )
 8004d28:	4b21      	ldr	r3, [pc, #132]	@ (8004db0 <scheduler_pushTask+0x90>)
 8004d2a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <scheduler_pushTask+0x16>
		return 1;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e036      	b.n	8004da4 <scheduler_pushTask+0x84>

	// if not, add task.
	schedulerVars.RunOnceQueue.runOnceTaskList[ schedulerVars.RunOnceQueue.tail ].pTask = pTask;
 8004d36:	4b1e      	ldr	r3, [pc, #120]	@ (8004db0 <scheduler_pushTask+0x90>)
 8004d38:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004db0 <scheduler_pushTask+0x90>)
 8004d3e:	3320      	adds	r3, #32
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	605a      	str	r2, [r3, #4]

	// increase tail index and size.
	schedulerVars.RunOnceQueue.tail = ( schedulerVars.RunOnceQueue.tail + 1 ) % SCHEDULER_MAX_NR_RUN_ONCE_TASKS;
 8004d48:	4b19      	ldr	r3, [pc, #100]	@ (8004db0 <scheduler_pushTask+0x90>)
 8004d4a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	4b18      	ldr	r3, [pc, #96]	@ (8004db4 <scheduler_pushTask+0x94>)
 8004d52:	fb83 1302 	smull	r1, r3, r3, r2
 8004d56:	10d9      	asrs	r1, r3, #3
 8004d58:	17d3      	asrs	r3, r2, #31
 8004d5a:	1ac9      	subs	r1, r1, r3
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	1ad1      	subs	r1, r2, r3
 8004d66:	b2ca      	uxtb	r2, r1
 8004d68:	4b11      	ldr	r3, [pc, #68]	@ (8004db0 <scheduler_pushTask+0x90>)
 8004d6a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
	schedulerVars.RunOnceQueue.size += 1;
 8004d6e:	4b10      	ldr	r3, [pc, #64]	@ (8004db0 <scheduler_pushTask+0x90>)
 8004d70:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004d74:	3301      	adds	r3, #1
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	4b0d      	ldr	r3, [pc, #52]	@ (8004db0 <scheduler_pushTask+0x90>)
 8004d7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	// if queue was empty, it is not now.
	if ( schedulerVars.RunOnceQueue.empty )
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004db0 <scheduler_pushTask+0x90>)
 8004d80:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <scheduler_pushTask+0x70>
	{
		schedulerVars.RunOnceQueue.empty = 0;
 8004d88:	4b09      	ldr	r3, [pc, #36]	@ (8004db0 <scheduler_pushTask+0x90>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	}

	// check if full and update full.
	if( schedulerVars.RunOnceQueue.size == SCHEDULER_MAX_NR_RUN_ONCE_TASKS )
 8004d90:	4b07      	ldr	r3, [pc, #28]	@ (8004db0 <scheduler_pushTask+0x90>)
 8004d92:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004d96:	2b14      	cmp	r3, #20
 8004d98:	d103      	bne.n	8004da2 <scheduler_pushTask+0x82>
	{
		schedulerVars.RunOnceQueue.full = 1;
 8004d9a:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <scheduler_pushTask+0x90>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	}

	return 0;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	200003d8 	.word	0x200003d8
 8004db4:	66666667 	.word	0x66666667

08004db8 <scheduler_run>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void scheduler_run( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]
	while( 1 )
	{
		// run once tasks:
		while ( !schedulerVars.RunOnceQueue.empty )
 8004dc2:	e00d      	b.n	8004de0 <scheduler_run+0x28>
		{
			void (*pRunOnce)(void) = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	607b      	str	r3, [r7, #4]

			if ( 0 == scheduler_popTask( &pRunOnce ) )
 8004dc8:	1d3b      	adds	r3, r7, #4
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 f848 	bl	8004e60 <scheduler_popTask>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d104      	bne.n	8004de0 <scheduler_run+0x28>
				if ( pRunOnce != NULL )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <scheduler_run+0x28>
					{
						pRunOnce();
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4798      	blx	r3
		while ( !schedulerVars.RunOnceQueue.empty )
 8004de0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e5c <scheduler_run+0xa4>)
 8004de2:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0ec      	beq.n	8004dc4 <scheduler_run+0xc>
					}
		}

		// repeated tasks:
		now = HAL_GetTick();
 8004dea:	f7fb fe1f 	bl	8000a2c <HAL_GetTick>
 8004dee:	60b8      	str	r0, [r7, #8]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8004df0:	2300      	movs	r3, #0
 8004df2:	73fb      	strb	r3, [r7, #15]
 8004df4:	e02c      	b.n	8004e50 <scheduler_run+0x98>
		{
			if ( now - schedulerVars.taskList[i].lastExecutionTime  >= schedulerVars.taskList[i].delay )
 8004df6:	7bfa      	ldrb	r2, [r7, #15]
 8004df8:	4918      	ldr	r1, [pc, #96]	@ (8004e5c <scheduler_run+0xa4>)
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	330c      	adds	r3, #12
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	1ad1      	subs	r1, r2, r3
 8004e0c:	7bfa      	ldrb	r2, [r7, #15]
 8004e0e:	4813      	ldr	r0, [pc, #76]	@ (8004e5c <scheduler_run+0xa4>)
 8004e10:	4613      	mov	r3, r2
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4403      	add	r3, r0
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4299      	cmp	r1, r3
 8004e20:	d313      	bcc.n	8004e4a <scheduler_run+0x92>
			{
				// execute task
				schedulerVars.taskList[i].pTask();
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	490d      	ldr	r1, [pc, #52]	@ (8004e5c <scheduler_run+0xa4>)
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	3304      	adds	r3, #4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4798      	blx	r3
				schedulerVars.taskList[i].lastExecutionTime = now;
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	4908      	ldr	r1, [pc, #32]	@ (8004e5c <scheduler_run+0xa4>)
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	330c      	adds	r3, #12
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	601a      	str	r2, [r3, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
 8004e50:	4b02      	ldr	r3, [pc, #8]	@ (8004e5c <scheduler_run+0xa4>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	7bfa      	ldrb	r2, [r7, #15]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d3cd      	bcc.n	8004df6 <scheduler_run+0x3e>
		while ( !schedulerVars.RunOnceQueue.empty )
 8004e5a:	e7c1      	b.n	8004de0 <scheduler_run+0x28>
 8004e5c:	200003d8 	.word	0x200003d8

08004e60 <scheduler_popTask>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t scheduler_popTask( void (**pTask)(void) )
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
	// is queue empty?
	if ( schedulerVars.RunOnceQueue.empty )
 8004e68:	4b22      	ldr	r3, [pc, #136]	@ (8004ef4 <scheduler_popTask+0x94>)
 8004e6a:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <scheduler_popTask+0x16>
		return 1;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e037      	b.n	8004ee6 <scheduler_popTask+0x86>

	// pick that oldest task.
	*pTask = schedulerVars.RunOnceQueue.runOnceTaskList[ schedulerVars.RunOnceQueue.head ].pTask;
 8004e76:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef4 <scheduler_popTask+0x94>)
 8004e78:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ef4 <scheduler_popTask+0x94>)
 8004e7e:	3320      	adds	r3, #32
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]

	// update head index
	schedulerVars.RunOnceQueue.head = ( schedulerVars.RunOnceQueue.head + 1 ) % SCHEDULER_MAX_NR_RUN_ONCE_TASKS;
 8004e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef4 <scheduler_popTask+0x94>)
 8004e8c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	4b19      	ldr	r3, [pc, #100]	@ (8004ef8 <scheduler_popTask+0x98>)
 8004e94:	fb83 1302 	smull	r1, r3, r3, r2
 8004e98:	10d9      	asrs	r1, r3, #3
 8004e9a:	17d3      	asrs	r3, r2, #31
 8004e9c:	1ac9      	subs	r1, r1, r3
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	1ad1      	subs	r1, r2, r3
 8004ea8:	b2ca      	uxtb	r2, r1
 8004eaa:	4b12      	ldr	r3, [pc, #72]	@ (8004ef4 <scheduler_popTask+0x94>)
 8004eac:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	schedulerVars.RunOnceQueue.size -= 1;
 8004eb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <scheduler_popTask+0x94>)
 8004eb2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef4 <scheduler_popTask+0x94>)
 8004ebc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	// if it was full, it is not now
	if ( schedulerVars.RunOnceQueue.full == 1 )
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <scheduler_popTask+0x94>)
 8004ec2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d103      	bne.n	8004ed2 <scheduler_popTask+0x72>
	{
		schedulerVars.RunOnceQueue.full = 0;
 8004eca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <scheduler_popTask+0x94>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	}

	// check if empty
	if ( schedulerVars.RunOnceQueue.size == 0 )
 8004ed2:	4b08      	ldr	r3, [pc, #32]	@ (8004ef4 <scheduler_popTask+0x94>)
 8004ed4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d103      	bne.n	8004ee4 <scheduler_popTask+0x84>
	{
		schedulerVars.RunOnceQueue.empty = 1;
 8004edc:	4b05      	ldr	r3, [pc, #20]	@ (8004ef4 <scheduler_popTask+0x94>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	}
	return 0;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	200003d8 	.word	0x200003d8
 8004ef8:	66666667 	.word	0x66666667

08004efc <serial_uart_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void serial_uart_init(  UART_HandleTypeDef *huart, tCircularBuffer* pCBuff )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
	serialVars.pUart  = huart;
 8004f06:	4a06      	ldr	r2, [pc, #24]	@ (8004f20 <serial_uart_init+0x24>)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6013      	str	r3, [r2, #0]
	serialVars.pCBuff = pCBuff;
 8004f0c:	4a04      	ldr	r2, [pc, #16]	@ (8004f20 <serial_uart_init+0x24>)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6053      	str	r3, [r2, #4]

	return;
 8004f12:	bf00      	nop
}
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	200004ac 	.word	0x200004ac

08004f24 <serial_uart_receiveToIdle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t serial_uart_receiveToIdle()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA( serialVars.pUart, serialVars.pRxBuff, RX_BUF_SIZE );
 8004f28:	4b0b      	ldr	r3, [pc, #44]	@ (8004f58 <serial_uart_receiveToIdle+0x34>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f30:	490a      	ldr	r1, [pc, #40]	@ (8004f5c <serial_uart_receiveToIdle+0x38>)
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fa51 	bl	80043da <HAL_UARTEx_ReceiveToIdle_DMA>

	  // not interested of half transfer interrupt.
	  __HAL_DMA_DISABLE_IT( serialVars.pUart->hdmarx, DMA_IT_HT );
 8004f38:	4b07      	ldr	r3, [pc, #28]	@ (8004f58 <serial_uart_receiveToIdle+0x34>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <serial_uart_receiveToIdle+0x34>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0204 	bic.w	r2, r2, #4
 8004f4e:	601a      	str	r2, [r3, #0]
	return 0;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	200004ac 	.word	0x200004ac
 8004f5c:	200004b4 	.word	0x200004b4

08004f60 <serial_uart_registerCB>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void serial_uart_registerCB( void (*pCB)(void) )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	serialVars.pCmdHandlerCB = pCB;
 8004f68:	4a04      	ldr	r2, [pc, #16]	@ (8004f7c <serial_uart_registerCB+0x1c>)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	200004ac 	.word	0x200004ac

08004f80 <pushRxToCBuff>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void pushRxToCBuff()
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
	circularBuffer_push( serialVars.pCBuff, serialVars.pRxBuff, serialVars.receivedSize );
 8004f84:	4b08      	ldr	r3, [pc, #32]	@ (8004fa8 <pushRxToCBuff+0x28>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4a07      	ldr	r2, [pc, #28]	@ (8004fa8 <pushRxToCBuff+0x28>)
 8004f8a:	f892 2108 	ldrb.w	r2, [r2, #264]	@ 0x108
 8004f8e:	4907      	ldr	r1, [pc, #28]	@ (8004fac <pushRxToCBuff+0x2c>)
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff faa1 	bl	80044d8 <circularBuffer_push>

	// notify cmdhandler about the new data.
	scheduler_pushTask( serialVars.pCmdHandlerCB );
 8004f96:	4b04      	ldr	r3, [pc, #16]	@ (8004fa8 <pushRxToCBuff+0x28>)
 8004f98:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff febf 	bl	8004d20 <scheduler_pushTask>
	return;
 8004fa2:	bf00      	nop
}
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	200004ac 	.word	0x200004ac
 8004fac:	200004b4 	.word	0x200004b4

08004fb0 <HAL_UARTEx_RxEventCallback>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	807b      	strh	r3, [r7, #2]
	if ( huart->Instance == serialVars.pUart->Instance )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <HAL_UARTEx_RxEventCallback+0x44>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d110      	bne.n	8004fec <HAL_UARTEx_RxEventCallback+0x3c>
	{
		// restart receiving data.
		HAL_UARTEx_ReceiveToIdle_DMA( serialVars.pUart, serialVars.pRxBuff, RX_BUF_SIZE );
 8004fca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <HAL_UARTEx_RxEventCallback+0x44>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fd2:	4909      	ldr	r1, [pc, #36]	@ (8004ff8 <HAL_UARTEx_RxEventCallback+0x48>)
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fa00 	bl	80043da <HAL_UARTEx_ReceiveToIdle_DMA>
		serialVars.receivedSize = Size;
 8004fda:	887b      	ldrh	r3, [r7, #2]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <HAL_UARTEx_RxEventCallback+0x44>)
 8004fe0:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

		// move received data from rxBuff to cBuffer out side of the interrupt context.
		scheduler_pushTask( pushRxToCBuff );
 8004fe4:	4805      	ldr	r0, [pc, #20]	@ (8004ffc <HAL_UARTEx_RxEventCallback+0x4c>)
 8004fe6:	f7ff fe9b 	bl	8004d20 <scheduler_pushTask>
	}
	return;
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
}
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	200004ac 	.word	0x200004ac
 8004ff8:	200004b4 	.word	0x200004b4
 8004ffc:	08004f81 	.word	0x08004f81

08005000 <std>:
 8005000:	2300      	movs	r3, #0
 8005002:	b510      	push	{r4, lr}
 8005004:	4604      	mov	r4, r0
 8005006:	e9c0 3300 	strd	r3, r3, [r0]
 800500a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800500e:	6083      	str	r3, [r0, #8]
 8005010:	8181      	strh	r1, [r0, #12]
 8005012:	6643      	str	r3, [r0, #100]	@ 0x64
 8005014:	81c2      	strh	r2, [r0, #14]
 8005016:	6183      	str	r3, [r0, #24]
 8005018:	4619      	mov	r1, r3
 800501a:	2208      	movs	r2, #8
 800501c:	305c      	adds	r0, #92	@ 0x5c
 800501e:	f000 f906 	bl	800522e <memset>
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <std+0x58>)
 8005024:	6263      	str	r3, [r4, #36]	@ 0x24
 8005026:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <std+0x5c>)
 8005028:	62a3      	str	r3, [r4, #40]	@ 0x28
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <std+0x60>)
 800502c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800502e:	4b0d      	ldr	r3, [pc, #52]	@ (8005064 <std+0x64>)
 8005030:	6323      	str	r3, [r4, #48]	@ 0x30
 8005032:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <std+0x68>)
 8005034:	6224      	str	r4, [r4, #32]
 8005036:	429c      	cmp	r4, r3
 8005038:	d006      	beq.n	8005048 <std+0x48>
 800503a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800503e:	4294      	cmp	r4, r2
 8005040:	d002      	beq.n	8005048 <std+0x48>
 8005042:	33d0      	adds	r3, #208	@ 0xd0
 8005044:	429c      	cmp	r4, r3
 8005046:	d105      	bne.n	8005054 <std+0x54>
 8005048:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800504c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005050:	f000 b966 	b.w	8005320 <__retarget_lock_init_recursive>
 8005054:	bd10      	pop	{r4, pc}
 8005056:	bf00      	nop
 8005058:	080051a9 	.word	0x080051a9
 800505c:	080051cb 	.word	0x080051cb
 8005060:	08005203 	.word	0x08005203
 8005064:	08005227 	.word	0x08005227
 8005068:	200005bc 	.word	0x200005bc

0800506c <stdio_exit_handler>:
 800506c:	4a02      	ldr	r2, [pc, #8]	@ (8005078 <stdio_exit_handler+0xc>)
 800506e:	4903      	ldr	r1, [pc, #12]	@ (800507c <stdio_exit_handler+0x10>)
 8005070:	4803      	ldr	r0, [pc, #12]	@ (8005080 <stdio_exit_handler+0x14>)
 8005072:	f000 b869 	b.w	8005148 <_fwalk_sglue>
 8005076:	bf00      	nop
 8005078:	2000000c 	.word	0x2000000c
 800507c:	08005bdd 	.word	0x08005bdd
 8005080:	2000001c 	.word	0x2000001c

08005084 <cleanup_stdio>:
 8005084:	6841      	ldr	r1, [r0, #4]
 8005086:	4b0c      	ldr	r3, [pc, #48]	@ (80050b8 <cleanup_stdio+0x34>)
 8005088:	4299      	cmp	r1, r3
 800508a:	b510      	push	{r4, lr}
 800508c:	4604      	mov	r4, r0
 800508e:	d001      	beq.n	8005094 <cleanup_stdio+0x10>
 8005090:	f000 fda4 	bl	8005bdc <_fflush_r>
 8005094:	68a1      	ldr	r1, [r4, #8]
 8005096:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <cleanup_stdio+0x38>)
 8005098:	4299      	cmp	r1, r3
 800509a:	d002      	beq.n	80050a2 <cleanup_stdio+0x1e>
 800509c:	4620      	mov	r0, r4
 800509e:	f000 fd9d 	bl	8005bdc <_fflush_r>
 80050a2:	68e1      	ldr	r1, [r4, #12]
 80050a4:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <cleanup_stdio+0x3c>)
 80050a6:	4299      	cmp	r1, r3
 80050a8:	d004      	beq.n	80050b4 <cleanup_stdio+0x30>
 80050aa:	4620      	mov	r0, r4
 80050ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b0:	f000 bd94 	b.w	8005bdc <_fflush_r>
 80050b4:	bd10      	pop	{r4, pc}
 80050b6:	bf00      	nop
 80050b8:	200005bc 	.word	0x200005bc
 80050bc:	20000624 	.word	0x20000624
 80050c0:	2000068c 	.word	0x2000068c

080050c4 <global_stdio_init.part.0>:
 80050c4:	b510      	push	{r4, lr}
 80050c6:	4b0b      	ldr	r3, [pc, #44]	@ (80050f4 <global_stdio_init.part.0+0x30>)
 80050c8:	4c0b      	ldr	r4, [pc, #44]	@ (80050f8 <global_stdio_init.part.0+0x34>)
 80050ca:	4a0c      	ldr	r2, [pc, #48]	@ (80050fc <global_stdio_init.part.0+0x38>)
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	4620      	mov	r0, r4
 80050d0:	2200      	movs	r2, #0
 80050d2:	2104      	movs	r1, #4
 80050d4:	f7ff ff94 	bl	8005000 <std>
 80050d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050dc:	2201      	movs	r2, #1
 80050de:	2109      	movs	r1, #9
 80050e0:	f7ff ff8e 	bl	8005000 <std>
 80050e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050e8:	2202      	movs	r2, #2
 80050ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ee:	2112      	movs	r1, #18
 80050f0:	f7ff bf86 	b.w	8005000 <std>
 80050f4:	200006f4 	.word	0x200006f4
 80050f8:	200005bc 	.word	0x200005bc
 80050fc:	0800506d 	.word	0x0800506d

08005100 <__sfp_lock_acquire>:
 8005100:	4801      	ldr	r0, [pc, #4]	@ (8005108 <__sfp_lock_acquire+0x8>)
 8005102:	f000 b90e 	b.w	8005322 <__retarget_lock_acquire_recursive>
 8005106:	bf00      	nop
 8005108:	200006fd 	.word	0x200006fd

0800510c <__sfp_lock_release>:
 800510c:	4801      	ldr	r0, [pc, #4]	@ (8005114 <__sfp_lock_release+0x8>)
 800510e:	f000 b909 	b.w	8005324 <__retarget_lock_release_recursive>
 8005112:	bf00      	nop
 8005114:	200006fd 	.word	0x200006fd

08005118 <__sinit>:
 8005118:	b510      	push	{r4, lr}
 800511a:	4604      	mov	r4, r0
 800511c:	f7ff fff0 	bl	8005100 <__sfp_lock_acquire>
 8005120:	6a23      	ldr	r3, [r4, #32]
 8005122:	b11b      	cbz	r3, 800512c <__sinit+0x14>
 8005124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005128:	f7ff bff0 	b.w	800510c <__sfp_lock_release>
 800512c:	4b04      	ldr	r3, [pc, #16]	@ (8005140 <__sinit+0x28>)
 800512e:	6223      	str	r3, [r4, #32]
 8005130:	4b04      	ldr	r3, [pc, #16]	@ (8005144 <__sinit+0x2c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f5      	bne.n	8005124 <__sinit+0xc>
 8005138:	f7ff ffc4 	bl	80050c4 <global_stdio_init.part.0>
 800513c:	e7f2      	b.n	8005124 <__sinit+0xc>
 800513e:	bf00      	nop
 8005140:	08005085 	.word	0x08005085
 8005144:	200006f4 	.word	0x200006f4

08005148 <_fwalk_sglue>:
 8005148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800514c:	4607      	mov	r7, r0
 800514e:	4688      	mov	r8, r1
 8005150:	4614      	mov	r4, r2
 8005152:	2600      	movs	r6, #0
 8005154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005158:	f1b9 0901 	subs.w	r9, r9, #1
 800515c:	d505      	bpl.n	800516a <_fwalk_sglue+0x22>
 800515e:	6824      	ldr	r4, [r4, #0]
 8005160:	2c00      	cmp	r4, #0
 8005162:	d1f7      	bne.n	8005154 <_fwalk_sglue+0xc>
 8005164:	4630      	mov	r0, r6
 8005166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800516a:	89ab      	ldrh	r3, [r5, #12]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d907      	bls.n	8005180 <_fwalk_sglue+0x38>
 8005170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005174:	3301      	adds	r3, #1
 8005176:	d003      	beq.n	8005180 <_fwalk_sglue+0x38>
 8005178:	4629      	mov	r1, r5
 800517a:	4638      	mov	r0, r7
 800517c:	47c0      	blx	r8
 800517e:	4306      	orrs	r6, r0
 8005180:	3568      	adds	r5, #104	@ 0x68
 8005182:	e7e9      	b.n	8005158 <_fwalk_sglue+0x10>

08005184 <iprintf>:
 8005184:	b40f      	push	{r0, r1, r2, r3}
 8005186:	b507      	push	{r0, r1, r2, lr}
 8005188:	4906      	ldr	r1, [pc, #24]	@ (80051a4 <iprintf+0x20>)
 800518a:	ab04      	add	r3, sp, #16
 800518c:	6808      	ldr	r0, [r1, #0]
 800518e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005192:	6881      	ldr	r1, [r0, #8]
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	f000 f9f7 	bl	8005588 <_vfiprintf_r>
 800519a:	b003      	add	sp, #12
 800519c:	f85d eb04 	ldr.w	lr, [sp], #4
 80051a0:	b004      	add	sp, #16
 80051a2:	4770      	bx	lr
 80051a4:	20000018 	.word	0x20000018

080051a8 <__sread>:
 80051a8:	b510      	push	{r4, lr}
 80051aa:	460c      	mov	r4, r1
 80051ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b0:	f000 f868 	bl	8005284 <_read_r>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	bfab      	itete	ge
 80051b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051ba:	89a3      	ldrhlt	r3, [r4, #12]
 80051bc:	181b      	addge	r3, r3, r0
 80051be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051c2:	bfac      	ite	ge
 80051c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051c6:	81a3      	strhlt	r3, [r4, #12]
 80051c8:	bd10      	pop	{r4, pc}

080051ca <__swrite>:
 80051ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ce:	461f      	mov	r7, r3
 80051d0:	898b      	ldrh	r3, [r1, #12]
 80051d2:	05db      	lsls	r3, r3, #23
 80051d4:	4605      	mov	r5, r0
 80051d6:	460c      	mov	r4, r1
 80051d8:	4616      	mov	r6, r2
 80051da:	d505      	bpl.n	80051e8 <__swrite+0x1e>
 80051dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e0:	2302      	movs	r3, #2
 80051e2:	2200      	movs	r2, #0
 80051e4:	f000 f83c 	bl	8005260 <_lseek_r>
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051f2:	81a3      	strh	r3, [r4, #12]
 80051f4:	4632      	mov	r2, r6
 80051f6:	463b      	mov	r3, r7
 80051f8:	4628      	mov	r0, r5
 80051fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051fe:	f000 b853 	b.w	80052a8 <_write_r>

08005202 <__sseek>:
 8005202:	b510      	push	{r4, lr}
 8005204:	460c      	mov	r4, r1
 8005206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800520a:	f000 f829 	bl	8005260 <_lseek_r>
 800520e:	1c43      	adds	r3, r0, #1
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	bf15      	itete	ne
 8005214:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005216:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800521a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800521e:	81a3      	strheq	r3, [r4, #12]
 8005220:	bf18      	it	ne
 8005222:	81a3      	strhne	r3, [r4, #12]
 8005224:	bd10      	pop	{r4, pc}

08005226 <__sclose>:
 8005226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522a:	f000 b809 	b.w	8005240 <_close_r>

0800522e <memset>:
 800522e:	4402      	add	r2, r0
 8005230:	4603      	mov	r3, r0
 8005232:	4293      	cmp	r3, r2
 8005234:	d100      	bne.n	8005238 <memset+0xa>
 8005236:	4770      	bx	lr
 8005238:	f803 1b01 	strb.w	r1, [r3], #1
 800523c:	e7f9      	b.n	8005232 <memset+0x4>
	...

08005240 <_close_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4d06      	ldr	r5, [pc, #24]	@ (800525c <_close_r+0x1c>)
 8005244:	2300      	movs	r3, #0
 8005246:	4604      	mov	r4, r0
 8005248:	4608      	mov	r0, r1
 800524a:	602b      	str	r3, [r5, #0]
 800524c:	f7fb fa49 	bl	80006e2 <_close>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_close_r+0x1a>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b103      	cbz	r3, 800525a <_close_r+0x1a>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	200006f8 	.word	0x200006f8

08005260 <_lseek_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4d07      	ldr	r5, [pc, #28]	@ (8005280 <_lseek_r+0x20>)
 8005264:	4604      	mov	r4, r0
 8005266:	4608      	mov	r0, r1
 8005268:	4611      	mov	r1, r2
 800526a:	2200      	movs	r2, #0
 800526c:	602a      	str	r2, [r5, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	f7fb fa5e 	bl	8000730 <_lseek>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d102      	bne.n	800527e <_lseek_r+0x1e>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	b103      	cbz	r3, 800527e <_lseek_r+0x1e>
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	bd38      	pop	{r3, r4, r5, pc}
 8005280:	200006f8 	.word	0x200006f8

08005284 <_read_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4d07      	ldr	r5, [pc, #28]	@ (80052a4 <_read_r+0x20>)
 8005288:	4604      	mov	r4, r0
 800528a:	4608      	mov	r0, r1
 800528c:	4611      	mov	r1, r2
 800528e:	2200      	movs	r2, #0
 8005290:	602a      	str	r2, [r5, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	f7fb fa08 	bl	80006a8 <_read>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_read_r+0x1e>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_read_r+0x1e>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	200006f8 	.word	0x200006f8

080052a8 <_write_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d07      	ldr	r5, [pc, #28]	@ (80052c8 <_write_r+0x20>)
 80052ac:	4604      	mov	r4, r0
 80052ae:	4608      	mov	r0, r1
 80052b0:	4611      	mov	r1, r2
 80052b2:	2200      	movs	r2, #0
 80052b4:	602a      	str	r2, [r5, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f7fb f8d9 	bl	800046e <_write>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_write_r+0x1e>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_write_r+0x1e>
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	200006f8 	.word	0x200006f8

080052cc <__errno>:
 80052cc:	4b01      	ldr	r3, [pc, #4]	@ (80052d4 <__errno+0x8>)
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000018 	.word	0x20000018

080052d8 <__libc_init_array>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	4d0d      	ldr	r5, [pc, #52]	@ (8005310 <__libc_init_array+0x38>)
 80052dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005314 <__libc_init_array+0x3c>)
 80052de:	1b64      	subs	r4, r4, r5
 80052e0:	10a4      	asrs	r4, r4, #2
 80052e2:	2600      	movs	r6, #0
 80052e4:	42a6      	cmp	r6, r4
 80052e6:	d109      	bne.n	80052fc <__libc_init_array+0x24>
 80052e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005318 <__libc_init_array+0x40>)
 80052ea:	4c0c      	ldr	r4, [pc, #48]	@ (800531c <__libc_init_array+0x44>)
 80052ec:	f000 fdc6 	bl	8005e7c <_init>
 80052f0:	1b64      	subs	r4, r4, r5
 80052f2:	10a4      	asrs	r4, r4, #2
 80052f4:	2600      	movs	r6, #0
 80052f6:	42a6      	cmp	r6, r4
 80052f8:	d105      	bne.n	8005306 <__libc_init_array+0x2e>
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005300:	4798      	blx	r3
 8005302:	3601      	adds	r6, #1
 8005304:	e7ee      	b.n	80052e4 <__libc_init_array+0xc>
 8005306:	f855 3b04 	ldr.w	r3, [r5], #4
 800530a:	4798      	blx	r3
 800530c:	3601      	adds	r6, #1
 800530e:	e7f2      	b.n	80052f6 <__libc_init_array+0x1e>
 8005310:	08005f44 	.word	0x08005f44
 8005314:	08005f44 	.word	0x08005f44
 8005318:	08005f44 	.word	0x08005f44
 800531c:	08005f48 	.word	0x08005f48

08005320 <__retarget_lock_init_recursive>:
 8005320:	4770      	bx	lr

08005322 <__retarget_lock_acquire_recursive>:
 8005322:	4770      	bx	lr

08005324 <__retarget_lock_release_recursive>:
 8005324:	4770      	bx	lr

08005326 <memcpy>:
 8005326:	440a      	add	r2, r1
 8005328:	4291      	cmp	r1, r2
 800532a:	f100 33ff 	add.w	r3, r0, #4294967295
 800532e:	d100      	bne.n	8005332 <memcpy+0xc>
 8005330:	4770      	bx	lr
 8005332:	b510      	push	{r4, lr}
 8005334:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800533c:	4291      	cmp	r1, r2
 800533e:	d1f9      	bne.n	8005334 <memcpy+0xe>
 8005340:	bd10      	pop	{r4, pc}
	...

08005344 <_free_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4605      	mov	r5, r0
 8005348:	2900      	cmp	r1, #0
 800534a:	d041      	beq.n	80053d0 <_free_r+0x8c>
 800534c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005350:	1f0c      	subs	r4, r1, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	bfb8      	it	lt
 8005356:	18e4      	addlt	r4, r4, r3
 8005358:	f000 f8e0 	bl	800551c <__malloc_lock>
 800535c:	4a1d      	ldr	r2, [pc, #116]	@ (80053d4 <_free_r+0x90>)
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	b933      	cbnz	r3, 8005370 <_free_r+0x2c>
 8005362:	6063      	str	r3, [r4, #4]
 8005364:	6014      	str	r4, [r2, #0]
 8005366:	4628      	mov	r0, r5
 8005368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800536c:	f000 b8dc 	b.w	8005528 <__malloc_unlock>
 8005370:	42a3      	cmp	r3, r4
 8005372:	d908      	bls.n	8005386 <_free_r+0x42>
 8005374:	6820      	ldr	r0, [r4, #0]
 8005376:	1821      	adds	r1, r4, r0
 8005378:	428b      	cmp	r3, r1
 800537a:	bf01      	itttt	eq
 800537c:	6819      	ldreq	r1, [r3, #0]
 800537e:	685b      	ldreq	r3, [r3, #4]
 8005380:	1809      	addeq	r1, r1, r0
 8005382:	6021      	streq	r1, [r4, #0]
 8005384:	e7ed      	b.n	8005362 <_free_r+0x1e>
 8005386:	461a      	mov	r2, r3
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	b10b      	cbz	r3, 8005390 <_free_r+0x4c>
 800538c:	42a3      	cmp	r3, r4
 800538e:	d9fa      	bls.n	8005386 <_free_r+0x42>
 8005390:	6811      	ldr	r1, [r2, #0]
 8005392:	1850      	adds	r0, r2, r1
 8005394:	42a0      	cmp	r0, r4
 8005396:	d10b      	bne.n	80053b0 <_free_r+0x6c>
 8005398:	6820      	ldr	r0, [r4, #0]
 800539a:	4401      	add	r1, r0
 800539c:	1850      	adds	r0, r2, r1
 800539e:	4283      	cmp	r3, r0
 80053a0:	6011      	str	r1, [r2, #0]
 80053a2:	d1e0      	bne.n	8005366 <_free_r+0x22>
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	6053      	str	r3, [r2, #4]
 80053aa:	4408      	add	r0, r1
 80053ac:	6010      	str	r0, [r2, #0]
 80053ae:	e7da      	b.n	8005366 <_free_r+0x22>
 80053b0:	d902      	bls.n	80053b8 <_free_r+0x74>
 80053b2:	230c      	movs	r3, #12
 80053b4:	602b      	str	r3, [r5, #0]
 80053b6:	e7d6      	b.n	8005366 <_free_r+0x22>
 80053b8:	6820      	ldr	r0, [r4, #0]
 80053ba:	1821      	adds	r1, r4, r0
 80053bc:	428b      	cmp	r3, r1
 80053be:	bf04      	itt	eq
 80053c0:	6819      	ldreq	r1, [r3, #0]
 80053c2:	685b      	ldreq	r3, [r3, #4]
 80053c4:	6063      	str	r3, [r4, #4]
 80053c6:	bf04      	itt	eq
 80053c8:	1809      	addeq	r1, r1, r0
 80053ca:	6021      	streq	r1, [r4, #0]
 80053cc:	6054      	str	r4, [r2, #4]
 80053ce:	e7ca      	b.n	8005366 <_free_r+0x22>
 80053d0:	bd38      	pop	{r3, r4, r5, pc}
 80053d2:	bf00      	nop
 80053d4:	20000704 	.word	0x20000704

080053d8 <sbrk_aligned>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	4e0f      	ldr	r6, [pc, #60]	@ (8005418 <sbrk_aligned+0x40>)
 80053dc:	460c      	mov	r4, r1
 80053de:	6831      	ldr	r1, [r6, #0]
 80053e0:	4605      	mov	r5, r0
 80053e2:	b911      	cbnz	r1, 80053ea <sbrk_aligned+0x12>
 80053e4:	f000 fcb6 	bl	8005d54 <_sbrk_r>
 80053e8:	6030      	str	r0, [r6, #0]
 80053ea:	4621      	mov	r1, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 fcb1 	bl	8005d54 <_sbrk_r>
 80053f2:	1c43      	adds	r3, r0, #1
 80053f4:	d103      	bne.n	80053fe <sbrk_aligned+0x26>
 80053f6:	f04f 34ff 	mov.w	r4, #4294967295
 80053fa:	4620      	mov	r0, r4
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
 80053fe:	1cc4      	adds	r4, r0, #3
 8005400:	f024 0403 	bic.w	r4, r4, #3
 8005404:	42a0      	cmp	r0, r4
 8005406:	d0f8      	beq.n	80053fa <sbrk_aligned+0x22>
 8005408:	1a21      	subs	r1, r4, r0
 800540a:	4628      	mov	r0, r5
 800540c:	f000 fca2 	bl	8005d54 <_sbrk_r>
 8005410:	3001      	adds	r0, #1
 8005412:	d1f2      	bne.n	80053fa <sbrk_aligned+0x22>
 8005414:	e7ef      	b.n	80053f6 <sbrk_aligned+0x1e>
 8005416:	bf00      	nop
 8005418:	20000700 	.word	0x20000700

0800541c <_malloc_r>:
 800541c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005420:	1ccd      	adds	r5, r1, #3
 8005422:	f025 0503 	bic.w	r5, r5, #3
 8005426:	3508      	adds	r5, #8
 8005428:	2d0c      	cmp	r5, #12
 800542a:	bf38      	it	cc
 800542c:	250c      	movcc	r5, #12
 800542e:	2d00      	cmp	r5, #0
 8005430:	4606      	mov	r6, r0
 8005432:	db01      	blt.n	8005438 <_malloc_r+0x1c>
 8005434:	42a9      	cmp	r1, r5
 8005436:	d904      	bls.n	8005442 <_malloc_r+0x26>
 8005438:	230c      	movs	r3, #12
 800543a:	6033      	str	r3, [r6, #0]
 800543c:	2000      	movs	r0, #0
 800543e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005518 <_malloc_r+0xfc>
 8005446:	f000 f869 	bl	800551c <__malloc_lock>
 800544a:	f8d8 3000 	ldr.w	r3, [r8]
 800544e:	461c      	mov	r4, r3
 8005450:	bb44      	cbnz	r4, 80054a4 <_malloc_r+0x88>
 8005452:	4629      	mov	r1, r5
 8005454:	4630      	mov	r0, r6
 8005456:	f7ff ffbf 	bl	80053d8 <sbrk_aligned>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	4604      	mov	r4, r0
 800545e:	d158      	bne.n	8005512 <_malloc_r+0xf6>
 8005460:	f8d8 4000 	ldr.w	r4, [r8]
 8005464:	4627      	mov	r7, r4
 8005466:	2f00      	cmp	r7, #0
 8005468:	d143      	bne.n	80054f2 <_malloc_r+0xd6>
 800546a:	2c00      	cmp	r4, #0
 800546c:	d04b      	beq.n	8005506 <_malloc_r+0xea>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	4639      	mov	r1, r7
 8005472:	4630      	mov	r0, r6
 8005474:	eb04 0903 	add.w	r9, r4, r3
 8005478:	f000 fc6c 	bl	8005d54 <_sbrk_r>
 800547c:	4581      	cmp	r9, r0
 800547e:	d142      	bne.n	8005506 <_malloc_r+0xea>
 8005480:	6821      	ldr	r1, [r4, #0]
 8005482:	1a6d      	subs	r5, r5, r1
 8005484:	4629      	mov	r1, r5
 8005486:	4630      	mov	r0, r6
 8005488:	f7ff ffa6 	bl	80053d8 <sbrk_aligned>
 800548c:	3001      	adds	r0, #1
 800548e:	d03a      	beq.n	8005506 <_malloc_r+0xea>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	442b      	add	r3, r5
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	f8d8 3000 	ldr.w	r3, [r8]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	bb62      	cbnz	r2, 80054f8 <_malloc_r+0xdc>
 800549e:	f8c8 7000 	str.w	r7, [r8]
 80054a2:	e00f      	b.n	80054c4 <_malloc_r+0xa8>
 80054a4:	6822      	ldr	r2, [r4, #0]
 80054a6:	1b52      	subs	r2, r2, r5
 80054a8:	d420      	bmi.n	80054ec <_malloc_r+0xd0>
 80054aa:	2a0b      	cmp	r2, #11
 80054ac:	d917      	bls.n	80054de <_malloc_r+0xc2>
 80054ae:	1961      	adds	r1, r4, r5
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	6025      	str	r5, [r4, #0]
 80054b4:	bf18      	it	ne
 80054b6:	6059      	strne	r1, [r3, #4]
 80054b8:	6863      	ldr	r3, [r4, #4]
 80054ba:	bf08      	it	eq
 80054bc:	f8c8 1000 	streq.w	r1, [r8]
 80054c0:	5162      	str	r2, [r4, r5]
 80054c2:	604b      	str	r3, [r1, #4]
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 f82f 	bl	8005528 <__malloc_unlock>
 80054ca:	f104 000b 	add.w	r0, r4, #11
 80054ce:	1d23      	adds	r3, r4, #4
 80054d0:	f020 0007 	bic.w	r0, r0, #7
 80054d4:	1ac2      	subs	r2, r0, r3
 80054d6:	bf1c      	itt	ne
 80054d8:	1a1b      	subne	r3, r3, r0
 80054da:	50a3      	strne	r3, [r4, r2]
 80054dc:	e7af      	b.n	800543e <_malloc_r+0x22>
 80054de:	6862      	ldr	r2, [r4, #4]
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	bf0c      	ite	eq
 80054e4:	f8c8 2000 	streq.w	r2, [r8]
 80054e8:	605a      	strne	r2, [r3, #4]
 80054ea:	e7eb      	b.n	80054c4 <_malloc_r+0xa8>
 80054ec:	4623      	mov	r3, r4
 80054ee:	6864      	ldr	r4, [r4, #4]
 80054f0:	e7ae      	b.n	8005450 <_malloc_r+0x34>
 80054f2:	463c      	mov	r4, r7
 80054f4:	687f      	ldr	r7, [r7, #4]
 80054f6:	e7b6      	b.n	8005466 <_malloc_r+0x4a>
 80054f8:	461a      	mov	r2, r3
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	d1fb      	bne.n	80054f8 <_malloc_r+0xdc>
 8005500:	2300      	movs	r3, #0
 8005502:	6053      	str	r3, [r2, #4]
 8005504:	e7de      	b.n	80054c4 <_malloc_r+0xa8>
 8005506:	230c      	movs	r3, #12
 8005508:	6033      	str	r3, [r6, #0]
 800550a:	4630      	mov	r0, r6
 800550c:	f000 f80c 	bl	8005528 <__malloc_unlock>
 8005510:	e794      	b.n	800543c <_malloc_r+0x20>
 8005512:	6005      	str	r5, [r0, #0]
 8005514:	e7d6      	b.n	80054c4 <_malloc_r+0xa8>
 8005516:	bf00      	nop
 8005518:	20000704 	.word	0x20000704

0800551c <__malloc_lock>:
 800551c:	4801      	ldr	r0, [pc, #4]	@ (8005524 <__malloc_lock+0x8>)
 800551e:	f7ff bf00 	b.w	8005322 <__retarget_lock_acquire_recursive>
 8005522:	bf00      	nop
 8005524:	200006fc 	.word	0x200006fc

08005528 <__malloc_unlock>:
 8005528:	4801      	ldr	r0, [pc, #4]	@ (8005530 <__malloc_unlock+0x8>)
 800552a:	f7ff befb 	b.w	8005324 <__retarget_lock_release_recursive>
 800552e:	bf00      	nop
 8005530:	200006fc 	.word	0x200006fc

08005534 <__sfputc_r>:
 8005534:	6893      	ldr	r3, [r2, #8]
 8005536:	3b01      	subs	r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	b410      	push	{r4}
 800553c:	6093      	str	r3, [r2, #8]
 800553e:	da08      	bge.n	8005552 <__sfputc_r+0x1e>
 8005540:	6994      	ldr	r4, [r2, #24]
 8005542:	42a3      	cmp	r3, r4
 8005544:	db01      	blt.n	800554a <__sfputc_r+0x16>
 8005546:	290a      	cmp	r1, #10
 8005548:	d103      	bne.n	8005552 <__sfputc_r+0x1e>
 800554a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800554e:	f000 bb6d 	b.w	8005c2c <__swbuf_r>
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	1c58      	adds	r0, r3, #1
 8005556:	6010      	str	r0, [r2, #0]
 8005558:	7019      	strb	r1, [r3, #0]
 800555a:	4608      	mov	r0, r1
 800555c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005560:	4770      	bx	lr

08005562 <__sfputs_r>:
 8005562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005564:	4606      	mov	r6, r0
 8005566:	460f      	mov	r7, r1
 8005568:	4614      	mov	r4, r2
 800556a:	18d5      	adds	r5, r2, r3
 800556c:	42ac      	cmp	r4, r5
 800556e:	d101      	bne.n	8005574 <__sfputs_r+0x12>
 8005570:	2000      	movs	r0, #0
 8005572:	e007      	b.n	8005584 <__sfputs_r+0x22>
 8005574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005578:	463a      	mov	r2, r7
 800557a:	4630      	mov	r0, r6
 800557c:	f7ff ffda 	bl	8005534 <__sfputc_r>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d1f3      	bne.n	800556c <__sfputs_r+0xa>
 8005584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005588 <_vfiprintf_r>:
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	460d      	mov	r5, r1
 800558e:	b09d      	sub	sp, #116	@ 0x74
 8005590:	4614      	mov	r4, r2
 8005592:	4698      	mov	r8, r3
 8005594:	4606      	mov	r6, r0
 8005596:	b118      	cbz	r0, 80055a0 <_vfiprintf_r+0x18>
 8005598:	6a03      	ldr	r3, [r0, #32]
 800559a:	b90b      	cbnz	r3, 80055a0 <_vfiprintf_r+0x18>
 800559c:	f7ff fdbc 	bl	8005118 <__sinit>
 80055a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055a2:	07d9      	lsls	r1, r3, #31
 80055a4:	d405      	bmi.n	80055b2 <_vfiprintf_r+0x2a>
 80055a6:	89ab      	ldrh	r3, [r5, #12]
 80055a8:	059a      	lsls	r2, r3, #22
 80055aa:	d402      	bmi.n	80055b2 <_vfiprintf_r+0x2a>
 80055ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055ae:	f7ff feb8 	bl	8005322 <__retarget_lock_acquire_recursive>
 80055b2:	89ab      	ldrh	r3, [r5, #12]
 80055b4:	071b      	lsls	r3, r3, #28
 80055b6:	d501      	bpl.n	80055bc <_vfiprintf_r+0x34>
 80055b8:	692b      	ldr	r3, [r5, #16]
 80055ba:	b99b      	cbnz	r3, 80055e4 <_vfiprintf_r+0x5c>
 80055bc:	4629      	mov	r1, r5
 80055be:	4630      	mov	r0, r6
 80055c0:	f000 fb72 	bl	8005ca8 <__swsetup_r>
 80055c4:	b170      	cbz	r0, 80055e4 <_vfiprintf_r+0x5c>
 80055c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80055c8:	07dc      	lsls	r4, r3, #31
 80055ca:	d504      	bpl.n	80055d6 <_vfiprintf_r+0x4e>
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295
 80055d0:	b01d      	add	sp, #116	@ 0x74
 80055d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d6:	89ab      	ldrh	r3, [r5, #12]
 80055d8:	0598      	lsls	r0, r3, #22
 80055da:	d4f7      	bmi.n	80055cc <_vfiprintf_r+0x44>
 80055dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80055de:	f7ff fea1 	bl	8005324 <__retarget_lock_release_recursive>
 80055e2:	e7f3      	b.n	80055cc <_vfiprintf_r+0x44>
 80055e4:	2300      	movs	r3, #0
 80055e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80055e8:	2320      	movs	r3, #32
 80055ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80055f2:	2330      	movs	r3, #48	@ 0x30
 80055f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80057a4 <_vfiprintf_r+0x21c>
 80055f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055fc:	f04f 0901 	mov.w	r9, #1
 8005600:	4623      	mov	r3, r4
 8005602:	469a      	mov	sl, r3
 8005604:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005608:	b10a      	cbz	r2, 800560e <_vfiprintf_r+0x86>
 800560a:	2a25      	cmp	r2, #37	@ 0x25
 800560c:	d1f9      	bne.n	8005602 <_vfiprintf_r+0x7a>
 800560e:	ebba 0b04 	subs.w	fp, sl, r4
 8005612:	d00b      	beq.n	800562c <_vfiprintf_r+0xa4>
 8005614:	465b      	mov	r3, fp
 8005616:	4622      	mov	r2, r4
 8005618:	4629      	mov	r1, r5
 800561a:	4630      	mov	r0, r6
 800561c:	f7ff ffa1 	bl	8005562 <__sfputs_r>
 8005620:	3001      	adds	r0, #1
 8005622:	f000 80a7 	beq.w	8005774 <_vfiprintf_r+0x1ec>
 8005626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005628:	445a      	add	r2, fp
 800562a:	9209      	str	r2, [sp, #36]	@ 0x24
 800562c:	f89a 3000 	ldrb.w	r3, [sl]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 809f 	beq.w	8005774 <_vfiprintf_r+0x1ec>
 8005636:	2300      	movs	r3, #0
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005640:	f10a 0a01 	add.w	sl, sl, #1
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	9307      	str	r3, [sp, #28]
 8005648:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800564c:	931a      	str	r3, [sp, #104]	@ 0x68
 800564e:	4654      	mov	r4, sl
 8005650:	2205      	movs	r2, #5
 8005652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005656:	4853      	ldr	r0, [pc, #332]	@ (80057a4 <_vfiprintf_r+0x21c>)
 8005658:	f7fa fdc2 	bl	80001e0 <memchr>
 800565c:	9a04      	ldr	r2, [sp, #16]
 800565e:	b9d8      	cbnz	r0, 8005698 <_vfiprintf_r+0x110>
 8005660:	06d1      	lsls	r1, r2, #27
 8005662:	bf44      	itt	mi
 8005664:	2320      	movmi	r3, #32
 8005666:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800566a:	0713      	lsls	r3, r2, #28
 800566c:	bf44      	itt	mi
 800566e:	232b      	movmi	r3, #43	@ 0x2b
 8005670:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005674:	f89a 3000 	ldrb.w	r3, [sl]
 8005678:	2b2a      	cmp	r3, #42	@ 0x2a
 800567a:	d015      	beq.n	80056a8 <_vfiprintf_r+0x120>
 800567c:	9a07      	ldr	r2, [sp, #28]
 800567e:	4654      	mov	r4, sl
 8005680:	2000      	movs	r0, #0
 8005682:	f04f 0c0a 	mov.w	ip, #10
 8005686:	4621      	mov	r1, r4
 8005688:	f811 3b01 	ldrb.w	r3, [r1], #1
 800568c:	3b30      	subs	r3, #48	@ 0x30
 800568e:	2b09      	cmp	r3, #9
 8005690:	d94b      	bls.n	800572a <_vfiprintf_r+0x1a2>
 8005692:	b1b0      	cbz	r0, 80056c2 <_vfiprintf_r+0x13a>
 8005694:	9207      	str	r2, [sp, #28]
 8005696:	e014      	b.n	80056c2 <_vfiprintf_r+0x13a>
 8005698:	eba0 0308 	sub.w	r3, r0, r8
 800569c:	fa09 f303 	lsl.w	r3, r9, r3
 80056a0:	4313      	orrs	r3, r2
 80056a2:	9304      	str	r3, [sp, #16]
 80056a4:	46a2      	mov	sl, r4
 80056a6:	e7d2      	b.n	800564e <_vfiprintf_r+0xc6>
 80056a8:	9b03      	ldr	r3, [sp, #12]
 80056aa:	1d19      	adds	r1, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	9103      	str	r1, [sp, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bfbb      	ittet	lt
 80056b4:	425b      	neglt	r3, r3
 80056b6:	f042 0202 	orrlt.w	r2, r2, #2
 80056ba:	9307      	strge	r3, [sp, #28]
 80056bc:	9307      	strlt	r3, [sp, #28]
 80056be:	bfb8      	it	lt
 80056c0:	9204      	strlt	r2, [sp, #16]
 80056c2:	7823      	ldrb	r3, [r4, #0]
 80056c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80056c6:	d10a      	bne.n	80056de <_vfiprintf_r+0x156>
 80056c8:	7863      	ldrb	r3, [r4, #1]
 80056ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80056cc:	d132      	bne.n	8005734 <_vfiprintf_r+0x1ac>
 80056ce:	9b03      	ldr	r3, [sp, #12]
 80056d0:	1d1a      	adds	r2, r3, #4
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	9203      	str	r2, [sp, #12]
 80056d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056da:	3402      	adds	r4, #2
 80056dc:	9305      	str	r3, [sp, #20]
 80056de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80057b4 <_vfiprintf_r+0x22c>
 80056e2:	7821      	ldrb	r1, [r4, #0]
 80056e4:	2203      	movs	r2, #3
 80056e6:	4650      	mov	r0, sl
 80056e8:	f7fa fd7a 	bl	80001e0 <memchr>
 80056ec:	b138      	cbz	r0, 80056fe <_vfiprintf_r+0x176>
 80056ee:	9b04      	ldr	r3, [sp, #16]
 80056f0:	eba0 000a 	sub.w	r0, r0, sl
 80056f4:	2240      	movs	r2, #64	@ 0x40
 80056f6:	4082      	lsls	r2, r0
 80056f8:	4313      	orrs	r3, r2
 80056fa:	3401      	adds	r4, #1
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005702:	4829      	ldr	r0, [pc, #164]	@ (80057a8 <_vfiprintf_r+0x220>)
 8005704:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005708:	2206      	movs	r2, #6
 800570a:	f7fa fd69 	bl	80001e0 <memchr>
 800570e:	2800      	cmp	r0, #0
 8005710:	d03f      	beq.n	8005792 <_vfiprintf_r+0x20a>
 8005712:	4b26      	ldr	r3, [pc, #152]	@ (80057ac <_vfiprintf_r+0x224>)
 8005714:	bb1b      	cbnz	r3, 800575e <_vfiprintf_r+0x1d6>
 8005716:	9b03      	ldr	r3, [sp, #12]
 8005718:	3307      	adds	r3, #7
 800571a:	f023 0307 	bic.w	r3, r3, #7
 800571e:	3308      	adds	r3, #8
 8005720:	9303      	str	r3, [sp, #12]
 8005722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005724:	443b      	add	r3, r7
 8005726:	9309      	str	r3, [sp, #36]	@ 0x24
 8005728:	e76a      	b.n	8005600 <_vfiprintf_r+0x78>
 800572a:	fb0c 3202 	mla	r2, ip, r2, r3
 800572e:	460c      	mov	r4, r1
 8005730:	2001      	movs	r0, #1
 8005732:	e7a8      	b.n	8005686 <_vfiprintf_r+0xfe>
 8005734:	2300      	movs	r3, #0
 8005736:	3401      	adds	r4, #1
 8005738:	9305      	str	r3, [sp, #20]
 800573a:	4619      	mov	r1, r3
 800573c:	f04f 0c0a 	mov.w	ip, #10
 8005740:	4620      	mov	r0, r4
 8005742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005746:	3a30      	subs	r2, #48	@ 0x30
 8005748:	2a09      	cmp	r2, #9
 800574a:	d903      	bls.n	8005754 <_vfiprintf_r+0x1cc>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0c6      	beq.n	80056de <_vfiprintf_r+0x156>
 8005750:	9105      	str	r1, [sp, #20]
 8005752:	e7c4      	b.n	80056de <_vfiprintf_r+0x156>
 8005754:	fb0c 2101 	mla	r1, ip, r1, r2
 8005758:	4604      	mov	r4, r0
 800575a:	2301      	movs	r3, #1
 800575c:	e7f0      	b.n	8005740 <_vfiprintf_r+0x1b8>
 800575e:	ab03      	add	r3, sp, #12
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	462a      	mov	r2, r5
 8005764:	4b12      	ldr	r3, [pc, #72]	@ (80057b0 <_vfiprintf_r+0x228>)
 8005766:	a904      	add	r1, sp, #16
 8005768:	4630      	mov	r0, r6
 800576a:	f3af 8000 	nop.w
 800576e:	4607      	mov	r7, r0
 8005770:	1c78      	adds	r0, r7, #1
 8005772:	d1d6      	bne.n	8005722 <_vfiprintf_r+0x19a>
 8005774:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005776:	07d9      	lsls	r1, r3, #31
 8005778:	d405      	bmi.n	8005786 <_vfiprintf_r+0x1fe>
 800577a:	89ab      	ldrh	r3, [r5, #12]
 800577c:	059a      	lsls	r2, r3, #22
 800577e:	d402      	bmi.n	8005786 <_vfiprintf_r+0x1fe>
 8005780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005782:	f7ff fdcf 	bl	8005324 <__retarget_lock_release_recursive>
 8005786:	89ab      	ldrh	r3, [r5, #12]
 8005788:	065b      	lsls	r3, r3, #25
 800578a:	f53f af1f 	bmi.w	80055cc <_vfiprintf_r+0x44>
 800578e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005790:	e71e      	b.n	80055d0 <_vfiprintf_r+0x48>
 8005792:	ab03      	add	r3, sp, #12
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	462a      	mov	r2, r5
 8005798:	4b05      	ldr	r3, [pc, #20]	@ (80057b0 <_vfiprintf_r+0x228>)
 800579a:	a904      	add	r1, sp, #16
 800579c:	4630      	mov	r0, r6
 800579e:	f000 f879 	bl	8005894 <_printf_i>
 80057a2:	e7e4      	b.n	800576e <_vfiprintf_r+0x1e6>
 80057a4:	08005f08 	.word	0x08005f08
 80057a8:	08005f12 	.word	0x08005f12
 80057ac:	00000000 	.word	0x00000000
 80057b0:	08005563 	.word	0x08005563
 80057b4:	08005f0e 	.word	0x08005f0e

080057b8 <_printf_common>:
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057bc:	4616      	mov	r6, r2
 80057be:	4698      	mov	r8, r3
 80057c0:	688a      	ldr	r2, [r1, #8]
 80057c2:	690b      	ldr	r3, [r1, #16]
 80057c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057c8:	4293      	cmp	r3, r2
 80057ca:	bfb8      	it	lt
 80057cc:	4613      	movlt	r3, r2
 80057ce:	6033      	str	r3, [r6, #0]
 80057d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057d4:	4607      	mov	r7, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	b10a      	cbz	r2, 80057de <_printf_common+0x26>
 80057da:	3301      	adds	r3, #1
 80057dc:	6033      	str	r3, [r6, #0]
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	0699      	lsls	r1, r3, #26
 80057e2:	bf42      	ittt	mi
 80057e4:	6833      	ldrmi	r3, [r6, #0]
 80057e6:	3302      	addmi	r3, #2
 80057e8:	6033      	strmi	r3, [r6, #0]
 80057ea:	6825      	ldr	r5, [r4, #0]
 80057ec:	f015 0506 	ands.w	r5, r5, #6
 80057f0:	d106      	bne.n	8005800 <_printf_common+0x48>
 80057f2:	f104 0a19 	add.w	sl, r4, #25
 80057f6:	68e3      	ldr	r3, [r4, #12]
 80057f8:	6832      	ldr	r2, [r6, #0]
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	42ab      	cmp	r3, r5
 80057fe:	dc26      	bgt.n	800584e <_printf_common+0x96>
 8005800:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	3b00      	subs	r3, #0
 8005808:	bf18      	it	ne
 800580a:	2301      	movne	r3, #1
 800580c:	0692      	lsls	r2, r2, #26
 800580e:	d42b      	bmi.n	8005868 <_printf_common+0xb0>
 8005810:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005814:	4641      	mov	r1, r8
 8005816:	4638      	mov	r0, r7
 8005818:	47c8      	blx	r9
 800581a:	3001      	adds	r0, #1
 800581c:	d01e      	beq.n	800585c <_printf_common+0xa4>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	6922      	ldr	r2, [r4, #16]
 8005822:	f003 0306 	and.w	r3, r3, #6
 8005826:	2b04      	cmp	r3, #4
 8005828:	bf02      	ittt	eq
 800582a:	68e5      	ldreq	r5, [r4, #12]
 800582c:	6833      	ldreq	r3, [r6, #0]
 800582e:	1aed      	subeq	r5, r5, r3
 8005830:	68a3      	ldr	r3, [r4, #8]
 8005832:	bf0c      	ite	eq
 8005834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005838:	2500      	movne	r5, #0
 800583a:	4293      	cmp	r3, r2
 800583c:	bfc4      	itt	gt
 800583e:	1a9b      	subgt	r3, r3, r2
 8005840:	18ed      	addgt	r5, r5, r3
 8005842:	2600      	movs	r6, #0
 8005844:	341a      	adds	r4, #26
 8005846:	42b5      	cmp	r5, r6
 8005848:	d11a      	bne.n	8005880 <_printf_common+0xc8>
 800584a:	2000      	movs	r0, #0
 800584c:	e008      	b.n	8005860 <_printf_common+0xa8>
 800584e:	2301      	movs	r3, #1
 8005850:	4652      	mov	r2, sl
 8005852:	4641      	mov	r1, r8
 8005854:	4638      	mov	r0, r7
 8005856:	47c8      	blx	r9
 8005858:	3001      	adds	r0, #1
 800585a:	d103      	bne.n	8005864 <_printf_common+0xac>
 800585c:	f04f 30ff 	mov.w	r0, #4294967295
 8005860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005864:	3501      	adds	r5, #1
 8005866:	e7c6      	b.n	80057f6 <_printf_common+0x3e>
 8005868:	18e1      	adds	r1, r4, r3
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	2030      	movs	r0, #48	@ 0x30
 800586e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005872:	4422      	add	r2, r4
 8005874:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005878:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800587c:	3302      	adds	r3, #2
 800587e:	e7c7      	b.n	8005810 <_printf_common+0x58>
 8005880:	2301      	movs	r3, #1
 8005882:	4622      	mov	r2, r4
 8005884:	4641      	mov	r1, r8
 8005886:	4638      	mov	r0, r7
 8005888:	47c8      	blx	r9
 800588a:	3001      	adds	r0, #1
 800588c:	d0e6      	beq.n	800585c <_printf_common+0xa4>
 800588e:	3601      	adds	r6, #1
 8005890:	e7d9      	b.n	8005846 <_printf_common+0x8e>
	...

08005894 <_printf_i>:
 8005894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005898:	7e0f      	ldrb	r7, [r1, #24]
 800589a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800589c:	2f78      	cmp	r7, #120	@ 0x78
 800589e:	4691      	mov	r9, r2
 80058a0:	4680      	mov	r8, r0
 80058a2:	460c      	mov	r4, r1
 80058a4:	469a      	mov	sl, r3
 80058a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058aa:	d807      	bhi.n	80058bc <_printf_i+0x28>
 80058ac:	2f62      	cmp	r7, #98	@ 0x62
 80058ae:	d80a      	bhi.n	80058c6 <_printf_i+0x32>
 80058b0:	2f00      	cmp	r7, #0
 80058b2:	f000 80d2 	beq.w	8005a5a <_printf_i+0x1c6>
 80058b6:	2f58      	cmp	r7, #88	@ 0x58
 80058b8:	f000 80b9 	beq.w	8005a2e <_printf_i+0x19a>
 80058bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058c4:	e03a      	b.n	800593c <_printf_i+0xa8>
 80058c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058ca:	2b15      	cmp	r3, #21
 80058cc:	d8f6      	bhi.n	80058bc <_printf_i+0x28>
 80058ce:	a101      	add	r1, pc, #4	@ (adr r1, 80058d4 <_printf_i+0x40>)
 80058d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058d4:	0800592d 	.word	0x0800592d
 80058d8:	08005941 	.word	0x08005941
 80058dc:	080058bd 	.word	0x080058bd
 80058e0:	080058bd 	.word	0x080058bd
 80058e4:	080058bd 	.word	0x080058bd
 80058e8:	080058bd 	.word	0x080058bd
 80058ec:	08005941 	.word	0x08005941
 80058f0:	080058bd 	.word	0x080058bd
 80058f4:	080058bd 	.word	0x080058bd
 80058f8:	080058bd 	.word	0x080058bd
 80058fc:	080058bd 	.word	0x080058bd
 8005900:	08005a41 	.word	0x08005a41
 8005904:	0800596b 	.word	0x0800596b
 8005908:	080059fb 	.word	0x080059fb
 800590c:	080058bd 	.word	0x080058bd
 8005910:	080058bd 	.word	0x080058bd
 8005914:	08005a63 	.word	0x08005a63
 8005918:	080058bd 	.word	0x080058bd
 800591c:	0800596b 	.word	0x0800596b
 8005920:	080058bd 	.word	0x080058bd
 8005924:	080058bd 	.word	0x080058bd
 8005928:	08005a03 	.word	0x08005a03
 800592c:	6833      	ldr	r3, [r6, #0]
 800592e:	1d1a      	adds	r2, r3, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6032      	str	r2, [r6, #0]
 8005934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005938:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800593c:	2301      	movs	r3, #1
 800593e:	e09d      	b.n	8005a7c <_printf_i+0x1e8>
 8005940:	6833      	ldr	r3, [r6, #0]
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	1d19      	adds	r1, r3, #4
 8005946:	6031      	str	r1, [r6, #0]
 8005948:	0606      	lsls	r6, r0, #24
 800594a:	d501      	bpl.n	8005950 <_printf_i+0xbc>
 800594c:	681d      	ldr	r5, [r3, #0]
 800594e:	e003      	b.n	8005958 <_printf_i+0xc4>
 8005950:	0645      	lsls	r5, r0, #25
 8005952:	d5fb      	bpl.n	800594c <_printf_i+0xb8>
 8005954:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005958:	2d00      	cmp	r5, #0
 800595a:	da03      	bge.n	8005964 <_printf_i+0xd0>
 800595c:	232d      	movs	r3, #45	@ 0x2d
 800595e:	426d      	negs	r5, r5
 8005960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005964:	4859      	ldr	r0, [pc, #356]	@ (8005acc <_printf_i+0x238>)
 8005966:	230a      	movs	r3, #10
 8005968:	e011      	b.n	800598e <_printf_i+0xfa>
 800596a:	6821      	ldr	r1, [r4, #0]
 800596c:	6833      	ldr	r3, [r6, #0]
 800596e:	0608      	lsls	r0, r1, #24
 8005970:	f853 5b04 	ldr.w	r5, [r3], #4
 8005974:	d402      	bmi.n	800597c <_printf_i+0xe8>
 8005976:	0649      	lsls	r1, r1, #25
 8005978:	bf48      	it	mi
 800597a:	b2ad      	uxthmi	r5, r5
 800597c:	2f6f      	cmp	r7, #111	@ 0x6f
 800597e:	4853      	ldr	r0, [pc, #332]	@ (8005acc <_printf_i+0x238>)
 8005980:	6033      	str	r3, [r6, #0]
 8005982:	bf14      	ite	ne
 8005984:	230a      	movne	r3, #10
 8005986:	2308      	moveq	r3, #8
 8005988:	2100      	movs	r1, #0
 800598a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800598e:	6866      	ldr	r6, [r4, #4]
 8005990:	60a6      	str	r6, [r4, #8]
 8005992:	2e00      	cmp	r6, #0
 8005994:	bfa2      	ittt	ge
 8005996:	6821      	ldrge	r1, [r4, #0]
 8005998:	f021 0104 	bicge.w	r1, r1, #4
 800599c:	6021      	strge	r1, [r4, #0]
 800599e:	b90d      	cbnz	r5, 80059a4 <_printf_i+0x110>
 80059a0:	2e00      	cmp	r6, #0
 80059a2:	d04b      	beq.n	8005a3c <_printf_i+0x1a8>
 80059a4:	4616      	mov	r6, r2
 80059a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80059aa:	fb03 5711 	mls	r7, r3, r1, r5
 80059ae:	5dc7      	ldrb	r7, [r0, r7]
 80059b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059b4:	462f      	mov	r7, r5
 80059b6:	42bb      	cmp	r3, r7
 80059b8:	460d      	mov	r5, r1
 80059ba:	d9f4      	bls.n	80059a6 <_printf_i+0x112>
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d10b      	bne.n	80059d8 <_printf_i+0x144>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	07df      	lsls	r7, r3, #31
 80059c4:	d508      	bpl.n	80059d8 <_printf_i+0x144>
 80059c6:	6923      	ldr	r3, [r4, #16]
 80059c8:	6861      	ldr	r1, [r4, #4]
 80059ca:	4299      	cmp	r1, r3
 80059cc:	bfde      	ittt	le
 80059ce:	2330      	movle	r3, #48	@ 0x30
 80059d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059d8:	1b92      	subs	r2, r2, r6
 80059da:	6122      	str	r2, [r4, #16]
 80059dc:	f8cd a000 	str.w	sl, [sp]
 80059e0:	464b      	mov	r3, r9
 80059e2:	aa03      	add	r2, sp, #12
 80059e4:	4621      	mov	r1, r4
 80059e6:	4640      	mov	r0, r8
 80059e8:	f7ff fee6 	bl	80057b8 <_printf_common>
 80059ec:	3001      	adds	r0, #1
 80059ee:	d14a      	bne.n	8005a86 <_printf_i+0x1f2>
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	b004      	add	sp, #16
 80059f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	f043 0320 	orr.w	r3, r3, #32
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	4833      	ldr	r0, [pc, #204]	@ (8005ad0 <_printf_i+0x23c>)
 8005a04:	2778      	movs	r7, #120	@ 0x78
 8005a06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	6831      	ldr	r1, [r6, #0]
 8005a0e:	061f      	lsls	r7, r3, #24
 8005a10:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a14:	d402      	bmi.n	8005a1c <_printf_i+0x188>
 8005a16:	065f      	lsls	r7, r3, #25
 8005a18:	bf48      	it	mi
 8005a1a:	b2ad      	uxthmi	r5, r5
 8005a1c:	6031      	str	r1, [r6, #0]
 8005a1e:	07d9      	lsls	r1, r3, #31
 8005a20:	bf44      	itt	mi
 8005a22:	f043 0320 	orrmi.w	r3, r3, #32
 8005a26:	6023      	strmi	r3, [r4, #0]
 8005a28:	b11d      	cbz	r5, 8005a32 <_printf_i+0x19e>
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	e7ac      	b.n	8005988 <_printf_i+0xf4>
 8005a2e:	4827      	ldr	r0, [pc, #156]	@ (8005acc <_printf_i+0x238>)
 8005a30:	e7e9      	b.n	8005a06 <_printf_i+0x172>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	f023 0320 	bic.w	r3, r3, #32
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	e7f6      	b.n	8005a2a <_printf_i+0x196>
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	e7bd      	b.n	80059bc <_printf_i+0x128>
 8005a40:	6833      	ldr	r3, [r6, #0]
 8005a42:	6825      	ldr	r5, [r4, #0]
 8005a44:	6961      	ldr	r1, [r4, #20]
 8005a46:	1d18      	adds	r0, r3, #4
 8005a48:	6030      	str	r0, [r6, #0]
 8005a4a:	062e      	lsls	r6, r5, #24
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	d501      	bpl.n	8005a54 <_printf_i+0x1c0>
 8005a50:	6019      	str	r1, [r3, #0]
 8005a52:	e002      	b.n	8005a5a <_printf_i+0x1c6>
 8005a54:	0668      	lsls	r0, r5, #25
 8005a56:	d5fb      	bpl.n	8005a50 <_printf_i+0x1bc>
 8005a58:	8019      	strh	r1, [r3, #0]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	6123      	str	r3, [r4, #16]
 8005a5e:	4616      	mov	r6, r2
 8005a60:	e7bc      	b.n	80059dc <_printf_i+0x148>
 8005a62:	6833      	ldr	r3, [r6, #0]
 8005a64:	1d1a      	adds	r2, r3, #4
 8005a66:	6032      	str	r2, [r6, #0]
 8005a68:	681e      	ldr	r6, [r3, #0]
 8005a6a:	6862      	ldr	r2, [r4, #4]
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f7fa fbb6 	bl	80001e0 <memchr>
 8005a74:	b108      	cbz	r0, 8005a7a <_printf_i+0x1e6>
 8005a76:	1b80      	subs	r0, r0, r6
 8005a78:	6060      	str	r0, [r4, #4]
 8005a7a:	6863      	ldr	r3, [r4, #4]
 8005a7c:	6123      	str	r3, [r4, #16]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a84:	e7aa      	b.n	80059dc <_printf_i+0x148>
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	4632      	mov	r2, r6
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	4640      	mov	r0, r8
 8005a8e:	47d0      	blx	sl
 8005a90:	3001      	adds	r0, #1
 8005a92:	d0ad      	beq.n	80059f0 <_printf_i+0x15c>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	079b      	lsls	r3, r3, #30
 8005a98:	d413      	bmi.n	8005ac2 <_printf_i+0x22e>
 8005a9a:	68e0      	ldr	r0, [r4, #12]
 8005a9c:	9b03      	ldr	r3, [sp, #12]
 8005a9e:	4298      	cmp	r0, r3
 8005aa0:	bfb8      	it	lt
 8005aa2:	4618      	movlt	r0, r3
 8005aa4:	e7a6      	b.n	80059f4 <_printf_i+0x160>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	4649      	mov	r1, r9
 8005aac:	4640      	mov	r0, r8
 8005aae:	47d0      	blx	sl
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d09d      	beq.n	80059f0 <_printf_i+0x15c>
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	68e3      	ldr	r3, [r4, #12]
 8005ab8:	9903      	ldr	r1, [sp, #12]
 8005aba:	1a5b      	subs	r3, r3, r1
 8005abc:	42ab      	cmp	r3, r5
 8005abe:	dcf2      	bgt.n	8005aa6 <_printf_i+0x212>
 8005ac0:	e7eb      	b.n	8005a9a <_printf_i+0x206>
 8005ac2:	2500      	movs	r5, #0
 8005ac4:	f104 0619 	add.w	r6, r4, #25
 8005ac8:	e7f5      	b.n	8005ab6 <_printf_i+0x222>
 8005aca:	bf00      	nop
 8005acc:	08005f19 	.word	0x08005f19
 8005ad0:	08005f2a 	.word	0x08005f2a

08005ad4 <__sflush_r>:
 8005ad4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005adc:	0716      	lsls	r6, r2, #28
 8005ade:	4605      	mov	r5, r0
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	d454      	bmi.n	8005b8e <__sflush_r+0xba>
 8005ae4:	684b      	ldr	r3, [r1, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	dc02      	bgt.n	8005af0 <__sflush_r+0x1c>
 8005aea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dd48      	ble.n	8005b82 <__sflush_r+0xae>
 8005af0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005af2:	2e00      	cmp	r6, #0
 8005af4:	d045      	beq.n	8005b82 <__sflush_r+0xae>
 8005af6:	2300      	movs	r3, #0
 8005af8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005afc:	682f      	ldr	r7, [r5, #0]
 8005afe:	6a21      	ldr	r1, [r4, #32]
 8005b00:	602b      	str	r3, [r5, #0]
 8005b02:	d030      	beq.n	8005b66 <__sflush_r+0x92>
 8005b04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	0759      	lsls	r1, r3, #29
 8005b0a:	d505      	bpl.n	8005b18 <__sflush_r+0x44>
 8005b0c:	6863      	ldr	r3, [r4, #4]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b12:	b10b      	cbz	r3, 8005b18 <__sflush_r+0x44>
 8005b14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b16:	1ad2      	subs	r2, r2, r3
 8005b18:	2300      	movs	r3, #0
 8005b1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b1c:	6a21      	ldr	r1, [r4, #32]
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b0      	blx	r6
 8005b22:	1c43      	adds	r3, r0, #1
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	d106      	bne.n	8005b36 <__sflush_r+0x62>
 8005b28:	6829      	ldr	r1, [r5, #0]
 8005b2a:	291d      	cmp	r1, #29
 8005b2c:	d82b      	bhi.n	8005b86 <__sflush_r+0xb2>
 8005b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd8 <__sflush_r+0x104>)
 8005b30:	410a      	asrs	r2, r1
 8005b32:	07d6      	lsls	r6, r2, #31
 8005b34:	d427      	bmi.n	8005b86 <__sflush_r+0xb2>
 8005b36:	2200      	movs	r2, #0
 8005b38:	6062      	str	r2, [r4, #4]
 8005b3a:	04d9      	lsls	r1, r3, #19
 8005b3c:	6922      	ldr	r2, [r4, #16]
 8005b3e:	6022      	str	r2, [r4, #0]
 8005b40:	d504      	bpl.n	8005b4c <__sflush_r+0x78>
 8005b42:	1c42      	adds	r2, r0, #1
 8005b44:	d101      	bne.n	8005b4a <__sflush_r+0x76>
 8005b46:	682b      	ldr	r3, [r5, #0]
 8005b48:	b903      	cbnz	r3, 8005b4c <__sflush_r+0x78>
 8005b4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b4e:	602f      	str	r7, [r5, #0]
 8005b50:	b1b9      	cbz	r1, 8005b82 <__sflush_r+0xae>
 8005b52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b56:	4299      	cmp	r1, r3
 8005b58:	d002      	beq.n	8005b60 <__sflush_r+0x8c>
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f7ff fbf2 	bl	8005344 <_free_r>
 8005b60:	2300      	movs	r3, #0
 8005b62:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b64:	e00d      	b.n	8005b82 <__sflush_r+0xae>
 8005b66:	2301      	movs	r3, #1
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b0      	blx	r6
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	1c50      	adds	r0, r2, #1
 8005b70:	d1c9      	bne.n	8005b06 <__sflush_r+0x32>
 8005b72:	682b      	ldr	r3, [r5, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0c6      	beq.n	8005b06 <__sflush_r+0x32>
 8005b78:	2b1d      	cmp	r3, #29
 8005b7a:	d001      	beq.n	8005b80 <__sflush_r+0xac>
 8005b7c:	2b16      	cmp	r3, #22
 8005b7e:	d11e      	bne.n	8005bbe <__sflush_r+0xea>
 8005b80:	602f      	str	r7, [r5, #0]
 8005b82:	2000      	movs	r0, #0
 8005b84:	e022      	b.n	8005bcc <__sflush_r+0xf8>
 8005b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b8a:	b21b      	sxth	r3, r3
 8005b8c:	e01b      	b.n	8005bc6 <__sflush_r+0xf2>
 8005b8e:	690f      	ldr	r7, [r1, #16]
 8005b90:	2f00      	cmp	r7, #0
 8005b92:	d0f6      	beq.n	8005b82 <__sflush_r+0xae>
 8005b94:	0793      	lsls	r3, r2, #30
 8005b96:	680e      	ldr	r6, [r1, #0]
 8005b98:	bf08      	it	eq
 8005b9a:	694b      	ldreq	r3, [r1, #20]
 8005b9c:	600f      	str	r7, [r1, #0]
 8005b9e:	bf18      	it	ne
 8005ba0:	2300      	movne	r3, #0
 8005ba2:	eba6 0807 	sub.w	r8, r6, r7
 8005ba6:	608b      	str	r3, [r1, #8]
 8005ba8:	f1b8 0f00 	cmp.w	r8, #0
 8005bac:	dde9      	ble.n	8005b82 <__sflush_r+0xae>
 8005bae:	6a21      	ldr	r1, [r4, #32]
 8005bb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005bb2:	4643      	mov	r3, r8
 8005bb4:	463a      	mov	r2, r7
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b0      	blx	r6
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	dc08      	bgt.n	8005bd0 <__sflush_r+0xfc>
 8005bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bc6:	81a3      	strh	r3, [r4, #12]
 8005bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd0:	4407      	add	r7, r0
 8005bd2:	eba8 0800 	sub.w	r8, r8, r0
 8005bd6:	e7e7      	b.n	8005ba8 <__sflush_r+0xd4>
 8005bd8:	dfbffffe 	.word	0xdfbffffe

08005bdc <_fflush_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	690b      	ldr	r3, [r1, #16]
 8005be0:	4605      	mov	r5, r0
 8005be2:	460c      	mov	r4, r1
 8005be4:	b913      	cbnz	r3, 8005bec <_fflush_r+0x10>
 8005be6:	2500      	movs	r5, #0
 8005be8:	4628      	mov	r0, r5
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	b118      	cbz	r0, 8005bf6 <_fflush_r+0x1a>
 8005bee:	6a03      	ldr	r3, [r0, #32]
 8005bf0:	b90b      	cbnz	r3, 8005bf6 <_fflush_r+0x1a>
 8005bf2:	f7ff fa91 	bl	8005118 <__sinit>
 8005bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f3      	beq.n	8005be6 <_fflush_r+0xa>
 8005bfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c00:	07d0      	lsls	r0, r2, #31
 8005c02:	d404      	bmi.n	8005c0e <_fflush_r+0x32>
 8005c04:	0599      	lsls	r1, r3, #22
 8005c06:	d402      	bmi.n	8005c0e <_fflush_r+0x32>
 8005c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c0a:	f7ff fb8a 	bl	8005322 <__retarget_lock_acquire_recursive>
 8005c0e:	4628      	mov	r0, r5
 8005c10:	4621      	mov	r1, r4
 8005c12:	f7ff ff5f 	bl	8005ad4 <__sflush_r>
 8005c16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c18:	07da      	lsls	r2, r3, #31
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	d4e4      	bmi.n	8005be8 <_fflush_r+0xc>
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	059b      	lsls	r3, r3, #22
 8005c22:	d4e1      	bmi.n	8005be8 <_fflush_r+0xc>
 8005c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c26:	f7ff fb7d 	bl	8005324 <__retarget_lock_release_recursive>
 8005c2a:	e7dd      	b.n	8005be8 <_fflush_r+0xc>

08005c2c <__swbuf_r>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	460e      	mov	r6, r1
 8005c30:	4614      	mov	r4, r2
 8005c32:	4605      	mov	r5, r0
 8005c34:	b118      	cbz	r0, 8005c3e <__swbuf_r+0x12>
 8005c36:	6a03      	ldr	r3, [r0, #32]
 8005c38:	b90b      	cbnz	r3, 8005c3e <__swbuf_r+0x12>
 8005c3a:	f7ff fa6d 	bl	8005118 <__sinit>
 8005c3e:	69a3      	ldr	r3, [r4, #24]
 8005c40:	60a3      	str	r3, [r4, #8]
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	071a      	lsls	r2, r3, #28
 8005c46:	d501      	bpl.n	8005c4c <__swbuf_r+0x20>
 8005c48:	6923      	ldr	r3, [r4, #16]
 8005c4a:	b943      	cbnz	r3, 8005c5e <__swbuf_r+0x32>
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 f82a 	bl	8005ca8 <__swsetup_r>
 8005c54:	b118      	cbz	r0, 8005c5e <__swbuf_r+0x32>
 8005c56:	f04f 37ff 	mov.w	r7, #4294967295
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	6922      	ldr	r2, [r4, #16]
 8005c62:	1a98      	subs	r0, r3, r2
 8005c64:	6963      	ldr	r3, [r4, #20]
 8005c66:	b2f6      	uxtb	r6, r6
 8005c68:	4283      	cmp	r3, r0
 8005c6a:	4637      	mov	r7, r6
 8005c6c:	dc05      	bgt.n	8005c7a <__swbuf_r+0x4e>
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	f7ff ffb3 	bl	8005bdc <_fflush_r>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d1ed      	bne.n	8005c56 <__swbuf_r+0x2a>
 8005c7a:	68a3      	ldr	r3, [r4, #8]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	60a3      	str	r3, [r4, #8]
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	6022      	str	r2, [r4, #0]
 8005c86:	701e      	strb	r6, [r3, #0]
 8005c88:	6962      	ldr	r2, [r4, #20]
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d004      	beq.n	8005c9a <__swbuf_r+0x6e>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	07db      	lsls	r3, r3, #31
 8005c94:	d5e1      	bpl.n	8005c5a <__swbuf_r+0x2e>
 8005c96:	2e0a      	cmp	r6, #10
 8005c98:	d1df      	bne.n	8005c5a <__swbuf_r+0x2e>
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f7ff ff9d 	bl	8005bdc <_fflush_r>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d0d9      	beq.n	8005c5a <__swbuf_r+0x2e>
 8005ca6:	e7d6      	b.n	8005c56 <__swbuf_r+0x2a>

08005ca8 <__swsetup_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4b29      	ldr	r3, [pc, #164]	@ (8005d50 <__swsetup_r+0xa8>)
 8005cac:	4605      	mov	r5, r0
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	b118      	cbz	r0, 8005cbc <__swsetup_r+0x14>
 8005cb4:	6a03      	ldr	r3, [r0, #32]
 8005cb6:	b90b      	cbnz	r3, 8005cbc <__swsetup_r+0x14>
 8005cb8:	f7ff fa2e 	bl	8005118 <__sinit>
 8005cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc0:	0719      	lsls	r1, r3, #28
 8005cc2:	d422      	bmi.n	8005d0a <__swsetup_r+0x62>
 8005cc4:	06da      	lsls	r2, r3, #27
 8005cc6:	d407      	bmi.n	8005cd8 <__swsetup_r+0x30>
 8005cc8:	2209      	movs	r2, #9
 8005cca:	602a      	str	r2, [r5, #0]
 8005ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cd0:	81a3      	strh	r3, [r4, #12]
 8005cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd6:	e033      	b.n	8005d40 <__swsetup_r+0x98>
 8005cd8:	0758      	lsls	r0, r3, #29
 8005cda:	d512      	bpl.n	8005d02 <__swsetup_r+0x5a>
 8005cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cde:	b141      	cbz	r1, 8005cf2 <__swsetup_r+0x4a>
 8005ce0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ce4:	4299      	cmp	r1, r3
 8005ce6:	d002      	beq.n	8005cee <__swsetup_r+0x46>
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f7ff fb2b 	bl	8005344 <_free_r>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cf2:	89a3      	ldrh	r3, [r4, #12]
 8005cf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005cf8:	81a3      	strh	r3, [r4, #12]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	6063      	str	r3, [r4, #4]
 8005cfe:	6923      	ldr	r3, [r4, #16]
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	f043 0308 	orr.w	r3, r3, #8
 8005d08:	81a3      	strh	r3, [r4, #12]
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	b94b      	cbnz	r3, 8005d22 <__swsetup_r+0x7a>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d18:	d003      	beq.n	8005d22 <__swsetup_r+0x7a>
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 f84f 	bl	8005dc0 <__smakebuf_r>
 8005d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d26:	f013 0201 	ands.w	r2, r3, #1
 8005d2a:	d00a      	beq.n	8005d42 <__swsetup_r+0x9a>
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	60a2      	str	r2, [r4, #8]
 8005d30:	6962      	ldr	r2, [r4, #20]
 8005d32:	4252      	negs	r2, r2
 8005d34:	61a2      	str	r2, [r4, #24]
 8005d36:	6922      	ldr	r2, [r4, #16]
 8005d38:	b942      	cbnz	r2, 8005d4c <__swsetup_r+0xa4>
 8005d3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d3e:	d1c5      	bne.n	8005ccc <__swsetup_r+0x24>
 8005d40:	bd38      	pop	{r3, r4, r5, pc}
 8005d42:	0799      	lsls	r1, r3, #30
 8005d44:	bf58      	it	pl
 8005d46:	6962      	ldrpl	r2, [r4, #20]
 8005d48:	60a2      	str	r2, [r4, #8]
 8005d4a:	e7f4      	b.n	8005d36 <__swsetup_r+0x8e>
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	e7f7      	b.n	8005d40 <__swsetup_r+0x98>
 8005d50:	20000018 	.word	0x20000018

08005d54 <_sbrk_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d06      	ldr	r5, [pc, #24]	@ (8005d70 <_sbrk_r+0x1c>)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	602b      	str	r3, [r5, #0]
 8005d60:	f7fa fcf4 	bl	800074c <_sbrk>
 8005d64:	1c43      	adds	r3, r0, #1
 8005d66:	d102      	bne.n	8005d6e <_sbrk_r+0x1a>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	b103      	cbz	r3, 8005d6e <_sbrk_r+0x1a>
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	200006f8 	.word	0x200006f8

08005d74 <__swhatbuf_r>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	460c      	mov	r4, r1
 8005d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	b096      	sub	sp, #88	@ 0x58
 8005d80:	4615      	mov	r5, r2
 8005d82:	461e      	mov	r6, r3
 8005d84:	da0d      	bge.n	8005da2 <__swhatbuf_r+0x2e>
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d8c:	f04f 0100 	mov.w	r1, #0
 8005d90:	bf14      	ite	ne
 8005d92:	2340      	movne	r3, #64	@ 0x40
 8005d94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d98:	2000      	movs	r0, #0
 8005d9a:	6031      	str	r1, [r6, #0]
 8005d9c:	602b      	str	r3, [r5, #0]
 8005d9e:	b016      	add	sp, #88	@ 0x58
 8005da0:	bd70      	pop	{r4, r5, r6, pc}
 8005da2:	466a      	mov	r2, sp
 8005da4:	f000 f848 	bl	8005e38 <_fstat_r>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	dbec      	blt.n	8005d86 <__swhatbuf_r+0x12>
 8005dac:	9901      	ldr	r1, [sp, #4]
 8005dae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005db2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005db6:	4259      	negs	r1, r3
 8005db8:	4159      	adcs	r1, r3
 8005dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dbe:	e7eb      	b.n	8005d98 <__swhatbuf_r+0x24>

08005dc0 <__smakebuf_r>:
 8005dc0:	898b      	ldrh	r3, [r1, #12]
 8005dc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dc4:	079d      	lsls	r5, r3, #30
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	460c      	mov	r4, r1
 8005dca:	d507      	bpl.n	8005ddc <__smakebuf_r+0x1c>
 8005dcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	6163      	str	r3, [r4, #20]
 8005dd8:	b003      	add	sp, #12
 8005dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ddc:	ab01      	add	r3, sp, #4
 8005dde:	466a      	mov	r2, sp
 8005de0:	f7ff ffc8 	bl	8005d74 <__swhatbuf_r>
 8005de4:	9f00      	ldr	r7, [sp, #0]
 8005de6:	4605      	mov	r5, r0
 8005de8:	4639      	mov	r1, r7
 8005dea:	4630      	mov	r0, r6
 8005dec:	f7ff fb16 	bl	800541c <_malloc_r>
 8005df0:	b948      	cbnz	r0, 8005e06 <__smakebuf_r+0x46>
 8005df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005df6:	059a      	lsls	r2, r3, #22
 8005df8:	d4ee      	bmi.n	8005dd8 <__smakebuf_r+0x18>
 8005dfa:	f023 0303 	bic.w	r3, r3, #3
 8005dfe:	f043 0302 	orr.w	r3, r3, #2
 8005e02:	81a3      	strh	r3, [r4, #12]
 8005e04:	e7e2      	b.n	8005dcc <__smakebuf_r+0xc>
 8005e06:	89a3      	ldrh	r3, [r4, #12]
 8005e08:	6020      	str	r0, [r4, #0]
 8005e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e0e:	81a3      	strh	r3, [r4, #12]
 8005e10:	9b01      	ldr	r3, [sp, #4]
 8005e12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e16:	b15b      	cbz	r3, 8005e30 <__smakebuf_r+0x70>
 8005e18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f000 f81d 	bl	8005e5c <_isatty_r>
 8005e22:	b128      	cbz	r0, 8005e30 <__smakebuf_r+0x70>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f023 0303 	bic.w	r3, r3, #3
 8005e2a:	f043 0301 	orr.w	r3, r3, #1
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	431d      	orrs	r5, r3
 8005e34:	81a5      	strh	r5, [r4, #12]
 8005e36:	e7cf      	b.n	8005dd8 <__smakebuf_r+0x18>

08005e38 <_fstat_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4d07      	ldr	r5, [pc, #28]	@ (8005e58 <_fstat_r+0x20>)
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4604      	mov	r4, r0
 8005e40:	4608      	mov	r0, r1
 8005e42:	4611      	mov	r1, r2
 8005e44:	602b      	str	r3, [r5, #0]
 8005e46:	f7fa fc58 	bl	80006fa <_fstat>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	d102      	bne.n	8005e54 <_fstat_r+0x1c>
 8005e4e:	682b      	ldr	r3, [r5, #0]
 8005e50:	b103      	cbz	r3, 8005e54 <_fstat_r+0x1c>
 8005e52:	6023      	str	r3, [r4, #0]
 8005e54:	bd38      	pop	{r3, r4, r5, pc}
 8005e56:	bf00      	nop
 8005e58:	200006f8 	.word	0x200006f8

08005e5c <_isatty_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4d06      	ldr	r5, [pc, #24]	@ (8005e78 <_isatty_r+0x1c>)
 8005e60:	2300      	movs	r3, #0
 8005e62:	4604      	mov	r4, r0
 8005e64:	4608      	mov	r0, r1
 8005e66:	602b      	str	r3, [r5, #0]
 8005e68:	f7fa fc57 	bl	800071a <_isatty>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d102      	bne.n	8005e76 <_isatty_r+0x1a>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	b103      	cbz	r3, 8005e76 <_isatty_r+0x1a>
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	200006f8 	.word	0x200006f8

08005e7c <_init>:
 8005e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7e:	bf00      	nop
 8005e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e82:	bc08      	pop	{r3}
 8005e84:	469e      	mov	lr, r3
 8005e86:	4770      	bx	lr

08005e88 <_fini>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr

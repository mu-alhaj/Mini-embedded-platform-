
Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000435c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080044f0  080044f0  000054f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004528  08004528  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004528  08004528  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004528  08004528  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004528  08004528  00005528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800452c  0800452c  0000552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004530  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000168  20000010  20000010  00006010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000178  20000178  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0b6  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002536  00000000  00000000  000120f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  00014628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000704  00000000  00000000  00014f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002063f  00000000  00000000  0001567c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb94  00000000  00000000  00035cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c01dd  00000000  00000000  0004484f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00104a2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002324  00000000  00000000  00104a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00106d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080044d8 	.word	0x080044d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080044d8 	.word	0x080044d8

080001d4 <circularBuffer_init>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_init( tCircularBuffer* pBuffer, uint8_t* pData, uint16_t size )
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	4613      	mov	r3, r2
 80001e0:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if ( pBuffer == NULL || pData == NULL || size == 0 )
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d005      	beq.n	80001f4 <circularBuffer_init+0x20>
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d002      	beq.n	80001f4 <circularBuffer_init+0x20>
 80001ee:	88fb      	ldrh	r3, [r7, #6]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d101      	bne.n	80001f8 <circularBuffer_init+0x24>
	{
		return 1;
 80001f4:	2301      	movs	r3, #1
 80001f6:	e014      	b.n	8000222 <circularBuffer_init+0x4e>
	}

	// initialize the buffer
	pBuffer->size 		= size;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	88fa      	ldrh	r2, [r7, #6]
 80001fc:	801a      	strh	r2, [r3, #0]
	pBuffer->start 	= 0;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	2200      	movs	r2, #0
 8000202:	809a      	strh	r2, [r3, #4]
	pBuffer->end   	= 0;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	2200      	movs	r2, #0
 8000208:	805a      	strh	r2, [r3, #2]
	pBuffer->pBuffer 	= pData;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	68ba      	ldr	r2, [r7, #8]
 800020e:	609a      	str	r2, [r3, #8]
	memset( pBuffer->pBuffer, 1, pBuffer->size );
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	6898      	ldr	r0, [r3, #8]
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	881b      	ldrh	r3, [r3, #0]
 8000218:	461a      	mov	r2, r3
 800021a:	2101      	movs	r1, #1
 800021c:	f004 f921 	bl	8004462 <memset>

	return 0;
 8000220:	2300      	movs	r3, #0
}
 8000222:	4618      	mov	r0, r3
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}

0800022a <circularBuffer_push>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_push( tCircularBuffer* pCbuffer, uint8_t* pInData, uint16_t size )
{
 800022a:	b580      	push	{r7, lr}
 800022c:	b086      	sub	sp, #24
 800022e:	af00      	add	r7, sp, #0
 8000230:	60f8      	str	r0, [r7, #12]
 8000232:	60b9      	str	r1, [r7, #8]
 8000234:	4613      	mov	r3, r2
 8000236:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if( pCbuffer == NULL || pInData == NULL || pCbuffer->size < size )
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d007      	beq.n	800024e <circularBuffer_push+0x24>
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d004      	beq.n	800024e <circularBuffer_push+0x24>
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	88fa      	ldrh	r2, [r7, #6]
 800024a:	429a      	cmp	r2, r3
 800024c:	d901      	bls.n	8000252 <circularBuffer_push+0x28>
	{
		return 1;
 800024e:	2301      	movs	r3, #1
 8000250:	e037      	b.n	80002c2 <circularBuffer_push+0x98>
	 *    n n s d d d d e n n
	 *    d d d e n n n s d d
	 * */

	// do we need to loop over the buffer?
	uint16_t toTheEnd = pCbuffer->size - pCbuffer->end;
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	881a      	ldrh	r2, [r3, #0]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	885b      	ldrh	r3, [r3, #2]
 800025a:	1ad3      	subs	r3, r2, r3
 800025c:	82fb      	strh	r3, [r7, #22]
	uint8_t* pDes = &(*pCbuffer).pBuffer[pCbuffer->end];
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	68fa      	ldr	r2, [r7, #12]
 8000264:	8852      	ldrh	r2, [r2, #2]
 8000266:	4413      	add	r3, r2
 8000268:	613b      	str	r3, [r7, #16]
	if ( toTheEnd < size )
 800026a:	8afa      	ldrh	r2, [r7, #22]
 800026c:	88fb      	ldrh	r3, [r7, #6]
 800026e:	429a      	cmp	r2, r3
 8000270:	d211      	bcs.n	8000296 <circularBuffer_push+0x6c>
	{
		// first copy from the end of the existing data to the end of the buffer
		memcpy( pDes, pInData, toTheEnd );
 8000272:	8afb      	ldrh	r3, [r7, #22]
 8000274:	461a      	mov	r2, r3
 8000276:	68b9      	ldr	r1, [r7, #8]
 8000278:	6938      	ldr	r0, [r7, #16]
 800027a:	f004 f91f 	bl	80044bc <memcpy>
		// copy the reset of the inData from the beginning of the buffer.
		memcpy( (*pCbuffer).pBuffer, &pInData[toTheEnd], ( size - toTheEnd ) );
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	6898      	ldr	r0, [r3, #8]
 8000282:	8afb      	ldrh	r3, [r7, #22]
 8000284:	68ba      	ldr	r2, [r7, #8]
 8000286:	18d1      	adds	r1, r2, r3
 8000288:	88fa      	ldrh	r2, [r7, #6]
 800028a:	8afb      	ldrh	r3, [r7, #22]
 800028c:	1ad3      	subs	r3, r2, r3
 800028e:	461a      	mov	r2, r3
 8000290:	f004 f914 	bl	80044bc <memcpy>
 8000294:	e005      	b.n	80002a2 <circularBuffer_push+0x78>
	}
	else
	{
		memcpy( pDes, pInData, size );
 8000296:	88fb      	ldrh	r3, [r7, #6]
 8000298:	461a      	mov	r2, r3
 800029a:	68b9      	ldr	r1, [r7, #8]
 800029c:	6938      	ldr	r0, [r7, #16]
 800029e:	f004 f90d 	bl	80044bc <memcpy>
		//pBuffer->pBuffer[pBuffer->end] = pInData[0];
	}

	pCbuffer->end = ( pCbuffer->end + size ) % pCbuffer->size;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	885b      	ldrh	r3, [r3, #2]
 80002a6:	461a      	mov	r2, r3
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	4413      	add	r3, r2
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	8812      	ldrh	r2, [r2, #0]
 80002b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80002b4:	fb01 f202 	mul.w	r2, r1, r2
 80002b8:	1a9b      	subs	r3, r3, r2
 80002ba:	b29a      	uxth	r2, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	805a      	strh	r2, [r3, #2]

	return 0;
 80002c0:	2300      	movs	r3, #0
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3718      	adds	r7, #24
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <MX_DMA_Init+0x38>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000304 <MX_DMA_Init+0x38>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <MX_DMA_Init+0x38>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2100      	movs	r1, #0
 80002ee:	2010      	movs	r0, #16
 80002f0:	f000 fca5 	bl	8000c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002f4:	2010      	movs	r0, #16
 80002f6:	f000 fcbe 	bl	8000c76 <HAL_NVIC_EnableIRQ>

}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <flash_write>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_write( uint32_t Address, uint8_t* pData, uint32_t size )
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
	// check if valid flash address.
	if ( Address < APP_START_ADD || Address > FLASH_END_ADD )
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	4a2f      	ldr	r2, [pc, #188]	@ (80003d4 <flash_write+0xcc>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d903      	bls.n	8000324 <flash_write+0x1c>
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	4a2e      	ldr	r2, [pc, #184]	@ (80003d8 <flash_write+0xd0>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d901      	bls.n	8000328 <flash_write+0x20>
	{
		// return if address is not in application flash area.
		return 1;
 8000324:	2301      	movs	r3, #1
 8000326:	e051      	b.n	80003cc <flash_write+0xc4>
	}

	// check for valid input
	if ( pData == NULL && size == 0 )
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d104      	bne.n	8000338 <flash_write+0x30>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d101      	bne.n	8000338 <flash_write+0x30>
	{
		return 1;
 8000334:	2301      	movs	r3, #1
 8000336:	e049      	b.n	80003cc <flash_write+0xc4>
	}

	// erase flash area before writing to it.
	flash_erasePage(Address, 0);
 8000338:	2100      	movs	r1, #0
 800033a:	68f8      	ldr	r0, [r7, #12]
 800033c:	f000 f84e 	bl	80003dc <flash_erasePage>

	HAL_FLASH_Unlock();
 8000340:	f000 ff52 	bl	80011e8 <HAL_FLASH_Unlock>
	uint32_t remaining_bytes = size;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000348:	2301      	movs	r3, #1
 800034a:	76fb      	strb	r3, [r7, #27]
	uint64_t inData;
	memcpy (&inData, pData, size);
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	68b9      	ldr	r1, [r7, #8]
 8000354:	4618      	mov	r0, r3
 8000356:	f004 f8b1 	bl	80044bc <memcpy>
	while( remaining_bytes )
 800035a:	e031      	b.n	80003c0 <flash_write+0xb8>
	{
		// write double words as long it is possible.
		if ( remaining_bytes >= DOUBLE_WORD )
 800035c:	69fb      	ldr	r3, [r7, #28]
 800035e:	2b07      	cmp	r3, #7
 8000360:	d90e      	bls.n	8000380 <flash_write+0x78>
		{
			status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD, Address, inData );
 8000362:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000366:	68f9      	ldr	r1, [r7, #12]
 8000368:	2003      	movs	r0, #3
 800036a:	f000 fecd 	bl	8001108 <HAL_FLASH_Program>
 800036e:	4603      	mov	r3, r0
 8000370:	76fb      	strb	r3, [r7, #27]
			if ( status == HAL_OK )
 8000372:	7efb      	ldrb	r3, [r7, #27]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d123      	bne.n	80003c0 <flash_write+0xb8>
			{
				remaining_bytes -= DOUBLE_WORD;
 8000378:	69fb      	ldr	r3, [r7, #28]
 800037a:	3b08      	subs	r3, #8
 800037c:	61fb      	str	r3, [r7, #28]
 800037e:	e01f      	b.n	80003c0 <flash_write+0xb8>
			}
		}
		// then write single word
		else if ( remaining_bytes >= ONE_WORD )
 8000380:	69fb      	ldr	r3, [r7, #28]
 8000382:	2b03      	cmp	r3, #3
 8000384:	d90e      	bls.n	80003a4 <flash_write+0x9c>
		{
			status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD, Address, inData );
 8000386:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800038a:	68f9      	ldr	r1, [r7, #12]
 800038c:	2002      	movs	r0, #2
 800038e:	f000 febb 	bl	8001108 <HAL_FLASH_Program>
 8000392:	4603      	mov	r3, r0
 8000394:	76fb      	strb	r3, [r7, #27]
			if ( status == HAL_OK )
 8000396:	7efb      	ldrb	r3, [r7, #27]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d111      	bne.n	80003c0 <flash_write+0xb8>
			{
				remaining_bytes -= ONE_WORD;
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	3b04      	subs	r3, #4
 80003a0:	61fb      	str	r3, [r7, #28]
 80003a2:	e00d      	b.n	80003c0 <flash_write+0xb8>
			}
		}
		// lastly, write half word
		else
		{
			status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, Address, inData );
 80003a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80003a8:	68f9      	ldr	r1, [r7, #12]
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 feac 	bl	8001108 <HAL_FLASH_Program>
 80003b0:	4603      	mov	r3, r0
 80003b2:	76fb      	strb	r3, [r7, #27]
			if ( status == HAL_OK )
 80003b4:	7efb      	ldrb	r3, [r7, #27]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d102      	bne.n	80003c0 <flash_write+0xb8>
			{
				remaining_bytes -= HALF_WORD;
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3b02      	subs	r3, #2
 80003be:	61fb      	str	r3, [r7, #28]
	while( remaining_bytes )
 80003c0:	69fb      	ldr	r3, [r7, #28]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1ca      	bne.n	800035c <flash_write+0x54>
			}
		}

	}

	HAL_FLASH_Lock();
 80003c6:	f000 ff35 	bl	8001234 <HAL_FLASH_Lock>

	return 0;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3720      	adds	r7, #32
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	0803ffff 	.word	0x0803ffff
 80003d8:	08080000 	.word	0x08080000

080003dc <flash_erasePage>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_erasePage(uint32_t Address, uint32_t size)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
	// find page start address.
	uint32_t pageStartAddress = ( Address / FLASH_PAGE_SIZE ) * FLASH_PAGE_SIZE;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80003ec:	f023 0307 	bic.w	r3, r3, #7
 80003f0:	61fb      	str	r3, [r7, #28]
	uint8_t nrPages = 1;
 80003f2:	2301      	movs	r3, #1
 80003f4:	76fb      	strb	r3, [r7, #27]


	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages 		= nrPages;
 80003f6:	7efb      	ldrb	r3, [r7, #27]
 80003f8:	617b      	str	r3, [r7, #20]
	eraseInit.PageAddress 	= pageStartAddress;
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	613b      	str	r3, [r7, #16]
	eraseInit.TypeErase 	= FLASH_TYPEERASE_PAGES;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]

	uint32_t pageError;

	HAL_FLASH_Unlock();
 8000402:	f000 fef1 	bl	80011e8 <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase( &eraseInit, &pageError);
 8000406:	f107 0208 	add.w	r2, r7, #8
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	4611      	mov	r1, r2
 8000410:	4618      	mov	r0, r3
 8000412:	f000 ffad 	bl	8001370 <HAL_FLASHEx_Erase>
 8000416:	4603      	mov	r3, r0
 8000418:	76bb      	strb	r3, [r7, #26]
	HAL_FLASH_Lock();
 800041a:	f000 ff0b 	bl	8001234 <HAL_FLASH_Lock>
	if ( status != HAL_OK )
 800041e:	7ebb      	ldrb	r3, [r7, #26]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <flash_erasePage+0x4c>
		return 1;
 8000424:	2301      	movs	r3, #1
 8000426:	e000      	b.n	800042a <flash_erasePage+0x4e>

	return 0;
 8000428:	2300      	movs	r3, #0
}
 800042a:	4618      	mov	r0, r3
 800042c:	3720      	adds	r7, #32
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b08a      	sub	sp, #40	@ 0x28
 8000438:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	f107 0314 	add.w	r3, r7, #20
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044a:	4b4b      	ldr	r3, [pc, #300]	@ (8000578 <MX_GPIO_Init+0x144>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a4a      	ldr	r2, [pc, #296]	@ (8000578 <MX_GPIO_Init+0x144>)
 8000450:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b48      	ldr	r3, [pc, #288]	@ (8000578 <MX_GPIO_Init+0x144>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800045e:	613b      	str	r3, [r7, #16]
 8000460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000462:	4b45      	ldr	r3, [pc, #276]	@ (8000578 <MX_GPIO_Init+0x144>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a44      	ldr	r2, [pc, #272]	@ (8000578 <MX_GPIO_Init+0x144>)
 8000468:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b42      	ldr	r3, [pc, #264]	@ (8000578 <MX_GPIO_Init+0x144>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b3f      	ldr	r3, [pc, #252]	@ (8000578 <MX_GPIO_Init+0x144>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a3e      	ldr	r2, [pc, #248]	@ (8000578 <MX_GPIO_Init+0x144>)
 8000480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b3c      	ldr	r3, [pc, #240]	@ (8000578 <MX_GPIO_Init+0x144>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000492:	4b39      	ldr	r3, [pc, #228]	@ (8000578 <MX_GPIO_Init+0x144>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a38      	ldr	r2, [pc, #224]	@ (8000578 <MX_GPIO_Init+0x144>)
 8000498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b36      	ldr	r3, [pc, #216]	@ (8000578 <MX_GPIO_Init+0x144>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004aa:	4b33      	ldr	r3, [pc, #204]	@ (8000578 <MX_GPIO_Init+0x144>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a32      	ldr	r2, [pc, #200]	@ (8000578 <MX_GPIO_Init+0x144>)
 80004b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b30      	ldr	r3, [pc, #192]	@ (8000578 <MX_GPIO_Init+0x144>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2120      	movs	r1, #32
 80004c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ca:	f001 f97f 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80004d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	4619      	mov	r1, r3
 80004e4:	4825      	ldr	r0, [pc, #148]	@ (800057c <MX_GPIO_Init+0x148>)
 80004e6:	f000 ffe7 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004ea:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80004ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f0:	2303      	movs	r3, #3
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	4619      	mov	r1, r3
 80004fe:	481f      	ldr	r0, [pc, #124]	@ (800057c <MX_GPIO_Init+0x148>)
 8000500:	f000 ffda 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8000504:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 8000508:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050a:	2303      	movs	r3, #3
 800050c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	4619      	mov	r1, r3
 8000518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051c:	f000 ffcc 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000520:	2320      	movs	r3, #32
 8000522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	2301      	movs	r3, #1
 8000526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	2300      	movs	r3, #0
 800052e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4619      	mov	r1, r3
 8000536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053a:	f000 ffbd 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800053e:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8000542:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000544:	2303      	movs	r3, #3
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	4619      	mov	r1, r3
 8000552:	480b      	ldr	r0, [pc, #44]	@ (8000580 <MX_GPIO_Init+0x14c>)
 8000554:	f000 ffb0 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000558:	2304      	movs	r3, #4
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800055c:	2303      	movs	r3, #3
 800055e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4619      	mov	r1, r3
 800056a:	4806      	ldr	r0, [pc, #24]	@ (8000584 <MX_GPIO_Init+0x150>)
 800056c:	f000 ffa4 	bl	80014b8 <HAL_GPIO_Init>

}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	@ 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021000 	.word	0x40021000
 800057c:	48000800 	.word	0x48000800
 8000580:	48000400 	.word	0x48000400
 8000584:	48000c00 	.word	0x48000c00

08000588 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	807b      	strh	r3, [r7, #2]
	if ( huart->Instance == USART2 )
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	@ (80005d0 <HAL_UARTEx_RxEventCallback+0x48>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d114      	bne.n	80005c8 <HAL_UARTEx_RxEventCallback+0x40>
	{
		// copy data to circular buffer;
		circularBuffer_push( &cbuffer, uart_dma_rxBuf, Size );
 800059e:	887b      	ldrh	r3, [r7, #2]
 80005a0:	461a      	mov	r2, r3
 80005a2:	490c      	ldr	r1, [pc, #48]	@ (80005d4 <HAL_UARTEx_RxEventCallback+0x4c>)
 80005a4:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <HAL_UARTEx_RxEventCallback+0x50>)
 80005a6:	f7ff fe40 	bl	800022a <circularBuffer_push>
		flash_write( APP_START_ADD, &cbuffer.pBuffer[cbuffer.start], Size );
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <HAL_UARTEx_RxEventCallback+0x50>)
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <HAL_UARTEx_RxEventCallback+0x50>)
 80005b0:	8892      	ldrh	r2, [r2, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	887a      	ldrh	r2, [r7, #2]
 80005b6:	4619      	mov	r1, r3
 80005b8:	4808      	ldr	r0, [pc, #32]	@ (80005dc <HAL_UARTEx_RxEventCallback+0x54>)
 80005ba:	f7ff fea5 	bl	8000308 <flash_write>

		// restart receiving data.
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart_dma_rxBuf, RX_BUF_SIZE);
 80005be:	2240      	movs	r2, #64	@ 0x40
 80005c0:	4904      	ldr	r1, [pc, #16]	@ (80005d4 <HAL_UARTEx_RxEventCallback+0x4c>)
 80005c2:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <HAL_UARTEx_RxEventCallback+0x58>)
 80005c4:	f003 fef9 	bl	80043ba <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40004400 	.word	0x40004400
 80005d4:	2000002c 	.word	0x2000002c
 80005d8:	20000078 	.word	0x20000078
 80005dc:	08040000 	.word	0x08040000
 80005e0:	20000084 	.word	0x20000084

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 f9e7 	bl	80009bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f839 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f7ff ff1f 	bl	8000434 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f6:	f7ff fe69 	bl	80002cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f911 	bl	8000820 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  circularBuffer_init( &cbuffer, cData , BUF_SIZE );
 80005fe:	220a      	movs	r2, #10
 8000600:	4913      	ldr	r1, [pc, #76]	@ (8000650 <main+0x6c>)
 8000602:	4814      	ldr	r0, [pc, #80]	@ (8000654 <main+0x70>)
 8000604:	f7ff fde6 	bl	80001d4 <circularBuffer_init>

  HAL_UARTEx_ReceiveToIdle_DMA( &huart2, uart_dma_rxBuf, RX_BUF_SIZE );
 8000608:	2240      	movs	r2, #64	@ 0x40
 800060a:	4913      	ldr	r1, [pc, #76]	@ (8000658 <main+0x74>)
 800060c:	4813      	ldr	r0, [pc, #76]	@ (800065c <main+0x78>)
 800060e:	f003 fed4 	bl	80043ba <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT( huart2.hdmarx, DMA_IT_HT );	// not interested of half transfer interrupt.
 8000612:	4b12      	ldr	r3, [pc, #72]	@ (800065c <main+0x78>)
 8000614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <main+0x78>)
 800061c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f022 0204 	bic.w	r2, r2, #4
 8000624:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t add = APP_START_ADD;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <main+0x7c>)
 8000628:	607b      	str	r3, [r7, #4]
  uint8_t data[4];
  data[0] = 0xaa;
 800062a:	23aa      	movs	r3, #170	@ 0xaa
 800062c:	703b      	strb	r3, [r7, #0]
  data[1] = 0xbb;
 800062e:	23bb      	movs	r3, #187	@ 0xbb
 8000630:	707b      	strb	r3, [r7, #1]
  data[2] = 0xcc;
 8000632:	23cc      	movs	r3, #204	@ 0xcc
 8000634:	70bb      	strb	r3, [r7, #2]
  data[3] = 0xdd;
 8000636:	23dd      	movs	r3, #221	@ 0xdd
 8000638:	70fb      	strb	r3, [r7, #3]
  while (1)
  {
		flash_write( add, data, 4 );
 800063a:	463b      	mov	r3, r7
 800063c:	2204      	movs	r2, #4
 800063e:	4619      	mov	r1, r3
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff fe61 	bl	8000308 <flash_write>
		add += 4;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3304      	adds	r3, #4
 800064a:	607b      	str	r3, [r7, #4]
		flash_write( add, data, 4 );
 800064c:	bf00      	nop
 800064e:	e7f4      	b.n	800063a <main+0x56>
 8000650:	2000006c 	.word	0x2000006c
 8000654:	20000078 	.word	0x20000078
 8000658:	2000002c 	.word	0x2000002c
 800065c:	20000084 	.word	0x20000084
 8000660:	08040000 	.word	0x08040000

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0a6      	sub	sp, #152	@ 0x98
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800066e:	2228      	movs	r2, #40	@ 0x28
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fef5 	bl	8004462 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2258      	movs	r2, #88	@ 0x58
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fee7 	bl	8004462 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006b0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f89a 	bl	80017fc <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ce:	f000 f827 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 f8d8 	bl	80028a4 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fa:	f000 f811 	bl	8000720 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006fe:	2302      	movs	r3, #2
 8000700:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4618      	mov	r0, r3
 800070a:	f002 faeb 	bl	8002ce4 <HAL_RCCEx_PeriphCLKConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000714:	f000 f804 	bl	8000720 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3798      	adds	r7, #152	@ 0x98
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <Error_Handler+0x8>

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <HAL_MspInit+0x44>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a0e      	ldr	r2, [pc, #56]	@ (8000770 <HAL_MspInit+0x44>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <HAL_MspInit+0x44>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <HAL_MspInit+0x44>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <HAL_MspInit+0x44>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <HAL_MspInit+0x44>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000762:	2007      	movs	r0, #7
 8000764:	f000 fa60 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40021000 	.word	0x40021000

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <NMI_Handler+0x4>

0800077c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <MemManage_Handler+0x4>

0800078c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <UsageFault_Handler+0x4>

0800079c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ca:	f000 f93d 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80007d8:	4802      	ldr	r0, [pc, #8]	@ (80007e4 <DMA1_Channel6_IRQHandler+0x10>)
 80007da:	f000 fb88 	bl	8000eee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000010c 	.word	0x2000010c

080007e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007ec:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <USART2_IRQHandler+0x10>)
 80007ee:	f002 fce5 	bl	80031bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000084 	.word	0x20000084

080007fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <SystemInit+0x20>)
 8000802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000806:	4a05      	ldr	r2, [pc, #20]	@ (800081c <SystemInit+0x20>)
 8000808:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800080c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_USART2_UART_Init+0x58>)
 8000826:	4a15      	ldr	r2, [pc, #84]	@ (800087c <MX_USART2_UART_Init+0x5c>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <MX_USART2_UART_Init+0x58>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_USART2_UART_Init+0x58>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_USART2_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_USART2_UART_Init+0x58>)
 8000864:	f002 fc5c 	bl	8003120 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800086e:	f7ff ff57 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000084 	.word	0x20000084
 800087c:	40004400 	.word	0x40004400

08000880 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	@ 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a2e      	ldr	r2, [pc, #184]	@ (8000958 <HAL_UART_MspInit+0xd8>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d156      	bne.n	8000950 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a2:	4b2e      	ldr	r3, [pc, #184]	@ (800095c <HAL_UART_MspInit+0xdc>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a2d      	ldr	r2, [pc, #180]	@ (800095c <HAL_UART_MspInit+0xdc>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ac:	61d3      	str	r3, [r2, #28]
 80008ae:	4b2b      	ldr	r3, [pc, #172]	@ (800095c <HAL_UART_MspInit+0xdc>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b28      	ldr	r3, [pc, #160]	@ (800095c <HAL_UART_MspInit+0xdc>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a27      	ldr	r2, [pc, #156]	@ (800095c <HAL_UART_MspInit+0xdc>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b25      	ldr	r3, [pc, #148]	@ (800095c <HAL_UART_MspInit+0xdc>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d2:	230c      	movs	r3, #12
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e2:	2307      	movs	r3, #7
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f0:	f000 fde2 	bl	80014b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <HAL_UART_MspInit+0xe0>)
 80008f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000964 <HAL_UART_MspInit+0xe4>)
 80008f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <HAL_UART_MspInit+0xe0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <HAL_UART_MspInit+0xe0>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <HAL_UART_MspInit+0xe0>)
 8000908:	2280      	movs	r2, #128	@ 0x80
 800090a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <HAL_UART_MspInit+0xe0>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <HAL_UART_MspInit+0xe0>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <HAL_UART_MspInit+0xe0>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <HAL_UART_MspInit+0xe0>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000924:	480e      	ldr	r0, [pc, #56]	@ (8000960 <HAL_UART_MspInit+0xe0>)
 8000926:	f000 f9c0 	bl	8000caa <HAL_DMA_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000930:	f7ff fef6 	bl	8000720 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <HAL_UART_MspInit+0xe0>)
 8000938:	675a      	str	r2, [r3, #116]	@ 0x74
 800093a:	4a09      	ldr	r2, [pc, #36]	@ (8000960 <HAL_UART_MspInit+0xe0>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2026      	movs	r0, #38	@ 0x26
 8000946:	f000 f97a 	bl	8000c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800094a:	2026      	movs	r0, #38	@ 0x26
 800094c:	f000 f993 	bl	8000c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	@ 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40004400 	.word	0x40004400
 800095c:	40021000 	.word	0x40021000
 8000960:	2000010c 	.word	0x2000010c
 8000964:	4002006c 	.word	0x4002006c

08000968 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800096c:	f7ff ff46 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000972:	490d      	ldr	r1, [pc, #52]	@ (80009a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000974:	4a0d      	ldr	r2, [pc, #52]	@ (80009ac <LoopForever+0xe>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000988:	4c0a      	ldr	r4, [pc, #40]	@ (80009b4 <LoopForever+0x16>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000996:	f003 fd6d 	bl	8004474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800099a:	f7ff fe23 	bl	80005e4 <main>

0800099e <LoopForever>:

LoopForever:
    b LoopForever
 800099e:	e7fe      	b.n	800099e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009ac:	08004530 	.word	0x08004530
  ldr r2, =_sbss
 80009b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009b4:	20000178 	.word	0x20000178

080009b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC1_2_IRQHandler>
	...

080009bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <HAL_Init+0x28>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a07      	ldr	r2, [pc, #28]	@ (80009e4 <HAL_Init+0x28>)
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f92b 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f808 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d8:	f7ff fea8 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_InitTick+0x54>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <HAL_InitTick+0x58>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f943 	bl	8000c92 <HAL_SYSTICK_Config>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00e      	b.n	8000a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d80a      	bhi.n	8000a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f000 f90b 	bl	8000c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4a06      	ldr	r2, [pc, #24]	@ (8000a44 <HAL_InitTick+0x5c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_IncTick+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_IncTick+0x24>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <HAL_IncTick+0x24>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000150 	.word	0x20000150

08000a70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a74:	4b03      	ldr	r3, [pc, #12]	@ (8000a84 <HAL_GetTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000150 	.word	0x20000150

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 021f 	and.w	r2, r3, #31
 8000b04:	4907      	ldr	r1, [pc, #28]	@ (8000b24 <__NVIC_EnableIRQ+0x38>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	@ (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	@ (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	@ 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	@ 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f7ff ff8e 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff29 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff3e 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff8e 	bl	8000b7c <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff31 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffa2 	bl	8000be4 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b084      	sub	sp, #16
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e037      	b.n	8000d30 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000cd6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000cda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f9bc 	bl	8001090 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d101      	bne.n	8000d58 <HAL_DMA_Start_IT+0x20>
 8000d54:	2302      	movs	r3, #2
 8000d56:	e04a      	b.n	8000dee <HAL_DMA_Start_IT+0xb6>
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d13a      	bne.n	8000de0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2200      	movs	r2, #0
 8000d76:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0201 	bic.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f000 f950 	bl	8001034 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d008      	beq.n	8000dae <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 020e 	orr.w	r2, r2, #14
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	e00f      	b.n	8000dce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f042 020a 	orr.w	r2, r2, #10
 8000dbc:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 0204 	bic.w	r2, r2, #4
 8000dcc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f042 0201 	orr.w	r2, r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e005      	b.n	8000dec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000de8:	2302      	movs	r3, #2
 8000dea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e02e      	b.n	8000e66 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d008      	beq.n	8000e24 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2204      	movs	r2, #4
 8000e16:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e020      	b.n	8000e66 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 020e 	bic.w	r2, r2, #14
 8000e32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0201 	bic.w	r2, r2, #1
 8000e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d005      	beq.n	8000e94 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	e027      	b.n	8000ee4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 020e 	bic.w	r2, r2, #14
 8000ea2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0201 	bic.w	r2, r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	4798      	blx	r3
    }
  }
  return status;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d024      	beq.n	8000f60 <HAL_DMA_IRQHandler+0x72>
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d01f      	beq.n	8000f60 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0320 	and.w	r3, r3, #32
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d107      	bne.n	8000f3e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0204 	bic.w	r2, r2, #4
 8000f3c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f46:	2104      	movs	r1, #4
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d06a      	beq.n	800102c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f5e:	e065      	b.n	800102c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f64:	2202      	movs	r2, #2
 8000f66:	409a      	lsls	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d02c      	beq.n	8000fca <HAL_DMA_IRQHandler+0xdc>
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d027      	beq.n	8000fca <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0320 	and.w	r3, r3, #32
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10b      	bne.n	8000fa0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 020a 	bic.w	r2, r2, #10
 8000f96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fa8:	2102      	movs	r1, #2
 8000faa:	fa01 f202 	lsl.w	r2, r1, r2
 8000fae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d035      	beq.n	800102c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fc8:	e030      	b.n	800102c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	2208      	movs	r2, #8
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d028      	beq.n	800102c <HAL_DMA_IRQHandler+0x13e>
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d023      	beq.n	800102c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 020e 	bic.w	r2, r2, #14
 8000ff2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8001002:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2201      	movs	r2, #1
 8001008:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	2b00      	cmp	r3, #0
 8001020:	d004      	beq.n	800102c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	4798      	blx	r3
    }
  }
}
 800102a:	e7ff      	b.n	800102c <HAL_DMA_IRQHandler+0x13e>
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800104a:	2101      	movs	r1, #1
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b10      	cmp	r3, #16
 8001060:	d108      	bne.n	8001074 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001072:	e007      	b.n	8001084 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	60da      	str	r2, [r3, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <DMA_CalcBaseAndBitshift+0x60>)
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d80f      	bhi.n	80010c4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <DMA_CalcBaseAndBitshift+0x64>)
 80010ac:	4413      	add	r3, r2
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <DMA_CalcBaseAndBitshift+0x68>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	009a      	lsls	r2, r3, #2
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a0f      	ldr	r2, [pc, #60]	@ (80010fc <DMA_CalcBaseAndBitshift+0x6c>)
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80010c2:	e00e      	b.n	80010e2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <DMA_CalcBaseAndBitshift+0x70>)
 80010cc:	4413      	add	r3, r2
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <DMA_CalcBaseAndBitshift+0x68>)
 80010d0:	fba2 2303 	umull	r2, r3, r2, r3
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	009a      	lsls	r2, r3, #2
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a09      	ldr	r2, [pc, #36]	@ (8001104 <DMA_CalcBaseAndBitshift+0x74>)
 80010e0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40020407 	.word	0x40020407
 80010f4:	bffdfff8 	.word	0xbffdfff8
 80010f8:	cccccccd 	.word	0xcccccccd
 80010fc:	40020000 	.word	0x40020000
 8001100:	bffdfbf8 	.word	0xbffdfbf8
 8001104:	40020400 	.word	0x40020400

08001108 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 800111a:	2300      	movs	r3, #0
 800111c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800111e:	2300      	movs	r3, #0
 8001120:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001122:	4b2f      	ldr	r3, [pc, #188]	@ (80011e0 <HAL_FLASH_Program+0xd8>)
 8001124:	7e1b      	ldrb	r3, [r3, #24]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_FLASH_Program+0x26>
 800112a:	2302      	movs	r3, #2
 800112c:	e054      	b.n	80011d8 <HAL_FLASH_Program+0xd0>
 800112e:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <HAL_FLASH_Program+0xd8>)
 8001130:	2201      	movs	r2, #1
 8001132:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001134:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001138:	f000 f8a8 	bl	800128c <FLASH_WaitForLastOperation>
 800113c:	4603      	mov	r3, r0
 800113e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d144      	bne.n	80011d0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d102      	bne.n	8001152 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800114c:	2301      	movs	r3, #1
 800114e:	757b      	strb	r3, [r7, #21]
 8001150:	e007      	b.n	8001162 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d102      	bne.n	800115e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001158:	2302      	movs	r3, #2
 800115a:	757b      	strb	r3, [r7, #21]
 800115c:	e001      	b.n	8001162 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800115e:	2304      	movs	r3, #4
 8001160:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001162:	2300      	movs	r3, #0
 8001164:	75bb      	strb	r3, [r7, #22]
 8001166:	e02d      	b.n	80011c4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001168:	7dbb      	ldrb	r3, [r7, #22]
 800116a:	005a      	lsls	r2, r3, #1
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	eb02 0c03 	add.w	ip, r2, r3
 8001172:	7dbb      	ldrb	r3, [r7, #22]
 8001174:	0119      	lsls	r1, r3, #4
 8001176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800117a:	f1c1 0620 	rsb	r6, r1, #32
 800117e:	f1a1 0020 	sub.w	r0, r1, #32
 8001182:	fa22 f401 	lsr.w	r4, r2, r1
 8001186:	fa03 f606 	lsl.w	r6, r3, r6
 800118a:	4334      	orrs	r4, r6
 800118c:	fa23 f000 	lsr.w	r0, r3, r0
 8001190:	4304      	orrs	r4, r0
 8001192:	fa23 f501 	lsr.w	r5, r3, r1
 8001196:	b2a3      	uxth	r3, r4
 8001198:	4619      	mov	r1, r3
 800119a:	4660      	mov	r0, ip
 800119c:	f000 f85a 	bl	8001254 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011a4:	f000 f872 	bl	800128c <FLASH_WaitForLastOperation>
 80011a8:	4603      	mov	r3, r0
 80011aa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80011ac:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <HAL_FLASH_Program+0xdc>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	4a0c      	ldr	r2, [pc, #48]	@ (80011e4 <HAL_FLASH_Program+0xdc>)
 80011b2:	f023 0301 	bic.w	r3, r3, #1
 80011b6:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d107      	bne.n	80011ce <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80011be:	7dbb      	ldrb	r3, [r7, #22]
 80011c0:	3301      	adds	r3, #1
 80011c2:	75bb      	strb	r3, [r7, #22]
 80011c4:	7dba      	ldrb	r2, [r7, #22]
 80011c6:	7d7b      	ldrb	r3, [r7, #21]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d3cd      	bcc.n	8001168 <HAL_FLASH_Program+0x60>
 80011cc:	e000      	b.n	80011d0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80011ce:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011d0:	4b03      	ldr	r3, [pc, #12]	@ (80011e0 <HAL_FLASH_Program+0xd8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	761a      	strb	r2, [r3, #24]

  return status;
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e0:	20000158 	.word	0x20000158
 80011e4:	40022000 	.word	0x40022000

080011e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <HAL_FLASH_Unlock+0x40>)
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00d      	beq.n	800121a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <HAL_FLASH_Unlock+0x40>)
 8001200:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <HAL_FLASH_Unlock+0x44>)
 8001202:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_FLASH_Unlock+0x40>)
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <HAL_FLASH_Unlock+0x48>)
 8001208:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800120a:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <HAL_FLASH_Unlock+0x40>)
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800121a:	79fb      	ldrb	r3, [r7, #7]
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40022000 	.word	0x40022000
 800122c:	45670123 	.word	0x45670123
 8001230:	cdef89ab 	.word	0xcdef89ab

08001234 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <HAL_FLASH_Lock+0x1c>)
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <HAL_FLASH_Lock+0x1c>)
 800123e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001242:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	40022000 	.word	0x40022000

08001254 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <FLASH_Program_HalfWord+0x30>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <FLASH_Program_HalfWord+0x34>)
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <FLASH_Program_HalfWord+0x34>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	887a      	ldrh	r2, [r7, #2]
 8001276:	801a      	strh	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	20000158 	.word	0x20000158
 8001288:	40022000 	.word	0x40022000

0800128c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff fbec 	bl	8000a70 <HAL_GetTick>
 8001298:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800129a:	e010      	b.n	80012be <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a2:	d00c      	beq.n	80012be <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <FLASH_WaitForLastOperation+0x2e>
 80012aa:	f7ff fbe1 	bl	8000a70 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d201      	bcs.n	80012be <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e01f      	b.n	80012fe <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80012be:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <FLASH_WaitForLastOperation+0x7c>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d0e8      	beq.n	800129c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80012ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <FLASH_WaitForLastOperation+0x7c>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	d102      	bne.n	80012dc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80012d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <FLASH_WaitForLastOperation+0x7c>)
 80012d8:	2220      	movs	r2, #32
 80012da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <FLASH_WaitForLastOperation+0x7c>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d005      	beq.n	80012f4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012e8:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <FLASH_WaitForLastOperation+0x7c>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d103      	bne.n	80012fc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012f4:	f000 f80a 	bl	800130c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40022000 	.word	0x40022000

0800130c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001316:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <FLASH_SetErrorCode+0x5c>)
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	2b10      	cmp	r3, #16
 8001320:	d109      	bne.n	8001336 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <FLASH_SetErrorCode+0x60>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f043 0302 	orr.w	r3, r3, #2
 800132a:	4a10      	ldr	r2, [pc, #64]	@ (800136c <FLASH_SetErrorCode+0x60>)
 800132c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f043 0310 	orr.w	r3, r3, #16
 8001334:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <FLASH_SetErrorCode+0x5c>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b04      	cmp	r3, #4
 8001340:	d109      	bne.n	8001356 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <FLASH_SetErrorCode+0x60>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <FLASH_SetErrorCode+0x60>)
 800134c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001356:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <FLASH_SetErrorCode+0x5c>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	60d3      	str	r3, [r2, #12]
}  
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40022000 	.word	0x40022000
 800136c:	20000158 	.word	0x20000158

08001370 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001382:	4b2e      	ldr	r3, [pc, #184]	@ (800143c <HAL_FLASHEx_Erase+0xcc>)
 8001384:	7e1b      	ldrb	r3, [r3, #24]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_FLASHEx_Erase+0x1e>
 800138a:	2302      	movs	r3, #2
 800138c:	e052      	b.n	8001434 <HAL_FLASHEx_Erase+0xc4>
 800138e:	4b2b      	ldr	r3, [pc, #172]	@ (800143c <HAL_FLASHEx_Erase+0xcc>)
 8001390:	2201      	movs	r2, #1
 8001392:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d115      	bne.n	80013c8 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800139c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013a0:	f7ff ff74 	bl	800128c <FLASH_WaitForLastOperation>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d140      	bne.n	800142c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80013aa:	f000 f84b 	bl	8001444 <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013ae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013b2:	f7ff ff6b 	bl	800128c <FLASH_WaitForLastOperation>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80013ba:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <HAL_FLASHEx_Erase+0xd0>)
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	4a20      	ldr	r2, [pc, #128]	@ (8001440 <HAL_FLASHEx_Erase+0xd0>)
 80013c0:	f023 0304 	bic.w	r3, r3, #4
 80013c4:	6113      	str	r3, [r2, #16]
 80013c6:	e031      	b.n	800142c <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80013c8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013cc:	f7ff ff5e 	bl	800128c <FLASH_WaitForLastOperation>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d12a      	bne.n	800142c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	e019      	b.n	800141a <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f000 f846 	bl	8001478 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013f0:	f7ff ff4c 	bl	800128c <FLASH_WaitForLastOperation>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_FLASHEx_Erase+0xd0>)
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	4a10      	ldr	r2, [pc, #64]	@ (8001440 <HAL_FLASHEx_Erase+0xd0>)
 80013fe:	f023 0302 	bic.w	r3, r3, #2
 8001402:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	601a      	str	r2, [r3, #0]
            break;
 8001410:	e00c      	b.n	800142c <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001418:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	02da      	lsls	r2, r3, #11
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	4413      	add	r3, r2
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	429a      	cmp	r2, r3
 800142a:	d3dc      	bcc.n	80013e6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <HAL_FLASHEx_Erase+0xcc>)
 800142e:	2200      	movs	r2, #0
 8001430:	761a      	strb	r2, [r3, #24]

  return status;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000158 	.word	0x20000158
 8001440:	40022000 	.word	0x40022000

08001444 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001448:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <FLASH_MassErase+0x2c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <FLASH_MassErase+0x30>)
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	4a08      	ldr	r2, [pc, #32]	@ (8001474 <FLASH_MassErase+0x30>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <FLASH_MassErase+0x30>)
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <FLASH_MassErase+0x30>)
 8001460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001464:	6113      	str	r3, [r2, #16]
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	20000158 	.word	0x20000158
 8001474:	40022000 	.word	0x40022000

08001478 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <FLASH_PageErase+0x38>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <FLASH_PageErase+0x3c>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <FLASH_PageErase+0x3c>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001492:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <FLASH_PageErase+0x3c>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <FLASH_PageErase+0x3c>)
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <FLASH_PageErase+0x3c>)
 800149e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014a2:	6113      	str	r3, [r2, #16]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	20000158 	.word	0x20000158
 80014b4:	40022000 	.word	0x40022000

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	e160      	b.n	800178a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8152 	beq.w	8001784 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d005      	beq.n	80014f8 <HAL_GPIO_Init+0x40>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d130      	bne.n	800155a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800152e:	2201      	movs	r2, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 0201 	and.w	r2, r3, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b03      	cmp	r3, #3
 8001564:	d017      	beq.n	8001596 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d123      	bne.n	80015ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	220f      	movs	r2, #15
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	6939      	ldr	r1, [r7, #16]
 80015e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0203 	and.w	r2, r3, #3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 80ac 	beq.w	8001784 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162c:	4b5e      	ldr	r3, [pc, #376]	@ (80017a8 <HAL_GPIO_Init+0x2f0>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a5d      	ldr	r2, [pc, #372]	@ (80017a8 <HAL_GPIO_Init+0x2f0>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b5b      	ldr	r3, [pc, #364]	@ (80017a8 <HAL_GPIO_Init+0x2f0>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001644:	4a59      	ldr	r2, [pc, #356]	@ (80017ac <HAL_GPIO_Init+0x2f4>)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800166e:	d025      	beq.n	80016bc <HAL_GPIO_Init+0x204>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <HAL_GPIO_Init+0x2f8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d01f      	beq.n	80016b8 <HAL_GPIO_Init+0x200>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <HAL_GPIO_Init+0x2fc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d019      	beq.n	80016b4 <HAL_GPIO_Init+0x1fc>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a4d      	ldr	r2, [pc, #308]	@ (80017b8 <HAL_GPIO_Init+0x300>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d013      	beq.n	80016b0 <HAL_GPIO_Init+0x1f8>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a4c      	ldr	r2, [pc, #304]	@ (80017bc <HAL_GPIO_Init+0x304>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d00d      	beq.n	80016ac <HAL_GPIO_Init+0x1f4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a4b      	ldr	r2, [pc, #300]	@ (80017c0 <HAL_GPIO_Init+0x308>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d007      	beq.n	80016a8 <HAL_GPIO_Init+0x1f0>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a4a      	ldr	r2, [pc, #296]	@ (80017c4 <HAL_GPIO_Init+0x30c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d101      	bne.n	80016a4 <HAL_GPIO_Init+0x1ec>
 80016a0:	2306      	movs	r3, #6
 80016a2:	e00c      	b.n	80016be <HAL_GPIO_Init+0x206>
 80016a4:	2307      	movs	r3, #7
 80016a6:	e00a      	b.n	80016be <HAL_GPIO_Init+0x206>
 80016a8:	2305      	movs	r3, #5
 80016aa:	e008      	b.n	80016be <HAL_GPIO_Init+0x206>
 80016ac:	2304      	movs	r3, #4
 80016ae:	e006      	b.n	80016be <HAL_GPIO_Init+0x206>
 80016b0:	2303      	movs	r3, #3
 80016b2:	e004      	b.n	80016be <HAL_GPIO_Init+0x206>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e002      	b.n	80016be <HAL_GPIO_Init+0x206>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_GPIO_Init+0x206>
 80016bc:	2300      	movs	r3, #0
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	f002 0203 	and.w	r2, r2, #3
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	4093      	lsls	r3, r2
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016ce:	4937      	ldr	r1, [pc, #220]	@ (80017ac <HAL_GPIO_Init+0x2f4>)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016dc:	4b3a      	ldr	r3, [pc, #232]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001700:	4a31      	ldr	r2, [pc, #196]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001706:	4b30      	ldr	r3, [pc, #192]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800172a:	4a27      	ldr	r2, [pc, #156]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001730:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001754:	4a1c      	ldr	r2, [pc, #112]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800175a:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800177e:	4a12      	ldr	r2, [pc, #72]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3301      	adds	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	fa22 f303 	lsr.w	r3, r2, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	f47f ae97 	bne.w	80014c8 <HAL_GPIO_Init+0x10>
  }
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010000 	.word	0x40010000
 80017b0:	48000400 	.word	0x48000400
 80017b4:	48000800 	.word	0x48000800
 80017b8:	48000c00 	.word	0x48000c00
 80017bc:	48001000 	.word	0x48001000
 80017c0:	48001400 	.word	0x48001400
 80017c4:	48001800 	.word	0x48001800
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
 80017d8:	4613      	mov	r3, r2
 80017da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017dc:	787b      	ldrb	r3, [r7, #1]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017e8:	e002      	b.n	80017f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ea:	887a      	ldrh	r2, [r7, #2]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001802:	af00      	add	r7, sp, #0
 8001804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001808:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800180c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800180e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001812:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	f001 b83a 	b.w	8002896 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001826:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 816f 	beq.w	8001b16 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001838:	4bb5      	ldr	r3, [pc, #724]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b04      	cmp	r3, #4
 8001842:	d00c      	beq.n	800185e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001844:	4bb2      	ldr	r3, [pc, #712]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d15c      	bne.n	800190a <HAL_RCC_OscConfig+0x10e>
 8001850:	4baf      	ldr	r3, [pc, #700]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800185c:	d155      	bne.n	800190a <HAL_RCC_OscConfig+0x10e>
 800185e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001862:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001872:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001876:	fab3 f383 	clz	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	095b      	lsrs	r3, r3, #5
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d102      	bne.n	8001890 <HAL_RCC_OscConfig+0x94>
 800188a:	4ba1      	ldr	r3, [pc, #644]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	e015      	b.n	80018bc <HAL_RCC_OscConfig+0xc0>
 8001890:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001894:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80018a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018a8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80018ac:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80018b8:	4b95      	ldr	r3, [pc, #596]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018c0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80018c4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80018c8:	fa92 f2a2 	rbit	r2, r2
 80018cc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80018d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80018d4:	fab2 f282 	clz	r2, r2
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	f042 0220 	orr.w	r2, r2, #32
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	f002 021f 	and.w	r2, r2, #31
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8111 	beq.w	8001b14 <HAL_RCC_OscConfig+0x318>
 80018f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 8108 	bne.w	8001b14 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	f000 bfc6 	b.w	8002896 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800190e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x12e>
 800191c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a7b      	ldr	r2, [pc, #492]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e036      	b.n	8001998 <HAL_RCC_OscConfig+0x19c>
 800192a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x158>
 800193a:	4b75      	ldr	r3, [pc, #468]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a74      	ldr	r2, [pc, #464]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b72      	ldr	r3, [pc, #456]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a71      	ldr	r2, [pc, #452]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 800194c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e021      	b.n	8001998 <HAL_RCC_OscConfig+0x19c>
 8001954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001958:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0x184>
 8001966:	4b6a      	ldr	r3, [pc, #424]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a69      	ldr	r2, [pc, #420]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 800196c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	4b67      	ldr	r3, [pc, #412]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a66      	ldr	r2, [pc, #408]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e00b      	b.n	8001998 <HAL_RCC_OscConfig+0x19c>
 8001980:	4b63      	ldr	r3, [pc, #396]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a62      	ldr	r2, [pc, #392]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b60      	ldr	r3, [pc, #384]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a5f      	ldr	r2, [pc, #380]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001996:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d059      	beq.n	8001a5c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff f862 	bl	8000a70 <HAL_GetTick>
 80019ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b2:	f7ff f85d 	bl	8000a70 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	@ 0x64
 80019c0:	d902      	bls.n	80019c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	f000 bf67 	b.w	8002896 <HAL_RCC_OscConfig+0x109a>
 80019c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019cc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80019dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <HAL_RCC_OscConfig+0x1fe>
 80019f4:	4b46      	ldr	r3, [pc, #280]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	e015      	b.n	8001a26 <HAL_RCC_OscConfig+0x22a>
 80019fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019fe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001a0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a12:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001a16:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001a22:	4b3b      	ldr	r3, [pc, #236]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a2a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001a2e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001a32:	fa92 f2a2 	rbit	r2, r2
 8001a36:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001a3a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f042 0220 	orr.w	r2, r2, #32
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f002 021f 	and.w	r2, r2, #31
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0ab      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1b6>
 8001a5a:	e05c      	b.n	8001b16 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f808 	bl	8000a70 <HAL_GetTick>
 8001a60:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a66:	f7ff f803 	bl	8000a70 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	@ 0x64
 8001a74:	d902      	bls.n	8001a7c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	f000 bf0d 	b.w	8002896 <HAL_RCC_OscConfig+0x109a>
 8001a7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a80:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001a90:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a94:	fab3 f383 	clz	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d102      	bne.n	8001aae <HAL_RCC_OscConfig+0x2b2>
 8001aa8:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x2de>
 8001aae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001ac2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ac6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001aca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <HAL_RCC_OscConfig+0x314>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ade:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001ae2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001ae6:	fa92 f2a2 	rbit	r2, r2
 8001aea:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001aee:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001af2:	fab2 f282 	clz	r2, r2
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	f042 0220 	orr.w	r2, r2, #32
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	f002 021f 	and.w	r2, r2, #31
 8001b02:	2101      	movs	r1, #1
 8001b04:	fa01 f202 	lsl.w	r2, r1, r2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1ab      	bne.n	8001a66 <HAL_RCC_OscConfig+0x26a>
 8001b0e:	e002      	b.n	8001b16 <HAL_RCC_OscConfig+0x31a>
 8001b10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 817f 	beq.w	8001e2a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b2c:	4ba7      	ldr	r3, [pc, #668]	@ (8001dcc <HAL_RCC_OscConfig+0x5d0>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00c      	beq.n	8001b52 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b38:	4ba4      	ldr	r3, [pc, #656]	@ (8001dcc <HAL_RCC_OscConfig+0x5d0>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d173      	bne.n	8001c2c <HAL_RCC_OscConfig+0x430>
 8001b44:	4ba1      	ldr	r3, [pc, #644]	@ (8001dcc <HAL_RCC_OscConfig+0x5d0>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b50:	d16c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x430>
 8001b52:	2302      	movs	r3, #2
 8001b54:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001b64:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d102      	bne.n	8001b82 <HAL_RCC_OscConfig+0x386>
 8001b7c:	4b93      	ldr	r3, [pc, #588]	@ (8001dcc <HAL_RCC_OscConfig+0x5d0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	e013      	b.n	8001baa <HAL_RCC_OscConfig+0x3ae>
 8001b82:	2302      	movs	r3, #2
 8001b84:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001b94:	2302      	movs	r3, #2
 8001b96:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b9a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ba6:	4b89      	ldr	r3, [pc, #548]	@ (8001dcc <HAL_RCC_OscConfig+0x5d0>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	2202      	movs	r2, #2
 8001bac:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001bb0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001bb4:	fa92 f2a2 	rbit	r2, r2
 8001bb8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001bbc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001bc0:	fab2 f282 	clz	r2, r2
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f042 0220 	orr.w	r2, r2, #32
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	f002 021f 	and.w	r2, r2, #31
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00a      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x3f6>
 8001bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d002      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f000 be52 	b.w	8002896 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b76      	ldr	r3, [pc, #472]	@ (8001dcc <HAL_RCC_OscConfig+0x5d0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bfe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	21f8      	movs	r1, #248	@ 0xf8
 8001c08:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001c10:	fa91 f1a1 	rbit	r1, r1
 8001c14:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001c18:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001c1c:	fab1 f181 	clz	r1, r1
 8001c20:	b2c9      	uxtb	r1, r1
 8001c22:	408b      	lsls	r3, r1
 8001c24:	4969      	ldr	r1, [pc, #420]	@ (8001dcc <HAL_RCC_OscConfig+0x5d0>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	e0fe      	b.n	8001e2a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8088 	beq.w	8001d4e <HAL_RCC_OscConfig+0x552>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001c50:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c5e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	461a      	mov	r2, r3
 8001c66:	2301      	movs	r3, #1
 8001c68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7fe ff01 	bl	8000a70 <HAL_GetTick>
 8001c6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c74:	f7fe fefc 	bl	8000a70 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d902      	bls.n	8001c8a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	f000 be06 	b.w	8002896 <HAL_RCC_OscConfig+0x109a>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001c9c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d102      	bne.n	8001cba <HAL_RCC_OscConfig+0x4be>
 8001cb4:	4b45      	ldr	r3, [pc, #276]	@ (8001dcc <HAL_RCC_OscConfig+0x5d0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	e013      	b.n	8001ce2 <HAL_RCC_OscConfig+0x4e6>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001ccc:	2302      	movs	r3, #2
 8001cce:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001cd2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cde:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <HAL_RCC_OscConfig+0x5d0>)
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001ce8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001cec:	fa92 f2a2 	rbit	r2, r2
 8001cf0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001cf4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001cf8:	fab2 f282 	clz	r2, r2
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	f042 0220 	orr.w	r2, r2, #32
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f002 021f 	and.w	r2, r2, #31
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0af      	beq.n	8001c74 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <HAL_RCC_OscConfig+0x5d0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	21f8      	movs	r1, #248	@ 0xf8
 8001d2a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001d32:	fa91 f1a1 	rbit	r1, r1
 8001d36:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001d3a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001d3e:	fab1 f181 	clz	r1, r1
 8001d42:	b2c9      	uxtb	r1, r1
 8001d44:	408b      	lsls	r3, r1
 8001d46:	4921      	ldr	r1, [pc, #132]	@ (8001dcc <HAL_RCC_OscConfig+0x5d0>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	600b      	str	r3, [r1, #0]
 8001d4c:	e06d      	b.n	8001e2a <HAL_RCC_OscConfig+0x62e>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001d60:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d6e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	461a      	mov	r2, r3
 8001d76:	2300      	movs	r3, #0
 8001d78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fe79 	bl	8000a70 <HAL_GetTick>
 8001d7e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	e00a      	b.n	8001d9a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d84:	f7fe fe74 	bl	8000a70 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d902      	bls.n	8001d9a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	f000 bd7e 	b.w	8002896 <HAL_RCC_OscConfig+0x109a>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001dac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x5d4>
 8001dc4:	4b01      	ldr	r3, [pc, #4]	@ (8001dcc <HAL_RCC_OscConfig+0x5d0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	e016      	b.n	8001df8 <HAL_RCC_OscConfig+0x5fc>
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001de2:	2302      	movs	r3, #2
 8001de4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001de8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001df4:	4bbf      	ldr	r3, [pc, #764]	@ (80020f4 <HAL_RCC_OscConfig+0x8f8>)
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	2202      	movs	r2, #2
 8001dfa:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001dfe:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001e02:	fa92 f2a2 	rbit	r2, r2
 8001e06:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001e0a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001e0e:	fab2 f282 	clz	r2, r2
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f042 0220 	orr.w	r2, r2, #32
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	f002 021f 	and.w	r2, r2, #31
 8001e1e:	2101      	movs	r1, #1
 8001e20:	fa01 f202 	lsl.w	r2, r1, r2
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1ac      	bne.n	8001d84 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8113 	beq.w	8002066 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d07c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x74e>
 8001e50:	2301      	movs	r3, #1
 8001e52:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001e62:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4ba2      	ldr	r3, [pc, #648]	@ (80020f8 <HAL_RCC_OscConfig+0x8fc>)
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	461a      	mov	r2, r3
 8001e76:	2301      	movs	r3, #1
 8001e78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7fe fdf9 	bl	8000a70 <HAL_GetTick>
 8001e7e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e84:	f7fe fdf4 	bl	8000a70 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d902      	bls.n	8001e9a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	f000 bcfe 	b.w	8002896 <HAL_RCC_OscConfig+0x109a>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ea4:	fa93 f2a3 	rbit	r2, r3
 8001ea8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001eba:	2202      	movs	r2, #2
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	fa93 f2a3 	rbit	r2, r3
 8001ecc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ede:	2202      	movs	r2, #2
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	fa93 f2a3 	rbit	r2, r3
 8001ef0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ef8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	4b7e      	ldr	r3, [pc, #504]	@ (80020f4 <HAL_RCC_OscConfig+0x8f8>)
 8001efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001efe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f02:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f06:	2102      	movs	r1, #2
 8001f08:	6019      	str	r1, [r3, #0]
 8001f0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fa93 f1a3 	rbit	r1, r3
 8001f18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f20:	6019      	str	r1, [r3, #0]
  return result;
 8001f22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f26:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d09d      	beq.n	8001e84 <HAL_RCC_OscConfig+0x688>
 8001f48:	e08d      	b.n	8002066 <HAL_RCC_OscConfig+0x86a>
 8001f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f68:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f6c:	601a      	str	r2, [r3, #0]
  return result;
 8001f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f72:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f76:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4b5d      	ldr	r3, [pc, #372]	@ (80020f8 <HAL_RCC_OscConfig+0x8fc>)
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	461a      	mov	r2, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8c:	f7fe fd70 	bl	8000a70 <HAL_GetTick>
 8001f90:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f96:	f7fe fd6b 	bl	8000a70 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d902      	bls.n	8001fac <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	f000 bc75 	b.w	8002896 <HAL_RCC_OscConfig+0x109a>
 8001fac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fbc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fd8:	2202      	movs	r2, #2
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	fa93 f2a3 	rbit	r2, r3
 8001fea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002004:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	fa93 f2a3 	rbit	r2, r3
 800200e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002012:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002016:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	4b36      	ldr	r3, [pc, #216]	@ (80020f4 <HAL_RCC_OscConfig+0x8f8>)
 800201a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800201c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002020:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002024:	2102      	movs	r1, #2
 8002026:	6019      	str	r1, [r3, #0]
 8002028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	fa93 f1a3 	rbit	r1, r3
 8002036:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800203a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800203e:	6019      	str	r1, [r3, #0]
  return result;
 8002040:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002044:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d197      	bne.n	8001f96 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002066:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 81a5 	beq.w	80023c6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002082:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <HAL_RCC_OscConfig+0x8f8>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <HAL_RCC_OscConfig+0x8f8>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a18      	ldr	r2, [pc, #96]	@ (80020f4 <HAL_RCC_OscConfig+0x8f8>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002098:	61d3      	str	r3, [r2, #28]
 800209a:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <HAL_RCC_OscConfig+0x8f8>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80020a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <HAL_RCC_OscConfig+0x900>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d121      	bne.n	800210c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <HAL_RCC_OscConfig+0x900>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0b      	ldr	r2, [pc, #44]	@ (80020fc <HAL_RCC_OscConfig+0x900>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d4:	f7fe fccc 	bl	8000a70 <HAL_GetTick>
 80020d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	e010      	b.n	8002100 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020de:	f7fe fcc7 	bl	8000a70 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	@ 0x64
 80020ec:	d908      	bls.n	8002100 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e3d1      	b.n	8002896 <HAL_RCC_OscConfig+0x109a>
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	10908120 	.word	0x10908120
 80020fc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	4b8d      	ldr	r3, [pc, #564]	@ (8002338 <HAL_RCC_OscConfig+0xb3c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0e8      	beq.n	80020de <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002110:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x92e>
 800211c:	4b87      	ldr	r3, [pc, #540]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4a86      	ldr	r2, [pc, #536]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6213      	str	r3, [r2, #32]
 8002128:	e035      	b.n	8002196 <HAL_RCC_OscConfig+0x99a>
 800212a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x958>
 800213a:	4b80      	ldr	r3, [pc, #512]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a7f      	ldr	r2, [pc, #508]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	4b7d      	ldr	r3, [pc, #500]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a7c      	ldr	r2, [pc, #496]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	e020      	b.n	8002196 <HAL_RCC_OscConfig+0x99a>
 8002154:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002158:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0x982>
 8002164:	4b75      	ldr	r3, [pc, #468]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a74      	ldr	r2, [pc, #464]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 800216a:	f043 0304 	orr.w	r3, r3, #4
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	4b72      	ldr	r3, [pc, #456]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a71      	ldr	r2, [pc, #452]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	e00b      	b.n	8002196 <HAL_RCC_OscConfig+0x99a>
 800217e:	4b6f      	ldr	r3, [pc, #444]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a6e      	ldr	r2, [pc, #440]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	4b6c      	ldr	r3, [pc, #432]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a6b      	ldr	r2, [pc, #428]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002196:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8081 	beq.w	80022aa <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7fe fc62 	bl	8000a70 <HAL_GetTick>
 80021ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	e00b      	b.n	80021ca <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe fc5d 	bl	8000a70 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e365      	b.n	8002896 <HAL_RCC_OscConfig+0x109a>
 80021ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021d2:	2202      	movs	r2, #2
 80021d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021f6:	2202      	movs	r2, #2
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fa93 f2a3 	rbit	r2, r3
 8002208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002210:	601a      	str	r2, [r3, #0]
  return result;
 8002212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002216:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800221a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d102      	bne.n	8002236 <HAL_RCC_OscConfig+0xa3a>
 8002230:	4b42      	ldr	r3, [pc, #264]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	e013      	b.n	800225e <HAL_RCC_OscConfig+0xa62>
 8002236:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800223e:	2202      	movs	r2, #2
 8002240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002246:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	fa93 f2a3 	rbit	r2, r3
 8002250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002254:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	4b38      	ldr	r3, [pc, #224]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002262:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002266:	2102      	movs	r1, #2
 8002268:	6011      	str	r1, [r2, #0]
 800226a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800226e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	fa92 f1a2 	rbit	r1, r2
 8002278:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800227c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002280:	6011      	str	r1, [r2, #0]
  return result;
 8002282:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002286:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	fab2 f282 	clz	r2, r2
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	f002 021f 	and.w	r2, r2, #31
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f202 	lsl.w	r2, r1, r2
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d084      	beq.n	80021b2 <HAL_RCC_OscConfig+0x9b6>
 80022a8:	e083      	b.n	80023b2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022aa:	f7fe fbe1 	bl	8000a70 <HAL_GetTick>
 80022ae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7fe fbdc 	bl	8000a70 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e2e4      	b.n	8002896 <HAL_RCC_OscConfig+0x109a>
 80022cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022d4:	2202      	movs	r2, #2
 80022d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022dc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80022f8:	2202      	movs	r2, #2
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002300:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	fa93 f2a3 	rbit	r2, r3
 800230a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002312:	601a      	str	r2, [r3, #0]
  return result;
 8002314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002318:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800231c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d106      	bne.n	8002340 <HAL_RCC_OscConfig+0xb44>
 8002332:	4b02      	ldr	r3, [pc, #8]	@ (800233c <HAL_RCC_OscConfig+0xb40>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	e017      	b.n	8002368 <HAL_RCC_OscConfig+0xb6c>
 8002338:	40007000 	.word	0x40007000
 800233c:	40021000 	.word	0x40021000
 8002340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002344:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002348:	2202      	movs	r2, #2
 800234a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002350:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	fa93 f2a3 	rbit	r2, r3
 800235a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800235e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	4bb3      	ldr	r3, [pc, #716]	@ (8002634 <HAL_RCC_OscConfig+0xe38>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800236c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002370:	2102      	movs	r1, #2
 8002372:	6011      	str	r1, [r2, #0]
 8002374:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002378:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	fa92 f1a2 	rbit	r1, r2
 8002382:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002386:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800238a:	6011      	str	r1, [r2, #0]
  return result;
 800238c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002390:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	fab2 f282 	clz	r2, r2
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f002 021f 	and.w	r2, r2, #31
 80023a6:	2101      	movs	r1, #1
 80023a8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d180      	bne.n	80022b4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002634 <HAL_RCC_OscConfig+0xe38>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4a9d      	ldr	r2, [pc, #628]	@ (8002634 <HAL_RCC_OscConfig+0xe38>)
 80023c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 825e 	beq.w	8002894 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d8:	4b96      	ldr	r3, [pc, #600]	@ (8002634 <HAL_RCC_OscConfig+0xe38>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	f000 821f 	beq.w	8002824 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	f040 8170 	bne.w	80026d8 <HAL_RCC_OscConfig+0xedc>
 80023f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002400:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800240a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002418:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800241c:	601a      	str	r2, [r3, #0]
  return result;
 800241e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002422:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002426:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002432:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	461a      	mov	r2, r3
 800243a:	2300      	movs	r3, #0
 800243c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7fe fb17 	bl	8000a70 <HAL_GetTick>
 8002442:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002446:	e009      	b.n	800245c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fb12 	bl	8000a70 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e21c      	b.n	8002896 <HAL_RCC_OscConfig+0x109a>
 800245c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002460:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002464:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800246e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	fa93 f2a3 	rbit	r2, r3
 8002478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800247c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002480:	601a      	str	r2, [r3, #0]
  return result;
 8002482:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002486:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800248a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d102      	bne.n	80024a6 <HAL_RCC_OscConfig+0xcaa>
 80024a0:	4b64      	ldr	r3, [pc, #400]	@ (8002634 <HAL_RCC_OscConfig+0xe38>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	e027      	b.n	80024f6 <HAL_RCC_OscConfig+0xcfa>
 80024a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024aa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80024ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024de:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fa93 f2a3 	rbit	r2, r3
 80024e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ec:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	4b50      	ldr	r3, [pc, #320]	@ (8002634 <HAL_RCC_OscConfig+0xe38>)
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024fa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80024fe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002502:	6011      	str	r1, [r2, #0]
 8002504:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002508:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	fa92 f1a2 	rbit	r1, r2
 8002512:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002516:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800251a:	6011      	str	r1, [r2, #0]
  return result;
 800251c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002520:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	fab2 f282 	clz	r2, r2
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f002 021f 	and.w	r2, r2, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d182      	bne.n	8002448 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002542:	4b3c      	ldr	r3, [pc, #240]	@ (8002634 <HAL_RCC_OscConfig+0xe38>)
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	f023 020f 	bic.w	r2, r3, #15
 800254a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800254e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	4937      	ldr	r1, [pc, #220]	@ (8002634 <HAL_RCC_OscConfig+0xe38>)
 8002558:	4313      	orrs	r3, r2
 800255a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800255c:	4b35      	ldr	r3, [pc, #212]	@ (8002634 <HAL_RCC_OscConfig+0xe38>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002568:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6a19      	ldr	r1, [r3, #32]
 8002570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002574:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	430b      	orrs	r3, r1
 800257e:	492d      	ldr	r1, [pc, #180]	@ (8002634 <HAL_RCC_OscConfig+0xe38>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
 8002584:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002588:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800258c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002596:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025a8:	601a      	str	r2, [r3, #0]
  return result;
 80025aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80025b2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025be:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	461a      	mov	r2, r3
 80025c6:	2301      	movs	r3, #1
 80025c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7fe fa51 	bl	8000a70 <HAL_GetTick>
 80025ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d2:	e009      	b.n	80025e8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe fa4c 	bl	8000a70 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e156      	b.n	8002896 <HAL_RCC_OscConfig+0x109a>
 80025e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ec:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	fa93 f2a3 	rbit	r2, r3
 8002604:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002608:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800260c:	601a      	str	r2, [r3, #0]
  return result;
 800260e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002612:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002616:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d105      	bne.n	8002638 <HAL_RCC_OscConfig+0xe3c>
 800262c:	4b01      	ldr	r3, [pc, #4]	@ (8002634 <HAL_RCC_OscConfig+0xe38>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	e02a      	b.n	8002688 <HAL_RCC_OscConfig+0xe8c>
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800263c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002640:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800264a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	fa93 f2a3 	rbit	r2, r3
 8002654:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002658:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002662:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002666:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002670:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	fa93 f2a3 	rbit	r2, r3
 800267a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800267e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	4b86      	ldr	r3, [pc, #536]	@ (80028a0 <HAL_RCC_OscConfig+0x10a4>)
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800268c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002690:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002694:	6011      	str	r1, [r2, #0]
 8002696:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800269a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	fa92 f1a2 	rbit	r1, r2
 80026a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026a8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80026ac:	6011      	str	r1, [r2, #0]
  return result;
 80026ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026b2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	fab2 f282 	clz	r2, r2
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f042 0220 	orr.w	r2, r2, #32
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f002 021f 	and.w	r2, r2, #31
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f202 	lsl.w	r2, r1, r2
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f43f af7f 	beq.w	80025d4 <HAL_RCC_OscConfig+0xdd8>
 80026d6:	e0dd      	b.n	8002894 <HAL_RCC_OscConfig+0x1098>
 80026d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026dc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ea:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80026fc:	601a      	str	r2, [r3, #0]
  return result;
 80026fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002702:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002706:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002712:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	461a      	mov	r2, r3
 800271a:	2300      	movs	r3, #0
 800271c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7fe f9a7 	bl	8000a70 <HAL_GetTick>
 8002722:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002726:	e009      	b.n	800273c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe f9a2 	bl	8000a70 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0ac      	b.n	8002896 <HAL_RCC_OscConfig+0x109a>
 800273c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002740:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002744:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800274e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fa93 f2a3 	rbit	r2, r3
 8002758:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002760:	601a      	str	r2, [r3, #0]
  return result;
 8002762:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002766:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800276a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_RCC_OscConfig+0xf8a>
 8002780:	4b47      	ldr	r3, [pc, #284]	@ (80028a0 <HAL_RCC_OscConfig+0x10a4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e027      	b.n	80027d6 <HAL_RCC_OscConfig+0xfda>
 8002786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800278e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002798:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	fa93 f2a3 	rbit	r2, r3
 80027a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027be:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	fa93 f2a3 	rbit	r2, r3
 80027c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027cc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	4b33      	ldr	r3, [pc, #204]	@ (80028a0 <HAL_RCC_OscConfig+0x10a4>)
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027da:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027de:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027e2:	6011      	str	r1, [r2, #0]
 80027e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027e8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	fa92 f1a2 	rbit	r1, r2
 80027f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027f6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80027fa:	6011      	str	r1, [r2, #0]
  return result;
 80027fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002800:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	fab2 f282 	clz	r2, r2
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	f042 0220 	orr.w	r2, r2, #32
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f002 021f 	and.w	r2, r2, #31
 8002816:	2101      	movs	r1, #1
 8002818:	fa01 f202 	lsl.w	r2, r1, r2
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d182      	bne.n	8002728 <HAL_RCC_OscConfig+0xf2c>
 8002822:	e037      	b.n	8002894 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002828:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e02e      	b.n	8002896 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_RCC_OscConfig+0x10a4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002840:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <HAL_RCC_OscConfig+0x10a4>)
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002848:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800284c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002850:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002854:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	429a      	cmp	r2, r3
 800285e:	d117      	bne.n	8002890 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002860:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002864:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002874:	429a      	cmp	r2, r3
 8002876:	d10b      	bne.n	8002890 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002878:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800287c:	f003 020f 	and.w	r2, r3, #15
 8002880:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002884:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000

080028a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b09e      	sub	sp, #120	@ 0x78
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e162      	b.n	8002b82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028bc:	4b90      	ldr	r3, [pc, #576]	@ (8002b00 <HAL_RCC_ClockConfig+0x25c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d910      	bls.n	80028ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002b00 <HAL_RCC_ClockConfig+0x25c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 0207 	bic.w	r2, r3, #7
 80028d2:	498b      	ldr	r1, [pc, #556]	@ (8002b00 <HAL_RCC_ClockConfig+0x25c>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b89      	ldr	r3, [pc, #548]	@ (8002b00 <HAL_RCC_ClockConfig+0x25c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e14a      	b.n	8002b82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f8:	4b82      	ldr	r3, [pc, #520]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	497f      	ldr	r1, [pc, #508]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80dc 	beq.w	8002ad0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d13c      	bne.n	800299a <HAL_RCC_ClockConfig+0xf6>
 8002920:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002924:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800292e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d102      	bne.n	800294a <HAL_RCC_ClockConfig+0xa6>
 8002944:	4b6f      	ldr	r3, [pc, #444]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	e00f      	b.n	800296a <HAL_RCC_ClockConfig+0xc6>
 800294a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800294e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	667b      	str	r3, [r7, #100]	@ 0x64
 8002958:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800295c:	663b      	str	r3, [r7, #96]	@ 0x60
 800295e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002966:	4b67      	ldr	r3, [pc, #412]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800296e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002970:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002972:	fa92 f2a2 	rbit	r2, r2
 8002976:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002978:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800297a:	fab2 f282 	clz	r2, r2
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	f042 0220 	orr.w	r2, r2, #32
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	f002 021f 	and.w	r2, r2, #31
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f202 	lsl.w	r2, r1, r2
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d17b      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0f3      	b.n	8002b82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d13c      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x178>
 80029a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80029b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d102      	bne.n	80029cc <HAL_RCC_ClockConfig+0x128>
 80029c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	e00f      	b.n	80029ec <HAL_RCC_ClockConfig+0x148>
 80029cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80029da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029de:	643b      	str	r3, [r7, #64]	@ 0x40
 80029e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029e8:	4b46      	ldr	r3, [pc, #280]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029f0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80029f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029f4:	fa92 f2a2 	rbit	r2, r2
 80029f8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80029fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029fc:	fab2 f282 	clz	r2, r2
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	f042 0220 	orr.w	r2, r2, #32
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	f002 021f 	and.w	r2, r2, #31
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d13a      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b2      	b.n	8002b82 <HAL_RCC_ClockConfig+0x2de>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d102      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x1a0>
 8002a3e:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	e00d      	b.n	8002a60 <HAL_RCC_ClockConfig+0x1bc>
 8002a44:	2302      	movs	r3, #2
 8002a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a50:	2302      	movs	r3, #2
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	4b29      	ldr	r3, [pc, #164]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	2202      	movs	r2, #2
 8002a62:	61ba      	str	r2, [r7, #24]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	fa92 f2a2 	rbit	r2, r2
 8002a6a:	617a      	str	r2, [r7, #20]
  return result;
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	fab2 f282 	clz	r2, r2
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	f042 0220 	orr.w	r2, r2, #32
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f002 021f 	and.w	r2, r2, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e079      	b.n	8002b82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f023 0203 	bic.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	491a      	ldr	r1, [pc, #104]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa0:	f7fd ffe6 	bl	8000a70 <HAL_GetTick>
 8002aa4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa8:	f7fd ffe2 	bl	8000a70 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e061      	b.n	8002b82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <HAL_RCC_ClockConfig+0x260>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 020c 	and.w	r2, r3, #12
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1eb      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <HAL_RCC_ClockConfig+0x25c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d214      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <HAL_RCC_ClockConfig+0x25c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 0207 	bic.w	r2, r3, #7
 8002ae6:	4906      	ldr	r1, [pc, #24]	@ (8002b00 <HAL_RCC_ClockConfig+0x25c>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b04      	ldr	r3, [pc, #16]	@ (8002b00 <HAL_RCC_ClockConfig+0x25c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e040      	b.n	8002b82 <HAL_RCC_ClockConfig+0x2de>
 8002b00:	40022000 	.word	0x40022000
 8002b04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b1d      	ldr	r3, [pc, #116]	@ (8002b8c <HAL_RCC_ClockConfig+0x2e8>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	491a      	ldr	r1, [pc, #104]	@ (8002b8c <HAL_RCC_ClockConfig+0x2e8>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b32:	4b16      	ldr	r3, [pc, #88]	@ (8002b8c <HAL_RCC_ClockConfig+0x2e8>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4912      	ldr	r1, [pc, #72]	@ (8002b8c <HAL_RCC_ClockConfig+0x2e8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b46:	f000 f829 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b8c <HAL_RCC_ClockConfig+0x2e8>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b54:	22f0      	movs	r2, #240	@ 0xf0
 8002b56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	fa92 f2a2 	rbit	r2, r2
 8002b5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	fab2 f282 	clz	r2, r2
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	40d3      	lsrs	r3, r2
 8002b6a:	4a09      	ldr	r2, [pc, #36]	@ (8002b90 <HAL_RCC_ClockConfig+0x2ec>)
 8002b6c:	5cd3      	ldrb	r3, [r2, r3]
 8002b6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b72:	4a08      	ldr	r2, [pc, #32]	@ (8002b94 <HAL_RCC_ClockConfig+0x2f0>)
 8002b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b76:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <HAL_RCC_ClockConfig+0x2f4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd ff34 	bl	80009e8 <HAL_InitTick>
  
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3778      	adds	r7, #120	@ 0x78
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	080044f0 	.word	0x080044f0
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000004 	.word	0x20000004

08002b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d002      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x30>
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d003      	beq.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bca:	e029      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bce:	613b      	str	r3, [r7, #16]
      break;
 8002bd0:	e029      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	0c9b      	lsrs	r3, r3, #18
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	4a18      	ldr	r2, [pc, #96]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bdc:	5cd3      	ldrb	r3, [r2, r3]
 8002bde:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002be0:	4b14      	ldr	r3, [pc, #80]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	4a15      	ldr	r2, [pc, #84]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e007      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	fb02 f303 	mul.w	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	613b      	str	r3, [r7, #16]
      break;
 8002c1e:	e002      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c22:	613b      	str	r3, [r7, #16]
      break;
 8002c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c26:	693b      	ldr	r3, [r7, #16]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40021000 	.word	0x40021000
 8002c38:	007a1200 	.word	0x007a1200
 8002c3c:	08004508 	.word	0x08004508
 8002c40:	08004518 	.word	0x08004518

08002c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c48:	4b03      	ldr	r3, [pc, #12]	@ (8002c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000000 	.word	0x20000000

08002c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c62:	f7ff ffef 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c66:	4601      	mov	r1, r0
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c70:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002c74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	fa92 f2a2 	rbit	r2, r2
 8002c7c:	603a      	str	r2, [r7, #0]
  return result;
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	fab2 f282 	clz	r2, r2
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	40d3      	lsrs	r3, r2
 8002c88:	4a04      	ldr	r2, [pc, #16]	@ (8002c9c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	08004500 	.word	0x08004500

08002ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ca6:	f7ff ffcd 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002caa:	4601      	mov	r1, r0
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002cb4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002cb8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	fa92 f2a2 	rbit	r2, r2
 8002cc0:	603a      	str	r2, [r7, #0]
  return result;
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	fab2 f282 	clz	r2, r2
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	40d3      	lsrs	r3, r2
 8002ccc:	4a04      	ldr	r2, [pc, #16]	@ (8002ce0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	08004500 	.word	0x08004500

08002ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b092      	sub	sp, #72	@ 0x48
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80d4 	beq.w	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d08:	4b4e      	ldr	r3, [pc, #312]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10e      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d14:	4b4b      	ldr	r3, [pc, #300]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	4a4a      	ldr	r2, [pc, #296]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d1e:	61d3      	str	r3, [r2, #28]
 8002d20:	4b48      	ldr	r3, [pc, #288]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d32:	4b45      	ldr	r3, [pc, #276]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d118      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3e:	4b42      	ldr	r3, [pc, #264]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a41      	ldr	r2, [pc, #260]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4a:	f7fd fe91 	bl	8000a70 <HAL_GetTick>
 8002d4e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	e008      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d52:	f7fd fe8d 	bl	8000a70 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b64      	cmp	r3, #100	@ 0x64
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e1d6      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	4b38      	ldr	r3, [pc, #224]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d70:	4b34      	ldr	r3, [pc, #208]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8084 	beq.w	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d07c      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d90:	4b2c      	ldr	r3, [pc, #176]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d9e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b26      	ldr	r3, [pc, #152]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	461a      	mov	r2, r3
 8002dba:	2301      	movs	r3, #1
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2300      	movs	r3, #0
 8002de0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002de2:	4a18      	ldr	r2, [pc, #96]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d04b      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fd fe3d 	bl	8000a70 <HAL_GetTick>
 8002df6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7fd fe39 	bl	8000a70 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e180      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e10:	2302      	movs	r3, #2
 8002e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	61fb      	str	r3, [r7, #28]
  return result;
 8002e28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d108      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e3e:	4b01      	ldr	r3, [pc, #4]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	e00d      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	10908100 	.word	0x10908100
 8002e50:	2302      	movs	r3, #2
 8002e52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	4b9a      	ldr	r3, [pc, #616]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	2202      	movs	r2, #2
 8002e62:	613a      	str	r2, [r7, #16]
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	fa92 f2a2 	rbit	r2, r2
 8002e6a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	fab2 f282 	clz	r2, r2
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f002 021f 	and.w	r2, r2, #31
 8002e7e:	2101      	movs	r1, #1
 8002e80:	fa01 f202 	lsl.w	r2, r1, r2
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0b7      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e8a:	4b8f      	ldr	r3, [pc, #572]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	498c      	ldr	r1, [pc, #560]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea4:	4b88      	ldr	r3, [pc, #544]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4a87      	ldr	r2, [pc, #540]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ebc:	4b82      	ldr	r3, [pc, #520]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	f023 0203 	bic.w	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	497f      	ldr	r1, [pc, #508]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eda:	4b7b      	ldr	r3, [pc, #492]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4978      	ldr	r1, [pc, #480]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ef8:	4b73      	ldr	r3, [pc, #460]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	4970      	ldr	r1, [pc, #448]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f16:	4b6c      	ldr	r3, [pc, #432]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	f023 0210 	bic.w	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4969      	ldr	r1, [pc, #420]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f34:	4b64      	ldr	r3, [pc, #400]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f40:	4961      	ldr	r1, [pc, #388]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f52:	4b5d      	ldr	r3, [pc, #372]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	f023 0220 	bic.w	r2, r3, #32
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	495a      	ldr	r1, [pc, #360]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f70:	4b55      	ldr	r3, [pc, #340]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	4952      	ldr	r1, [pc, #328]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	494b      	ldr	r1, [pc, #300]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fac:	4b46      	ldr	r3, [pc, #280]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4943      	ldr	r1, [pc, #268]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fca:	4b3f      	ldr	r3, [pc, #252]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	493c      	ldr	r1, [pc, #240]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fe8:	4b37      	ldr	r3, [pc, #220]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff4:	4934      	ldr	r1, [pc, #208]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003006:	4b30      	ldr	r3, [pc, #192]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003012:	492d      	ldr	r1, [pc, #180]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003024:	4b28      	ldr	r3, [pc, #160]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003028:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003030:	4925      	ldr	r1, [pc, #148]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003032:	4313      	orrs	r3, r2
 8003034:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003042:	4b21      	ldr	r3, [pc, #132]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	491e      	ldr	r1, [pc, #120]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003050:	4313      	orrs	r3, r2
 8003052:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003060:	4b19      	ldr	r3, [pc, #100]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003064:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306c:	4916      	ldr	r1, [pc, #88]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800306e:	4313      	orrs	r3, r2
 8003070:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800307e:	4b12      	ldr	r3, [pc, #72]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308a:	490f      	ldr	r1, [pc, #60]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800308c:	4313      	orrs	r3, r2
 800308e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800309c:	4b0a      	ldr	r3, [pc, #40]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a8:	4907      	ldr	r1, [pc, #28]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80030ba:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	e002      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ce:	4913      	ldr	r1, [pc, #76]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80030e0:	4b0e      	ldr	r3, [pc, #56]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ec:	490b      	ldr	r1, [pc, #44]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80030fe:	4b07      	ldr	r3, [pc, #28]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800310a:	4904      	ldr	r1, [pc, #16]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800310c:	4313      	orrs	r3, r2
 800310e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3748      	adds	r7, #72	@ 0x48
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000

08003120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e040      	b.n	80031b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fb9c 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	@ 0x24
 800314c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fd0a 	bl	8003b80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fb33 	bl	80037d8 <UART_SetConfig>
 8003172:	4603      	mov	r3, r0
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e01b      	b.n	80031b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800318a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800319a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fd89 	bl	8003cc4 <UART_CheckIdleState>
 80031b2:	4603      	mov	r3, r0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b0ba      	sub	sp, #232	@ 0xe8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80031e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80031ea:	4013      	ands	r3, r2
 80031ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80031f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d115      	bne.n	8003224 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00f      	beq.n	8003224 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 82ab 	beq.w	8003770 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
      }
      return;
 8003222:	e2a5      	b.n	8003770 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8117 	beq.w	800345c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800322e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800323a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800323e:	4b85      	ldr	r3, [pc, #532]	@ (8003454 <HAL_UART_IRQHandler+0x298>)
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 810a 	beq.w	800345c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d011      	beq.n	8003278 <HAL_UART_IRQHandler+0xbc>
 8003254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2201      	movs	r2, #1
 8003266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d011      	beq.n	80032a8 <HAL_UART_IRQHandler+0xec>
 8003284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00b      	beq.n	80032a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2202      	movs	r2, #2
 8003296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800329e:	f043 0204 	orr.w	r2, r3, #4
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d011      	beq.n	80032d8 <HAL_UART_IRQHandler+0x11c>
 80032b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2204      	movs	r2, #4
 80032c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ce:	f043 0202 	orr.w	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d017      	beq.n	8003314 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2208      	movs	r2, #8
 8003302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800330a:	f043 0208 	orr.w	r2, r3, #8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <HAL_UART_IRQHandler+0x18a>
 8003320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003324:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00c      	beq.n	8003346 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8211 	beq.w	8003774 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00d      	beq.n	800337a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800335e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003380:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338e:	2b40      	cmp	r3, #64	@ 0x40
 8003390:	d005      	beq.n	800339e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003396:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800339a:	2b00      	cmp	r3, #0
 800339c:	d04f      	beq.n	800343e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fe6c 	bl	800407c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ae:	2b40      	cmp	r3, #64	@ 0x40
 80033b0:	d141      	bne.n	8003436 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3308      	adds	r3, #8
 80033b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3308      	adds	r3, #8
 80033da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1d9      	bne.n	80033b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003402:	2b00      	cmp	r3, #0
 8003404:	d013      	beq.n	800342e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800340a:	4a13      	ldr	r2, [pc, #76]	@ (8003458 <HAL_UART_IRQHandler+0x29c>)
 800340c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd fd2d 	bl	8000e72 <HAL_DMA_Abort_IT>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d017      	beq.n	800344e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003428:	4610      	mov	r0, r2
 800342a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	e00f      	b.n	800344e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f9c8 	bl	80037c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003434:	e00b      	b.n	800344e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f9c4 	bl	80037c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343c:	e007      	b.n	800344e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9c0 	bl	80037c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800344c:	e192      	b.n	8003774 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344e:	bf00      	nop
    return;
 8003450:	e190      	b.n	8003774 <HAL_UART_IRQHandler+0x5b8>
 8003452:	bf00      	nop
 8003454:	04000120 	.word	0x04000120
 8003458:	08004327 	.word	0x08004327

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003460:	2b01      	cmp	r3, #1
 8003462:	f040 814b 	bne.w	80036fc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 8144 	beq.w	80036fc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 813d 	beq.w	80036fc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2210      	movs	r2, #16
 8003488:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003494:	2b40      	cmp	r3, #64	@ 0x40
 8003496:	f040 80b5 	bne.w	8003604 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8164 	beq.w	8003778 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80034b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034ba:	429a      	cmp	r2, r3
 80034bc:	f080 815c 	bcs.w	8003778 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	f000 8086 	beq.w	80035e2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003500:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003504:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003508:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800350c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003518:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1da      	bne.n	80034d6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3308      	adds	r3, #8
 8003526:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003530:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003532:	f023 0301 	bic.w	r3, r3, #1
 8003536:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3308      	adds	r3, #8
 8003540:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003544:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003548:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800354c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003556:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e1      	bne.n	8003520 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3308      	adds	r3, #8
 8003562:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800356c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800356e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003572:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3308      	adds	r3, #8
 800357c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003580:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003582:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003586:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800358e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e3      	bne.n	800355c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035b2:	f023 0310 	bic.w	r3, r3, #16
 80035b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e4      	bne.n	80035a2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd fc0a 	bl	8000df6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7fc ffc3 	bl	8000588 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003602:	e0b9      	b.n	8003778 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003610:	b29b      	uxth	r3, r3
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80ab 	beq.w	800377c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003626:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 80a6 	beq.w	800377c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800363e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003644:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003652:	647b      	str	r3, [r7, #68]	@ 0x44
 8003654:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e4      	bne.n	8003630 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	3308      	adds	r3, #8
 800366c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	623b      	str	r3, [r7, #32]
   return(result);
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3308      	adds	r3, #8
 8003686:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800368a:	633a      	str	r2, [r7, #48]	@ 0x30
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e3      	bne.n	8003666 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	60fb      	str	r3, [r7, #12]
   return(result);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0310 	bic.w	r3, r3, #16
 80036c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	69b9      	ldr	r1, [r7, #24]
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	617b      	str	r3, [r7, #20]
   return(result);
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e4      	bne.n	80036b2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fc ff47 	bl	8000588 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036fa:	e03f      	b.n	800377c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003700:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00e      	beq.n	8003726 <HAL_UART_IRQHandler+0x56a>
 8003708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800370c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800371c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fe41 	bl	80043a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003724:	e02d      	b.n	8003782 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00e      	beq.n	8003750 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373a:	2b00      	cmp	r3, #0
 800373c:	d008      	beq.n	8003750 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01c      	beq.n	8003780 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
    }
    return;
 800374e:	e017      	b.n	8003780 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d012      	beq.n	8003782 <HAL_UART_IRQHandler+0x5c6>
 800375c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00c      	beq.n	8003782 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fdf2 	bl	8004352 <UART_EndTransmit_IT>
    return;
 800376e:	e008      	b.n	8003782 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003770:	bf00      	nop
 8003772:	e006      	b.n	8003782 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003774:	bf00      	nop
 8003776:	e004      	b.n	8003782 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003778:	bf00      	nop
 800377a:	e002      	b.n	8003782 <HAL_UART_IRQHandler+0x5c6>
      return;
 800377c:	bf00      	nop
 800377e:	e000      	b.n	8003782 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003780:	bf00      	nop
  }

}
 8003782:	37e8      	adds	r7, #232	@ 0xe8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4b92      	ldr	r3, [pc, #584]	@ (8003a4c <UART_SetConfig+0x274>)
 8003804:	4013      	ands	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	6979      	ldr	r1, [r7, #20]
 800380c:	430b      	orrs	r3, r1
 800380e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a80      	ldr	r2, [pc, #512]	@ (8003a50 <UART_SetConfig+0x278>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d120      	bne.n	8003896 <UART_SetConfig+0xbe>
 8003854:	4b7f      	ldr	r3, [pc, #508]	@ (8003a54 <UART_SetConfig+0x27c>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b03      	cmp	r3, #3
 800385e:	d817      	bhi.n	8003890 <UART_SetConfig+0xb8>
 8003860:	a201      	add	r2, pc, #4	@ (adr r2, 8003868 <UART_SetConfig+0x90>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	08003879 	.word	0x08003879
 800386c:	08003885 	.word	0x08003885
 8003870:	0800388b 	.word	0x0800388b
 8003874:	0800387f 	.word	0x0800387f
 8003878:	2301      	movs	r3, #1
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e0b5      	b.n	80039ea <UART_SetConfig+0x212>
 800387e:	2302      	movs	r3, #2
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e0b2      	b.n	80039ea <UART_SetConfig+0x212>
 8003884:	2304      	movs	r3, #4
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e0af      	b.n	80039ea <UART_SetConfig+0x212>
 800388a:	2308      	movs	r3, #8
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	e0ac      	b.n	80039ea <UART_SetConfig+0x212>
 8003890:	2310      	movs	r3, #16
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e0a9      	b.n	80039ea <UART_SetConfig+0x212>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a6f      	ldr	r2, [pc, #444]	@ (8003a58 <UART_SetConfig+0x280>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d124      	bne.n	80038ea <UART_SetConfig+0x112>
 80038a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a54 <UART_SetConfig+0x27c>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038ac:	d011      	beq.n	80038d2 <UART_SetConfig+0xfa>
 80038ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038b2:	d817      	bhi.n	80038e4 <UART_SetConfig+0x10c>
 80038b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038b8:	d011      	beq.n	80038de <UART_SetConfig+0x106>
 80038ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038be:	d811      	bhi.n	80038e4 <UART_SetConfig+0x10c>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <UART_SetConfig+0xf4>
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c8:	d006      	beq.n	80038d8 <UART_SetConfig+0x100>
 80038ca:	e00b      	b.n	80038e4 <UART_SetConfig+0x10c>
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e08b      	b.n	80039ea <UART_SetConfig+0x212>
 80038d2:	2302      	movs	r3, #2
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e088      	b.n	80039ea <UART_SetConfig+0x212>
 80038d8:	2304      	movs	r3, #4
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e085      	b.n	80039ea <UART_SetConfig+0x212>
 80038de:	2308      	movs	r3, #8
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e082      	b.n	80039ea <UART_SetConfig+0x212>
 80038e4:	2310      	movs	r3, #16
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e07f      	b.n	80039ea <UART_SetConfig+0x212>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a5b      	ldr	r2, [pc, #364]	@ (8003a5c <UART_SetConfig+0x284>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d124      	bne.n	800393e <UART_SetConfig+0x166>
 80038f4:	4b57      	ldr	r3, [pc, #348]	@ (8003a54 <UART_SetConfig+0x27c>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80038fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003900:	d011      	beq.n	8003926 <UART_SetConfig+0x14e>
 8003902:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003906:	d817      	bhi.n	8003938 <UART_SetConfig+0x160>
 8003908:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800390c:	d011      	beq.n	8003932 <UART_SetConfig+0x15a>
 800390e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003912:	d811      	bhi.n	8003938 <UART_SetConfig+0x160>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <UART_SetConfig+0x148>
 8003918:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800391c:	d006      	beq.n	800392c <UART_SetConfig+0x154>
 800391e:	e00b      	b.n	8003938 <UART_SetConfig+0x160>
 8003920:	2300      	movs	r3, #0
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e061      	b.n	80039ea <UART_SetConfig+0x212>
 8003926:	2302      	movs	r3, #2
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e05e      	b.n	80039ea <UART_SetConfig+0x212>
 800392c:	2304      	movs	r3, #4
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e05b      	b.n	80039ea <UART_SetConfig+0x212>
 8003932:	2308      	movs	r3, #8
 8003934:	77fb      	strb	r3, [r7, #31]
 8003936:	e058      	b.n	80039ea <UART_SetConfig+0x212>
 8003938:	2310      	movs	r3, #16
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e055      	b.n	80039ea <UART_SetConfig+0x212>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a47      	ldr	r2, [pc, #284]	@ (8003a60 <UART_SetConfig+0x288>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d124      	bne.n	8003992 <UART_SetConfig+0x1ba>
 8003948:	4b42      	ldr	r3, [pc, #264]	@ (8003a54 <UART_SetConfig+0x27c>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003950:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003954:	d011      	beq.n	800397a <UART_SetConfig+0x1a2>
 8003956:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800395a:	d817      	bhi.n	800398c <UART_SetConfig+0x1b4>
 800395c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003960:	d011      	beq.n	8003986 <UART_SetConfig+0x1ae>
 8003962:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003966:	d811      	bhi.n	800398c <UART_SetConfig+0x1b4>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <UART_SetConfig+0x19c>
 800396c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003970:	d006      	beq.n	8003980 <UART_SetConfig+0x1a8>
 8003972:	e00b      	b.n	800398c <UART_SetConfig+0x1b4>
 8003974:	2300      	movs	r3, #0
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e037      	b.n	80039ea <UART_SetConfig+0x212>
 800397a:	2302      	movs	r3, #2
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e034      	b.n	80039ea <UART_SetConfig+0x212>
 8003980:	2304      	movs	r3, #4
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e031      	b.n	80039ea <UART_SetConfig+0x212>
 8003986:	2308      	movs	r3, #8
 8003988:	77fb      	strb	r3, [r7, #31]
 800398a:	e02e      	b.n	80039ea <UART_SetConfig+0x212>
 800398c:	2310      	movs	r3, #16
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e02b      	b.n	80039ea <UART_SetConfig+0x212>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a33      	ldr	r2, [pc, #204]	@ (8003a64 <UART_SetConfig+0x28c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d124      	bne.n	80039e6 <UART_SetConfig+0x20e>
 800399c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a54 <UART_SetConfig+0x27c>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80039a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039a8:	d011      	beq.n	80039ce <UART_SetConfig+0x1f6>
 80039aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039ae:	d817      	bhi.n	80039e0 <UART_SetConfig+0x208>
 80039b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039b4:	d011      	beq.n	80039da <UART_SetConfig+0x202>
 80039b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039ba:	d811      	bhi.n	80039e0 <UART_SetConfig+0x208>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <UART_SetConfig+0x1f0>
 80039c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039c4:	d006      	beq.n	80039d4 <UART_SetConfig+0x1fc>
 80039c6:	e00b      	b.n	80039e0 <UART_SetConfig+0x208>
 80039c8:	2300      	movs	r3, #0
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	e00d      	b.n	80039ea <UART_SetConfig+0x212>
 80039ce:	2302      	movs	r3, #2
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e00a      	b.n	80039ea <UART_SetConfig+0x212>
 80039d4:	2304      	movs	r3, #4
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e007      	b.n	80039ea <UART_SetConfig+0x212>
 80039da:	2308      	movs	r3, #8
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e004      	b.n	80039ea <UART_SetConfig+0x212>
 80039e0:	2310      	movs	r3, #16
 80039e2:	77fb      	strb	r3, [r7, #31]
 80039e4:	e001      	b.n	80039ea <UART_SetConfig+0x212>
 80039e6:	2310      	movs	r3, #16
 80039e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039f2:	d16b      	bne.n	8003acc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80039f4:	7ffb      	ldrb	r3, [r7, #31]
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d838      	bhi.n	8003a6c <UART_SetConfig+0x294>
 80039fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003a00 <UART_SetConfig+0x228>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a2d 	.word	0x08003a2d
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a6d 	.word	0x08003a6d
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a6d 	.word	0x08003a6d
 8003a18:	08003a6d 	.word	0x08003a6d
 8003a1c:	08003a6d 	.word	0x08003a6d
 8003a20:	08003a43 	.word	0x08003a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7ff f91a 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 8003a28:	61b8      	str	r0, [r7, #24]
        break;
 8003a2a:	e024      	b.n	8003a76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7ff f938 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 8003a30:	61b8      	str	r0, [r7, #24]
        break;
 8003a32:	e020      	b.n	8003a76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a34:	4b0c      	ldr	r3, [pc, #48]	@ (8003a68 <UART_SetConfig+0x290>)
 8003a36:	61bb      	str	r3, [r7, #24]
        break;
 8003a38:	e01d      	b.n	8003a76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7ff f8af 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8003a3e:	61b8      	str	r0, [r7, #24]
        break;
 8003a40:	e019      	b.n	8003a76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a46:	61bb      	str	r3, [r7, #24]
        break;
 8003a48:	e015      	b.n	8003a76 <UART_SetConfig+0x29e>
 8003a4a:	bf00      	nop
 8003a4c:	efff69f3 	.word	0xefff69f3
 8003a50:	40013800 	.word	0x40013800
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40004400 	.word	0x40004400
 8003a5c:	40004800 	.word	0x40004800
 8003a60:	40004c00 	.word	0x40004c00
 8003a64:	40005000 	.word	0x40005000
 8003a68:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	77bb      	strb	r3, [r7, #30]
        break;
 8003a74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d073      	beq.n	8003b64 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	005a      	lsls	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	441a      	add	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b0f      	cmp	r3, #15
 8003a96:	d916      	bls.n	8003ac6 <UART_SetConfig+0x2ee>
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9e:	d212      	bcs.n	8003ac6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f023 030f 	bic.w	r3, r3, #15
 8003aa8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	89fb      	ldrh	r3, [r7, #14]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	89fa      	ldrh	r2, [r7, #14]
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	e04e      	b.n	8003b64 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	77bb      	strb	r3, [r7, #30]
 8003aca:	e04b      	b.n	8003b64 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003acc:	7ffb      	ldrb	r3, [r7, #31]
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d827      	bhi.n	8003b22 <UART_SetConfig+0x34a>
 8003ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad8 <UART_SetConfig+0x300>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003afd 	.word	0x08003afd
 8003adc:	08003b05 	.word	0x08003b05
 8003ae0:	08003b0d 	.word	0x08003b0d
 8003ae4:	08003b23 	.word	0x08003b23
 8003ae8:	08003b13 	.word	0x08003b13
 8003aec:	08003b23 	.word	0x08003b23
 8003af0:	08003b23 	.word	0x08003b23
 8003af4:	08003b23 	.word	0x08003b23
 8003af8:	08003b1b 	.word	0x08003b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003afc:	f7ff f8ae 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 8003b00:	61b8      	str	r0, [r7, #24]
        break;
 8003b02:	e013      	b.n	8003b2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b04:	f7ff f8cc 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 8003b08:	61b8      	str	r0, [r7, #24]
        break;
 8003b0a:	e00f      	b.n	8003b2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b7c <UART_SetConfig+0x3a4>)
 8003b0e:	61bb      	str	r3, [r7, #24]
        break;
 8003b10:	e00c      	b.n	8003b2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b12:	f7ff f843 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8003b16:	61b8      	str	r0, [r7, #24]
        break;
 8003b18:	e008      	b.n	8003b2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b1e:	61bb      	str	r3, [r7, #24]
        break;
 8003b20:	e004      	b.n	8003b2c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	77bb      	strb	r3, [r7, #30]
        break;
 8003b2a:	bf00      	nop
    }

    if (pclk != 0U)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d018      	beq.n	8003b64 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	085a      	lsrs	r2, r3, #1
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	441a      	add	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b0f      	cmp	r3, #15
 8003b4a:	d909      	bls.n	8003b60 <UART_SetConfig+0x388>
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b52:	d205      	bcs.n	8003b60 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60da      	str	r2, [r3, #12]
 8003b5e:	e001      	b.n	8003b64 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b70:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	007a1200 	.word	0x007a1200

08003b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01a      	beq.n	8003c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c7e:	d10a      	bne.n	8003c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  }
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b098      	sub	sp, #96	@ 0x60
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cd4:	f7fc fecc 	bl	8000a70 <HAL_GetTick>
 8003cd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d12e      	bne.n	8003d46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f88c 	bl	8003e14 <UART_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d021      	beq.n	8003d46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e6      	bne.n	8003d02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e062      	b.n	8003e0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d149      	bne.n	8003de8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f856 	bl	8003e14 <UART_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d03c      	beq.n	8003de8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e6      	bne.n	8003d6e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3308      	adds	r3, #8
 8003da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dc0:	61fa      	str	r2, [r7, #28]
 8003dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	69b9      	ldr	r1, [r7, #24]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e5      	bne.n	8003da0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e011      	b.n	8003e0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3758      	adds	r7, #88	@ 0x58
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e24:	e04f      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d04b      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2e:	f7fc fe1f 	bl	8000a70 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d302      	bcc.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e04e      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d037      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b80      	cmp	r3, #128	@ 0x80
 8003e5a:	d034      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b40      	cmp	r3, #64	@ 0x40
 8003e60:	d031      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d110      	bne.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2208      	movs	r2, #8
 8003e76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f8ff 	bl	800407c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2208      	movs	r2, #8
 8003e82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e029      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea0:	d111      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f8e5 	bl	800407c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e00f      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d0a0      	beq.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b096      	sub	sp, #88	@ 0x58
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	88fa      	ldrh	r2, [r7, #6]
 8003f08:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2222      	movs	r2, #34	@ 0x22
 8003f18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d028      	beq.n	8003f76 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f28:	4a3e      	ldr	r2, [pc, #248]	@ (8004024 <UART_Start_Receive_DMA+0x134>)
 8003f2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f30:	4a3d      	ldr	r2, [pc, #244]	@ (8004028 <UART_Start_Receive_DMA+0x138>)
 8003f32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f38:	4a3c      	ldr	r2, [pc, #240]	@ (800402c <UART_Start_Receive_DMA+0x13c>)
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f40:	2200      	movs	r2, #0
 8003f42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3324      	adds	r3, #36	@ 0x24
 8003f4e:	4619      	mov	r1, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f54:	461a      	mov	r2, r3
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	f7fc feee 	bl	8000d38 <HAL_DMA_Start_IT>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2210      	movs	r2, #16
 8003f66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e051      	b.n	800401a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d018      	beq.n	8003fb0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f92:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f9e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e6      	bne.n	8003f7e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3308      	adds	r3, #8
 8003fce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003fd0:	637a      	str	r2, [r7, #52]	@ 0x34
 8003fd2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e5      	bne.n	8003fb0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3308      	adds	r3, #8
 8004002:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004004:	623a      	str	r2, [r7, #32]
 8004006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	69f9      	ldr	r1, [r7, #28]
 800400a:	6a3a      	ldr	r2, [r7, #32]
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	61bb      	str	r3, [r7, #24]
   return(result);
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e5      	bne.n	8003fe4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3758      	adds	r7, #88	@ 0x58
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	08004145 	.word	0x08004145
 8004028:	0800426b 	.word	0x0800426b
 800402c:	080042a9 	.word	0x080042a9

08004030 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b089      	sub	sp, #36	@ 0x24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	60bb      	str	r3, [r7, #8]
   return(result);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6979      	ldr	r1, [r7, #20]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	613b      	str	r3, [r7, #16]
   return(result);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e6      	bne.n	8004038 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004070:	bf00      	nop
 8004072:	3724      	adds	r7, #36	@ 0x24
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800407c:	b480      	push	{r7}
 800407e:	b095      	sub	sp, #84	@ 0x54
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004098:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80040a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e6      	bne.n	8004084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3308      	adds	r3, #8
 80040bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3308      	adds	r3, #8
 80040d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e5      	bne.n	80040b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d118      	bne.n	8004124 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f023 0310 	bic.w	r3, r3, #16
 8004106:	647b      	str	r3, [r7, #68]	@ 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6979      	ldr	r1, [r7, #20]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	613b      	str	r3, [r7, #16]
   return(result);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e6      	bne.n	80040f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004138:	bf00      	nop
 800413a:	3754      	adds	r7, #84	@ 0x54
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b09c      	sub	sp, #112	@ 0x70
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b20      	cmp	r3, #32
 8004158:	d071      	beq.n	800423e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800415a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800415c:	2200      	movs	r2, #0
 800415e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004172:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004176:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004180:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004182:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004186:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800418e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e6      	bne.n	8004162 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3308      	adds	r3, #8
 800419a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	f023 0301 	bic.w	r3, r3, #1
 80041aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80041ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3308      	adds	r3, #8
 80041b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041b4:	647a      	str	r2, [r7, #68]	@ 0x44
 80041b6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e5      	bne.n	8004194 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	623b      	str	r3, [r7, #32]
   return(result);
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041de:	663b      	str	r3, [r7, #96]	@ 0x60
 80041e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3308      	adds	r3, #8
 80041e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041fe:	2220      	movs	r2, #32
 8004200:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004208:	2b01      	cmp	r3, #1
 800420a:	d118      	bne.n	800423e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	60fb      	str	r3, [r7, #12]
   return(result);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f023 0310 	bic.w	r3, r3, #16
 8004220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	69b9      	ldr	r1, [r7, #24]
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	617b      	str	r3, [r7, #20]
   return(result);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e6      	bne.n	800420c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800423e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004240:	2200      	movs	r2, #0
 8004242:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800424c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800424e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004252:	4619      	mov	r1, r3
 8004254:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004256:	f7fc f997 	bl	8000588 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800425a:	e002      	b.n	8004262 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800425c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800425e:	f7ff fa9d 	bl	800379c <HAL_UART_RxCpltCallback>
}
 8004262:	bf00      	nop
 8004264:	3770      	adds	r7, #112	@ 0x70
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004282:	2b01      	cmp	r3, #1
 8004284:	d109      	bne.n	800429a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	b29b      	uxth	r3, r3
 8004290:	4619      	mov	r1, r3
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7fc f978 	bl	8000588 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004298:	e002      	b.n	80042a0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f7ff fa88 	bl	80037b0 <HAL_UART_RxHalfCpltCallback>
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ce:	2b80      	cmp	r3, #128	@ 0x80
 80042d0:	d109      	bne.n	80042e6 <UART_DMAError+0x3e>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b21      	cmp	r3, #33	@ 0x21
 80042d6:	d106      	bne.n	80042e6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2200      	movs	r2, #0
 80042dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80042e0:	6978      	ldr	r0, [r7, #20]
 80042e2:	f7ff fea5 	bl	8004030 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f0:	2b40      	cmp	r3, #64	@ 0x40
 80042f2:	d109      	bne.n	8004308 <UART_DMAError+0x60>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b22      	cmp	r3, #34	@ 0x22
 80042f8:	d106      	bne.n	8004308 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	f7ff feba 	bl	800407c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800430e:	f043 0210 	orr.w	r2, r3, #16
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004318:	6978      	ldr	r0, [r7, #20]
 800431a:	f7ff fa53 	bl	80037c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800431e:	bf00      	nop
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff fa3d 	bl	80037c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b088      	sub	sp, #32
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	60bb      	str	r3, [r7, #8]
   return(result);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6979      	ldr	r1, [r7, #20]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	613b      	str	r3, [r7, #16]
   return(result);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e6      	bne.n	800435a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff f9f5 	bl	8003788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800439e:	bf00      	nop
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b08c      	sub	sp, #48	@ 0x30
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	4613      	mov	r3, r2
 80043c6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d142      	bne.n	8004458 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e03b      	b.n	800445a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	461a      	mov	r2, r3
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff fd7b 	bl	8003ef0 <UART_Start_Receive_DMA>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004400:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004404:	2b00      	cmp	r3, #0
 8004406:	d124      	bne.n	8004452 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800440c:	2b01      	cmp	r3, #1
 800440e:	d11d      	bne.n	800444c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2210      	movs	r2, #16
 8004416:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	617b      	str	r3, [r7, #20]
   return(result);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f043 0310 	orr.w	r3, r3, #16
 800442c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
 8004438:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6a39      	ldr	r1, [r7, #32]
 800443c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	61fb      	str	r3, [r7, #28]
   return(result);
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e6      	bne.n	8004418 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800444a:	e002      	b.n	8004452 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004452:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004456:	e000      	b.n	800445a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
  }
}
 800445a:	4618      	mov	r0, r3
 800445c:	3730      	adds	r7, #48	@ 0x30
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <memset>:
 8004462:	4402      	add	r2, r0
 8004464:	4603      	mov	r3, r0
 8004466:	4293      	cmp	r3, r2
 8004468:	d100      	bne.n	800446c <memset+0xa>
 800446a:	4770      	bx	lr
 800446c:	f803 1b01 	strb.w	r1, [r3], #1
 8004470:	e7f9      	b.n	8004466 <memset+0x4>
	...

08004474 <__libc_init_array>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	4d0d      	ldr	r5, [pc, #52]	@ (80044ac <__libc_init_array+0x38>)
 8004478:	4c0d      	ldr	r4, [pc, #52]	@ (80044b0 <__libc_init_array+0x3c>)
 800447a:	1b64      	subs	r4, r4, r5
 800447c:	10a4      	asrs	r4, r4, #2
 800447e:	2600      	movs	r6, #0
 8004480:	42a6      	cmp	r6, r4
 8004482:	d109      	bne.n	8004498 <__libc_init_array+0x24>
 8004484:	4d0b      	ldr	r5, [pc, #44]	@ (80044b4 <__libc_init_array+0x40>)
 8004486:	4c0c      	ldr	r4, [pc, #48]	@ (80044b8 <__libc_init_array+0x44>)
 8004488:	f000 f826 	bl	80044d8 <_init>
 800448c:	1b64      	subs	r4, r4, r5
 800448e:	10a4      	asrs	r4, r4, #2
 8004490:	2600      	movs	r6, #0
 8004492:	42a6      	cmp	r6, r4
 8004494:	d105      	bne.n	80044a2 <__libc_init_array+0x2e>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	f855 3b04 	ldr.w	r3, [r5], #4
 800449c:	4798      	blx	r3
 800449e:	3601      	adds	r6, #1
 80044a0:	e7ee      	b.n	8004480 <__libc_init_array+0xc>
 80044a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a6:	4798      	blx	r3
 80044a8:	3601      	adds	r6, #1
 80044aa:	e7f2      	b.n	8004492 <__libc_init_array+0x1e>
 80044ac:	08004528 	.word	0x08004528
 80044b0:	08004528 	.word	0x08004528
 80044b4:	08004528 	.word	0x08004528
 80044b8:	0800452c 	.word	0x0800452c

080044bc <memcpy>:
 80044bc:	440a      	add	r2, r1
 80044be:	4291      	cmp	r1, r2
 80044c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80044c4:	d100      	bne.n	80044c8 <memcpy+0xc>
 80044c6:	4770      	bx	lr
 80044c8:	b510      	push	{r4, lr}
 80044ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044d2:	4291      	cmp	r1, r2
 80044d4:	d1f9      	bne.n	80044ca <memcpy+0xe>
 80044d6:	bd10      	pop	{r4, pc}

080044d8 <_init>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	bf00      	nop
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr

080044e4 <_fini>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	bf00      	nop
 80044e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ea:	bc08      	pop	{r3}
 80044ec:	469e      	mov	lr, r3
 80044ee:	4770      	bx	lr

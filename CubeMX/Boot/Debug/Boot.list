
Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006300  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080064a0  080064a0  000074a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006548  08006548  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006548  08006548  00007548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006550  08006550  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006550  08006550  00007550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006554  08006554  00007554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006558  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          000004ec  20000068  20000068  00008068  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000554  20000554  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f54f  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000366a  00000000  00000000  000175e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0001ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093a  00000000  00000000  0001b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cb4  00000000  00000000  0001c1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014548  00000000  00000000  0003eeae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c359c  00000000  00000000  000533f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00116992  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003530  00000000  00000000  001169d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00119f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006488 	.word	0x08006488

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006488 	.word	0x08006488

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000286:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <MX_DMA_Init+0x38>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a0b      	ldr	r2, [pc, #44]	@ (80002b8 <MX_DMA_Init+0x38>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <MX_DMA_Init+0x38>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800029e:	2200      	movs	r2, #0
 80002a0:	2100      	movs	r1, #0
 80002a2:	2010      	movs	r0, #16
 80002a4:	f000 fccf 	bl	8000c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002a8:	2010      	movs	r0, #16
 80002aa:	f000 fce8 	bl	8000c7e <HAL_NVIC_EnableIRQ>

}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000

080002bc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08a      	sub	sp, #40	@ 0x28
 80002c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d2:	4b4f      	ldr	r3, [pc, #316]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a4e      	ldr	r2, [pc, #312]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b4c      	ldr	r3, [pc, #304]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002e6:	613b      	str	r3, [r7, #16]
 80002e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ea:	4b49      	ldr	r3, [pc, #292]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a48      	ldr	r2, [pc, #288]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b46      	ldr	r3, [pc, #280]	@ (8000410 <MX_GPIO_Init+0x154>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	4b43      	ldr	r3, [pc, #268]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a42      	ldr	r2, [pc, #264]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800030c:	6153      	str	r3, [r2, #20]
 800030e:	4b40      	ldr	r3, [pc, #256]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b3d      	ldr	r3, [pc, #244]	@ (8000410 <MX_GPIO_Init+0x154>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	4a3c      	ldr	r2, [pc, #240]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000324:	6153      	str	r3, [r2, #20]
 8000326:	4b3a      	ldr	r3, [pc, #232]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000332:	4b37      	ldr	r3, [pc, #220]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	4a36      	ldr	r2, [pc, #216]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000338:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800033c:	6153      	str	r3, [r2, #20]
 800033e:	4b34      	ldr	r3, [pc, #208]	@ (8000410 <MX_GPIO_Init+0x154>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2120      	movs	r1, #32
 800034e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000352:	f001 fa3f 	bl	80017d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000356:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800035c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	4619      	mov	r1, r3
 800036c:	4829      	ldr	r0, [pc, #164]	@ (8000414 <MX_GPIO_Init+0x158>)
 800036e:	f001 f8a7 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000372:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000376:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000378:	2303      	movs	r3, #3
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	4619      	mov	r1, r3
 8000386:	4823      	ldr	r0, [pc, #140]	@ (8000414 <MX_GPIO_Init+0x158>)
 8000388:	f001 f89a 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 800038c:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 8000390:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000392:	2303      	movs	r3, #3
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	4619      	mov	r1, r3
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003a4:	f001 f88c 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003a8:	2320      	movs	r3, #32
 80003aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2300      	movs	r3, #0
 80003b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	4619      	mov	r1, r3
 80003be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c2:	f001 f87d 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80003c6:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 80003ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003cc:	2303      	movs	r3, #3
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	4619      	mov	r1, r3
 80003da:	480f      	ldr	r0, [pc, #60]	@ (8000418 <MX_GPIO_Init+0x15c>)
 80003dc:	f001 f870 	bl	80014c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003e0:	2304      	movs	r3, #4
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e4:	2303      	movs	r3, #3
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	4619      	mov	r1, r3
 80003f2:	480a      	ldr	r0, [pc, #40]	@ (800041c <MX_GPIO_Init+0x160>)
 80003f4:	f001 f864 	bl	80014c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2100      	movs	r1, #0
 80003fc:	2028      	movs	r0, #40	@ 0x28
 80003fe:	f000 fc22 	bl	8000c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000402:	2028      	movs	r0, #40	@ 0x28
 8000404:	f000 fc3b 	bl	8000c7e <HAL_NVIC_EnableIRQ>

}
 8000408:	bf00      	nop
 800040a:	3728      	adds	r7, #40	@ 0x28
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40021000 	.word	0x40021000
 8000414:	48000800 	.word	0x48000800
 8000418:	48000400 	.word	0x48000400
 800041c:	48000c00 	.word	0x48000c00

08000420 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000428:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800042c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	2b00      	cmp	r3, #0
 8000436:	d013      	beq.n	8000460 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000438:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800043c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000440:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000444:	2b00      	cmp	r3, #0
 8000446:	d00b      	beq.n	8000460 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000448:	e000      	b.n	800044c <ITM_SendChar+0x2c>
    {
      __NOP();
 800044a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800044c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000456:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	b2d2      	uxtb	r2, r2
 800045e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b086      	sub	sp, #24
 8000472:	af00      	add	r7, sp, #0
 8000474:	60f8      	str	r0, [r7, #12]
 8000476:	60b9      	str	r1, [r7, #8]
 8000478:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	e009      	b.n	8000494 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	1c5a      	adds	r2, r3, #1
 8000484:	60ba      	str	r2, [r7, #8]
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ffc9 	bl	8000420 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	3301      	adds	r3, #1
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	697a      	ldr	r2, [r7, #20]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	429a      	cmp	r2, r3
 800049a:	dbf1      	blt.n	8000480 <_write+0x12>
  }
  return len;
 800049c:	687b      	ldr	r3, [r7, #4]
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == B1_Pin )
 80004b2:	88fb      	ldrh	r3, [r7, #6]
 80004b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004b8:	d104      	bne.n	80004c4 <HAL_GPIO_EXTI_Callback+0x1c>
		 *  When jumping to application directly from here, interrupts in application do not work.
		 *  This might be due to incorrect de-initialization of peripherals.
		 *  A work around can be to save a flag in flash that tells us it time to jump, perform a
		 *  system restart and jump to application first in main before initializing any peripherals.
		 * */
		systemRestart_setFlag( GO_APP );
 80004ba:	4804      	ldr	r0, [pc, #16]	@ (80004cc <HAL_GPIO_EXTI_Callback+0x24>)
 80004bc:	f005 f850 	bl	8005560 <systemRestart_setFlag>
		systemRestart_restart();
 80004c0:	f005 f890 	bl	80055e4 <systemRestart_restart>

	}
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	abb0abb0 	.word	0xabb0abb0

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	eeprom_init();
 80004d6:	f004 fa19 	bl	800490c <eeprom_init>
	// check if we should stay in boot or jump to app.

	uint32_t flag = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
	systemRestart_getFlag( &flag );
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	4618      	mov	r0, r3
 80004e2:	f005 f84b 	bl	800557c <systemRestart_getFlag>
	if( flag == GO_APP )
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a13      	ldr	r2, [pc, #76]	@ (8000538 <main+0x68>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d106      	bne.n	80004fc <main+0x2c>
	{
		// verify application before jump
		if( 0 == fwUpgrade_verifyApp()  )
 80004ee:	f004 fcff 	bl	8004ef0 <fwUpgrade_verifyApp>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d101      	bne.n	80004fc <main+0x2c>
		{
			// jump.
			systemRestart_jumpToApp();
 80004f8:	f005 f858 	bl	80055ac <systemRestart_jumpToApp>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fa62 	bl	80009c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f820 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f7ff feda 	bl	80002bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f7ff feba 	bl	8000280 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f98c 	bl	8000828 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // initiate command handler first to be ready to register other modules.
  cmdhandler_init( &huart2 );	// make sure cmdhandler is initialized before initializing other modules that want to register with it.
 8000510:	480a      	ldr	r0, [pc, #40]	@ (800053c <main+0x6c>)
 8000512:	f004 f867 	bl	80045e4 <cmdhandler_init>
  fwUpgrade_init();
 8000516:	f004 fc75 	bl	8004e04 <fwUpgrade_init>
  led_init();
 800051a:	f004 fd6f 	bl	8004ffc <led_init>
  flash_init();
 800051e:	f004 fb6d 	bl	8004bfc <flash_init>

  scheduler_init();
 8000522:	f004 fdc5 	bl	80050b0 <scheduler_init>
  scheduler_addTask( 1000, led_run );
 8000526:	4906      	ldr	r1, [pc, #24]	@ (8000540 <main+0x70>)
 8000528:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052c:	f004 fe1a 	bl	8005164 <scheduler_addTask>
  scheduler_run();
 8000530:	f004 fea2 	bl	8005278 <scheduler_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <main+0x64>
 8000538:	abb0abb0 	.word	0xabb0abb0
 800053c:	20000088 	.word	0x20000088
 8000540:	08005043 	.word	0x08005043

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b0a6      	sub	sp, #152	@ 0x98
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800054e:	2228      	movs	r2, #40	@ 0x28
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f005 fa1f 	bl	8005996 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2258      	movs	r2, #88	@ 0x58
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f005 fa11 	bl	8005996 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2310      	movs	r3, #16
 800057e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000588:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800058c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000590:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000594:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 f960 	bl	8001868 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005ae:	f000 f827 	bl	8000600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005cc:	2102      	movs	r1, #2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f99e 	bl	8002910 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005da:	f000 f811 	bl	8000600 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005de:	2302      	movs	r3, #2
 80005e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fbb1 	bl	8002d50 <HAL_RCCEx_PeriphCLKConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005f4:	f000 f804 	bl	8000600 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3798      	adds	r7, #152	@ 0x98
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000604:	b672      	cpsid	i
}
 8000606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <Error_Handler+0x8>

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <HAL_MspInit+0x44>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <HAL_MspInit+0x44>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6193      	str	r3, [r2, #24]
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <HAL_MspInit+0x44>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <HAL_MspInit+0x44>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a08      	ldr	r2, [pc, #32]	@ (8000650 <HAL_MspInit+0x44>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <HAL_MspInit+0x44>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000642:	2007      	movs	r0, #7
 8000644:	f000 faf4 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40021000 	.word	0x40021000

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <NMI_Handler+0x4>

0800065c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <HardFault_Handler+0x4>

08000664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <MemManage_Handler+0x4>

0800066c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <BusFault_Handler+0x4>

08000674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <UsageFault_Handler+0x4>

0800067c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006aa:	f000 f9d1 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006b8:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <DMA1_Channel6_IRQHandler+0x10>)
 80006ba:	f000 fc1c 	bl	8000ef6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000110 	.word	0x20000110

080006c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006cc:	4802      	ldr	r0, [pc, #8]	@ (80006d8 <USART2_IRQHandler+0x10>)
 80006ce:	f002 fe35 	bl	800333c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000088 	.word	0x20000088

080006dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006e4:	f001 f8a8 	bl	8001838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	e00a      	b.n	8000714 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006fe:	f3af 8000 	nop.w
 8000702:	4601      	mov	r1, r0
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	60ba      	str	r2, [r7, #8]
 800070a:	b2ca      	uxtb	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3301      	adds	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbf0      	blt.n	80006fe <_read+0x12>
  }

  return len;
 800071c:	687b      	ldr	r3, [r7, #4]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000732:	4618      	mov	r0, r3
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800074e:	605a      	str	r2, [r3, #4]
  return 0;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <_isatty>:

int _isatty(int file)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
	...

08000790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000798:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <_sbrk+0x5c>)
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <_sbrk+0x60>)
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <_sbrk+0x64>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	@ (80007f8 <_sbrk+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d207      	bcs.n	80007d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c0:	f005 f948 	bl	8005a54 <__errno>
 80007c4:	4603      	mov	r3, r0
 80007c6:	220c      	movs	r2, #12
 80007c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	e009      	b.n	80007e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	4a05      	ldr	r2, [pc, #20]	@ (80007f4 <_sbrk+0x64>)
 80007e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20010000 	.word	0x20010000
 80007f0:	00000400 	.word	0x00000400
 80007f4:	20000084 	.word	0x20000084
 80007f8:	20000558 	.word	0x20000558

080007fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <SystemInit+0x28>)
 8000802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000806:	4a07      	ldr	r2, [pc, #28]	@ (8000824 <SystemInit+0x28>)
 8000808:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800080c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <SystemInit+0x28>)
 8000812:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000816:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_USART2_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	@ (8000884 <MX_USART2_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_USART2_UART_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_USART2_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_USART2_UART_Init+0x58>)
 800086c:	f002 fc8e 	bl	800318c <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f7ff fec3 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000088 	.word	0x20000088
 8000884:	40004400 	.word	0x40004400

08000888 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	@ 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a2e      	ldr	r2, [pc, #184]	@ (8000960 <HAL_UART_MspInit+0xd8>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d156      	bne.n	8000958 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000964 <HAL_UART_MspInit+0xdc>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	4a2d      	ldr	r2, [pc, #180]	@ (8000964 <HAL_UART_MspInit+0xdc>)
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b4:	61d3      	str	r3, [r2, #28]
 80008b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000964 <HAL_UART_MspInit+0xdc>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b28      	ldr	r3, [pc, #160]	@ (8000964 <HAL_UART_MspInit+0xdc>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4a27      	ldr	r2, [pc, #156]	@ (8000964 <HAL_UART_MspInit+0xdc>)
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008cc:	6153      	str	r3, [r2, #20]
 80008ce:	4b25      	ldr	r3, [pc, #148]	@ (8000964 <HAL_UART_MspInit+0xdc>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008da:	230c      	movs	r3, #12
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ea:	2307      	movs	r3, #7
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f8:	f000 fde2 	bl	80014c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <HAL_UART_MspInit+0xe0>)
 80008fe:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <HAL_UART_MspInit+0xe4>)
 8000900:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000902:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <HAL_UART_MspInit+0xe0>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_UART_MspInit+0xe0>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <HAL_UART_MspInit+0xe0>)
 8000910:	2280      	movs	r2, #128	@ 0x80
 8000912:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_UART_MspInit+0xe0>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800091a:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <HAL_UART_MspInit+0xe0>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <HAL_UART_MspInit+0xe0>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <HAL_UART_MspInit+0xe0>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800092c:	480e      	ldr	r0, [pc, #56]	@ (8000968 <HAL_UART_MspInit+0xe0>)
 800092e:	f000 f9c0 	bl	8000cb2 <HAL_DMA_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000938:	f7ff fe62 	bl	8000600 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <HAL_UART_MspInit+0xe0>)
 8000940:	675a      	str	r2, [r3, #116]	@ 0x74
 8000942:	4a09      	ldr	r2, [pc, #36]	@ (8000968 <HAL_UART_MspInit+0xe0>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	2026      	movs	r0, #38	@ 0x26
 800094e:	f000 f97a 	bl	8000c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000952:	2026      	movs	r0, #38	@ 0x26
 8000954:	f000 f993 	bl	8000c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	@ 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40004400 	.word	0x40004400
 8000964:	40021000 	.word	0x40021000
 8000968:	20000110 	.word	0x20000110
 800096c:	4002006c 	.word	0x4002006c

08000970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000974:	f7ff ff42 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480c      	ldr	r0, [pc, #48]	@ (80009ac <LoopForever+0x6>)
  ldr r1, =_edata
 800097a:	490d      	ldr	r1, [pc, #52]	@ (80009b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800097c:	4a0d      	ldr	r2, [pc, #52]	@ (80009b4 <LoopForever+0xe>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000990:	4c0a      	ldr	r4, [pc, #40]	@ (80009bc <LoopForever+0x16>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099e:	f005 f85f 	bl	8005a60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a2:	f7ff fd95 	bl	80004d0 <main>

080009a6 <LoopForever>:

LoopForever:
    b LoopForever
 80009a6:	e7fe      	b.n	80009a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009b4:	08006558 	.word	0x08006558
  ldr r2, =_sbss
 80009b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009bc:	20000554 	.word	0x20000554

080009c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC1_2_IRQHandler>
	...

080009c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <HAL_Init+0x28>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	@ (80009ec <HAL_Init+0x28>)
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f92b 	bl	8000c30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f7ff fe14 	bl	800060c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f943 	bl	8000c9a <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f000 f90b 	bl	8000c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	@ (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000004 	.word	0x20000004

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_IncTick+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_IncTick+0x24>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <HAL_IncTick+0x24>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000154 	.word	0x20000154

08000a78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a7c:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000154 	.word	0x20000154

08000a90 <__NVIC_SetPriorityGrouping>:
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	@ (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_EnableIRQ>:
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db0b      	blt.n	8000b1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 021f 	and.w	r2, r3, #31
 8000b0c:	4907      	ldr	r1, [pc, #28]	@ (8000b2c <__NVIC_EnableIRQ+0x38>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	2001      	movs	r0, #1
 8000b16:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e100 	.word	0xe000e100

08000b30 <__NVIC_SetPriority>:
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db0a      	blt.n	8000b5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490c      	ldr	r1, [pc, #48]	@ (8000b7c <__NVIC_SetPriority+0x4c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b58:	e00a      	b.n	8000b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4908      	ldr	r1, [pc, #32]	@ (8000b80 <__NVIC_SetPriority+0x50>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	3b04      	subs	r3, #4
 8000b68:	0112      	lsls	r2, r2, #4
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	761a      	strb	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_EncodePriority>:
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	@ 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f1c3 0307 	rsb	r3, r3, #7
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2304      	movcs	r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d902      	bls.n	8000bb4 <NVIC_EncodePriority+0x30>
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	e000      	b.n	8000bb6 <NVIC_EncodePriority+0x32>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43d9      	mvns	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4313      	orrs	r3, r2
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3724      	adds	r7, #36	@ 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <SysTick_Config>:
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bfc:	d301      	bcc.n	8000c02 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00f      	b.n	8000c22 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <SysTick_Config+0x40>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f7ff ff8e 	bl	8000b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <SysTick_Config+0x40>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <SysTick_Config+0x40>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff29 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c58:	f7ff ff3e 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68b9      	ldr	r1, [r7, #8]
 8000c62:	6978      	ldr	r0, [r7, #20]
 8000c64:	f7ff ff8e 	bl	8000b84 <NVIC_EncodePriority>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff5d 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff31 	bl	8000af4 <__NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ffa2 	bl	8000bec <SysTick_Config>
 8000ca8:	4603      	mov	r3, r0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d101      	bne.n	8000cc8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e037      	b.n	8000d38 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2202      	movs	r2, #2
 8000ccc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000cde:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000ce2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 f9bc 	bl	8001098 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <HAL_DMA_Start_IT+0x20>
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e04a      	b.n	8000df6 <HAL_DMA_Start_IT+0xb6>
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d13a      	bne.n	8000de8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2202      	movs	r2, #2
 8000d76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0201 	bic.w	r2, r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f000 f950 	bl	800103c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d008      	beq.n	8000db6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 020e 	orr.w	r2, r2, #14
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	e00f      	b.n	8000dd6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f042 020a 	orr.w	r2, r2, #10
 8000dc4:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 0204 	bic.w	r2, r2, #4
 8000dd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f042 0201 	orr.w	r2, r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	e005      	b.n	8000df4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000df0:	2302      	movs	r3, #2
 8000df2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d101      	bne.n	8000e10 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e02e      	b.n	8000e6e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d008      	beq.n	8000e2c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e020      	b.n	8000e6e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 020e 	bic.w	r2, r2, #14
 8000e3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0201 	bic.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e54:	2101      	movs	r1, #1
 8000e56:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d005      	beq.n	8000e9c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2204      	movs	r2, #4
 8000e94:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e027      	b.n	8000eec <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 020e 	bic.w	r2, r2, #14
 8000eaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eca:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	4798      	blx	r3
    }
  }
  return status;
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	2204      	movs	r2, #4
 8000f14:	409a      	lsls	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d024      	beq.n	8000f68 <HAL_DMA_IRQHandler+0x72>
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d01f      	beq.n	8000f68 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0320 	and.w	r3, r3, #32
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d107      	bne.n	8000f46 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0204 	bic.w	r2, r2, #4
 8000f44:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f4e:	2104      	movs	r1, #4
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d06a      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f66:	e065      	b.n	8001034 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d02c      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0xdc>
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d027      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0320 	and.w	r3, r3, #32
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10b      	bne.n	8000fa8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 020a 	bic.w	r2, r2, #10
 8000f9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d035      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fd0:	e030      	b.n	8001034 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d028      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13e>
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d023      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 020e 	bic.w	r2, r2, #14
 8000ffa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001004:	2101      	movs	r1, #1
 8001006:	fa01 f202 	lsl.w	r2, r1, r2
 800100a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	4798      	blx	r3
    }
  }
}
 8001032:	e7ff      	b.n	8001034 <HAL_DMA_IRQHandler+0x13e>
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001052:	2101      	movs	r1, #1
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b10      	cmp	r3, #16
 8001068:	d108      	bne.n	800107c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800107a:	e007      	b.n	800108c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	60da      	str	r2, [r3, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <DMA_CalcBaseAndBitshift+0x60>)
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d80f      	bhi.n	80010cc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <DMA_CalcBaseAndBitshift+0x64>)
 80010b4:	4413      	add	r3, r2
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <DMA_CalcBaseAndBitshift+0x68>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	009a      	lsls	r2, r3, #2
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <DMA_CalcBaseAndBitshift+0x6c>)
 80010c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80010ca:	e00e      	b.n	80010ea <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <DMA_CalcBaseAndBitshift+0x70>)
 80010d4:	4413      	add	r3, r2
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <DMA_CalcBaseAndBitshift+0x68>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	009a      	lsls	r2, r3, #2
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a09      	ldr	r2, [pc, #36]	@ (800110c <DMA_CalcBaseAndBitshift+0x74>)
 80010e8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40020407 	.word	0x40020407
 80010fc:	bffdfff8 	.word	0xbffdfff8
 8001100:	cccccccd 	.word	0xcccccccd
 8001104:	40020000 	.word	0x40020000
 8001108:	bffdfbf8 	.word	0xbffdfbf8
 800110c:	40020400 	.word	0x40020400

08001110 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8001122:	2300      	movs	r3, #0
 8001124:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8001126:	2300      	movs	r3, #0
 8001128:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800112a:	4b2f      	ldr	r3, [pc, #188]	@ (80011e8 <HAL_FLASH_Program+0xd8>)
 800112c:	7e1b      	ldrb	r3, [r3, #24]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d101      	bne.n	8001136 <HAL_FLASH_Program+0x26>
 8001132:	2302      	movs	r3, #2
 8001134:	e054      	b.n	80011e0 <HAL_FLASH_Program+0xd0>
 8001136:	4b2c      	ldr	r3, [pc, #176]	@ (80011e8 <HAL_FLASH_Program+0xd8>)
 8001138:	2201      	movs	r2, #1
 800113a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800113c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001140:	f000 f8a8 	bl	8001294 <FLASH_WaitForLastOperation>
 8001144:	4603      	mov	r3, r0
 8001146:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d144      	bne.n	80011d8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d102      	bne.n	800115a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001154:	2301      	movs	r3, #1
 8001156:	757b      	strb	r3, [r7, #21]
 8001158:	e007      	b.n	800116a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d102      	bne.n	8001166 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001160:	2302      	movs	r3, #2
 8001162:	757b      	strb	r3, [r7, #21]
 8001164:	e001      	b.n	800116a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001166:	2304      	movs	r3, #4
 8001168:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800116a:	2300      	movs	r3, #0
 800116c:	75bb      	strb	r3, [r7, #22]
 800116e:	e02d      	b.n	80011cc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001170:	7dbb      	ldrb	r3, [r7, #22]
 8001172:	005a      	lsls	r2, r3, #1
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	eb02 0c03 	add.w	ip, r2, r3
 800117a:	7dbb      	ldrb	r3, [r7, #22]
 800117c:	0119      	lsls	r1, r3, #4
 800117e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001182:	f1c1 0620 	rsb	r6, r1, #32
 8001186:	f1a1 0020 	sub.w	r0, r1, #32
 800118a:	fa22 f401 	lsr.w	r4, r2, r1
 800118e:	fa03 f606 	lsl.w	r6, r3, r6
 8001192:	4334      	orrs	r4, r6
 8001194:	fa23 f000 	lsr.w	r0, r3, r0
 8001198:	4304      	orrs	r4, r0
 800119a:	fa23 f501 	lsr.w	r5, r3, r1
 800119e:	b2a3      	uxth	r3, r4
 80011a0:	4619      	mov	r1, r3
 80011a2:	4660      	mov	r0, ip
 80011a4:	f000 f85a 	bl	800125c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011ac:	f000 f872 	bl	8001294 <FLASH_WaitForLastOperation>
 80011b0:	4603      	mov	r3, r0
 80011b2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80011b4:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <HAL_FLASH_Program+0xdc>)
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	4a0c      	ldr	r2, [pc, #48]	@ (80011ec <HAL_FLASH_Program+0xdc>)
 80011ba:	f023 0301 	bic.w	r3, r3, #1
 80011be:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d107      	bne.n	80011d6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80011c6:	7dbb      	ldrb	r3, [r7, #22]
 80011c8:	3301      	adds	r3, #1
 80011ca:	75bb      	strb	r3, [r7, #22]
 80011cc:	7dba      	ldrb	r2, [r7, #22]
 80011ce:	7d7b      	ldrb	r3, [r7, #21]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d3cd      	bcc.n	8001170 <HAL_FLASH_Program+0x60>
 80011d4:	e000      	b.n	80011d8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80011d6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <HAL_FLASH_Program+0xd8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	761a      	strb	r2, [r3, #24]

  return status;
 80011de:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e8:	20000158 	.word	0x20000158
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001230 <HAL_FLASH_Unlock+0x40>)
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00d      	beq.n	8001222 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001206:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <HAL_FLASH_Unlock+0x40>)
 8001208:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <HAL_FLASH_Unlock+0x44>)
 800120a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_FLASH_Unlock+0x40>)
 800120e:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <HAL_FLASH_Unlock+0x48>)
 8001210:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001212:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <HAL_FLASH_Unlock+0x40>)
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001222:	79fb      	ldrb	r3, [r7, #7]
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40022000 	.word	0x40022000
 8001234:	45670123 	.word	0x45670123
 8001238:	cdef89ab 	.word	0xcdef89ab

0800123c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <HAL_FLASH_Lock+0x1c>)
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <HAL_FLASH_Lock+0x1c>)
 8001246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800124a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40022000 	.word	0x40022000

0800125c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <FLASH_Program_HalfWord+0x30>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <FLASH_Program_HalfWord+0x34>)
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <FLASH_Program_HalfWord+0x34>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	887a      	ldrh	r2, [r7, #2]
 800127e:	801a      	strh	r2, [r3, #0]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	20000158 	.word	0x20000158
 8001290:	40022000 	.word	0x40022000

08001294 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff fbec 	bl	8000a78 <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80012a2:	e010      	b.n	80012c6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012aa:	d00c      	beq.n	80012c6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <FLASH_WaitForLastOperation+0x2e>
 80012b2:	f7ff fbe1 	bl	8000a78 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d201      	bcs.n	80012c6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e01f      	b.n	8001306 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <FLASH_WaitForLastOperation+0x7c>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d0e8      	beq.n	80012a4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <FLASH_WaitForLastOperation+0x7c>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	2b20      	cmp	r3, #32
 80012dc:	d102      	bne.n	80012e4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <FLASH_WaitForLastOperation+0x7c>)
 80012e0:	2220      	movs	r2, #32
 80012e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <FLASH_WaitForLastOperation+0x7c>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b10      	cmp	r3, #16
 80012ee:	d005      	beq.n	80012fc <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <FLASH_WaitForLastOperation+0x7c>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d103      	bne.n	8001304 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012fc:	f000 f80a 	bl	8001314 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000

08001314 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <FLASH_SetErrorCode+0x5c>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	2b10      	cmp	r3, #16
 8001328:	d109      	bne.n	800133e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <FLASH_SetErrorCode+0x60>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	4a10      	ldr	r2, [pc, #64]	@ (8001374 <FLASH_SetErrorCode+0x60>)
 8001334:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f043 0310 	orr.w	r3, r3, #16
 800133c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800133e:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <FLASH_SetErrorCode+0x5c>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	2b04      	cmp	r3, #4
 8001348:	d109      	bne.n	800135e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <FLASH_SetErrorCode+0x60>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <FLASH_SetErrorCode+0x60>)
 8001354:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800135e:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <FLASH_SetErrorCode+0x5c>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60d3      	str	r3, [r2, #12]
}  
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40022000 	.word	0x40022000
 8001374:	20000158 	.word	0x20000158

08001378 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800138a:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <HAL_FLASHEx_Erase+0xcc>)
 800138c:	7e1b      	ldrb	r3, [r3, #24]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_FLASHEx_Erase+0x1e>
 8001392:	2302      	movs	r3, #2
 8001394:	e052      	b.n	800143c <HAL_FLASHEx_Erase+0xc4>
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <HAL_FLASHEx_Erase+0xcc>)
 8001398:	2201      	movs	r2, #1
 800139a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d115      	bne.n	80013d0 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80013a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013a8:	f7ff ff74 	bl	8001294 <FLASH_WaitForLastOperation>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d140      	bne.n	8001434 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80013b2:	f000 f84b 	bl	800144c <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013b6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013ba:	f7ff ff6b 	bl	8001294 <FLASH_WaitForLastOperation>
 80013be:	4603      	mov	r3, r0
 80013c0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80013c2:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <HAL_FLASHEx_Erase+0xd0>)
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	4a20      	ldr	r2, [pc, #128]	@ (8001448 <HAL_FLASHEx_Erase+0xd0>)
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	6113      	str	r3, [r2, #16]
 80013ce:	e031      	b.n	8001434 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80013d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013d4:	f7ff ff5e 	bl	8001294 <FLASH_WaitForLastOperation>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d12a      	bne.n	8001434 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	e019      	b.n	8001422 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80013ee:	68b8      	ldr	r0, [r7, #8]
 80013f0:	f000 f846 	bl	8001480 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013f4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80013f8:	f7ff ff4c 	bl	8001294 <FLASH_WaitForLastOperation>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <HAL_FLASHEx_Erase+0xd0>)
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	4a10      	ldr	r2, [pc, #64]	@ (8001448 <HAL_FLASHEx_Erase+0xd0>)
 8001406:	f023 0302 	bic.w	r3, r3, #2
 800140a:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	601a      	str	r2, [r3, #0]
            break;
 8001418:	e00c      	b.n	8001434 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001420:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	02da      	lsls	r2, r3, #11
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4413      	add	r3, r2
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	429a      	cmp	r2, r3
 8001432:	d3dc      	bcc.n	80013ee <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001434:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <HAL_FLASHEx_Erase+0xcc>)
 8001436:	2200      	movs	r2, #0
 8001438:	761a      	strb	r2, [r3, #24]

  return status;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000158 	.word	0x20000158
 8001448:	40022000 	.word	0x40022000

0800144c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001450:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <FLASH_MassErase+0x2c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <FLASH_MassErase+0x30>)
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	4a08      	ldr	r2, [pc, #32]	@ (800147c <FLASH_MassErase+0x30>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <FLASH_MassErase+0x30>)
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <FLASH_MassErase+0x30>)
 8001468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800146c:	6113      	str	r3, [r2, #16]
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	20000158 	.word	0x20000158
 800147c:	40022000 	.word	0x40022000

08001480 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <FLASH_PageErase+0x38>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <FLASH_PageErase+0x3c>)
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <FLASH_PageErase+0x3c>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800149a:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <FLASH_PageErase+0x3c>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <FLASH_PageErase+0x3c>)
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	4a05      	ldr	r2, [pc, #20]	@ (80014bc <FLASH_PageErase+0x3c>)
 80014a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014aa:	6113      	str	r3, [r2, #16]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	20000158 	.word	0x20000158
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	e160      	b.n	8001792 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2101      	movs	r1, #1
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8152 	beq.w	800178c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d005      	beq.n	8001500 <HAL_GPIO_Init+0x40>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d130      	bne.n	8001562 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001536:	2201      	movs	r2, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	f003 0201 	and.w	r2, r3, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b03      	cmp	r3, #3
 800156c:	d017      	beq.n	800159e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d123      	bne.n	80015f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	08da      	lsrs	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3208      	adds	r2, #8
 80015ec:	6939      	ldr	r1, [r7, #16]
 80015ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0203 	and.w	r2, r3, #3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 80ac 	beq.w	800178c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001634:	4b5e      	ldr	r3, [pc, #376]	@ (80017b0 <HAL_GPIO_Init+0x2f0>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a5d      	ldr	r2, [pc, #372]	@ (80017b0 <HAL_GPIO_Init+0x2f0>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b5b      	ldr	r3, [pc, #364]	@ (80017b0 <HAL_GPIO_Init+0x2f0>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800164c:	4a59      	ldr	r2, [pc, #356]	@ (80017b4 <HAL_GPIO_Init+0x2f4>)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	220f      	movs	r2, #15
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001676:	d025      	beq.n	80016c4 <HAL_GPIO_Init+0x204>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a4f      	ldr	r2, [pc, #316]	@ (80017b8 <HAL_GPIO_Init+0x2f8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d01f      	beq.n	80016c0 <HAL_GPIO_Init+0x200>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a4e      	ldr	r2, [pc, #312]	@ (80017bc <HAL_GPIO_Init+0x2fc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d019      	beq.n	80016bc <HAL_GPIO_Init+0x1fc>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a4d      	ldr	r2, [pc, #308]	@ (80017c0 <HAL_GPIO_Init+0x300>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d013      	beq.n	80016b8 <HAL_GPIO_Init+0x1f8>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a4c      	ldr	r2, [pc, #304]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00d      	beq.n	80016b4 <HAL_GPIO_Init+0x1f4>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a4b      	ldr	r2, [pc, #300]	@ (80017c8 <HAL_GPIO_Init+0x308>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d007      	beq.n	80016b0 <HAL_GPIO_Init+0x1f0>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a4a      	ldr	r2, [pc, #296]	@ (80017cc <HAL_GPIO_Init+0x30c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_GPIO_Init+0x1ec>
 80016a8:	2306      	movs	r3, #6
 80016aa:	e00c      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016ac:	2307      	movs	r3, #7
 80016ae:	e00a      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016b0:	2305      	movs	r3, #5
 80016b2:	e008      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016b4:	2304      	movs	r3, #4
 80016b6:	e006      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016b8:	2303      	movs	r3, #3
 80016ba:	e004      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016bc:	2302      	movs	r3, #2
 80016be:	e002      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_GPIO_Init+0x206>
 80016c4:	2300      	movs	r3, #0
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	4093      	lsls	r3, r2
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016d6:	4937      	ldr	r1, [pc, #220]	@ (80017b4 <HAL_GPIO_Init+0x2f4>)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016e4:	4b3a      	ldr	r3, [pc, #232]	@ (80017d0 <HAL_GPIO_Init+0x310>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001708:	4a31      	ldr	r2, [pc, #196]	@ (80017d0 <HAL_GPIO_Init+0x310>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800170e:	4b30      	ldr	r3, [pc, #192]	@ (80017d0 <HAL_GPIO_Init+0x310>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001732:	4a27      	ldr	r2, [pc, #156]	@ (80017d0 <HAL_GPIO_Init+0x310>)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001738:	4b25      	ldr	r3, [pc, #148]	@ (80017d0 <HAL_GPIO_Init+0x310>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800175c:	4a1c      	ldr	r2, [pc, #112]	@ (80017d0 <HAL_GPIO_Init+0x310>)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001762:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <HAL_GPIO_Init+0x310>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <HAL_GPIO_Init+0x310>)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	f47f ae97 	bne.w	80014d0 <HAL_GPIO_Init+0x10>
  }
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000
 80017b8:	48000400 	.word	0x48000400
 80017bc:	48000800 	.word	0x48000800
 80017c0:	48000c00 	.word	0x48000c00
 80017c4:	48001000 	.word	0x48001000
 80017c8:	48001400 	.word	0x48001400
 80017cc:	48001800 	.word	0x48001800
 80017d0:	40010400 	.word	0x40010400

080017d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
 80017e0:	4613      	mov	r3, r2
 80017e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e4:	787b      	ldrb	r3, [r7, #1]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ea:	887a      	ldrh	r2, [r7, #2]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4013      	ands	r3, r2
 800181c:	041a      	lsls	r2, r3, #16
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43d9      	mvns	r1, r3
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	400b      	ands	r3, r1
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001842:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d006      	beq.n	800185c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800184e:	4a05      	ldr	r2, [pc, #20]	@ (8001864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe26 	bl	80004a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40010400 	.word	0x40010400

08001868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800186e:	af00      	add	r7, sp, #0
 8001870:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001874:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001878:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800187a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800187e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	f001 b83a 	b.w	8002902 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001892:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 816f 	beq.w	8001b82 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018a4:	4bb5      	ldr	r3, [pc, #724]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d00c      	beq.n	80018ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b0:	4bb2      	ldr	r3, [pc, #712]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d15c      	bne.n	8001976 <HAL_RCC_OscConfig+0x10e>
 80018bc:	4baf      	ldr	r3, [pc, #700]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c8:	d155      	bne.n	8001976 <HAL_RCC_OscConfig+0x10e>
 80018ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018ce:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80018d6:	fa93 f3a3 	rbit	r3, r3
 80018da:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e2:	fab3 f383 	clz	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d102      	bne.n	80018fc <HAL_RCC_OscConfig+0x94>
 80018f6:	4ba1      	ldr	r3, [pc, #644]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	e015      	b.n	8001928 <HAL_RCC_OscConfig+0xc0>
 80018fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001900:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001910:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001914:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001918:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001924:	4b95      	ldr	r3, [pc, #596]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800192c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001930:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001934:	fa92 f2a2 	rbit	r2, r2
 8001938:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800193c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001940:	fab2 f282 	clz	r2, r2
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	f042 0220 	orr.w	r2, r2, #32
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	f002 021f 	and.w	r2, r2, #31
 8001950:	2101      	movs	r1, #1
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 8111 	beq.w	8001b80 <HAL_RCC_OscConfig+0x318>
 800195e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001962:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 8108 	bne.w	8001b80 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	f000 bfc6 	b.w	8002902 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x12e>
 8001988:	4b7c      	ldr	r3, [pc, #496]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a7b      	ldr	r2, [pc, #492]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 800198e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e036      	b.n	8001a04 <HAL_RCC_OscConfig+0x19c>
 8001996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x158>
 80019a6:	4b75      	ldr	r3, [pc, #468]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a74      	ldr	r2, [pc, #464]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b72      	ldr	r3, [pc, #456]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a71      	ldr	r2, [pc, #452]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80019b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e021      	b.n	8001a04 <HAL_RCC_OscConfig+0x19c>
 80019c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x184>
 80019d2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a69      	ldr	r2, [pc, #420]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b67      	ldr	r3, [pc, #412]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a66      	ldr	r2, [pc, #408]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0x19c>
 80019ec:	4b63      	ldr	r3, [pc, #396]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a62      	ldr	r2, [pc, #392]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b60      	ldr	r3, [pc, #384]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a5f      	ldr	r2, [pc, #380]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a02:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d059      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff f830 	bl	8000a78 <HAL_GetTick>
 8001a18:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a1e:	f7ff f82b 	bl	8000a78 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	@ 0x64
 8001a2c:	d902      	bls.n	8001a34 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	f000 bf67 	b.w	8002902 <HAL_RCC_OscConfig+0x109a>
 8001a34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a38:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001a48:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d102      	bne.n	8001a66 <HAL_RCC_OscConfig+0x1fe>
 8001a60:	4b46      	ldr	r3, [pc, #280]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	e015      	b.n	8001a92 <HAL_RCC_OscConfig+0x22a>
 8001a66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a6a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001a7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a7e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001a82:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a96:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001a9a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001a9e:	fa92 f2a2 	rbit	r2, r2
 8001aa2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001aa6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001aaa:	fab2 f282 	clz	r2, r2
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	f042 0220 	orr.w	r2, r2, #32
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	f002 021f 	and.w	r2, r2, #31
 8001aba:	2101      	movs	r1, #1
 8001abc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0ab      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1b6>
 8001ac6:	e05c      	b.n	8001b82 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7fe ffd6 	bl	8000a78 <HAL_GetTick>
 8001acc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad2:	f7fe ffd1 	bl	8000a78 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	@ 0x64
 8001ae0:	d902      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	f000 bf0d 	b.w	8002902 <HAL_RCC_OscConfig+0x109a>
 8001ae8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aec:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001afc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d102      	bne.n	8001b1a <HAL_RCC_OscConfig+0x2b2>
 8001b14:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x2de>
 8001b1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b1e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001b2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b32:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001b36:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <HAL_RCC_OscConfig+0x314>)
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b4a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001b4e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001b52:	fa92 f2a2 	rbit	r2, r2
 8001b56:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001b5a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001b5e:	fab2 f282 	clz	r2, r2
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f042 0220 	orr.w	r2, r2, #32
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	f002 021f 	and.w	r2, r2, #31
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ab      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x26a>
 8001b7a:	e002      	b.n	8001b82 <HAL_RCC_OscConfig+0x31a>
 8001b7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b86:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 817f 	beq.w	8001e96 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b98:	4ba7      	ldr	r3, [pc, #668]	@ (8001e38 <HAL_RCC_OscConfig+0x5d0>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00c      	beq.n	8001bbe <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ba4:	4ba4      	ldr	r3, [pc, #656]	@ (8001e38 <HAL_RCC_OscConfig+0x5d0>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d173      	bne.n	8001c98 <HAL_RCC_OscConfig+0x430>
 8001bb0:	4ba1      	ldr	r3, [pc, #644]	@ (8001e38 <HAL_RCC_OscConfig+0x5d0>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bbc:	d16c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x430>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001bd0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_OscConfig+0x386>
 8001be8:	4b93      	ldr	r3, [pc, #588]	@ (8001e38 <HAL_RCC_OscConfig+0x5d0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	e013      	b.n	8001c16 <HAL_RCC_OscConfig+0x3ae>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001c00:	2302      	movs	r3, #2
 8001c02:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c06:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001c12:	4b89      	ldr	r3, [pc, #548]	@ (8001e38 <HAL_RCC_OscConfig+0x5d0>)
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	2202      	movs	r2, #2
 8001c18:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001c1c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001c20:	fa92 f2a2 	rbit	r2, r2
 8001c24:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001c28:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001c2c:	fab2 f282 	clz	r2, r2
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	f042 0220 	orr.w	r2, r2, #32
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	f002 021f 	and.w	r2, r2, #31
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00a      	beq.n	8001c5e <HAL_RCC_OscConfig+0x3f6>
 8001c48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d002      	beq.n	8001c5e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f000 be52 	b.w	8002902 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b76      	ldr	r3, [pc, #472]	@ (8001e38 <HAL_RCC_OscConfig+0x5d0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	21f8      	movs	r1, #248	@ 0xf8
 8001c74:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001c7c:	fa91 f1a1 	rbit	r1, r1
 8001c80:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001c84:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001c88:	fab1 f181 	clz	r1, r1
 8001c8c:	b2c9      	uxtb	r1, r1
 8001c8e:	408b      	lsls	r3, r1
 8001c90:	4969      	ldr	r1, [pc, #420]	@ (8001e38 <HAL_RCC_OscConfig+0x5d0>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	e0fe      	b.n	8001e96 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8088 	beq.w	8001dba <HAL_RCC_OscConfig+0x552>
 8001caa:	2301      	movs	r3, #1
 8001cac:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001cbc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7fe fecf 	bl	8000a78 <HAL_GetTick>
 8001cda:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7fe feca 	bl	8000a78 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d902      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	f000 be06 	b.w	8002902 <HAL_RCC_OscConfig+0x109a>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001d08:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4be>
 8001d20:	4b45      	ldr	r3, [pc, #276]	@ (8001e38 <HAL_RCC_OscConfig+0x5d0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	e013      	b.n	8001d4e <HAL_RCC_OscConfig+0x4e6>
 8001d26:	2302      	movs	r3, #2
 8001d28:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001d38:	2302      	movs	r3, #2
 8001d3a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001d3e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e38 <HAL_RCC_OscConfig+0x5d0>)
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001d54:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001d58:	fa92 f2a2 	rbit	r2, r2
 8001d5c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001d60:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001d64:	fab2 f282 	clz	r2, r2
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	f042 0220 	orr.w	r2, r2, #32
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	f002 021f 	and.w	r2, r2, #31
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0af      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d80:	4b2d      	ldr	r3, [pc, #180]	@ (8001e38 <HAL_RCC_OscConfig+0x5d0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	21f8      	movs	r1, #248	@ 0xf8
 8001d96:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001d9e:	fa91 f1a1 	rbit	r1, r1
 8001da2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001da6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001daa:	fab1 f181 	clz	r1, r1
 8001dae:	b2c9      	uxtb	r1, r1
 8001db0:	408b      	lsls	r3, r1
 8001db2:	4921      	ldr	r1, [pc, #132]	@ (8001e38 <HAL_RCC_OscConfig+0x5d0>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e06d      	b.n	8001e96 <HAL_RCC_OscConfig+0x62e>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001dcc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001dda:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	461a      	mov	r2, r3
 8001de2:	2300      	movs	r3, #0
 8001de4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7fe fe47 	bl	8000a78 <HAL_GetTick>
 8001dea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df0:	f7fe fe42 	bl	8000a78 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d902      	bls.n	8001e06 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	f000 bd7e 	b.w	8002902 <HAL_RCC_OscConfig+0x109a>
 8001e06:	2302      	movs	r3, #2
 8001e08:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001e18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCC_OscConfig+0x5d4>
 8001e30:	4b01      	ldr	r3, [pc, #4]	@ (8001e38 <HAL_RCC_OscConfig+0x5d0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	e016      	b.n	8001e64 <HAL_RCC_OscConfig+0x5fc>
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001e54:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001e60:	4bbf      	ldr	r3, [pc, #764]	@ (8002160 <HAL_RCC_OscConfig+0x8f8>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	2202      	movs	r2, #2
 8001e66:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001e6a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001e6e:	fa92 f2a2 	rbit	r2, r2
 8001e72:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001e76:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f042 0220 	orr.w	r2, r2, #32
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f002 021f 	and.w	r2, r2, #31
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ac      	bne.n	8001df0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8113 	beq.w	80020d2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d07c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x74e>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001ece:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4ba2      	ldr	r3, [pc, #648]	@ (8002164 <HAL_RCC_OscConfig+0x8fc>)
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee6:	f7fe fdc7 	bl	8000a78 <HAL_GetTick>
 8001eea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7fe fdc2 	bl	8000a78 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d902      	bls.n	8001f06 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	f000 bcfe 	b.w	8002902 <HAL_RCC_OscConfig+0x109a>
 8001f06:	2302      	movs	r3, #2
 8001f08:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f10:	fa93 f2a3 	rbit	r2, r3
 8001f14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f18:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f26:	2202      	movs	r2, #2
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f2a3 	rbit	r2, r3
 8001f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	fa93 f2a3 	rbit	r2, r3
 8001f5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f60:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f66:	4b7e      	ldr	r3, [pc, #504]	@ (8002160 <HAL_RCC_OscConfig+0x8f8>)
 8001f68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f72:	2102      	movs	r1, #2
 8001f74:	6019      	str	r1, [r3, #0]
 8001f76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fa93 f1a3 	rbit	r1, r3
 8001f84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f88:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f8c:	6019      	str	r1, [r3, #0]
  return result;
 8001f8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f92:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d09d      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x688>
 8001fb4:	e08d      	b.n	80020d2 <HAL_RCC_OscConfig+0x86a>
 8001fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	fa93 f2a3 	rbit	r2, r3
 8001fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001fd8:	601a      	str	r2, [r3, #0]
  return result;
 8001fda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fde:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001fe2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b5d      	ldr	r3, [pc, #372]	@ (8002164 <HAL_RCC_OscConfig+0x8fc>)
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fd3e 	bl	8000a78 <HAL_GetTick>
 8001ffc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002002:	f7fe fd39 	bl	8000a78 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d902      	bls.n	8002018 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	f000 bc75 	b.w	8002902 <HAL_RCC_OscConfig+0x109a>
 8002018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800201c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002020:	2202      	movs	r2, #2
 8002022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002028:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f2a3 	rbit	r2, r3
 8002032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002036:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002040:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002044:	2202      	movs	r2, #2
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	fa93 f2a3 	rbit	r2, r3
 8002056:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800205a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002064:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002068:	2202      	movs	r2, #2
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002070:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fa93 f2a3 	rbit	r2, r3
 800207a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002082:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002084:	4b36      	ldr	r3, [pc, #216]	@ (8002160 <HAL_RCC_OscConfig+0x8f8>)
 8002086:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002088:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002090:	2102      	movs	r1, #2
 8002092:	6019      	str	r1, [r3, #0]
 8002094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002098:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	fa93 f1a3 	rbit	r1, r3
 80020a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020aa:	6019      	str	r1, [r3, #0]
  return result;
 80020ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	2101      	movs	r1, #1
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d197      	bne.n	8002002 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 81a5 	beq.w	8002432 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <HAL_RCC_OscConfig+0x8f8>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d116      	bne.n	8002128 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <HAL_RCC_OscConfig+0x8f8>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a18      	ldr	r2, [pc, #96]	@ (8002160 <HAL_RCC_OscConfig+0x8f8>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b16      	ldr	r3, [pc, #88]	@ (8002160 <HAL_RCC_OscConfig+0x8f8>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800210e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002112:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002120:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002122:	2301      	movs	r3, #1
 8002124:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <HAL_RCC_OscConfig+0x900>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d121      	bne.n	8002178 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <HAL_RCC_OscConfig+0x900>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0b      	ldr	r2, [pc, #44]	@ (8002168 <HAL_RCC_OscConfig+0x900>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002140:	f7fe fc9a 	bl	8000a78 <HAL_GetTick>
 8002144:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	e010      	b.n	800216c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214a:	f7fe fc95 	bl	8000a78 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	d908      	bls.n	800216c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e3d1      	b.n	8002902 <HAL_RCC_OscConfig+0x109a>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	10908120 	.word	0x10908120
 8002168:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	4b8d      	ldr	r3, [pc, #564]	@ (80023a4 <HAL_RCC_OscConfig+0xb3c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0e8      	beq.n	800214a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002178:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800217c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x92e>
 8002188:	4b87      	ldr	r3, [pc, #540]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a86      	ldr	r2, [pc, #536]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	e035      	b.n	8002202 <HAL_RCC_OscConfig+0x99a>
 8002196:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x958>
 80021a6:	4b80      	ldr	r3, [pc, #512]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a7f      	ldr	r2, [pc, #508]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	4b7d      	ldr	r3, [pc, #500]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a7c      	ldr	r2, [pc, #496]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6213      	str	r3, [r2, #32]
 80021be:	e020      	b.n	8002202 <HAL_RCC_OscConfig+0x99a>
 80021c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_OscConfig+0x982>
 80021d0:	4b75      	ldr	r3, [pc, #468]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a74      	ldr	r2, [pc, #464]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	4b72      	ldr	r3, [pc, #456]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a71      	ldr	r2, [pc, #452]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6213      	str	r3, [r2, #32]
 80021e8:	e00b      	b.n	8002202 <HAL_RCC_OscConfig+0x99a>
 80021ea:	4b6f      	ldr	r3, [pc, #444]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a6e      	ldr	r2, [pc, #440]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	4b6c      	ldr	r3, [pc, #432]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a6b      	ldr	r2, [pc, #428]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002202:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002206:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8081 	beq.w	8002316 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002214:	f7fe fc30 	bl	8000a78 <HAL_GetTick>
 8002218:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	e00b      	b.n	8002236 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7fe fc2b 	bl	8000a78 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e365      	b.n	8002902 <HAL_RCC_OscConfig+0x109a>
 8002236:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800223e:	2202      	movs	r2, #2
 8002240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002246:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	fa93 f2a3 	rbit	r2, r3
 8002250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002254:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800225e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002262:	2202      	movs	r2, #2
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800226a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	fa93 f2a3 	rbit	r2, r3
 8002274:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002278:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800227c:	601a      	str	r2, [r3, #0]
  return result;
 800227e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002282:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002286:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f043 0302 	orr.w	r3, r3, #2
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_OscConfig+0xa3a>
 800229c:	4b42      	ldr	r3, [pc, #264]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	e013      	b.n	80022ca <HAL_RCC_OscConfig+0xa62>
 80022a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80022aa:	2202      	movs	r2, #2
 80022ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022ce:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80022d2:	2102      	movs	r1, #2
 80022d4:	6011      	str	r1, [r2, #0]
 80022d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022da:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	fa92 f1a2 	rbit	r1, r2
 80022e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022e8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80022ec:	6011      	str	r1, [r2, #0]
  return result;
 80022ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022f2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	fab2 f282 	clz	r2, r2
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	f002 021f 	and.w	r2, r2, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f202 	lsl.w	r2, r1, r2
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d084      	beq.n	800221e <HAL_RCC_OscConfig+0x9b6>
 8002314:	e083      	b.n	800241e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7fe fbaf 	bl	8000a78 <HAL_GetTick>
 800231a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7fe fbaa 	bl	8000a78 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e2e4      	b.n	8002902 <HAL_RCC_OscConfig+0x109a>
 8002338:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002340:	2202      	movs	r2, #2
 8002342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002348:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f2a3 	rbit	r2, r3
 8002352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002356:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002360:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002364:	2202      	movs	r2, #2
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	fa93 f2a3 	rbit	r2, r3
 8002376:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800237a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800237e:	601a      	str	r2, [r3, #0]
  return result;
 8002380:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002384:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002388:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0xb44>
 800239e:	4b02      	ldr	r3, [pc, #8]	@ (80023a8 <HAL_RCC_OscConfig+0xb40>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	e017      	b.n	80023d4 <HAL_RCC_OscConfig+0xb6c>
 80023a4:	40007000 	.word	0x40007000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80023b4:	2202      	movs	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023bc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ca:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	4bb3      	ldr	r3, [pc, #716]	@ (80026a0 <HAL_RCC_OscConfig+0xe38>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023d8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80023dc:	2102      	movs	r1, #2
 80023de:	6011      	str	r1, [r2, #0]
 80023e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023e4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	fa92 f1a2 	rbit	r1, r2
 80023ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023f2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80023f6:	6011      	str	r1, [r2, #0]
  return result;
 80023f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023fc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	fab2 f282 	clz	r2, r2
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	f002 021f 	and.w	r2, r2, #31
 8002412:	2101      	movs	r1, #1
 8002414:	fa01 f202 	lsl.w	r2, r1, r2
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d180      	bne.n	8002320 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800241e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002422:	2b01      	cmp	r3, #1
 8002424:	d105      	bne.n	8002432 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002426:	4b9e      	ldr	r3, [pc, #632]	@ (80026a0 <HAL_RCC_OscConfig+0xe38>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a9d      	ldr	r2, [pc, #628]	@ (80026a0 <HAL_RCC_OscConfig+0xe38>)
 800242c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002432:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002436:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 825e 	beq.w	8002900 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002444:	4b96      	ldr	r3, [pc, #600]	@ (80026a0 <HAL_RCC_OscConfig+0xe38>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	f000 821f 	beq.w	8002890 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002456:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b02      	cmp	r3, #2
 8002460:	f040 8170 	bne.w	8002744 <HAL_RCC_OscConfig+0xedc>
 8002464:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002468:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800246c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002476:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002484:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002488:	601a      	str	r2, [r3, #0]
  return result;
 800248a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002492:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800249e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	461a      	mov	r2, r3
 80024a6:	2300      	movs	r3, #0
 80024a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe fae5 	bl	8000a78 <HAL_GetTick>
 80024ae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	e009      	b.n	80024c8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fae0 	bl	8000a78 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e21c      	b.n	8002902 <HAL_RCC_OscConfig+0x109a>
 80024c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024cc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80024d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024da:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	fa93 f2a3 	rbit	r2, r3
 80024e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80024ec:	601a      	str	r2, [r3, #0]
  return result;
 80024ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80024f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_RCC_OscConfig+0xcaa>
 800250c:	4b64      	ldr	r3, [pc, #400]	@ (80026a0 <HAL_RCC_OscConfig+0xe38>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	e027      	b.n	8002562 <HAL_RCC_OscConfig+0xcfa>
 8002512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002516:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800251a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800251e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002524:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002532:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002540:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800254a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002558:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	4b50      	ldr	r3, [pc, #320]	@ (80026a0 <HAL_RCC_OscConfig+0xe38>)
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002566:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800256a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800256e:	6011      	str	r1, [r2, #0]
 8002570:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002574:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	fa92 f1a2 	rbit	r1, r2
 800257e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002582:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002586:	6011      	str	r1, [r2, #0]
  return result;
 8002588:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800258c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	fab2 f282 	clz	r2, r2
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f042 0220 	orr.w	r2, r2, #32
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	f002 021f 	and.w	r2, r2, #31
 80025a2:	2101      	movs	r1, #1
 80025a4:	fa01 f202 	lsl.w	r2, r1, r2
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d182      	bne.n	80024b4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ae:	4b3c      	ldr	r3, [pc, #240]	@ (80026a0 <HAL_RCC_OscConfig+0xe38>)
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	f023 020f 	bic.w	r2, r3, #15
 80025b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	4937      	ldr	r1, [pc, #220]	@ (80026a0 <HAL_RCC_OscConfig+0xe38>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80025c8:	4b35      	ldr	r3, [pc, #212]	@ (80026a0 <HAL_RCC_OscConfig+0xe38>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80025d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a19      	ldr	r1, [r3, #32]
 80025dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	492d      	ldr	r1, [pc, #180]	@ (80026a0 <HAL_RCC_OscConfig+0xe38>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80025f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002602:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002610:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002614:	601a      	str	r2, [r3, #0]
  return result;
 8002616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800261e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800262a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	461a      	mov	r2, r3
 8002632:	2301      	movs	r3, #1
 8002634:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7fe fa1f 	bl	8000a78 <HAL_GetTick>
 800263a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263e:	e009      	b.n	8002654 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe fa1a 	bl	8000a78 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e156      	b.n	8002902 <HAL_RCC_OscConfig+0x109a>
 8002654:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002658:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800265c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002666:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f2a3 	rbit	r2, r3
 8002670:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002674:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002678:	601a      	str	r2, [r3, #0]
  return result;
 800267a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800267e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002682:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d105      	bne.n	80026a4 <HAL_RCC_OscConfig+0xe3c>
 8002698:	4b01      	ldr	r3, [pc, #4]	@ (80026a0 <HAL_RCC_OscConfig+0xe38>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	e02a      	b.n	80026f4 <HAL_RCC_OscConfig+0xe8c>
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ce:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80026d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026dc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ea:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	4b86      	ldr	r3, [pc, #536]	@ (800290c <HAL_RCC_OscConfig+0x10a4>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026f8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80026fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002700:	6011      	str	r1, [r2, #0]
 8002702:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002706:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	fa92 f1a2 	rbit	r1, r2
 8002710:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002714:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002718:	6011      	str	r1, [r2, #0]
  return result;
 800271a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800271e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	fab2 f282 	clz	r2, r2
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	f042 0220 	orr.w	r2, r2, #32
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	f002 021f 	and.w	r2, r2, #31
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f202 	lsl.w	r2, r1, r2
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	f43f af7f 	beq.w	8002640 <HAL_RCC_OscConfig+0xdd8>
 8002742:	e0dd      	b.n	8002900 <HAL_RCC_OscConfig+0x1098>
 8002744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002748:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800274c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002756:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002764:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002768:	601a      	str	r2, [r3, #0]
  return result;
 800276a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002772:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800277e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	461a      	mov	r2, r3
 8002786:	2300      	movs	r3, #0
 8002788:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278a:	f7fe f975 	bl	8000a78 <HAL_GetTick>
 800278e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002792:	e009      	b.n	80027a8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe f970 	bl	8000a78 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e0ac      	b.n	8002902 <HAL_RCC_OscConfig+0x109a>
 80027a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ac:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80027b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ba:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80027cc:	601a      	str	r2, [r3, #0]
  return result;
 80027ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80027d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_OscConfig+0xf8a>
 80027ec:	4b47      	ldr	r3, [pc, #284]	@ (800290c <HAL_RCC_OscConfig+0x10a4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	e027      	b.n	8002842 <HAL_RCC_OscConfig+0xfda>
 80027f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80027fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002804:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002812:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002820:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800282a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002838:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	4b33      	ldr	r3, [pc, #204]	@ (800290c <HAL_RCC_OscConfig+0x10a4>)
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002846:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800284a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800284e:	6011      	str	r1, [r2, #0]
 8002850:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002854:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	fa92 f1a2 	rbit	r1, r2
 800285e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002862:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002866:	6011      	str	r1, [r2, #0]
  return result;
 8002868:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800286c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d182      	bne.n	8002794 <HAL_RCC_OscConfig+0xf2c>
 800288e:	e037      	b.n	8002900 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002894:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e02e      	b.n	8002902 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a4:	4b19      	ldr	r3, [pc, #100]	@ (800290c <HAL_RCC_OscConfig+0x10a4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80028ac:	4b17      	ldr	r3, [pc, #92]	@ (800290c <HAL_RCC_OscConfig+0x10a4>)
 80028ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80028b8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80028bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d117      	bne.n	80028fc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80028d0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d10b      	bne.n	80028fc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80028e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028e8:	f003 020f 	and.w	r2, r3, #15
 80028ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000

08002910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b09e      	sub	sp, #120	@ 0x78
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e162      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b90      	ldr	r3, [pc, #576]	@ (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d910      	bls.n	8002958 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b8d      	ldr	r3, [pc, #564]	@ (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	498b      	ldr	r1, [pc, #556]	@ (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b89      	ldr	r3, [pc, #548]	@ (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e14a      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b82      	ldr	r3, [pc, #520]	@ (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	497f      	ldr	r1, [pc, #508]	@ (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80dc 	beq.w	8002b3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d13c      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xf6>
 800298c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002990:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800299a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d102      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xa6>
 80029b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002b70 <HAL_RCC_ClockConfig+0x260>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	e00f      	b.n	80029d6 <HAL_RCC_ClockConfig+0xc6>
 80029b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80029c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80029ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029d2:	4b67      	ldr	r3, [pc, #412]	@ (8002b70 <HAL_RCC_ClockConfig+0x260>)
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029de:	fa92 f2a2 	rbit	r2, r2
 80029e2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80029e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80029e6:	fab2 f282 	clz	r2, r2
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	f042 0220 	orr.w	r2, r2, #32
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	f002 021f 	and.w	r2, r2, #31
 80029f6:	2101      	movs	r1, #1
 80029f8:	fa01 f202 	lsl.w	r2, r1, r2
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d17b      	bne.n	8002afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0f3      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d13c      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x178>
 8002a0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a12:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x128>
 8002a32:	4b4f      	ldr	r3, [pc, #316]	@ (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	e00f      	b.n	8002a58 <HAL_RCC_ClockConfig+0x148>
 8002a38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a54:	4b46      	ldr	r3, [pc, #280]	@ (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a5c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002a5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a60:	fa92 f2a2 	rbit	r2, r2
 8002a64:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002a66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a68:	fab2 f282 	clz	r2, r2
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	f042 0220 	orr.w	r2, r2, #32
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	f002 021f 	and.w	r2, r2, #31
 8002a78:	2101      	movs	r1, #1
 8002a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d13a      	bne.n	8002afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b2      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d102      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x1a0>
 8002aaa:	4b31      	ldr	r3, [pc, #196]	@ (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	e00d      	b.n	8002acc <HAL_RCC_ClockConfig+0x1bc>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002abc:	2302      	movs	r3, #2
 8002abe:	623b      	str	r3, [r7, #32]
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	4b29      	ldr	r3, [pc, #164]	@ (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	2202      	movs	r2, #2
 8002ace:	61ba      	str	r2, [r7, #24]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	fa92 f2a2 	rbit	r2, r2
 8002ad6:	617a      	str	r2, [r7, #20]
  return result;
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	fab2 f282 	clz	r2, r2
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	f042 0220 	orr.w	r2, r2, #32
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	f002 021f 	and.w	r2, r2, #31
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f202 	lsl.w	r2, r1, r2
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e079      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002afa:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f023 0203 	bic.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	491a      	ldr	r1, [pc, #104]	@ (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b0c:	f7fd ffb4 	bl	8000a78 <HAL_GetTick>
 8002b10:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b14:	f7fd ffb0 	bl	8000a78 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e061      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	4b11      	ldr	r3, [pc, #68]	@ (8002b70 <HAL_RCC_ClockConfig+0x260>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 020c 	and.w	r2, r3, #12
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d1eb      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d214      	bcs.n	8002b74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 0207 	bic.w	r2, r3, #7
 8002b52:	4906      	ldr	r1, [pc, #24]	@ (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <HAL_RCC_ClockConfig+0x25c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e040      	b.n	8002bee <HAL_RCC_ClockConfig+0x2de>
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b80:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	491a      	ldr	r1, [pc, #104]	@ (8002bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9e:	4b16      	ldr	r3, [pc, #88]	@ (8002bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4912      	ldr	r1, [pc, #72]	@ (8002bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bb2:	f000 f829 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002bb6:	4601      	mov	r1, r0
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf8 <HAL_RCC_ClockConfig+0x2e8>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bc0:	22f0      	movs	r2, #240	@ 0xf0
 8002bc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	fa92 f2a2 	rbit	r2, r2
 8002bca:	60fa      	str	r2, [r7, #12]
  return result;
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	fab2 f282 	clz	r2, r2
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	40d3      	lsrs	r3, r2
 8002bd6:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <HAL_RCC_ClockConfig+0x2ec>)
 8002bd8:	5cd3      	ldrb	r3, [r2, r3]
 8002bda:	fa21 f303 	lsr.w	r3, r1, r3
 8002bde:	4a08      	ldr	r2, [pc, #32]	@ (8002c00 <HAL_RCC_ClockConfig+0x2f0>)
 8002be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002be2:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <HAL_RCC_ClockConfig+0x2f4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd ff02 	bl	80009f0 <HAL_InitTick>
  
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3778      	adds	r7, #120	@ 0x78
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	080064dc 	.word	0x080064dc
 8002c00:	20000000 	.word	0x20000000
 8002c04:	20000004 	.word	0x20000004

08002c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c22:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d002      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x30>
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d003      	beq.n	8002c3e <HAL_RCC_GetSysClockFreq+0x36>
 8002c36:	e029      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c3a:	613b      	str	r3, [r7, #16]
      break;
 8002c3c:	e029      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	0c9b      	lsrs	r3, r3, #18
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c48:	5cd3      	ldrb	r3, [r2, r3]
 8002c4a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002c4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	4a15      	ldr	r2, [pc, #84]	@ (8002cac <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c64:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	e007      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c76:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	fb02 f303 	mul.w	r3, r2, r3
 8002c84:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	613b      	str	r3, [r7, #16]
      break;
 8002c8a:	e002      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c8e:	613b      	str	r3, [r7, #16]
      break;
 8002c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c92:	693b      	ldr	r3, [r7, #16]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	007a1200 	.word	0x007a1200
 8002ca8:	080064f4 	.word	0x080064f4
 8002cac:	08006504 	.word	0x08006504

08002cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	@ (8002cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000000 	.word	0x20000000

08002cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cce:	f7ff ffef 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002cd2:	4601      	mov	r1, r0
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cdc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ce0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	fa92 f2a2 	rbit	r2, r2
 8002ce8:	603a      	str	r2, [r7, #0]
  return result;
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	fab2 f282 	clz	r2, r2
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	40d3      	lsrs	r3, r2
 8002cf4:	4a04      	ldr	r2, [pc, #16]	@ (8002d08 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	080064ec 	.word	0x080064ec

08002d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d12:	f7ff ffcd 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002d16:	4601      	mov	r1, r0
 8002d18:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002d20:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002d24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	fa92 f2a2 	rbit	r2, r2
 8002d2c:	603a      	str	r2, [r7, #0]
  return result;
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	fab2 f282 	clz	r2, r2
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	40d3      	lsrs	r3, r2
 8002d38:	4a04      	ldr	r2, [pc, #16]	@ (8002d4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d3a:	5cd3      	ldrb	r3, [r2, r3]
 8002d3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	080064ec 	.word	0x080064ec

08002d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b092      	sub	sp, #72	@ 0x48
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80d4 	beq.w	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d74:	4b4e      	ldr	r3, [pc, #312]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10e      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d80:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4a4a      	ldr	r2, [pc, #296]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	61d3      	str	r3, [r2, #28]
 8002d8c:	4b48      	ldr	r3, [pc, #288]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9e:	4b45      	ldr	r3, [pc, #276]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d118      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002daa:	4b42      	ldr	r3, [pc, #264]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a41      	ldr	r2, [pc, #260]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db6:	f7fd fe5f 	bl	8000a78 <HAL_GetTick>
 8002dba:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbe:	f7fd fe5b 	bl	8000a78 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	@ 0x64
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1d6      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	4b38      	ldr	r3, [pc, #224]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ddc:	4b34      	ldr	r3, [pc, #208]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8084 	beq.w	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002df6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d07c      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b26      	ldr	r3, [pc, #152]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	461a      	mov	r2, r3
 8002e26:	2301      	movs	r3, #1
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e4e:	4a18      	ldr	r2, [pc, #96]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d04b      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fd fe0b 	bl	8000a78 <HAL_GetTick>
 8002e62:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7fd fe07 	bl	8000a78 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e180      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e88:	2302      	movs	r3, #2
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	61fb      	str	r3, [r7, #28]
  return result;
 8002e94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f043 0302 	orr.w	r3, r3, #2
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d108      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002eaa:	4b01      	ldr	r3, [pc, #4]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	e00d      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	10908100 	.word	0x10908100
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	4b9a      	ldr	r3, [pc, #616]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	2202      	movs	r2, #2
 8002ece:	613a      	str	r2, [r7, #16]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	fa92 f2a2 	rbit	r2, r2
 8002ed6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	fab2 f282 	clz	r2, r2
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f002 021f 	and.w	r2, r2, #31
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0b7      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ef6:	4b8f      	ldr	r3, [pc, #572]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	498c      	ldr	r1, [pc, #560]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f10:	4b88      	ldr	r3, [pc, #544]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	4a87      	ldr	r2, [pc, #540]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f28:	4b82      	ldr	r3, [pc, #520]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2c:	f023 0203 	bic.w	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	497f      	ldr	r1, [pc, #508]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f46:	4b7b      	ldr	r3, [pc, #492]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	4978      	ldr	r1, [pc, #480]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f64:	4b73      	ldr	r3, [pc, #460]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	4970      	ldr	r1, [pc, #448]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f82:	4b6c      	ldr	r3, [pc, #432]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	f023 0210 	bic.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4969      	ldr	r1, [pc, #420]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002fa0:	4b64      	ldr	r3, [pc, #400]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fac:	4961      	ldr	r1, [pc, #388]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f023 0220 	bic.w	r2, r3, #32
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	495a      	ldr	r1, [pc, #360]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fdc:	4b55      	ldr	r3, [pc, #340]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	4952      	ldr	r1, [pc, #328]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ffa:	4b4e      	ldr	r3, [pc, #312]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	494b      	ldr	r1, [pc, #300]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003008:	4313      	orrs	r3, r2
 800300a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003018:	4b46      	ldr	r3, [pc, #280]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	4943      	ldr	r1, [pc, #268]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003026:	4313      	orrs	r3, r2
 8003028:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003036:	4b3f      	ldr	r3, [pc, #252]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	493c      	ldr	r1, [pc, #240]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003054:	4b37      	ldr	r3, [pc, #220]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003058:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	4934      	ldr	r1, [pc, #208]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003072:	4b30      	ldr	r3, [pc, #192]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307e:	492d      	ldr	r1, [pc, #180]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003080:	4313      	orrs	r3, r2
 8003082:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003090:	4b28      	ldr	r3, [pc, #160]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309c:	4925      	ldr	r1, [pc, #148]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030ae:	4b21      	ldr	r3, [pc, #132]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	491e      	ldr	r1, [pc, #120]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	4916      	ldr	r1, [pc, #88]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80030ea:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f6:	490f      	ldr	r1, [pc, #60]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003108:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003114:	4907      	ldr	r1, [pc, #28]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00c      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003126:	4b03      	ldr	r3, [pc, #12]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	e002      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800313a:	4913      	ldr	r1, [pc, #76]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800313c:	4313      	orrs	r3, r2
 800313e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800314c:	4b0e      	ldr	r3, [pc, #56]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003150:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003158:	490b      	ldr	r1, [pc, #44]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800315a:	4313      	orrs	r3, r2
 800315c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800316a:	4b07      	ldr	r3, [pc, #28]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003176:	4904      	ldr	r1, [pc, #16]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003178:	4313      	orrs	r3, r2
 800317a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3748      	adds	r7, #72	@ 0x48
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000

0800318c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e040      	b.n	8003220 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fd fb6a 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2224      	movs	r2, #36	@ 0x24
 80031b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fd94 	bl	8003d00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fbbd 	bl	8003958 <UART_SetConfig>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e01b      	b.n	8003220 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003206:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fe13 	bl	8003e44 <UART_CheckIdleState>
 800321e:	4603      	mov	r3, r0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	@ 0x28
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800323c:	2b20      	cmp	r3, #32
 800323e:	d177      	bne.n	8003330 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_UART_Transmit+0x24>
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e070      	b.n	8003332 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2221      	movs	r2, #33	@ 0x21
 800325c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800325e:	f7fd fc0b 	bl	8000a78 <HAL_GetTick>
 8003262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	88fa      	ldrh	r2, [r7, #6]
 8003268:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800327c:	d108      	bne.n	8003290 <HAL_UART_Transmit+0x68>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d104      	bne.n	8003290 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	e003      	b.n	8003298 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003298:	e02f      	b.n	80032fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2180      	movs	r1, #128	@ 0x80
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fe75 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d004      	beq.n	80032ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e03b      	b.n	8003332 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10b      	bne.n	80032d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	881a      	ldrh	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032cc:	b292      	uxth	r2, r2
 80032ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	3302      	adds	r3, #2
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	e007      	b.n	80032e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	781a      	ldrb	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3301      	adds	r3, #1
 80032e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1c9      	bne.n	800329a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	2140      	movs	r1, #64	@ 0x40
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fe3f 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e005      	b.n	8003332 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b0ba      	sub	sp, #232	@ 0xe8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003362:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003366:	f640 030f 	movw	r3, #2063	@ 0x80f
 800336a:	4013      	ands	r3, r2
 800336c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d115      	bne.n	80033a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00f      	beq.n	80033a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 82ab 	beq.w	80038f0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
      }
      return;
 80033a2:	e2a5      	b.n	80038f0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8117 	beq.w	80035dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80033ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80033be:	4b85      	ldr	r3, [pc, #532]	@ (80035d4 <HAL_UART_IRQHandler+0x298>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 810a 	beq.w	80035dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d011      	beq.n	80033f8 <HAL_UART_IRQHandler+0xbc>
 80033d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00b      	beq.n	80033f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2201      	movs	r2, #1
 80033e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ee:	f043 0201 	orr.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d011      	beq.n	8003428 <HAL_UART_IRQHandler+0xec>
 8003404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00b      	beq.n	8003428 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2202      	movs	r2, #2
 8003416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800341e:	f043 0204 	orr.w	r2, r3, #4
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d011      	beq.n	8003458 <HAL_UART_IRQHandler+0x11c>
 8003434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00b      	beq.n	8003458 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2204      	movs	r2, #4
 8003446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800344e:	f043 0202 	orr.w	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d017      	beq.n	8003494 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003474:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2208      	movs	r2, #8
 8003482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800348a:	f043 0208 	orr.w	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800349c:	2b00      	cmp	r3, #0
 800349e:	d012      	beq.n	80034c6 <HAL_UART_IRQHandler+0x18a>
 80034a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00c      	beq.n	80034c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8211 	beq.w	80038f4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003500:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350e:	2b40      	cmp	r3, #64	@ 0x40
 8003510:	d005      	beq.n	800351e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003516:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800351a:	2b00      	cmp	r3, #0
 800351c:	d04f      	beq.n	80035be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fe6c 	bl	80041fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352e:	2b40      	cmp	r3, #64	@ 0x40
 8003530:	d141      	bne.n	80035b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3308      	adds	r3, #8
 8003538:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003548:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800354c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3308      	adds	r3, #8
 800355a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800355e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800356a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1d9      	bne.n	8003532 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003582:	2b00      	cmp	r3, #0
 8003584:	d013      	beq.n	80035ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800358a:	4a13      	ldr	r2, [pc, #76]	@ (80035d8 <HAL_UART_IRQHandler+0x29c>)
 800358c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fc71 	bl	8000e7a <HAL_DMA_Abort_IT>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d017      	beq.n	80035ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80035a8:	4610      	mov	r0, r2
 80035aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	e00f      	b.n	80035ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f9c8 	bl	8003944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b4:	e00b      	b.n	80035ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f9c4 	bl	8003944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	e007      	b.n	80035ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9c0 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80035cc:	e192      	b.n	80038f4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ce:	bf00      	nop
    return;
 80035d0:	e190      	b.n	80038f4 <HAL_UART_IRQHandler+0x5b8>
 80035d2:	bf00      	nop
 80035d4:	04000120 	.word	0x04000120
 80035d8:	080044a7 	.word	0x080044a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	f040 814b 	bne.w	800387c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8144 	beq.w	800387c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 813d 	beq.w	800387c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2210      	movs	r2, #16
 8003608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b40      	cmp	r3, #64	@ 0x40
 8003616:	f040 80b5 	bne.w	8003784 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003626:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8164 	beq.w	80038f8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800363a:	429a      	cmp	r2, r3
 800363c:	f080 815c 	bcs.w	80038f8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003646:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b20      	cmp	r3, #32
 8003652:	f000 8086 	beq.w	8003762 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800366a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800366e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003672:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003680:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003684:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800368c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003698:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1da      	bne.n	8003656 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3308      	adds	r3, #8
 80036a6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3308      	adds	r3, #8
 80036c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036c4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80036d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e1      	bne.n	80036a0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3308      	adds	r3, #8
 80036e2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3308      	adds	r3, #8
 80036fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003700:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003702:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003706:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800370e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e3      	bne.n	80036dc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003732:	f023 0310 	bic.w	r3, r3, #16
 8003736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003744:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003746:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800374a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e4      	bne.n	8003722 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375c:	4618      	mov	r0, r3
 800375e:	f7fd fb4e 	bl	8000dfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003774:	b29b      	uxth	r3, r3
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	b29b      	uxth	r3, r3
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f001 fe87 	bl	8005490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003782:	e0b9      	b.n	80038f8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003790:	b29b      	uxth	r3, r3
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80ab 	beq.w	80038fc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80037a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80a6 	beq.w	80038fc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037d4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1e4      	bne.n	80037b0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3308      	adds	r3, #8
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	623b      	str	r3, [r7, #32]
   return(result);
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3308      	adds	r3, #8
 8003806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800380a:	633a      	str	r2, [r7, #48]	@ 0x30
 800380c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e3      	bne.n	80037e6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0310 	bic.w	r3, r3, #16
 8003846:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	69b9      	ldr	r1, [r7, #24]
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	617b      	str	r3, [r7, #20]
   return(result);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e4      	bne.n	8003832 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800386e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f001 fe0b 	bl	8005490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800387a:	e03f      	b.n	80038fc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800387c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003880:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <HAL_UART_IRQHandler+0x56a>
 8003888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800388c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800389c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fe41 	bl	8004526 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038a4:	e02d      	b.n	8003902 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00e      	beq.n	80038d0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80038b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01c      	beq.n	8003900 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
    }
    return;
 80038ce:	e017      	b.n	8003900 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d012      	beq.n	8003902 <HAL_UART_IRQHandler+0x5c6>
 80038dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00c      	beq.n	8003902 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fdf2 	bl	80044d2 <UART_EndTransmit_IT>
    return;
 80038ee:	e008      	b.n	8003902 <HAL_UART_IRQHandler+0x5c6>
      return;
 80038f0:	bf00      	nop
 80038f2:	e006      	b.n	8003902 <HAL_UART_IRQHandler+0x5c6>
    return;
 80038f4:	bf00      	nop
 80038f6:	e004      	b.n	8003902 <HAL_UART_IRQHandler+0x5c6>
      return;
 80038f8:	bf00      	nop
 80038fa:	e002      	b.n	8003902 <HAL_UART_IRQHandler+0x5c6>
      return;
 80038fc:	bf00      	nop
 80038fe:	e000      	b.n	8003902 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003900:	bf00      	nop
  }

}
 8003902:	37e8      	adds	r7, #232	@ 0xe8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b92      	ldr	r3, [pc, #584]	@ (8003bcc <UART_SetConfig+0x274>)
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	6979      	ldr	r1, [r7, #20]
 800398c:	430b      	orrs	r3, r1
 800398e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a80      	ldr	r2, [pc, #512]	@ (8003bd0 <UART_SetConfig+0x278>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d120      	bne.n	8003a16 <UART_SetConfig+0xbe>
 80039d4:	4b7f      	ldr	r3, [pc, #508]	@ (8003bd4 <UART_SetConfig+0x27c>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d817      	bhi.n	8003a10 <UART_SetConfig+0xb8>
 80039e0:	a201      	add	r2, pc, #4	@ (adr r2, 80039e8 <UART_SetConfig+0x90>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	080039f9 	.word	0x080039f9
 80039ec:	08003a05 	.word	0x08003a05
 80039f0:	08003a0b 	.word	0x08003a0b
 80039f4:	080039ff 	.word	0x080039ff
 80039f8:	2301      	movs	r3, #1
 80039fa:	77fb      	strb	r3, [r7, #31]
 80039fc:	e0b5      	b.n	8003b6a <UART_SetConfig+0x212>
 80039fe:	2302      	movs	r3, #2
 8003a00:	77fb      	strb	r3, [r7, #31]
 8003a02:	e0b2      	b.n	8003b6a <UART_SetConfig+0x212>
 8003a04:	2304      	movs	r3, #4
 8003a06:	77fb      	strb	r3, [r7, #31]
 8003a08:	e0af      	b.n	8003b6a <UART_SetConfig+0x212>
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	77fb      	strb	r3, [r7, #31]
 8003a0e:	e0ac      	b.n	8003b6a <UART_SetConfig+0x212>
 8003a10:	2310      	movs	r3, #16
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	e0a9      	b.n	8003b6a <UART_SetConfig+0x212>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a6f      	ldr	r2, [pc, #444]	@ (8003bd8 <UART_SetConfig+0x280>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d124      	bne.n	8003a6a <UART_SetConfig+0x112>
 8003a20:	4b6c      	ldr	r3, [pc, #432]	@ (8003bd4 <UART_SetConfig+0x27c>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a2c:	d011      	beq.n	8003a52 <UART_SetConfig+0xfa>
 8003a2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a32:	d817      	bhi.n	8003a64 <UART_SetConfig+0x10c>
 8003a34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a38:	d011      	beq.n	8003a5e <UART_SetConfig+0x106>
 8003a3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a3e:	d811      	bhi.n	8003a64 <UART_SetConfig+0x10c>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <UART_SetConfig+0xf4>
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a48:	d006      	beq.n	8003a58 <UART_SetConfig+0x100>
 8003a4a:	e00b      	b.n	8003a64 <UART_SetConfig+0x10c>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	77fb      	strb	r3, [r7, #31]
 8003a50:	e08b      	b.n	8003b6a <UART_SetConfig+0x212>
 8003a52:	2302      	movs	r3, #2
 8003a54:	77fb      	strb	r3, [r7, #31]
 8003a56:	e088      	b.n	8003b6a <UART_SetConfig+0x212>
 8003a58:	2304      	movs	r3, #4
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e085      	b.n	8003b6a <UART_SetConfig+0x212>
 8003a5e:	2308      	movs	r3, #8
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e082      	b.n	8003b6a <UART_SetConfig+0x212>
 8003a64:	2310      	movs	r3, #16
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e07f      	b.n	8003b6a <UART_SetConfig+0x212>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8003bdc <UART_SetConfig+0x284>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d124      	bne.n	8003abe <UART_SetConfig+0x166>
 8003a74:	4b57      	ldr	r3, [pc, #348]	@ (8003bd4 <UART_SetConfig+0x27c>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a78:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003a7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a80:	d011      	beq.n	8003aa6 <UART_SetConfig+0x14e>
 8003a82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a86:	d817      	bhi.n	8003ab8 <UART_SetConfig+0x160>
 8003a88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a8c:	d011      	beq.n	8003ab2 <UART_SetConfig+0x15a>
 8003a8e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a92:	d811      	bhi.n	8003ab8 <UART_SetConfig+0x160>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <UART_SetConfig+0x148>
 8003a98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a9c:	d006      	beq.n	8003aac <UART_SetConfig+0x154>
 8003a9e:	e00b      	b.n	8003ab8 <UART_SetConfig+0x160>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	77fb      	strb	r3, [r7, #31]
 8003aa4:	e061      	b.n	8003b6a <UART_SetConfig+0x212>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e05e      	b.n	8003b6a <UART_SetConfig+0x212>
 8003aac:	2304      	movs	r3, #4
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e05b      	b.n	8003b6a <UART_SetConfig+0x212>
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	77fb      	strb	r3, [r7, #31]
 8003ab6:	e058      	b.n	8003b6a <UART_SetConfig+0x212>
 8003ab8:	2310      	movs	r3, #16
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e055      	b.n	8003b6a <UART_SetConfig+0x212>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a47      	ldr	r2, [pc, #284]	@ (8003be0 <UART_SetConfig+0x288>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d124      	bne.n	8003b12 <UART_SetConfig+0x1ba>
 8003ac8:	4b42      	ldr	r3, [pc, #264]	@ (8003bd4 <UART_SetConfig+0x27c>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003acc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003ad0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ad4:	d011      	beq.n	8003afa <UART_SetConfig+0x1a2>
 8003ad6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ada:	d817      	bhi.n	8003b0c <UART_SetConfig+0x1b4>
 8003adc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ae0:	d011      	beq.n	8003b06 <UART_SetConfig+0x1ae>
 8003ae2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ae6:	d811      	bhi.n	8003b0c <UART_SetConfig+0x1b4>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <UART_SetConfig+0x19c>
 8003aec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003af0:	d006      	beq.n	8003b00 <UART_SetConfig+0x1a8>
 8003af2:	e00b      	b.n	8003b0c <UART_SetConfig+0x1b4>
 8003af4:	2300      	movs	r3, #0
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e037      	b.n	8003b6a <UART_SetConfig+0x212>
 8003afa:	2302      	movs	r3, #2
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e034      	b.n	8003b6a <UART_SetConfig+0x212>
 8003b00:	2304      	movs	r3, #4
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e031      	b.n	8003b6a <UART_SetConfig+0x212>
 8003b06:	2308      	movs	r3, #8
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e02e      	b.n	8003b6a <UART_SetConfig+0x212>
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e02b      	b.n	8003b6a <UART_SetConfig+0x212>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a33      	ldr	r2, [pc, #204]	@ (8003be4 <UART_SetConfig+0x28c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d124      	bne.n	8003b66 <UART_SetConfig+0x20e>
 8003b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd4 <UART_SetConfig+0x27c>)
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003b24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b28:	d011      	beq.n	8003b4e <UART_SetConfig+0x1f6>
 8003b2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b2e:	d817      	bhi.n	8003b60 <UART_SetConfig+0x208>
 8003b30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b34:	d011      	beq.n	8003b5a <UART_SetConfig+0x202>
 8003b36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b3a:	d811      	bhi.n	8003b60 <UART_SetConfig+0x208>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <UART_SetConfig+0x1f0>
 8003b40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b44:	d006      	beq.n	8003b54 <UART_SetConfig+0x1fc>
 8003b46:	e00b      	b.n	8003b60 <UART_SetConfig+0x208>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e00d      	b.n	8003b6a <UART_SetConfig+0x212>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e00a      	b.n	8003b6a <UART_SetConfig+0x212>
 8003b54:	2304      	movs	r3, #4
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e007      	b.n	8003b6a <UART_SetConfig+0x212>
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e004      	b.n	8003b6a <UART_SetConfig+0x212>
 8003b60:	2310      	movs	r3, #16
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e001      	b.n	8003b6a <UART_SetConfig+0x212>
 8003b66:	2310      	movs	r3, #16
 8003b68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b72:	d16b      	bne.n	8003c4c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003b74:	7ffb      	ldrb	r3, [r7, #31]
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d838      	bhi.n	8003bec <UART_SetConfig+0x294>
 8003b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b80 <UART_SetConfig+0x228>)
 8003b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b80:	08003ba5 	.word	0x08003ba5
 8003b84:	08003bad 	.word	0x08003bad
 8003b88:	08003bb5 	.word	0x08003bb5
 8003b8c:	08003bed 	.word	0x08003bed
 8003b90:	08003bbb 	.word	0x08003bbb
 8003b94:	08003bed 	.word	0x08003bed
 8003b98:	08003bed 	.word	0x08003bed
 8003b9c:	08003bed 	.word	0x08003bed
 8003ba0:	08003bc3 	.word	0x08003bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba4:	f7ff f890 	bl	8002cc8 <HAL_RCC_GetPCLK1Freq>
 8003ba8:	61b8      	str	r0, [r7, #24]
        break;
 8003baa:	e024      	b.n	8003bf6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bac:	f7ff f8ae 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 8003bb0:	61b8      	str	r0, [r7, #24]
        break;
 8003bb2:	e020      	b.n	8003bf6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <UART_SetConfig+0x290>)
 8003bb6:	61bb      	str	r3, [r7, #24]
        break;
 8003bb8:	e01d      	b.n	8003bf6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bba:	f7ff f825 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8003bbe:	61b8      	str	r0, [r7, #24]
        break;
 8003bc0:	e019      	b.n	8003bf6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bc6:	61bb      	str	r3, [r7, #24]
        break;
 8003bc8:	e015      	b.n	8003bf6 <UART_SetConfig+0x29e>
 8003bca:	bf00      	nop
 8003bcc:	efff69f3 	.word	0xefff69f3
 8003bd0:	40013800 	.word	0x40013800
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40004400 	.word	0x40004400
 8003bdc:	40004800 	.word	0x40004800
 8003be0:	40004c00 	.word	0x40004c00
 8003be4:	40005000 	.word	0x40005000
 8003be8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	77bb      	strb	r3, [r7, #30]
        break;
 8003bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d073      	beq.n	8003ce4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	005a      	lsls	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	441a      	add	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b0f      	cmp	r3, #15
 8003c16:	d916      	bls.n	8003c46 <UART_SetConfig+0x2ee>
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c1e:	d212      	bcs.n	8003c46 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f023 030f 	bic.w	r3, r3, #15
 8003c28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	89fb      	ldrh	r3, [r7, #14]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	89fa      	ldrh	r2, [r7, #14]
 8003c42:	60da      	str	r2, [r3, #12]
 8003c44:	e04e      	b.n	8003ce4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	77bb      	strb	r3, [r7, #30]
 8003c4a:	e04b      	b.n	8003ce4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c4c:	7ffb      	ldrb	r3, [r7, #31]
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d827      	bhi.n	8003ca2 <UART_SetConfig+0x34a>
 8003c52:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <UART_SetConfig+0x300>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c7d 	.word	0x08003c7d
 8003c5c:	08003c85 	.word	0x08003c85
 8003c60:	08003c8d 	.word	0x08003c8d
 8003c64:	08003ca3 	.word	0x08003ca3
 8003c68:	08003c93 	.word	0x08003c93
 8003c6c:	08003ca3 	.word	0x08003ca3
 8003c70:	08003ca3 	.word	0x08003ca3
 8003c74:	08003ca3 	.word	0x08003ca3
 8003c78:	08003c9b 	.word	0x08003c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c7c:	f7ff f824 	bl	8002cc8 <HAL_RCC_GetPCLK1Freq>
 8003c80:	61b8      	str	r0, [r7, #24]
        break;
 8003c82:	e013      	b.n	8003cac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c84:	f7ff f842 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 8003c88:	61b8      	str	r0, [r7, #24]
        break;
 8003c8a:	e00f      	b.n	8003cac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cfc <UART_SetConfig+0x3a4>)
 8003c8e:	61bb      	str	r3, [r7, #24]
        break;
 8003c90:	e00c      	b.n	8003cac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c92:	f7fe ffb9 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8003c96:	61b8      	str	r0, [r7, #24]
        break;
 8003c98:	e008      	b.n	8003cac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ca0:	e004      	b.n	8003cac <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	77bb      	strb	r3, [r7, #30]
        break;
 8003caa:	bf00      	nop
    }

    if (pclk != 0U)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d018      	beq.n	8003ce4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	085a      	lsrs	r2, r3, #1
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	441a      	add	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b0f      	cmp	r3, #15
 8003cca:	d909      	bls.n	8003ce0 <UART_SetConfig+0x388>
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd2:	d205      	bcs.n	8003ce0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	e001      	b.n	8003ce4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003cf0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	007a1200 	.word	0x007a1200

08003d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01a      	beq.n	8003e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dfe:	d10a      	bne.n	8003e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	605a      	str	r2, [r3, #4]
  }
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b098      	sub	sp, #96	@ 0x60
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e54:	f7fc fe10 	bl	8000a78 <HAL_GetTick>
 8003e58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d12e      	bne.n	8003ec6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e70:	2200      	movs	r2, #0
 8003e72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f88c 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d021      	beq.n	8003ec6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e96:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ea2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ea6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e6      	bne.n	8003e82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e062      	b.n	8003f8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d149      	bne.n	8003f68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003edc:	2200      	movs	r2, #0
 8003ede:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f856 	bl	8003f94 <UART_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d03c      	beq.n	8003f68 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	623b      	str	r3, [r7, #32]
   return(result);
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e6      	bne.n	8003eee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3308      	adds	r3, #8
 8003f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f40:	61fa      	str	r2, [r7, #28]
 8003f42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	69b9      	ldr	r1, [r7, #24]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e5      	bne.n	8003f20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e011      	b.n	8003f8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3758      	adds	r7, #88	@ 0x58
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa4:	e04f      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d04b      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fae:	f7fc fd63 	bl	8000a78 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d302      	bcc.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e04e      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d037      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b80      	cmp	r3, #128	@ 0x80
 8003fda:	d034      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b40      	cmp	r3, #64	@ 0x40
 8003fe0:	d031      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d110      	bne.n	8004012 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f8ff 	bl	80041fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2208      	movs	r2, #8
 8004002:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e029      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800401c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004020:	d111      	bne.n	8004046 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800402a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f8e5 	bl	80041fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e00f      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4013      	ands	r3, r2
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	429a      	cmp	r2, r3
 8004062:	d0a0      	beq.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b096      	sub	sp, #88	@ 0x58
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2222      	movs	r2, #34	@ 0x22
 8004098:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d028      	beq.n	80040f6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a8:	4a3e      	ldr	r2, [pc, #248]	@ (80041a4 <UART_Start_Receive_DMA+0x134>)
 80040aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b0:	4a3d      	ldr	r2, [pc, #244]	@ (80041a8 <UART_Start_Receive_DMA+0x138>)
 80040b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b8:	4a3c      	ldr	r2, [pc, #240]	@ (80041ac <UART_Start_Receive_DMA+0x13c>)
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c0:	2200      	movs	r2, #0
 80040c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3324      	adds	r3, #36	@ 0x24
 80040ce:	4619      	mov	r1, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	461a      	mov	r2, r3
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	f7fc fe32 	bl	8000d40 <HAL_DMA_Start_IT>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2210      	movs	r2, #16
 80040e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e051      	b.n	800419a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d018      	beq.n	8004130 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800410c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004112:	657b      	str	r3, [r7, #84]	@ 0x54
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800411c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800411e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800412a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e6      	bne.n	80040fe <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3308      	adds	r3, #8
 8004136:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	653b      	str	r3, [r7, #80]	@ 0x50
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3308      	adds	r3, #8
 800414e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004150:	637a      	str	r2, [r7, #52]	@ 0x34
 8004152:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004156:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800415e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	613b      	str	r3, [r7, #16]
   return(result);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800417a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3308      	adds	r3, #8
 8004182:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004184:	623a      	str	r2, [r7, #32]
 8004186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	69f9      	ldr	r1, [r7, #28]
 800418a:	6a3a      	ldr	r2, [r7, #32]
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	61bb      	str	r3, [r7, #24]
   return(result);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e5      	bne.n	8004164 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3758      	adds	r7, #88	@ 0x58
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	080042c5 	.word	0x080042c5
 80041a8:	080043eb 	.word	0x080043eb
 80041ac:	08004429 	.word	0x08004429

080041b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b089      	sub	sp, #36	@ 0x24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	61bb      	str	r3, [r7, #24]
 80041d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6979      	ldr	r1, [r7, #20]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	613b      	str	r3, [r7, #16]
   return(result);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e6      	bne.n	80041b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80041f0:	bf00      	nop
 80041f2:	3724      	adds	r7, #36	@ 0x24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b095      	sub	sp, #84	@ 0x54
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004222:	643b      	str	r3, [r7, #64]	@ 0x40
 8004224:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004228:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e6      	bne.n	8004204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	61fb      	str	r3, [r7, #28]
   return(result);
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004258:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800425c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426e:	2b01      	cmp	r3, #1
 8004270:	d118      	bne.n	80042a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f023 0310 	bic.w	r3, r3, #16
 8004286:	647b      	str	r3, [r7, #68]	@ 0x44
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6979      	ldr	r1, [r7, #20]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	613b      	str	r3, [r7, #16]
   return(result);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e6      	bne.n	8004272 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042b8:	bf00      	nop
 80042ba:	3754      	adds	r7, #84	@ 0x54
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b09c      	sub	sp, #112	@ 0x70
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d071      	beq.n	80043be <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80042da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042dc:	2200      	movs	r2, #0
 80042de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004300:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004302:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004306:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800430e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e6      	bne.n	80042e2 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3308      	adds	r3, #8
 800431a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	667b      	str	r3, [r7, #100]	@ 0x64
 800432c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3308      	adds	r3, #8
 8004332:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004334:	647a      	str	r2, [r7, #68]	@ 0x44
 8004336:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800433a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e5      	bne.n	8004314 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3308      	adds	r3, #8
 800434e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	623b      	str	r3, [r7, #32]
   return(result);
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800435e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004368:	633a      	str	r2, [r7, #48]	@ 0x30
 800436a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800436e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800437c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800437e:	2220      	movs	r2, #32
 8004380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004388:	2b01      	cmp	r3, #1
 800438a:	d118      	bne.n	80043be <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	60fb      	str	r3, [r7, #12]
   return(result);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f023 0310 	bic.w	r3, r3, #16
 80043a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043aa:	61fb      	str	r3, [r7, #28]
 80043ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	69b9      	ldr	r1, [r7, #24]
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	617b      	str	r3, [r7, #20]
   return(result);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e6      	bne.n	800438c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043c0:	2200      	movs	r2, #0
 80043c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d107      	bne.n	80043dc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043d2:	4619      	mov	r1, r3
 80043d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80043d6:	f001 f85b 	bl	8005490 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043da:	e002      	b.n	80043e2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80043dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80043de:	f7ff fa9d 	bl	800391c <HAL_UART_RxCpltCallback>
}
 80043e2:	bf00      	nop
 80043e4:	3770      	adds	r7, #112	@ 0x70
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004402:	2b01      	cmp	r3, #1
 8004404:	d109      	bne.n	800441a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	b29b      	uxth	r3, r3
 8004410:	4619      	mov	r1, r3
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f001 f83c 	bl	8005490 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004418:	e002      	b.n	8004420 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff fa88 	bl	8003930 <HAL_UART_RxHalfCpltCallback>
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800443a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004442:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444e:	2b80      	cmp	r3, #128	@ 0x80
 8004450:	d109      	bne.n	8004466 <UART_DMAError+0x3e>
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b21      	cmp	r3, #33	@ 0x21
 8004456:	d106      	bne.n	8004466 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2200      	movs	r2, #0
 800445c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004460:	6978      	ldr	r0, [r7, #20]
 8004462:	f7ff fea5 	bl	80041b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004470:	2b40      	cmp	r3, #64	@ 0x40
 8004472:	d109      	bne.n	8004488 <UART_DMAError+0x60>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b22      	cmp	r3, #34	@ 0x22
 8004478:	d106      	bne.n	8004488 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2200      	movs	r2, #0
 800447e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f7ff feba 	bl	80041fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800448e:	f043 0210 	orr.w	r2, r3, #16
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004498:	6978      	ldr	r0, [r7, #20]
 800449a:	f7ff fa53 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800449e:	bf00      	nop
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff fa3d 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b088      	sub	sp, #32
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6979      	ldr	r1, [r7, #20]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	613b      	str	r3, [r7, #16]
   return(result);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e6      	bne.n	80044da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff f9f5 	bl	8003908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800451e:	bf00      	nop
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b08c      	sub	sp, #48	@ 0x30
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	4613      	mov	r3, r2
 8004546:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800454e:	2b20      	cmp	r3, #32
 8004550:	d142      	bne.n	80045d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e03b      	b.n	80045da <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	461a      	mov	r2, r3
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff fd7b 	bl	8004070 <UART_Start_Receive_DMA>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004580:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004584:	2b00      	cmp	r3, #0
 8004586:	d124      	bne.n	80045d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458c:	2b01      	cmp	r3, #1
 800458e:	d11d      	bne.n	80045cc <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2210      	movs	r2, #16
 8004596:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	617b      	str	r3, [r7, #20]
   return(result);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f043 0310 	orr.w	r3, r3, #16
 80045ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6a39      	ldr	r1, [r7, #32]
 80045bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e6      	bne.n	8004598 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80045ca:	e002      	b.n	80045d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80045d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80045d6:	e000      	b.n	80045da <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3730      	adds	r7, #48	@ 0x30
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <cmdhandler_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void cmdhandler_init( UART_HandleTypeDef* huart )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	// create a commands queue
	cmdqueue_init( &cmdhandler_vars.cmdq );
 80045ec:	4813      	ldr	r0, [pc, #76]	@ (800463c <cmdhandler_init+0x58>)
 80045ee:	f000 f89b 	bl	8004728 <cmdqueue_init>

	// set up uart port.
	serial_uart_init(huart, &cmdhandler_vars.cmdq );
 80045f2:	4912      	ldr	r1, [pc, #72]	@ (800463c <cmdhandler_init+0x58>)
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fee1 	bl	80053bc <serial_uart_init>
	serial_uart_receiveToIdle( huart );
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fef2 	bl	80053e4 <serial_uart_receiveToIdle>

	// to let us know to uart received new data;
	serial_uart_registerCB( cmdhandler_redirectCmds );
 8004600:	480f      	ldr	r0, [pc, #60]	@ (8004640 <cmdhandler_init+0x5c>)
 8004602:	f000 ff0d 	bl	8005420 <serial_uart_registerCB>

	// initialize cmd handlers list.
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
 800460a:	e010      	b.n	800462e <cmdhandler_init+0x4a>
	{
		cmdhandler_vars.cmdhandler_list[i].moduleId		= MODULE_ID_NONE;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	4a0b      	ldr	r2, [pc, #44]	@ (800463c <cmdhandler_init+0x58>)
 8004610:	3306      	adds	r3, #6
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4413      	add	r3, r2
 8004616:	2200      	movs	r2, #0
 8004618:	711a      	strb	r2, [r3, #4]
		cmdhandler_vars.cmdhandler_list[i].funPtr 		= NULL;
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	4a07      	ldr	r2, [pc, #28]	@ (800463c <cmdhandler_init+0x58>)
 800461e:	3306      	adds	r3, #6
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	2200      	movs	r2, #0
 8004626:	609a      	str	r2, [r3, #8]
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	3301      	adds	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2b09      	cmp	r3, #9
 8004632:	d9eb      	bls.n	800460c <cmdhandler_init+0x28>
	}
	return;
 8004634:	bf00      	nop
}
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20000178 	.word	0x20000178
 8004640:	080046a9 	.word	0x080046a9

08004644 <cmdhandler_registerModuleCmdHandler>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t cmdhandler_registerModuleCmdHandler( tCmdhandler_moduleCmdHandler handler )
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	463b      	mov	r3, r7
 800464c:	e883 0003 	stmia.w	r3, {r0, r1}
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 8004650:	2300      	movs	r3, #0
 8004652:	73fb      	strb	r3, [r7, #15]
 8004654:	e01b      	b.n	800468e <cmdhandler_registerModuleCmdHandler+0x4a>
	{
		// find empty handler.
		if ( cmdhandler_vars.cmdhandler_list[i].moduleId == MODULE_ID_NONE )
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	4a12      	ldr	r2, [pc, #72]	@ (80046a4 <cmdhandler_registerModuleCmdHandler+0x60>)
 800465a:	3306      	adds	r3, #6
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	791b      	ldrb	r3, [r3, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d110      	bne.n	8004688 <cmdhandler_registerModuleCmdHandler+0x44>
		{
			cmdhandler_vars.cmdhandler_list[i].moduleId = handler.moduleId;
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	7839      	ldrb	r1, [r7, #0]
 800466a:	4a0e      	ldr	r2, [pc, #56]	@ (80046a4 <cmdhandler_registerModuleCmdHandler+0x60>)
 800466c:	3306      	adds	r3, #6
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4413      	add	r3, r2
 8004672:	460a      	mov	r2, r1
 8004674:	711a      	strb	r2, [r3, #4]
			cmdhandler_vars.cmdhandler_list[i].funPtr 	 = handler.funPtr;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	490a      	ldr	r1, [pc, #40]	@ (80046a4 <cmdhandler_registerModuleCmdHandler+0x60>)
 800467c:	3306      	adds	r3, #6
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	440b      	add	r3, r1
 8004682:	609a      	str	r2, [r3, #8]
			return 0;
 8004684:	2300      	movs	r3, #0
 8004686:	e006      	b.n	8004696 <cmdhandler_registerModuleCmdHandler+0x52>
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	3301      	adds	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	2b09      	cmp	r3, #9
 8004692:	d9e0      	bls.n	8004656 <cmdhandler_registerModuleCmdHandler+0x12>
		}
	}

	// if we looped through the whole list without finding an empty slot.
	return 1;
 8004694:	2301      	movs	r3, #1
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000178 	.word	0x20000178

080046a8 <cmdhandler_redirectCmds>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void cmdhandler_redirectCmds()
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
	tCmdhandler_cmd* pCmd;

	// if there is commands in queue, pop the latest.
	if ( 1 == cmdqueue_pop( &cmdhandler_vars.cmdq, &pCmd ) )
 80046ae:	463b      	mov	r3, r7
 80046b0:	4619      	mov	r1, r3
 80046b2:	481c      	ldr	r0, [pc, #112]	@ (8004724 <cmdhandler_redirectCmds+0x7c>)
 80046b4:	f000 f8a8 	bl	8004808 <cmdqueue_pop>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d02e      	beq.n	800471c <cmdhandler_redirectCmds+0x74>
		return;

	// send the command to the relevant module.

	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80046be:	2300      	movs	r3, #0
 80046c0:	71fb      	strb	r3, [r7, #7]
 80046c2:	e027      	b.n	8004714 <cmdhandler_redirectCmds+0x6c>
	{
		if ( cmdhandler_vars.cmdhandler_list[i].funPtr != NULL && cmdhandler_vars.cmdhandler_list[i].moduleId == pCmd->id.module )
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	4a17      	ldr	r2, [pc, #92]	@ (8004724 <cmdhandler_redirectCmds+0x7c>)
 80046c8:	3306      	adds	r3, #6
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4413      	add	r3, r2
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d018      	beq.n	8004706 <cmdhandler_redirectCmds+0x5e>
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	4a13      	ldr	r2, [pc, #76]	@ (8004724 <cmdhandler_redirectCmds+0x7c>)
 80046d8:	3306      	adds	r3, #6
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4413      	add	r3, r2
 80046de:	791a      	ldrb	r2, [r3, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d10e      	bne.n	8004706 <cmdhandler_redirectCmds+0x5e>
		{
			cmdhandler_vars.cmdhandler_list[i].funPtr( *pCmd );
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004724 <cmdhandler_redirectCmds+0x7c>)
 80046ec:	3306      	adds	r3, #6
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4413      	add	r3, r2
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046fa:	4798      	blx	r3
			cmdqueue_freeCmd( pCmd );
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 f8b0 	bl	8004864 <cmdqueue_freeCmd>
 8004704:	e003      	b.n	800470e <cmdhandler_redirectCmds+0x66>
		}
		else
		{
			// commands module is unknown for us, free the cmd.
			cmdqueue_freeCmd( pCmd );
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f000 f8ab 	bl	8004864 <cmdqueue_freeCmd>
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	3301      	adds	r3, #1
 8004712:	71fb      	strb	r3, [r7, #7]
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	2b09      	cmp	r3, #9
 8004718:	d9d4      	bls.n	80046c4 <cmdhandler_redirectCmds+0x1c>
		}
	}

	return;
 800471a:	e000      	b.n	800471e <cmdhandler_redirectCmds+0x76>
		return;
 800471c:	bf00      	nop
}
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20000178 	.word	0x20000178

08004728 <cmdqueue_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t cmdqueue_init( tCmdqueue* cmdq )
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	cmdq->head = 0;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	629a      	str	r2, [r3, #40]	@ 0x28
	cmdq->tail = 0;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	62da      	str	r2, [r3, #44]	@ 0x2c
	cmdq->count= 0;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <cmdqueue_push>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t cmdqueue_push( tCmdqueue* cmdq, uint8_t *pData )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
    if ( !pData || pData[0] != CMD_NEW )
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <cmdqueue_push+0x18>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2bab      	cmp	r3, #171	@ 0xab
 8004766:	d001      	beq.n	800476c <cmdqueue_push+0x1c>
    {
        return 1;
 8004768:	2301      	movs	r3, #1
 800476a:	e047      	b.n	80047fc <cmdqueue_push+0xac>
    }

    // create a new cmd and allocate memory for that.
    tCmdhandler_cmd* cmd = (tCmdhandler_cmd*)malloc(sizeof(tCmdhandler_cmd));
 800476c:	2008      	movs	r0, #8
 800476e:	f000 ff3d 	bl	80055ec <malloc>
 8004772:	4603      	mov	r3, r0
 8004774:	60fb      	str	r3, [r7, #12]

    // parse data into cmd
    cmd->id.module  = pData[2];
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	789a      	ldrb	r2, [r3, #2]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	701a      	strb	r2, [r3, #0]
    cmd->id.cmd		= pData[1];
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	785a      	ldrb	r2, [r3, #1]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	705a      	strb	r2, [r3, #1]

    memcpy( &cmd->dataSize, &pData[3], 2 );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3302      	adds	r3, #2
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	3203      	adds	r2, #3
 800478e:	8812      	ldrh	r2, [r2, #0]
 8004790:	b292      	uxth	r2, r2
 8004792:	801a      	strh	r2, [r3, #0]

	if ( cmd->dataSize != 0 )
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	885b      	ldrh	r3, [r3, #2]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d012      	beq.n	80047c2 <cmdqueue_push+0x72>
	{
		cmd->pData = (uint8_t*) malloc( cmd->dataSize );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	885b      	ldrh	r3, [r3, #2]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 ff23 	bl	80055ec <malloc>
 80047a6:	4603      	mov	r3, r0
 80047a8:	461a      	mov	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	605a      	str	r2, [r3, #4]
		memcpy( cmd->pData, &pData[5], cmd->dataSize );
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6858      	ldr	r0, [r3, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	1d59      	adds	r1, r3, #5
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	885b      	ldrh	r3, [r3, #2]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f001 f977 	bl	8005aae <memcpy>
 80047c0:	e002      	b.n	80047c8 <cmdqueue_push+0x78>
	}
	else
	{
		cmd->pData = NULL;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	605a      	str	r2, [r3, #4]
	}

	// push cmd into the queue
	cmdq->pCmdList[cmdq->tail] = cmd;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    cmdq->tail = (cmdq->tail + 1) % CMD_Q_SIZE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d8:	1c59      	adds	r1, r3, #1
 80047da:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <cmdqueue_push+0xb4>)
 80047dc:	fba3 2301 	umull	r2, r3, r3, r1
 80047e0:	08da      	lsrs	r2, r3, #3
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	1aca      	subs	r2, r1, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    cmdq->count++;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	cccccccd 	.word	0xcccccccd

08004808 <cmdqueue_pop>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t cmdqueue_pop( tCmdqueue* cmdq, tCmdhandler_cmd** pCmd )
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
    if ( cmdq->count == 0)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <cmdqueue_pop+0x16>
    {
        return 1;
 800481a:	2301      	movs	r3, #1
 800481c:	e01a      	b.n	8004854 <cmdqueue_pop+0x4c>
    }

    *pCmd = cmdq->pCmdList[cmdq->head];
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	601a      	str	r2, [r3, #0]
    cmdq->head = (cmdq->head + 1) % CMD_Q_SIZE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004830:	1c59      	adds	r1, r3, #1
 8004832:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <cmdqueue_pop+0x58>)
 8004834:	fba3 2301 	umull	r2, r3, r3, r1
 8004838:	08da      	lsrs	r2, r3, #3
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	1aca      	subs	r2, r1, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	629a      	str	r2, [r3, #40]	@ 0x28
    cmdq->count--;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	1e5a      	subs	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	cccccccd 	.word	0xcccccccd

08004864 <cmdqueue_freeCmd>:

uint8_t cmdqueue_freeCmd( tCmdhandler_cmd* pCmd )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	if( pCmd != NULL )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <cmdqueue_freeCmd+0x26>
	{
		if ( pCmd->pData != NULL )
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d004      	beq.n	8004884 <cmdqueue_freeCmd+0x20>
			free( pCmd->pData );
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 febc 	bl	80055fc <free>
		free( pCmd );
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 feb9 	bl	80055fc <free>
	}
	return 0;
 800488a:	2300      	movs	r3, #0
};
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <crc_calculate>:

/*
 * ********************************************
 * 					function
 * ********************************************/
uint32_t crc_calculate(uint8_t *data, uint32_t length) {
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < length; i++) {
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	e021      	b.n	80048ee <crc_calculate+0x5a>
        crc ^= data[i];
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	4053      	eors	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]
 80048be:	e010      	b.n	80048e2 <crc_calculate+0x4e>
            if (crc & 1) {
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <crc_calculate+0x42>
                crc = (crc >> 1) ^ 0x04C11DB7;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	085a      	lsrs	r2, r3, #1
 80048ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004908 <crc_calculate+0x74>)
 80048d0:	4053      	eors	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	e002      	b.n	80048dc <crc_calculate+0x48>
            } else {
                crc >>= 1;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	3301      	adds	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	2b07      	cmp	r3, #7
 80048e6:	d9eb      	bls.n	80048c0 <crc_calculate+0x2c>
    for (uint32_t i = 0; i < length; i++) {
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	3301      	adds	r3, #1
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d3d9      	bcc.n	80048aa <crc_calculate+0x16>
            }
        }
    }
    return crc ^ 0xFFFFFFFF;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	43db      	mvns	r3, r3
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	04c11db7 	.word	0x04c11db7

0800490c <eeprom_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void eeprom_init()
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
	eepromData.secretKey = EEPROM_KEY;
 8004912:	4b1f      	ldr	r3, [pc, #124]	@ (8004990 <eeprom_init+0x84>)
 8004914:	4a1f      	ldr	r2, [pc, #124]	@ (8004994 <eeprom_init+0x88>)
 8004916:	601a      	str	r2, [r3, #0]

	uint32_t readAdd = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	607b      	str	r3, [r7, #4]
	uint32_t writeAdd = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	603b      	str	r3, [r7, #0]

	if ( 0 == findEepromReadAdd( &readAdd ) )
 8004920:	1d3b      	adds	r3, r7, #4
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f904 	bl	8004b30 <findEepromReadAdd>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10d      	bne.n	800494a <eeprom_init+0x3e>
	{
		eepromVars.validReadBlock = 1;
 800492e:	4b1a      	ldr	r3, [pc, #104]	@ (8004998 <eeprom_init+0x8c>)
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
		eepromVars.readAdd = readAdd;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a18      	ldr	r2, [pc, #96]	@ (8004998 <eeprom_init+0x8c>)
 8004938:	6053      	str	r3, [r2, #4]
		flash_read( eepromVars.readAdd, (uint8_t*)&eepromData, sizeof( tEepromData ) );
 800493a:	4b17      	ldr	r3, [pc, #92]	@ (8004998 <eeprom_init+0x8c>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2210      	movs	r2, #16
 8004940:	4913      	ldr	r1, [pc, #76]	@ (8004990 <eeprom_init+0x84>)
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f9e4 	bl	8004d10 <flash_read>
 8004948:	e007      	b.n	800495a <eeprom_init+0x4e>
	}
	else
	{
		eeprom_erase();
 800494a:	f000 f829 	bl	80049a0 <eeprom_erase>
		eepromVars.validReadBlock = 0;
 800494e:	4b12      	ldr	r3, [pc, #72]	@ (8004998 <eeprom_init+0x8c>)
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
		eepromVars.writeAdd = FLASH_EEPROM_START;
 8004954:	4b10      	ldr	r3, [pc, #64]	@ (8004998 <eeprom_init+0x8c>)
 8004956:	4a11      	ldr	r2, [pc, #68]	@ (800499c <eeprom_init+0x90>)
 8004958:	609a      	str	r2, [r3, #8]
	}

	if ( 0 == findEepromWriteAdd( &writeAdd ) )
 800495a:	463b      	mov	r3, r7
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f91b 	bl	8004b98 <findEepromWriteAdd>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d103      	bne.n	8004970 <eeprom_init+0x64>
	{
		eepromVars.writeAdd = writeAdd;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	4a0b      	ldr	r2, [pc, #44]	@ (8004998 <eeprom_init+0x8c>)
 800496c:	6093      	str	r3, [r2, #8]


		}

	}
	return;
 800496e:	e00b      	b.n	8004988 <eeprom_init+0x7c>
		eeprom_erase();
 8004970:	f000 f816 	bl	80049a0 <eeprom_erase>
		if ( eepromVars.validReadBlock )
 8004974:	4b08      	ldr	r3, [pc, #32]	@ (8004998 <eeprom_init+0x8c>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <eeprom_init+0x7c>
			eepromVars.writeAdd = FLASH_EEPROM_START;
 800497c:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <eeprom_init+0x8c>)
 800497e:	4a07      	ldr	r2, [pc, #28]	@ (800499c <eeprom_init+0x90>)
 8004980:	609a      	str	r2, [r3, #8]
			eeprom_store();
 8004982:	f000 f8b3 	bl	8004aec <eeprom_store>
	return;
 8004986:	bf00      	nop
 8004988:	bf00      	nop
}
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	200001fc 	.word	0x200001fc
 8004994:	abcdabcd 	.word	0xabcdabcd
 8004998:	2000020c 	.word	0x2000020c
 800499c:	0803f800 	.word	0x0803f800

080049a0 <eeprom_erase>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void eeprom_erase()
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
	flash_erasePage( FLASH_EEPROM_START, 1);
 80049a4:	2101      	movs	r1, #1
 80049a6:	4802      	ldr	r0, [pc, #8]	@ (80049b0 <eeprom_erase+0x10>)
 80049a8:	f000 f9c4 	bl	8004d34 <flash_erasePage>
}
 80049ac:	bf00      	nop
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	0803f800 	.word	0x0803f800

080049b4 <eeprom_setSystemRestartFlag>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void eeprom_setSystemRestartFlag( uint32_t flag)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	if ( eepromData.systemRestartFlag != flag )
 80049bc:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <eeprom_setSystemRestartFlag+0x2c>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d005      	beq.n	80049d2 <eeprom_setSystemRestartFlag+0x1e>
	{
		eepromData.systemRestartFlag = flag;
 80049c6:	4a06      	ldr	r2, [pc, #24]	@ (80049e0 <eeprom_setSystemRestartFlag+0x2c>)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6053      	str	r3, [r2, #4]
		eepromVars.storeNeeded = 1;
 80049cc:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <eeprom_setSystemRestartFlag+0x30>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	705a      	strb	r2, [r3, #1]
	}
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	200001fc 	.word	0x200001fc
 80049e4:	2000020c 	.word	0x2000020c

080049e8 <eeprom_getSystemRestartFlag>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t eeprom_getSystemRestartFlag( uint32_t *flag)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
	if ( eepromVars.validReadBlock )
 80049f0:	4b08      	ldr	r3, [pc, #32]	@ (8004a14 <eeprom_getSystemRestartFlag+0x2c>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <eeprom_getSystemRestartFlag+0x1c>
	{
		*flag = eepromData.systemRestartFlag;
 80049f8:	4b07      	ldr	r3, [pc, #28]	@ (8004a18 <eeprom_getSystemRestartFlag+0x30>)
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	601a      	str	r2, [r3, #0]
		return 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e000      	b.n	8004a06 <eeprom_getSystemRestartFlag+0x1e>
	}
	else
	{
		return 1;
 8004a04:	2301      	movs	r3, #1
	}
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	2000020c 	.word	0x2000020c
 8004a18:	200001fc 	.word	0x200001fc

08004a1c <eeprom_setAppSize>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void eeprom_setAppSize( uint32_t appSize)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	if ( eepromData.appSize != appSize )
 8004a24:	4b08      	ldr	r3, [pc, #32]	@ (8004a48 <eeprom_setAppSize+0x2c>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d005      	beq.n	8004a3a <eeprom_setAppSize+0x1e>
	{
		eepromData.appSize = appSize;
 8004a2e:	4a06      	ldr	r2, [pc, #24]	@ (8004a48 <eeprom_setAppSize+0x2c>)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6093      	str	r3, [r2, #8]
		eepromVars.storeNeeded = 1;
 8004a34:	4b05      	ldr	r3, [pc, #20]	@ (8004a4c <eeprom_setAppSize+0x30>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	705a      	strb	r2, [r3, #1]
	}
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	200001fc 	.word	0x200001fc
 8004a4c:	2000020c 	.word	0x2000020c

08004a50 <eeprom_getAppSize>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t eeprom_getAppSize( uint32_t *appSize)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
	if ( eepromVars.validReadBlock )
 8004a58:	4b08      	ldr	r3, [pc, #32]	@ (8004a7c <eeprom_getAppSize+0x2c>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <eeprom_getAppSize+0x1c>
	{
		*appSize = eepromData.appSize;
 8004a60:	4b07      	ldr	r3, [pc, #28]	@ (8004a80 <eeprom_getAppSize+0x30>)
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	601a      	str	r2, [r3, #0]
		return 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e000      	b.n	8004a6e <eeprom_getAppSize+0x1e>
	}
	else
	{
		return 1;
 8004a6c:	2301      	movs	r3, #1
	}
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	2000020c 	.word	0x2000020c
 8004a80:	200001fc 	.word	0x200001fc

08004a84 <eeprom_setAppCrc>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void eeprom_setAppCrc( uint32_t crc)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
	if ( eepromData.appCrc != crc )
 8004a8c:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <eeprom_setAppCrc+0x2c>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d005      	beq.n	8004aa2 <eeprom_setAppCrc+0x1e>
	{
		eepromData.appCrc = crc;
 8004a96:	4a06      	ldr	r2, [pc, #24]	@ (8004ab0 <eeprom_setAppCrc+0x2c>)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	60d3      	str	r3, [r2, #12]
		eepromVars.storeNeeded = 1;
 8004a9c:	4b05      	ldr	r3, [pc, #20]	@ (8004ab4 <eeprom_setAppCrc+0x30>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	705a      	strb	r2, [r3, #1]
	}
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	200001fc 	.word	0x200001fc
 8004ab4:	2000020c 	.word	0x2000020c

08004ab8 <eeprom_getAppCrc>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t eeprom_getAppCrc( uint32_t *crc)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
	if ( eepromVars.validReadBlock )
 8004ac0:	4b08      	ldr	r3, [pc, #32]	@ (8004ae4 <eeprom_getAppCrc+0x2c>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <eeprom_getAppCrc+0x1c>
	{
		*crc = eepromData.appCrc;
 8004ac8:	4b07      	ldr	r3, [pc, #28]	@ (8004ae8 <eeprom_getAppCrc+0x30>)
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	601a      	str	r2, [r3, #0]
		return 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e000      	b.n	8004ad6 <eeprom_getAppCrc+0x1e>
	}
	else
	{
		return 1;
 8004ad4:	2301      	movs	r3, #1
	}
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	2000020c 	.word	0x2000020c
 8004ae8:	200001fc 	.word	0x200001fc

08004aec <eeprom_store>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void eeprom_store()
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
	if ( eepromVars.storeNeeded )
 8004af0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <eeprom_store+0x34>)
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d010      	beq.n	8004b1a <eeprom_store+0x2e>
	{
		// write data from ram struct to flash
		flash_write( eepromVars.writeAdd, (uint8_t*)&eepromData, sizeof( tEepromData ) );
 8004af8:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <eeprom_store+0x34>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2210      	movs	r2, #16
 8004afe:	4909      	ldr	r1, [pc, #36]	@ (8004b24 <eeprom_store+0x38>)
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 f88f 	bl	8004c24 <flash_write>

		// update read and write addresses.
		findEepromReadAdd( &eepromVars.readAdd );
 8004b06:	4808      	ldr	r0, [pc, #32]	@ (8004b28 <eeprom_store+0x3c>)
 8004b08:	f000 f812 	bl	8004b30 <findEepromReadAdd>
		findEepromWriteAdd( &eepromVars.writeAdd );
 8004b0c:	4807      	ldr	r0, [pc, #28]	@ (8004b2c <eeprom_store+0x40>)
 8004b0e:	f000 f843 	bl	8004b98 <findEepromWriteAdd>
		eepromVars.storeNeeded = 0;
 8004b12:	4b03      	ldr	r3, [pc, #12]	@ (8004b20 <eeprom_store+0x34>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	705a      	strb	r2, [r3, #1]
 8004b18:	e000      	b.n	8004b1c <eeprom_store+0x30>
	}
	else
		return;
 8004b1a:	bf00      	nop
}
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	2000020c 	.word	0x2000020c
 8004b24:	200001fc 	.word	0x200001fc
 8004b28:	20000210 	.word	0x20000210
 8004b2c:	20000214 	.word	0x20000214

08004b30 <findEepromReadAdd>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t findEepromReadAdd( uint32_t *readAdd )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	// find the last written data in eeprom.
	// first address of all eepromData saved to flash should be the secret key,
	// if no secret key was found, then the struct address before is wh

	uint32_t startAdd = FLASH_EEPROM_START;
 8004b38:	4b14      	ldr	r3, [pc, #80]	@ (8004b8c <findEepromReadAdd+0x5c>)
 8004b3a:	60fb      	str	r3, [r7, #12]
	uint32_t key = * (uint32_t*) startAdd;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60bb      	str	r3, [r7, #8]

	while ( key == EEPROM_KEY )
 8004b42:	e00c      	b.n	8004b5e <findEepromReadAdd+0x2e>
	{
		startAdd += sizeof( tEepromData );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3310      	adds	r3, #16
 8004b48:	60fb      	str	r3, [r7, #12]
		if ( startAdd < FLASH_EEPROM_END )
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a10      	ldr	r2, [pc, #64]	@ (8004b90 <findEepromReadAdd+0x60>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d803      	bhi.n	8004b5a <findEepromReadAdd+0x2a>
		{
			key = * (uint32_t*) startAdd;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	e001      	b.n	8004b5e <findEepromReadAdd+0x2e>
		}
		else
		{
			// came to the end of eeprom area without finding any valid data to read.
			return 1;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e010      	b.n	8004b80 <findEepromReadAdd+0x50>
	while ( key == EEPROM_KEY )
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4a0c      	ldr	r2, [pc, #48]	@ (8004b94 <findEepromReadAdd+0x64>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d0ee      	beq.n	8004b44 <findEepromReadAdd+0x14>
		}
	}

	// the last written struct is the one before the available one.
	if ( startAdd - sizeof( tEepromData ) >= FLASH_EEPROM_START )
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b10      	subs	r3, #16
 8004b6a:	4a08      	ldr	r2, [pc, #32]	@ (8004b8c <findEepromReadAdd+0x5c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d306      	bcc.n	8004b7e <findEepromReadAdd+0x4e>
	{
		*readAdd = startAdd - sizeof( tEepromData );
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f1a3 0210 	sub.w	r2, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	601a      	str	r2, [r3, #0]
		return 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e000      	b.n	8004b80 <findEepromReadAdd+0x50>
	}
	else
	{
		return 1;
 8004b7e:	2301      	movs	r3, #1
	}

}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	0803f800 	.word	0x0803f800
 8004b90:	0803ffff 	.word	0x0803ffff
 8004b94:	abcdabcd 	.word	0xabcdabcd

08004b98 <findEepromWriteAdd>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t findEepromWriteAdd( uint32_t *writeAdd )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	uint32_t startAdd = FLASH_EEPROM_START;
 8004ba0:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <findEepromWriteAdd+0x58>)
 8004ba2:	60fb      	str	r3, [r7, #12]
	uint32_t key = * (uint32_t*) startAdd;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60bb      	str	r3, [r7, #8]

	while ( key == EEPROM_KEY )
 8004baa:	e00c      	b.n	8004bc6 <findEepromWriteAdd+0x2e>
	{
		startAdd += sizeof( tEepromData );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3310      	adds	r3, #16
 8004bb0:	60fb      	str	r3, [r7, #12]
		if ( startAdd < FLASH_EEPROM_END )
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8004bf4 <findEepromWriteAdd+0x5c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d803      	bhi.n	8004bc2 <findEepromWriteAdd+0x2a>
		{
			key = * (uint32_t*) startAdd;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	e001      	b.n	8004bc6 <findEepromWriteAdd+0x2e>
		}
		else
		{
			// came to the end of eeprom area without finding any valid data to write
			return 1;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e00d      	b.n	8004be2 <findEepromWriteAdd+0x4a>
	while ( key == EEPROM_KEY )
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf8 <findEepromWriteAdd+0x60>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d0ee      	beq.n	8004bac <findEepromWriteAdd+0x14>
		}
	}

	// make sure this place is empty
	if ( key == 0xffffffff  )
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d104      	bne.n	8004be0 <findEepromWriteAdd+0x48>
	{
		*writeAdd = startAdd;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	601a      	str	r2, [r3, #0]
		return 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e000      	b.n	8004be2 <findEepromWriteAdd+0x4a>
	}
	else
	{
		return 1;
 8004be0:	2301      	movs	r3, #1
	}


}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	0803f800 	.word	0x0803f800
 8004bf4:	0803ffff 	.word	0x0803ffff
 8004bf8:	abcdabcd 	.word	0xabcdabcd

08004bfc <flash_init>:
/************************************
 * Function
 * **********************************
 */
void flash_init()
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_FLASH, .funPtr = flash_cmd_handler };
 8004c02:	4a07      	ldr	r2, [pc, #28]	@ (8004c20 <flash_init+0x24>)
 8004c04:	463b      	mov	r3, r7
 8004c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c0a:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 8004c0e:	463b      	mov	r3, r7
 8004c10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c14:	f7ff fd16 	bl	8004644 <cmdhandler_registerModuleCmdHandler>
}
 8004c18:	bf00      	nop
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	080064a0 	.word	0x080064a0

08004c24 <flash_write>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_write( uint32_t Address, uint8_t* pData, uint32_t size )
{
 8004c24:	b5b0      	push	{r4, r5, r7, lr}
 8004c26:	b08a      	sub	sp, #40	@ 0x28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
	// check if valid flash address.
	if ( Address < FLASH_EEPROM_START || Address > FLASH_END_ADD )
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a35      	ldr	r2, [pc, #212]	@ (8004d08 <flash_write+0xe4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d303      	bcc.n	8004c40 <flash_write+0x1c>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4a34      	ldr	r2, [pc, #208]	@ (8004d0c <flash_write+0xe8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d901      	bls.n	8004c44 <flash_write+0x20>
	{
		// return if address is within the boot area.
		return 1;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e05c      	b.n	8004cfe <flash_write+0xda>
	}

	// check for valid input
	if ( pData == NULL && size == 0 )
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d104      	bne.n	8004c54 <flash_write+0x30>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <flash_write+0x30>
	{
		return 1;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e054      	b.n	8004cfe <flash_write+0xda>
  __ASM volatile ("cpsid i" : : : "memory");
 8004c54:	b672      	cpsid	i
}
 8004c56:	bf00      	nop
	}

	// Disable interrupts
	__disable_irq();

	HAL_FLASH_Unlock();
 8004c58:	f7fc faca 	bl	80011f0 <HAL_FLASH_Unlock>
	uint32_t remaining_bytes = size;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_StatusTypeDef status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	76bb      	strb	r3, [r7, #26]
	uint32_t read_offset = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	623b      	str	r3, [r7, #32]
	uint32_t write_offset = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61fb      	str	r3, [r7, #28]
	uint8_t oneByte= 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	76fb      	strb	r3, [r7, #27]

	while( remaining_bytes )
 8004c70:	e03d      	b.n	8004cee <flash_write+0xca>
	{
		uint16_t inData= 0xffff;
 8004c72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c76:	827b      	strh	r3, [r7, #18]
		uint32_t writing_address = Address + write_offset;
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

		if ( remaining_bytes >= HALF_WORD )
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d906      	bls.n	8004c94 <flash_write+0x70>
			memcpy (&inData, &pData[read_offset], HALF_WORD);
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	827b      	strh	r3, [r7, #18]
 8004c92:	e006      	b.n	8004ca2 <flash_write+0x7e>
		else
		{
			// if there is only one byte, move it to inData.
			memcpy (&inData, &pData[read_offset], 1);
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	4413      	add	r3, r2
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	74bb      	strb	r3, [r7, #18]
			oneByte = 1;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	76fb      	strb	r3, [r7, #27]
		}
		status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, writing_address, inData );
 8004ca2:	8a7b      	ldrh	r3, [r7, #18]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	461c      	mov	r4, r3
 8004caa:	4615      	mov	r5, r2
 8004cac:	4622      	mov	r2, r4
 8004cae:	462b      	mov	r3, r5
 8004cb0:	6979      	ldr	r1, [r7, #20]
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	f7fc fa2c 	bl	8001110 <HAL_FLASH_Program>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	76bb      	strb	r3, [r7, #26]
		if ( status == HAL_OK )
 8004cbc:	7ebb      	ldrb	r3, [r7, #26]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d115      	bne.n	8004cee <flash_write+0xca>
		{
			if ( oneByte == 1 )
 8004cc2:	7efb      	ldrb	r3, [r7, #27]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d109      	bne.n	8004cdc <flash_write+0xb8>
			{
				remaining_bytes -= 1;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
				read_offset 	+= 1;
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	623b      	str	r3, [r7, #32]
				write_offset	+= 1;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	e008      	b.n	8004cee <flash_write+0xca>
			}
			else
			{
				remaining_bytes -= HALF_WORD;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	3b02      	subs	r3, #2
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
				read_offset 	+= HALF_WORD;
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	623b      	str	r3, [r7, #32]
				write_offset	+= HALF_WORD;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	3302      	adds	r3, #2
 8004cec:	61fb      	str	r3, [r7, #28]
	while( remaining_bytes )
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1be      	bne.n	8004c72 <flash_write+0x4e>

		}

	}

	HAL_FLASH_Lock();
 8004cf4:	f7fc faa2 	bl	800123c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8004cf8:	b662      	cpsie	i
}
 8004cfa:	bf00      	nop
	// Re-enable interrupts
	__enable_irq();

	return 0;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3728      	adds	r7, #40	@ 0x28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bdb0      	pop	{r4, r5, r7, pc}
 8004d06:	bf00      	nop
 8004d08:	0803f800 	.word	0x0803f800
 8004d0c:	08080000 	.word	0x08080000

08004d10 <flash_read>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_read(uint32_t address, uint8_t* pData, uint32_t size)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
	memcpy( pData, address, size );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	4619      	mov	r1, r3
 8004d22:	68b8      	ldr	r0, [r7, #8]
 8004d24:	f000 fec3 	bl	8005aae <memcpy>
	return 0;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <flash_erasePage>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_erasePage( uint32_t Address, uint32_t nrPages )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
	// make sure we are not going to erase ourself
	if ( Address < FLASH_EEPROM_START )
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a16      	ldr	r2, [pc, #88]	@ (8004d9c <flash_erasePage+0x68>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d205      	bcs.n	8004d52 <flash_erasePage+0x1e>
	{
		printf( "trying to erase boot area 0x:%08x", Address );
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4815      	ldr	r0, [pc, #84]	@ (8004da0 <flash_erasePage+0x6c>)
 8004d4a:	f000 fdcf 	bl	80058ec <iprintf>
		return 1;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e01f      	b.n	8004d92 <flash_erasePage+0x5e>
	}

	// find page start address.
	uint32_t pageStartAddress = ( Address / FLASH_PAGE_SIZE ) * FLASH_PAGE_SIZE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d58:	f023 0307 	bic.w	r3, r3, #7
 8004d5c:	61fb      	str	r3, [r7, #28]

	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages 		= nrPages;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	617b      	str	r3, [r7, #20]
	eraseInit.PageAddress 	= pageStartAddress;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	613b      	str	r3, [r7, #16]
	eraseInit.TypeErase 	= FLASH_TYPEERASE_PAGES;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]

	uint32_t pageError;

	HAL_FLASH_Unlock();
 8004d6a:	f7fc fa41 	bl	80011f0 <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase( &eraseInit, &pageError);
 8004d6e:	f107 0208 	add.w	r2, r7, #8
 8004d72:	f107 030c 	add.w	r3, r7, #12
 8004d76:	4611      	mov	r1, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fc fafd 	bl	8001378 <HAL_FLASHEx_Erase>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	76fb      	strb	r3, [r7, #27]
	HAL_FLASH_Lock();
 8004d82:	f7fc fa5b 	bl	800123c <HAL_FLASH_Lock>
	if ( status != HAL_OK )
 8004d86:	7efb      	ldrb	r3, [r7, #27]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <flash_erasePage+0x5c>
		return 1;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <flash_erasePage+0x5e>

	return 0;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3720      	adds	r7, #32
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	0803f800 	.word	0x0803f800
 8004da0:	080064a8 	.word	0x080064a8

08004da4 <flash_cmd_handler>:
/************************************
 * Function
 * **********************************
 */
void flash_cmd_handler( tCmdhandler_cmd inCmd )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	463b      	mov	r3, r7
 8004dac:	e883 0003 	stmia.w	r3, {r0, r1}
	if( inCmd.id.module !=  MODULE_ID_FLASH )
 8004db0:	783b      	ldrb	r3, [r7, #0]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d121      	bne.n	8004dfa <flash_cmd_handler+0x56>
		return;

	switch( inCmd.id.cmd )
 8004db6:	787b      	ldrb	r3, [r7, #1]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d002      	beq.n	8004dc2 <flash_cmd_handler+0x1e>
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d010      	beq.n	8004de2 <flash_cmd_handler+0x3e>
			memcpy( &address, &inCmd.pData[0], 4 );
			flash_erasePage( address, 1 );
			break;
		}
		default:
			break;
 8004dc0:	e01a      	b.n	8004df8 <flash_cmd_handler+0x54>
			uint32_t address = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
			memcpy( &address, &inCmd.pData[0], 4);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	613b      	str	r3, [r7, #16]
			uint8_t* pData 	 = &inCmd.pData[4];
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	617b      	str	r3, [r7, #20]
			flash_write(address, pData, inCmd.dataSize - 4 );
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	887a      	ldrh	r2, [r7, #2]
 8004dd6:	3a04      	subs	r2, #4
 8004dd8:	6979      	ldr	r1, [r7, #20]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff ff22 	bl	8004c24 <flash_write>
			break;
 8004de0:	e00a      	b.n	8004df8 <flash_cmd_handler+0x54>
			uint32_t address = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
			memcpy( &address, &inCmd.pData[0], 4 );
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]
			flash_erasePage( address, 1 );
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2101      	movs	r1, #1
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff ff9f 	bl	8004d34 <flash_erasePage>
			break;
 8004df6:	bf00      	nop
	}

	return;
 8004df8:	e000      	b.n	8004dfc <flash_cmd_handler+0x58>
		return;
 8004dfa:	bf00      	nop
}
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <fwUpgrade_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void fwUpgrade_init()
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_FW_UPGRADE, .funPtr = fwUpgrade_cmd_handler };
 8004e0a:	4a13      	ldr	r2, [pc, #76]	@ (8004e58 <fwUpgrade_init+0x54>)
 8004e0c:	f107 0308 	add.w	r3, r7, #8
 8004e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e14:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 8004e18:	f107 0308 	add.w	r3, r7, #8
 8004e1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e20:	f7ff fc10 	bl	8004644 <cmdhandler_registerModuleCmdHandler>

	uint32_t appSize;
	uint32_t appCrc;
	if ( 0 == eeprom_getAppSize( &appSize ) )
 8004e24:	1d3b      	adds	r3, r7, #4
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fe12 	bl	8004a50 <eeprom_getAppSize>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <fwUpgrade_init+0x34>
	{
		fwUpgradeVars.appSize = appSize;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a09      	ldr	r2, [pc, #36]	@ (8004e5c <fwUpgrade_init+0x58>)
 8004e36:	6013      	str	r3, [r2, #0]
	}
	if ( 0 == eeprom_getAppCrc( &appCrc ) )
 8004e38:	463b      	mov	r3, r7
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff fe3c 	bl	8004ab8 <eeprom_getAppCrc>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d103      	bne.n	8004e4e <fwUpgrade_init+0x4a>
	{
		fwUpgradeVars.appCRC = appCrc;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	4a04      	ldr	r2, [pc, #16]	@ (8004e5c <fwUpgrade_init+0x58>)
 8004e4a:	6053      	str	r3, [r2, #4]
	}

	return;
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
}
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	080064cc 	.word	0x080064cc
 8004e5c:	20000218 	.word	0x20000218

08004e60 <fwUpgrade_eraseApp>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t fwUpgrade_eraseApp()
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
	uint32_t address 	= APP_START_ADD;
 8004e66:	4b08      	ldr	r3, [pc, #32]	@ (8004e88 <fwUpgrade_eraseApp+0x28>)
 8004e68:	60fb      	str	r3, [r7, #12]
	uint32_t eraseArea 	= FLASH_END_ADD - APP_START_ADD;
 8004e6a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004e6e:	60bb      	str	r3, [r7, #8]
	uint32_t nrPages   	= eraseArea / FLASH_PAGE_SIZE ;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	0adb      	lsrs	r3, r3, #11
 8004e74:	607b      	str	r3, [r7, #4]

	return flash_erasePage( address, nrPages );
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7ff ff5b 	bl	8004d34 <flash_erasePage>
 8004e7e:	4603      	mov	r3, r0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	08040000 	.word	0x08040000

08004e8c <fwUpgrade_programAppStart>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void fwUpgrade_programAppStart( uint32_t size, uint32_t crc )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
	fwUpgradeVars.appSize 	= size;
 8004e96:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec8 <fwUpgrade_programAppStart+0x3c>)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6013      	str	r3, [r2, #0]
	fwUpgradeVars.appCRC 	= crc;
 8004e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec8 <fwUpgrade_programAppStart+0x3c>)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6053      	str	r3, [r2, #4]
	fwUpgradeVars.appOk 	= 0;
 8004ea2:	4b09      	ldr	r3, [pc, #36]	@ (8004ec8 <fwUpgrade_programAppStart+0x3c>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	721a      	strb	r2, [r3, #8]

	// save size and crc received by the user to be used in future.
	eeprom_setAppCrc( fwUpgradeVars.appCRC );
 8004ea8:	4b07      	ldr	r3, [pc, #28]	@ (8004ec8 <fwUpgrade_programAppStart+0x3c>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fde9 	bl	8004a84 <eeprom_setAppCrc>
	eeprom_setAppSize( fwUpgradeVars.appSize );
 8004eb2:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <fwUpgrade_programAppStart+0x3c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff fdb0 	bl	8004a1c <eeprom_setAppSize>
	eeprom_store();
 8004ebc:	f7ff fe16 	bl	8004aec <eeprom_store>
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000218 	.word	0x20000218

08004ecc <fwUpgrade_programAppEnd>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void fwUpgrade_programAppEnd()
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
	if ( 0 == fwUpgrade_verifyApp() )
 8004ed0:	f000 f80e 	bl	8004ef0 <fwUpgrade_verifyApp>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <fwUpgrade_programAppEnd+0x16>
	{
		fwUpgradeVars.appOk = 1;
 8004eda:	4b04      	ldr	r3, [pc, #16]	@ (8004eec <fwUpgrade_programAppEnd+0x20>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	721a      	strb	r2, [r3, #8]
	}
	else
	{
		fwUpgradeVars.appOk = 0;
	}
}
 8004ee0:	e002      	b.n	8004ee8 <fwUpgrade_programAppEnd+0x1c>
		fwUpgradeVars.appOk = 0;
 8004ee2:	4b02      	ldr	r3, [pc, #8]	@ (8004eec <fwUpgrade_programAppEnd+0x20>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	721a      	strb	r2, [r3, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	20000218 	.word	0x20000218

08004ef0 <fwUpgrade_verifyApp>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t fwUpgrade_verifyApp()
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
	// this function will be used before the initialization of the module, it should not be dependent of the init function.
	uint32_t appSize = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	607b      	str	r3, [r7, #4]
	uint32_t appCrc = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	603b      	str	r3, [r7, #0]
	if ( 0 == eeprom_getAppSize( &appSize ) )
 8004efe:	1d3b      	adds	r3, r7, #4
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff fda5 	bl	8004a50 <eeprom_getAppSize>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <fwUpgrade_verifyApp+0x22>
	{
		fwUpgradeVars.appSize = appSize;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a18      	ldr	r2, [pc, #96]	@ (8004f70 <fwUpgrade_verifyApp+0x80>)
 8004f10:	6013      	str	r3, [r2, #0]
	}
	if ( 0 == eeprom_getAppCrc( &appCrc ) )
 8004f12:	463b      	mov	r3, r7
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fdcf 	bl	8004ab8 <eeprom_getAppCrc>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <fwUpgrade_verifyApp+0x36>
	{
		fwUpgradeVars.appCRC = appCrc;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	4a13      	ldr	r2, [pc, #76]	@ (8004f70 <fwUpgrade_verifyApp+0x80>)
 8004f24:	6053      	str	r3, [r2, #4]
	}

	if ( fwUpgradeVars.appSize == 0 || fwUpgradeVars.appCRC == 0 )
 8004f26:	4b12      	ldr	r3, [pc, #72]	@ (8004f70 <fwUpgrade_verifyApp+0x80>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <fwUpgrade_verifyApp+0x46>
 8004f2e:	4b10      	ldr	r3, [pc, #64]	@ (8004f70 <fwUpgrade_verifyApp+0x80>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <fwUpgrade_verifyApp+0x4a>
		return 1;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e016      	b.n	8004f68 <fwUpgrade_verifyApp+0x78>

	uint8_t *data = (uint8_t*) APP_START_ADD;
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f74 <fwUpgrade_verifyApp+0x84>)
 8004f3c:	60fb      	str	r3, [r7, #12]
	uint32_t crc = crc_calculate( data, fwUpgradeVars.appSize );
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f70 <fwUpgrade_verifyApp+0x80>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4619      	mov	r1, r3
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7ff fca5 	bl	8004894 <crc_calculate>
 8004f4a:	60b8      	str	r0, [r7, #8]

	if ( crc == fwUpgradeVars.appCRC )
 8004f4c:	4b08      	ldr	r3, [pc, #32]	@ (8004f70 <fwUpgrade_verifyApp+0x80>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d104      	bne.n	8004f60 <fwUpgrade_verifyApp+0x70>
	{
		fwUpgradeVars.appOk = 1;
 8004f56:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <fwUpgrade_verifyApp+0x80>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	721a      	strb	r2, [r3, #8]
		return 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e003      	b.n	8004f68 <fwUpgrade_verifyApp+0x78>
	}
	else
	{
		fwUpgradeVars.appOk = 0;
 8004f60:	4b03      	ldr	r3, [pc, #12]	@ (8004f70 <fwUpgrade_verifyApp+0x80>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	721a      	strb	r2, [r3, #8]
		return 1;
 8004f66:	2301      	movs	r3, #1
	}
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20000218 	.word	0x20000218
 8004f74:	08040000 	.word	0x08040000

08004f78 <fwUpgrade_cmd_handler>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void fwUpgrade_cmd_handler( tCmdhandler_cmd inCmd )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	463b      	mov	r3, r7
 8004f80:	e883 0003 	stmia.w	r3, {r0, r1}
	// make sure the command is for us.
	if ( inCmd.id.module != MODULE_ID_FW_UPGRADE )
 8004f84:	783b      	ldrb	r3, [r7, #0]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d134      	bne.n	8004ff4 <fwUpgrade_cmd_handler+0x7c>
		return;

	switch( inCmd.id.cmd )
 8004f8a:	787b      	ldrb	r3, [r7, #1]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d82e      	bhi.n	8004ff0 <fwUpgrade_cmd_handler+0x78>
 8004f92:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <fwUpgrade_cmd_handler+0x20>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004faf 	.word	0x08004faf
 8004fa0:	08004fcf 	.word	0x08004fcf
 8004fa4:	08004feb 	.word	0x08004feb
	{
		case CMD_FW_UPGRADE_ERASE_APP:
		{
			fwUpgrade_eraseApp();
 8004fa8:	f7ff ff5a 	bl	8004e60 <fwUpgrade_eraseApp>
			break;
 8004fac:	e021      	b.n	8004ff2 <fwUpgrade_cmd_handler+0x7a>
		}
		case CMD_FW_UPGRADE_PROG_APP:
		{
			// extract parameter from data.
			// cmd.data : address 4 bytes + data cmd.dataSize - 4
			uint32_t address = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
			memcpy( &address, &inCmd.pData[0], 4);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	613b      	str	r3, [r7, #16]
			uint8_t* pData 	 = &inCmd.pData[4];
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	617b      	str	r3, [r7, #20]

			// call write
			flash_write( address, pData, inCmd.dataSize - 4 );
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	887a      	ldrh	r2, [r7, #2]
 8004fc2:	3a04      	subs	r2, #4
 8004fc4:	6979      	ldr	r1, [r7, #20]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fe2c 	bl	8004c24 <flash_write>
			break;
 8004fcc:	e011      	b.n	8004ff2 <fwUpgrade_cmd_handler+0x7a>
		}
		case CMD_FW_UPGRADE_PROG_APP_START:
		{
			uint32_t size, crc;
			memcpy( &size, &inCmd.pData[0], 4);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]
			memcpy( &crc, &inCmd.pData[4], 4);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60bb      	str	r3, [r7, #8]
			fwUpgrade_programAppStart( size, crc );
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	4611      	mov	r1, r2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff ff52 	bl	8004e8c <fwUpgrade_programAppStart>
			break;
 8004fe8:	e003      	b.n	8004ff2 <fwUpgrade_cmd_handler+0x7a>
		}
		case CMD_FW_UPGRADE_PROG_APP_END:
		{
			fwUpgrade_programAppEnd();
 8004fea:	f7ff ff6f 	bl	8004ecc <fwUpgrade_programAppEnd>
			break;
 8004fee:	e000      	b.n	8004ff2 <fwUpgrade_cmd_handler+0x7a>
		}
		default:
			break;
 8004ff0:	bf00      	nop
	}

	return;
 8004ff2:	e000      	b.n	8004ff6 <fwUpgrade_cmd_handler+0x7e>
		return;
 8004ff4:	bf00      	nop
}
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <led_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_init()
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_LED, .funPtr = led_cmd_handler };
 8005002:	4a07      	ldr	r2, [pc, #28]	@ (8005020 <led_init+0x24>)
 8005004:	463b      	mov	r3, r7
 8005006:	e892 0003 	ldmia.w	r2, {r0, r1}
 800500a:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 800500e:	463b      	mov	r3, r7
 8005010:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005014:	f7ff fb16 	bl	8004644 <cmdhandler_registerModuleCmdHandler>
	return;
 8005018:	bf00      	nop
}
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	080064d4 	.word	0x080064d4

08005024 <led_toggle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_toggle( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin( GPIOx, GPIO_Pin );
 8005030:	887b      	ldrh	r3, [r7, #2]
 8005032:	4619      	mov	r1, r3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fc fbe5 	bl	8001804 <HAL_GPIO_TogglePin>
	return;
 800503a:	bf00      	nop
}
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <led_run>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_run()
{
 8005042:	b580      	push	{r7, lr}
 8005044:	af00      	add	r7, sp, #0
	led_toggle( LD2_GPIO_Port, LD2_Pin);
 8005046:	2120      	movs	r1, #32
 8005048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800504c:	f7ff ffea 	bl	8005024 <led_toggle>
}
 8005050:	bf00      	nop
 8005052:	bd80      	pop	{r7, pc}

08005054 <led_cmd_handler>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_cmd_handler( tCmdhandler_cmd inCmd )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	463b      	mov	r3, r7
 800505c:	e883 0003 	stmia.w	r3, {r0, r1}
	// make sure the command is for us.
	if ( inCmd.id.module != MODULE_ID_LED )
 8005060:	783b      	ldrb	r3, [r7, #0]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d11f      	bne.n	80050a6 <led_cmd_handler+0x52>
		return;

	switch( inCmd.id.cmd )
 8005066:	787b      	ldrb	r3, [r7, #1]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d002      	beq.n	8005072 <led_cmd_handler+0x1e>
 800506c:	2b02      	cmp	r3, #2
 800506e:	d013      	beq.n	8005098 <led_cmd_handler+0x44>
		{
			led_toggle( LD2_GPIO_Port, LD2_Pin);
			break;
		}
		default:
			break;
 8005070:	e018      	b.n	80050a4 <led_cmd_handler+0x50>
			uint8_t set = 0;// (uint8_t)param;
 8005072:	2300      	movs	r3, #0
 8005074:	73fb      	strb	r3, [r7, #15]
			memcpy(&set, &inCmd.pData, inCmd.dataSize );
 8005076:	887b      	ldrh	r3, [r7, #2]
 8005078:	461a      	mov	r2, r3
 800507a:	463b      	mov	r3, r7
 800507c:	1d19      	adds	r1, r3, #4
 800507e:	f107 030f 	add.w	r3, r7, #15
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fd13 	bl	8005aae <memcpy>
			HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, set);
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	461a      	mov	r2, r3
 800508c:	2120      	movs	r1, #32
 800508e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005092:	f7fc fb9f 	bl	80017d4 <HAL_GPIO_WritePin>
			break;
 8005096:	e005      	b.n	80050a4 <led_cmd_handler+0x50>
			led_toggle( LD2_GPIO_Port, LD2_Pin);
 8005098:	2120      	movs	r1, #32
 800509a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800509e:	f7ff ffc1 	bl	8005024 <led_toggle>
			break;
 80050a2:	bf00      	nop
	}

	return;
 80050a4:	e000      	b.n	80050a8 <led_cmd_handler+0x54>
		return;
 80050a6:	bf00      	nop
}
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <scheduler_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void scheduler_init( void )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
	schedulerVars.nrOfTasks = 0;
 80050b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005160 <scheduler_init+0xb0>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 80050bc:	2300      	movs	r3, #0
 80050be:	71fb      	strb	r3, [r7, #7]
 80050c0:	e020      	b.n	8005104 <scheduler_init+0x54>
	{
		schedulerVars.taskList[i].pTask = NULL;
 80050c2:	79fa      	ldrb	r2, [r7, #7]
 80050c4:	4926      	ldr	r1, [pc, #152]	@ (8005160 <scheduler_init+0xb0>)
 80050c6:	4613      	mov	r3, r2
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	3304      	adds	r3, #4
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].delay = 0;
 80050d6:	79fa      	ldrb	r2, [r7, #7]
 80050d8:	4921      	ldr	r1, [pc, #132]	@ (8005160 <scheduler_init+0xb0>)
 80050da:	4613      	mov	r3, r2
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	3308      	adds	r3, #8
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].lastExecutionTime = 0;
 80050ea:	79fa      	ldrb	r2, [r7, #7]
 80050ec:	491c      	ldr	r1, [pc, #112]	@ (8005160 <scheduler_init+0xb0>)
 80050ee:	4613      	mov	r3, r2
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	330c      	adds	r3, #12
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	3301      	adds	r3, #1
 8005102:	71fb      	strb	r3, [r7, #7]
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	2b09      	cmp	r3, #9
 8005108:	d9db      	bls.n	80050c2 <scheduler_init+0x12>
	}

	// init run once queue.
	schedulerVars.RunOnceQueue.head  = 0;
 800510a:	4b15      	ldr	r3, [pc, #84]	@ (8005160 <scheduler_init+0xb0>)
 800510c:	2200      	movs	r2, #0
 800510e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	schedulerVars.RunOnceQueue.tail  = 0;
 8005112:	4b13      	ldr	r3, [pc, #76]	@ (8005160 <scheduler_init+0xb0>)
 8005114:	2200      	movs	r2, #0
 8005116:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
	schedulerVars.RunOnceQueue.full  = 0;
 800511a:	4b11      	ldr	r3, [pc, #68]	@ (8005160 <scheduler_init+0xb0>)
 800511c:	2200      	movs	r2, #0
 800511e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	schedulerVars.RunOnceQueue.empty = 1;
 8005122:	4b0f      	ldr	r3, [pc, #60]	@ (8005160 <scheduler_init+0xb0>)
 8005124:	2201      	movs	r2, #1
 8005126:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	schedulerVars.RunOnceQueue.size  = 0;
 800512a:	4b0d      	ldr	r3, [pc, #52]	@ (8005160 <scheduler_init+0xb0>)
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8005132:	2300      	movs	r3, #0
 8005134:	71bb      	strb	r3, [r7, #6]
 8005136:	e009      	b.n	800514c <scheduler_init+0x9c>
	{
		schedulerVars.RunOnceQueue.runOnceTaskList[i].pTask = NULL;
 8005138:	79bb      	ldrb	r3, [r7, #6]
 800513a:	4a09      	ldr	r2, [pc, #36]	@ (8005160 <scheduler_init+0xb0>)
 800513c:	3320      	adds	r3, #32
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	2200      	movs	r2, #0
 8005144:	605a      	str	r2, [r3, #4]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8005146:	79bb      	ldrb	r3, [r7, #6]
 8005148:	3301      	adds	r3, #1
 800514a:	71bb      	strb	r3, [r7, #6]
 800514c:	79bb      	ldrb	r3, [r7, #6]
 800514e:	2b13      	cmp	r3, #19
 8005150:	d9f2      	bls.n	8005138 <scheduler_init+0x88>
	}
}
 8005152:	bf00      	nop
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	20000224 	.word	0x20000224

08005164 <scheduler_addTask>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t scheduler_addTask( uint32_t delay, void (*pTask)(void) )
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
 8005172:	e029      	b.n	80051c8 <scheduler_addTask+0x64>
	{
		// search for available task.
		if ( schedulerVars.taskList[i].pTask == NULL )
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	4919      	ldr	r1, [pc, #100]	@ (80051dc <scheduler_addTask+0x78>)
 8005178:	4613      	mov	r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	3304      	adds	r3, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d11b      	bne.n	80051c2 <scheduler_addTask+0x5e>
		{
			schedulerVars.taskList[i].pTask = pTask;
 800518a:	7bfa      	ldrb	r2, [r7, #15]
 800518c:	4913      	ldr	r1, [pc, #76]	@ (80051dc <scheduler_addTask+0x78>)
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	3304      	adds	r3, #4
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	601a      	str	r2, [r3, #0]
			schedulerVars.taskList[i].delay = delay;
 800519e:	7bfa      	ldrb	r2, [r7, #15]
 80051a0:	490e      	ldr	r1, [pc, #56]	@ (80051dc <scheduler_addTask+0x78>)
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	3308      	adds	r3, #8
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	601a      	str	r2, [r3, #0]
			schedulerVars.nrOfTasks += 1;
 80051b2:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <scheduler_addTask+0x78>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4b08      	ldr	r3, [pc, #32]	@ (80051dc <scheduler_addTask+0x78>)
 80051bc:	701a      	strb	r2, [r3, #0]
			return 1;
 80051be:	2301      	movs	r3, #1
 80051c0:	e006      	b.n	80051d0 <scheduler_addTask+0x6c>
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	3301      	adds	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	2b09      	cmp	r3, #9
 80051cc:	d9d2      	bls.n	8005174 <scheduler_addTask+0x10>
		}
	}
	// no available task was found
	return 0;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	20000224 	.word	0x20000224

080051e0 <scheduler_pushTask>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t scheduler_pushTask( void (*pTask)(void) )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
	// is queue full?
	if ( schedulerVars.RunOnceQueue.full )
 80051e8:	4b21      	ldr	r3, [pc, #132]	@ (8005270 <scheduler_pushTask+0x90>)
 80051ea:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <scheduler_pushTask+0x16>
		return 1;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e036      	b.n	8005264 <scheduler_pushTask+0x84>

	// if not, add task.
	schedulerVars.RunOnceQueue.runOnceTaskList[ schedulerVars.RunOnceQueue.tail ].pTask = pTask;
 80051f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005270 <scheduler_pushTask+0x90>)
 80051f8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80051fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005270 <scheduler_pushTask+0x90>)
 80051fe:	3320      	adds	r3, #32
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	605a      	str	r2, [r3, #4]

	// increase tail index and size.
	schedulerVars.RunOnceQueue.tail = ( schedulerVars.RunOnceQueue.tail + 1 ) % SCHEDULER_MAX_NR_RUN_ONCE_TASKS;
 8005208:	4b19      	ldr	r3, [pc, #100]	@ (8005270 <scheduler_pushTask+0x90>)
 800520a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	4b18      	ldr	r3, [pc, #96]	@ (8005274 <scheduler_pushTask+0x94>)
 8005212:	fb83 1302 	smull	r1, r3, r3, r2
 8005216:	10d9      	asrs	r1, r3, #3
 8005218:	17d3      	asrs	r3, r2, #31
 800521a:	1ac9      	subs	r1, r1, r3
 800521c:	460b      	mov	r3, r1
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	1ad1      	subs	r1, r2, r3
 8005226:	b2ca      	uxtb	r2, r1
 8005228:	4b11      	ldr	r3, [pc, #68]	@ (8005270 <scheduler_pushTask+0x90>)
 800522a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
	schedulerVars.RunOnceQueue.size += 1;
 800522e:	4b10      	ldr	r3, [pc, #64]	@ (8005270 <scheduler_pushTask+0x90>)
 8005230:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005234:	3301      	adds	r3, #1
 8005236:	b2da      	uxtb	r2, r3
 8005238:	4b0d      	ldr	r3, [pc, #52]	@ (8005270 <scheduler_pushTask+0x90>)
 800523a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	// if queue was empty, it is not now.
	if ( schedulerVars.RunOnceQueue.empty )
 800523e:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <scheduler_pushTask+0x90>)
 8005240:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <scheduler_pushTask+0x70>
	{
		schedulerVars.RunOnceQueue.empty = 0;
 8005248:	4b09      	ldr	r3, [pc, #36]	@ (8005270 <scheduler_pushTask+0x90>)
 800524a:	2200      	movs	r2, #0
 800524c:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	}

	// check if full and update full.
	if( schedulerVars.RunOnceQueue.size == SCHEDULER_MAX_NR_RUN_ONCE_TASKS )
 8005250:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <scheduler_pushTask+0x90>)
 8005252:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005256:	2b14      	cmp	r3, #20
 8005258:	d103      	bne.n	8005262 <scheduler_pushTask+0x82>
	{
		schedulerVars.RunOnceQueue.full = 1;
 800525a:	4b05      	ldr	r3, [pc, #20]	@ (8005270 <scheduler_pushTask+0x90>)
 800525c:	2201      	movs	r2, #1
 800525e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	}

	return 0;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	20000224 	.word	0x20000224
 8005274:	66666667 	.word	0x66666667

08005278 <scheduler_run>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void scheduler_run( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	60bb      	str	r3, [r7, #8]
	while( 1 )
	{
		// run once tasks:
		while ( !schedulerVars.RunOnceQueue.empty )
 8005282:	e00d      	b.n	80052a0 <scheduler_run+0x28>
		{
			void (*pRunOnce)(void) = NULL;
 8005284:	2300      	movs	r3, #0
 8005286:	607b      	str	r3, [r7, #4]

			if ( 0 == scheduler_popTask( &pRunOnce ) )
 8005288:	1d3b      	adds	r3, r7, #4
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f848 	bl	8005320 <scheduler_popTask>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <scheduler_run+0x28>
				if ( pRunOnce != NULL )
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <scheduler_run+0x28>
					{
						pRunOnce();
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4798      	blx	r3
		while ( !schedulerVars.RunOnceQueue.empty )
 80052a0:	4b1e      	ldr	r3, [pc, #120]	@ (800531c <scheduler_run+0xa4>)
 80052a2:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0ec      	beq.n	8005284 <scheduler_run+0xc>
					}
		}

		// repeated tasks:
		now = HAL_GetTick();
 80052aa:	f7fb fbe5 	bl	8000a78 <HAL_GetTick>
 80052ae:	60b8      	str	r0, [r7, #8]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 80052b0:	2300      	movs	r3, #0
 80052b2:	73fb      	strb	r3, [r7, #15]
 80052b4:	e02c      	b.n	8005310 <scheduler_run+0x98>
		{
			if ( now - schedulerVars.taskList[i].lastExecutionTime  >= schedulerVars.taskList[i].delay )
 80052b6:	7bfa      	ldrb	r2, [r7, #15]
 80052b8:	4918      	ldr	r1, [pc, #96]	@ (800531c <scheduler_run+0xa4>)
 80052ba:	4613      	mov	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	330c      	adds	r3, #12
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	1ad1      	subs	r1, r2, r3
 80052cc:	7bfa      	ldrb	r2, [r7, #15]
 80052ce:	4813      	ldr	r0, [pc, #76]	@ (800531c <scheduler_run+0xa4>)
 80052d0:	4613      	mov	r3, r2
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4403      	add	r3, r0
 80052da:	3308      	adds	r3, #8
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4299      	cmp	r1, r3
 80052e0:	d313      	bcc.n	800530a <scheduler_run+0x92>
			{
				// execute task
				schedulerVars.taskList[i].pTask();
 80052e2:	7bfa      	ldrb	r2, [r7, #15]
 80052e4:	490d      	ldr	r1, [pc, #52]	@ (800531c <scheduler_run+0xa4>)
 80052e6:	4613      	mov	r3, r2
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	3304      	adds	r3, #4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4798      	blx	r3
				schedulerVars.taskList[i].lastExecutionTime = now;
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	4908      	ldr	r1, [pc, #32]	@ (800531c <scheduler_run+0xa4>)
 80052fa:	4613      	mov	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	330c      	adds	r3, #12
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	601a      	str	r2, [r3, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	3301      	adds	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
 8005310:	4b02      	ldr	r3, [pc, #8]	@ (800531c <scheduler_run+0xa4>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	7bfa      	ldrb	r2, [r7, #15]
 8005316:	429a      	cmp	r2, r3
 8005318:	d3cd      	bcc.n	80052b6 <scheduler_run+0x3e>
		while ( !schedulerVars.RunOnceQueue.empty )
 800531a:	e7c1      	b.n	80052a0 <scheduler_run+0x28>
 800531c:	20000224 	.word	0x20000224

08005320 <scheduler_popTask>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t scheduler_popTask( void (**pTask)(void) )
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	// is queue empty?
	if ( schedulerVars.RunOnceQueue.empty )
 8005328:	4b22      	ldr	r3, [pc, #136]	@ (80053b4 <scheduler_popTask+0x94>)
 800532a:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <scheduler_popTask+0x16>
		return 1;
 8005332:	2301      	movs	r3, #1
 8005334:	e037      	b.n	80053a6 <scheduler_popTask+0x86>

	// pick that oldest task.
	*pTask = schedulerVars.RunOnceQueue.runOnceTaskList[ schedulerVars.RunOnceQueue.head ].pTask;
 8005336:	4b1f      	ldr	r3, [pc, #124]	@ (80053b4 <scheduler_popTask+0x94>)
 8005338:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800533c:	4a1d      	ldr	r2, [pc, #116]	@ (80053b4 <scheduler_popTask+0x94>)
 800533e:	3320      	adds	r3, #32
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	601a      	str	r2, [r3, #0]

	// update head index
	schedulerVars.RunOnceQueue.head = ( schedulerVars.RunOnceQueue.head + 1 ) % SCHEDULER_MAX_NR_RUN_ONCE_TASKS;
 800534a:	4b1a      	ldr	r3, [pc, #104]	@ (80053b4 <scheduler_popTask+0x94>)
 800534c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	4b19      	ldr	r3, [pc, #100]	@ (80053b8 <scheduler_popTask+0x98>)
 8005354:	fb83 1302 	smull	r1, r3, r3, r2
 8005358:	10d9      	asrs	r1, r3, #3
 800535a:	17d3      	asrs	r3, r2, #31
 800535c:	1ac9      	subs	r1, r1, r3
 800535e:	460b      	mov	r3, r1
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	440b      	add	r3, r1
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	1ad1      	subs	r1, r2, r3
 8005368:	b2ca      	uxtb	r2, r1
 800536a:	4b12      	ldr	r3, [pc, #72]	@ (80053b4 <scheduler_popTask+0x94>)
 800536c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	schedulerVars.RunOnceQueue.size -= 1;
 8005370:	4b10      	ldr	r3, [pc, #64]	@ (80053b4 <scheduler_popTask+0x94>)
 8005372:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005376:	3b01      	subs	r3, #1
 8005378:	b2da      	uxtb	r2, r3
 800537a:	4b0e      	ldr	r3, [pc, #56]	@ (80053b4 <scheduler_popTask+0x94>)
 800537c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	// if it was full, it is not now
	if ( schedulerVars.RunOnceQueue.full == 1 )
 8005380:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <scheduler_popTask+0x94>)
 8005382:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8005386:	2b01      	cmp	r3, #1
 8005388:	d103      	bne.n	8005392 <scheduler_popTask+0x72>
	{
		schedulerVars.RunOnceQueue.full = 0;
 800538a:	4b0a      	ldr	r3, [pc, #40]	@ (80053b4 <scheduler_popTask+0x94>)
 800538c:	2200      	movs	r2, #0
 800538e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	}

	// check if empty
	if ( schedulerVars.RunOnceQueue.size == 0 )
 8005392:	4b08      	ldr	r3, [pc, #32]	@ (80053b4 <scheduler_popTask+0x94>)
 8005394:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005398:	2b00      	cmp	r3, #0
 800539a:	d103      	bne.n	80053a4 <scheduler_popTask+0x84>
	{
		schedulerVars.RunOnceQueue.empty = 1;
 800539c:	4b05      	ldr	r3, [pc, #20]	@ (80053b4 <scheduler_popTask+0x94>)
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	}
	return 0;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000224 	.word	0x20000224
 80053b8:	66666667 	.word	0x66666667

080053bc <serial_uart_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void serial_uart_init(  UART_HandleTypeDef *huart, tCmdqueue* cmdq )
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
	serialVars.pUart  		= huart;
 80053c6:	4a06      	ldr	r2, [pc, #24]	@ (80053e0 <serial_uart_init+0x24>)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6013      	str	r3, [r2, #0]
	serialVars.cmdq			= cmdq;
 80053cc:	4a04      	ldr	r2, [pc, #16]	@ (80053e0 <serial_uart_init+0x24>)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6053      	str	r3, [r2, #4]

	return;
 80053d2:	bf00      	nop
}
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	200002f8 	.word	0x200002f8

080053e4 <serial_uart_receiveToIdle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t serial_uart_receiveToIdle()
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA( serialVars.pUart, serialVars.pRxBuff, RX_BUF_SIZE );
 80053e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <serial_uart_receiveToIdle+0x34>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053f0:	490a      	ldr	r1, [pc, #40]	@ (800541c <serial_uart_receiveToIdle+0x38>)
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff f8a1 	bl	800453a <HAL_UARTEx_ReceiveToIdle_DMA>

	  // not interested of half transfer interrupt.
	  __HAL_DMA_DISABLE_IT( serialVars.pUart->hdmarx, DMA_IT_HT );
 80053f8:	4b07      	ldr	r3, [pc, #28]	@ (8005418 <serial_uart_receiveToIdle+0x34>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <serial_uart_receiveToIdle+0x34>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0204 	bic.w	r2, r2, #4
 800540e:	601a      	str	r2, [r3, #0]
	return 0;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	200002f8 	.word	0x200002f8
 800541c:	20000300 	.word	0x20000300

08005420 <serial_uart_registerCB>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void serial_uart_registerCB( void (*pCB)(void) )
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	serialVars.pCmdHandlerCB = pCB;
 8005428:	4a04      	ldr	r2, [pc, #16]	@ (800543c <serial_uart_registerCB+0x1c>)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	200002f8 	.word	0x200002f8

08005440 <confirm_crc>:
 * ********************************************/



uint8_t confirm_crc()
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
	// extract crc from incoming data
	uint32_t received_crc = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	607b      	str	r3, [r7, #4]
	uint32_t crcIx = serialVars.receivedSize - 4;
 800544a:	4b0f      	ldr	r3, [pc, #60]	@ (8005488 <confirm_crc+0x48>)
 800544c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8005450:	3b04      	subs	r3, #4
 8005452:	60fb      	str	r3, [r7, #12]
	memcpy( &received_crc, &serialVars.pRxBuff[crcIx], 4 );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3308      	adds	r3, #8
 8005458:	4a0b      	ldr	r2, [pc, #44]	@ (8005488 <confirm_crc+0x48>)
 800545a:	4413      	add	r3, r2
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	607b      	str	r3, [r7, #4]

	uint32_t calc_crc = crc_calculate( serialVars.pRxBuff, serialVars.receivedSize - 4  );
 8005460:	4b09      	ldr	r3, [pc, #36]	@ (8005488 <confirm_crc+0x48>)
 8005462:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8005466:	3b04      	subs	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4808      	ldr	r0, [pc, #32]	@ (800548c <confirm_crc+0x4c>)
 800546c:	f7ff fa12 	bl	8004894 <crc_calculate>
 8005470:	60b8      	str	r0, [r7, #8]

	if ( calc_crc == received_crc )
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	429a      	cmp	r2, r3
 8005478:	d101      	bne.n	800547e <confirm_crc+0x3e>
		return 0;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <confirm_crc+0x40>
	else
		return 1;
 800547e:	2301      	movs	r3, #1
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	200002f8 	.word	0x200002f8
 800548c:	20000300 	.word	0x20000300

08005490 <HAL_UARTEx_RxEventCallback>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
	if ( huart->Instance == serialVars.pUart->Instance )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b21      	ldr	r3, [pc, #132]	@ (8005528 <HAL_UARTEx_RxEventCallback+0x98>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d13a      	bne.n	8005520 <HAL_UARTEx_RxEventCallback+0x90>
	{
		// restart receiving data.
		HAL_UARTEx_ReceiveToIdle_DMA( serialVars.pUart, serialVars.pRxBuff, RX_BUF_SIZE );
 80054aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005528 <HAL_UARTEx_RxEventCallback+0x98>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054b2:	491e      	ldr	r1, [pc, #120]	@ (800552c <HAL_UARTEx_RxEventCallback+0x9c>)
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff f840 	bl	800453a <HAL_UARTEx_ReceiveToIdle_DMA>
		serialVars.receivedSize = Size;
 80054ba:	887b      	ldrh	r3, [r7, #2]
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	4b1a      	ldr	r3, [pc, #104]	@ (8005528 <HAL_UARTEx_RxEventCallback+0x98>)
 80054c0:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

		uint8_t res;
		if ( 0 == confirm_crc() )
 80054c4:	f7ff ffbc 	bl	8005440 <confirm_crc>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d11a      	bne.n	8005504 <HAL_UARTEx_RxEventCallback+0x74>
		{
			// ack the received message.
			res = ACK;
 80054ce:	2306      	movs	r3, #6
 80054d0:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit( serialVars.pUart, &res, 1, HAL_MAX_DELAY );
 80054d2:	4b15      	ldr	r3, [pc, #84]	@ (8005528 <HAL_UARTEx_RxEventCallback+0x98>)
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	f107 010f 	add.w	r1, r7, #15
 80054da:	f04f 33ff 	mov.w	r3, #4294967295
 80054de:	2201      	movs	r2, #1
 80054e0:	f7fd fea2 	bl	8003228 <HAL_UART_Transmit>

			// copy in data to data buffer.
			cmdqueue_push( serialVars.cmdq, serialVars.pRxBuff );
 80054e4:	4b10      	ldr	r3, [pc, #64]	@ (8005528 <HAL_UARTEx_RxEventCallback+0x98>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	4910      	ldr	r1, [pc, #64]	@ (800552c <HAL_UARTEx_RxEventCallback+0x9c>)
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff f930 	bl	8004750 <cmdqueue_push>
			scheduler_pushTask( serialVars.pCmdHandlerCB );
 80054f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005528 <HAL_UARTEx_RxEventCallback+0x98>)
 80054f2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fe72 	bl	80051e0 <scheduler_pushTask>
			// toggle led to indicate receiving data
			scheduler_pushTask( led_run );
 80054fc:	480c      	ldr	r0, [pc, #48]	@ (8005530 <HAL_UARTEx_RxEventCallback+0xa0>)
 80054fe:	f7ff fe6f 	bl	80051e0 <scheduler_pushTask>
			HAL_UART_Transmit( serialVars.pUart, &res, 1, HAL_MAX_DELAY );
			res = 0;
		}

	}
	return;
 8005502:	e00d      	b.n	8005520 <HAL_UARTEx_RxEventCallback+0x90>
			res = NACK;
 8005504:	2315      	movs	r3, #21
 8005506:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit( serialVars.pUart, &res, 1, HAL_MAX_DELAY );
 8005508:	4b07      	ldr	r3, [pc, #28]	@ (8005528 <HAL_UARTEx_RxEventCallback+0x98>)
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	f107 010f 	add.w	r1, r7, #15
 8005510:	f04f 33ff 	mov.w	r3, #4294967295
 8005514:	2201      	movs	r2, #1
 8005516:	f7fd fe87 	bl	8003228 <HAL_UART_Transmit>
			res = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
	return;
 800551e:	bf00      	nop
 8005520:	bf00      	nop
}
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	200002f8 	.word	0x200002f8
 800552c:	20000300 	.word	0x20000300
 8005530:	08005043 	.word	0x08005043

08005534 <__NVIC_SystemReset>:
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005538:	f3bf 8f4f 	dsb	sy
}
 800553c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800553e:	4b06      	ldr	r3, [pc, #24]	@ (8005558 <__NVIC_SystemReset+0x24>)
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005546:	4904      	ldr	r1, [pc, #16]	@ (8005558 <__NVIC_SystemReset+0x24>)
 8005548:	4b04      	ldr	r3, [pc, #16]	@ (800555c <__NVIC_SystemReset+0x28>)
 800554a:	4313      	orrs	r3, r2
 800554c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800554e:	f3bf 8f4f 	dsb	sy
}
 8005552:	bf00      	nop
    __NOP();
 8005554:	bf00      	nop
 8005556:	e7fd      	b.n	8005554 <__NVIC_SystemReset+0x20>
 8005558:	e000ed00 	.word	0xe000ed00
 800555c:	05fa0004 	.word	0x05fa0004

08005560 <systemRestart_setFlag>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void systemRestart_setFlag( uint32_t flag )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
	eeprom_setSystemRestartFlag(flag);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fa23 	bl	80049b4 <eeprom_setSystemRestartFlag>
	eeprom_store();
 800556e:	f7ff fabd 	bl	8004aec <eeprom_store>
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <systemRestart_getFlag>:

void systemRestart_getFlag( uint32_t* flag )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
	eeprom_getSystemRestartFlag( flag );
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fa2f 	bl	80049e8 <eeprom_getSystemRestartFlag>
	if( *flag == GO_APP )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a05      	ldr	r2, [pc, #20]	@ (80055a4 <systemRestart_getFlag+0x28>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d102      	bne.n	800559a <systemRestart_getFlag+0x1e>
	{
		// for demonstration:
		// invalidate application flag to stay in boot next time.
		systemRestart_setFlag( GO_BOOT );
 8005594:	4804      	ldr	r0, [pc, #16]	@ (80055a8 <systemRestart_getFlag+0x2c>)
 8005596:	f7ff ffe3 	bl	8005560 <systemRestart_setFlag>
	}

}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	abb0abb0 	.word	0xabb0abb0
 80055a8:	b001b001 	.word	0xb001b001

080055ac <systemRestart_jumpToApp>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void systemRestart_jumpToApp()
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0

	// Start address of your application
    uint32_t app_start_address = APP_START_ADD;
 80055b2:	4b0b      	ldr	r3, [pc, #44]	@ (80055e0 <systemRestart_jumpToApp+0x34>)
 80055b4:	617b      	str	r3, [r7, #20]

    // Reset handler
    uint32_t reset_handler = *(volatile uint32_t*)(app_start_address + 4);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	3304      	adds	r3, #4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	613b      	str	r3, [r7, #16]

    // Stack pointer
    uint32_t stack_pointer = (uint32_t) *((__IO uint32_t*) app_start_address );
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60fb      	str	r3, [r7, #12]

    // Set application function.
    void (*app_reset_handler)(void) = (void (*)(void))( reset_handler );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	60bb      	str	r3, [r7, #8]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f383 8808 	msr	MSP, r3
}
 80055d2:	bf00      	nop

    // Set the stack pointer to the application's stack pointer
    __set_MSP(stack_pointer);

    // Call the application
    app_reset_handler();
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4798      	blx	r3
}
 80055d8:	bf00      	nop
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	08040000 	.word	0x08040000

080055e4 <systemRestart_restart>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void systemRestart_restart()
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 80055e8:	f7ff ffa4 	bl	8005534 <__NVIC_SystemReset>

080055ec <malloc>:
 80055ec:	4b02      	ldr	r3, [pc, #8]	@ (80055f8 <malloc+0xc>)
 80055ee:	4601      	mov	r1, r0
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	f000 b82d 	b.w	8005650 <_malloc_r>
 80055f6:	bf00      	nop
 80055f8:	20000018 	.word	0x20000018

080055fc <free>:
 80055fc:	4b02      	ldr	r3, [pc, #8]	@ (8005608 <free+0xc>)
 80055fe:	4601      	mov	r1, r0
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	f000 ba63 	b.w	8005acc <_free_r>
 8005606:	bf00      	nop
 8005608:	20000018 	.word	0x20000018

0800560c <sbrk_aligned>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	4e0f      	ldr	r6, [pc, #60]	@ (800564c <sbrk_aligned+0x40>)
 8005610:	460c      	mov	r4, r1
 8005612:	6831      	ldr	r1, [r6, #0]
 8005614:	4605      	mov	r5, r0
 8005616:	b911      	cbnz	r1, 800561e <sbrk_aligned+0x12>
 8005618:	f000 f9fa 	bl	8005a10 <_sbrk_r>
 800561c:	6030      	str	r0, [r6, #0]
 800561e:	4621      	mov	r1, r4
 8005620:	4628      	mov	r0, r5
 8005622:	f000 f9f5 	bl	8005a10 <_sbrk_r>
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	d103      	bne.n	8005632 <sbrk_aligned+0x26>
 800562a:	f04f 34ff 	mov.w	r4, #4294967295
 800562e:	4620      	mov	r0, r4
 8005630:	bd70      	pop	{r4, r5, r6, pc}
 8005632:	1cc4      	adds	r4, r0, #3
 8005634:	f024 0403 	bic.w	r4, r4, #3
 8005638:	42a0      	cmp	r0, r4
 800563a:	d0f8      	beq.n	800562e <sbrk_aligned+0x22>
 800563c:	1a21      	subs	r1, r4, r0
 800563e:	4628      	mov	r0, r5
 8005640:	f000 f9e6 	bl	8005a10 <_sbrk_r>
 8005644:	3001      	adds	r0, #1
 8005646:	d1f2      	bne.n	800562e <sbrk_aligned+0x22>
 8005648:	e7ef      	b.n	800562a <sbrk_aligned+0x1e>
 800564a:	bf00      	nop
 800564c:	20000408 	.word	0x20000408

08005650 <_malloc_r>:
 8005650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005654:	1ccd      	adds	r5, r1, #3
 8005656:	f025 0503 	bic.w	r5, r5, #3
 800565a:	3508      	adds	r5, #8
 800565c:	2d0c      	cmp	r5, #12
 800565e:	bf38      	it	cc
 8005660:	250c      	movcc	r5, #12
 8005662:	2d00      	cmp	r5, #0
 8005664:	4606      	mov	r6, r0
 8005666:	db01      	blt.n	800566c <_malloc_r+0x1c>
 8005668:	42a9      	cmp	r1, r5
 800566a:	d904      	bls.n	8005676 <_malloc_r+0x26>
 800566c:	230c      	movs	r3, #12
 800566e:	6033      	str	r3, [r6, #0]
 8005670:	2000      	movs	r0, #0
 8005672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800574c <_malloc_r+0xfc>
 800567a:	f000 f869 	bl	8005750 <__malloc_lock>
 800567e:	f8d8 3000 	ldr.w	r3, [r8]
 8005682:	461c      	mov	r4, r3
 8005684:	bb44      	cbnz	r4, 80056d8 <_malloc_r+0x88>
 8005686:	4629      	mov	r1, r5
 8005688:	4630      	mov	r0, r6
 800568a:	f7ff ffbf 	bl	800560c <sbrk_aligned>
 800568e:	1c43      	adds	r3, r0, #1
 8005690:	4604      	mov	r4, r0
 8005692:	d158      	bne.n	8005746 <_malloc_r+0xf6>
 8005694:	f8d8 4000 	ldr.w	r4, [r8]
 8005698:	4627      	mov	r7, r4
 800569a:	2f00      	cmp	r7, #0
 800569c:	d143      	bne.n	8005726 <_malloc_r+0xd6>
 800569e:	2c00      	cmp	r4, #0
 80056a0:	d04b      	beq.n	800573a <_malloc_r+0xea>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	4639      	mov	r1, r7
 80056a6:	4630      	mov	r0, r6
 80056a8:	eb04 0903 	add.w	r9, r4, r3
 80056ac:	f000 f9b0 	bl	8005a10 <_sbrk_r>
 80056b0:	4581      	cmp	r9, r0
 80056b2:	d142      	bne.n	800573a <_malloc_r+0xea>
 80056b4:	6821      	ldr	r1, [r4, #0]
 80056b6:	1a6d      	subs	r5, r5, r1
 80056b8:	4629      	mov	r1, r5
 80056ba:	4630      	mov	r0, r6
 80056bc:	f7ff ffa6 	bl	800560c <sbrk_aligned>
 80056c0:	3001      	adds	r0, #1
 80056c2:	d03a      	beq.n	800573a <_malloc_r+0xea>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	442b      	add	r3, r5
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	f8d8 3000 	ldr.w	r3, [r8]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	bb62      	cbnz	r2, 800572c <_malloc_r+0xdc>
 80056d2:	f8c8 7000 	str.w	r7, [r8]
 80056d6:	e00f      	b.n	80056f8 <_malloc_r+0xa8>
 80056d8:	6822      	ldr	r2, [r4, #0]
 80056da:	1b52      	subs	r2, r2, r5
 80056dc:	d420      	bmi.n	8005720 <_malloc_r+0xd0>
 80056de:	2a0b      	cmp	r2, #11
 80056e0:	d917      	bls.n	8005712 <_malloc_r+0xc2>
 80056e2:	1961      	adds	r1, r4, r5
 80056e4:	42a3      	cmp	r3, r4
 80056e6:	6025      	str	r5, [r4, #0]
 80056e8:	bf18      	it	ne
 80056ea:	6059      	strne	r1, [r3, #4]
 80056ec:	6863      	ldr	r3, [r4, #4]
 80056ee:	bf08      	it	eq
 80056f0:	f8c8 1000 	streq.w	r1, [r8]
 80056f4:	5162      	str	r2, [r4, r5]
 80056f6:	604b      	str	r3, [r1, #4]
 80056f8:	4630      	mov	r0, r6
 80056fa:	f000 f82f 	bl	800575c <__malloc_unlock>
 80056fe:	f104 000b 	add.w	r0, r4, #11
 8005702:	1d23      	adds	r3, r4, #4
 8005704:	f020 0007 	bic.w	r0, r0, #7
 8005708:	1ac2      	subs	r2, r0, r3
 800570a:	bf1c      	itt	ne
 800570c:	1a1b      	subne	r3, r3, r0
 800570e:	50a3      	strne	r3, [r4, r2]
 8005710:	e7af      	b.n	8005672 <_malloc_r+0x22>
 8005712:	6862      	ldr	r2, [r4, #4]
 8005714:	42a3      	cmp	r3, r4
 8005716:	bf0c      	ite	eq
 8005718:	f8c8 2000 	streq.w	r2, [r8]
 800571c:	605a      	strne	r2, [r3, #4]
 800571e:	e7eb      	b.n	80056f8 <_malloc_r+0xa8>
 8005720:	4623      	mov	r3, r4
 8005722:	6864      	ldr	r4, [r4, #4]
 8005724:	e7ae      	b.n	8005684 <_malloc_r+0x34>
 8005726:	463c      	mov	r4, r7
 8005728:	687f      	ldr	r7, [r7, #4]
 800572a:	e7b6      	b.n	800569a <_malloc_r+0x4a>
 800572c:	461a      	mov	r2, r3
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	42a3      	cmp	r3, r4
 8005732:	d1fb      	bne.n	800572c <_malloc_r+0xdc>
 8005734:	2300      	movs	r3, #0
 8005736:	6053      	str	r3, [r2, #4]
 8005738:	e7de      	b.n	80056f8 <_malloc_r+0xa8>
 800573a:	230c      	movs	r3, #12
 800573c:	6033      	str	r3, [r6, #0]
 800573e:	4630      	mov	r0, r6
 8005740:	f000 f80c 	bl	800575c <__malloc_unlock>
 8005744:	e794      	b.n	8005670 <_malloc_r+0x20>
 8005746:	6005      	str	r5, [r0, #0]
 8005748:	e7d6      	b.n	80056f8 <_malloc_r+0xa8>
 800574a:	bf00      	nop
 800574c:	2000040c 	.word	0x2000040c

08005750 <__malloc_lock>:
 8005750:	4801      	ldr	r0, [pc, #4]	@ (8005758 <__malloc_lock+0x8>)
 8005752:	f000 b9aa 	b.w	8005aaa <__retarget_lock_acquire_recursive>
 8005756:	bf00      	nop
 8005758:	20000550 	.word	0x20000550

0800575c <__malloc_unlock>:
 800575c:	4801      	ldr	r0, [pc, #4]	@ (8005764 <__malloc_unlock+0x8>)
 800575e:	f000 b9a5 	b.w	8005aac <__retarget_lock_release_recursive>
 8005762:	bf00      	nop
 8005764:	20000550 	.word	0x20000550

08005768 <std>:
 8005768:	2300      	movs	r3, #0
 800576a:	b510      	push	{r4, lr}
 800576c:	4604      	mov	r4, r0
 800576e:	e9c0 3300 	strd	r3, r3, [r0]
 8005772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005776:	6083      	str	r3, [r0, #8]
 8005778:	8181      	strh	r1, [r0, #12]
 800577a:	6643      	str	r3, [r0, #100]	@ 0x64
 800577c:	81c2      	strh	r2, [r0, #14]
 800577e:	6183      	str	r3, [r0, #24]
 8005780:	4619      	mov	r1, r3
 8005782:	2208      	movs	r2, #8
 8005784:	305c      	adds	r0, #92	@ 0x5c
 8005786:	f000 f906 	bl	8005996 <memset>
 800578a:	4b0d      	ldr	r3, [pc, #52]	@ (80057c0 <std+0x58>)
 800578c:	6263      	str	r3, [r4, #36]	@ 0x24
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <std+0x5c>)
 8005790:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005792:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <std+0x60>)
 8005794:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005796:	4b0d      	ldr	r3, [pc, #52]	@ (80057cc <std+0x64>)
 8005798:	6323      	str	r3, [r4, #48]	@ 0x30
 800579a:	4b0d      	ldr	r3, [pc, #52]	@ (80057d0 <std+0x68>)
 800579c:	6224      	str	r4, [r4, #32]
 800579e:	429c      	cmp	r4, r3
 80057a0:	d006      	beq.n	80057b0 <std+0x48>
 80057a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057a6:	4294      	cmp	r4, r2
 80057a8:	d002      	beq.n	80057b0 <std+0x48>
 80057aa:	33d0      	adds	r3, #208	@ 0xd0
 80057ac:	429c      	cmp	r4, r3
 80057ae:	d105      	bne.n	80057bc <std+0x54>
 80057b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b8:	f000 b976 	b.w	8005aa8 <__retarget_lock_init_recursive>
 80057bc:	bd10      	pop	{r4, pc}
 80057be:	bf00      	nop
 80057c0:	08005911 	.word	0x08005911
 80057c4:	08005933 	.word	0x08005933
 80057c8:	0800596b 	.word	0x0800596b
 80057cc:	0800598f 	.word	0x0800598f
 80057d0:	20000410 	.word	0x20000410

080057d4 <stdio_exit_handler>:
 80057d4:	4a02      	ldr	r2, [pc, #8]	@ (80057e0 <stdio_exit_handler+0xc>)
 80057d6:	4903      	ldr	r1, [pc, #12]	@ (80057e4 <stdio_exit_handler+0x10>)
 80057d8:	4803      	ldr	r0, [pc, #12]	@ (80057e8 <stdio_exit_handler+0x14>)
 80057da:	f000 b869 	b.w	80058b0 <_fwalk_sglue>
 80057de:	bf00      	nop
 80057e0:	2000000c 	.word	0x2000000c
 80057e4:	08006209 	.word	0x08006209
 80057e8:	2000001c 	.word	0x2000001c

080057ec <cleanup_stdio>:
 80057ec:	6841      	ldr	r1, [r0, #4]
 80057ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <cleanup_stdio+0x34>)
 80057f0:	4299      	cmp	r1, r3
 80057f2:	b510      	push	{r4, lr}
 80057f4:	4604      	mov	r4, r0
 80057f6:	d001      	beq.n	80057fc <cleanup_stdio+0x10>
 80057f8:	f000 fd06 	bl	8006208 <_fflush_r>
 80057fc:	68a1      	ldr	r1, [r4, #8]
 80057fe:	4b09      	ldr	r3, [pc, #36]	@ (8005824 <cleanup_stdio+0x38>)
 8005800:	4299      	cmp	r1, r3
 8005802:	d002      	beq.n	800580a <cleanup_stdio+0x1e>
 8005804:	4620      	mov	r0, r4
 8005806:	f000 fcff 	bl	8006208 <_fflush_r>
 800580a:	68e1      	ldr	r1, [r4, #12]
 800580c:	4b06      	ldr	r3, [pc, #24]	@ (8005828 <cleanup_stdio+0x3c>)
 800580e:	4299      	cmp	r1, r3
 8005810:	d004      	beq.n	800581c <cleanup_stdio+0x30>
 8005812:	4620      	mov	r0, r4
 8005814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005818:	f000 bcf6 	b.w	8006208 <_fflush_r>
 800581c:	bd10      	pop	{r4, pc}
 800581e:	bf00      	nop
 8005820:	20000410 	.word	0x20000410
 8005824:	20000478 	.word	0x20000478
 8005828:	200004e0 	.word	0x200004e0

0800582c <global_stdio_init.part.0>:
 800582c:	b510      	push	{r4, lr}
 800582e:	4b0b      	ldr	r3, [pc, #44]	@ (800585c <global_stdio_init.part.0+0x30>)
 8005830:	4c0b      	ldr	r4, [pc, #44]	@ (8005860 <global_stdio_init.part.0+0x34>)
 8005832:	4a0c      	ldr	r2, [pc, #48]	@ (8005864 <global_stdio_init.part.0+0x38>)
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	4620      	mov	r0, r4
 8005838:	2200      	movs	r2, #0
 800583a:	2104      	movs	r1, #4
 800583c:	f7ff ff94 	bl	8005768 <std>
 8005840:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005844:	2201      	movs	r2, #1
 8005846:	2109      	movs	r1, #9
 8005848:	f7ff ff8e 	bl	8005768 <std>
 800584c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005850:	2202      	movs	r2, #2
 8005852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005856:	2112      	movs	r1, #18
 8005858:	f7ff bf86 	b.w	8005768 <std>
 800585c:	20000548 	.word	0x20000548
 8005860:	20000410 	.word	0x20000410
 8005864:	080057d5 	.word	0x080057d5

08005868 <__sfp_lock_acquire>:
 8005868:	4801      	ldr	r0, [pc, #4]	@ (8005870 <__sfp_lock_acquire+0x8>)
 800586a:	f000 b91e 	b.w	8005aaa <__retarget_lock_acquire_recursive>
 800586e:	bf00      	nop
 8005870:	20000551 	.word	0x20000551

08005874 <__sfp_lock_release>:
 8005874:	4801      	ldr	r0, [pc, #4]	@ (800587c <__sfp_lock_release+0x8>)
 8005876:	f000 b919 	b.w	8005aac <__retarget_lock_release_recursive>
 800587a:	bf00      	nop
 800587c:	20000551 	.word	0x20000551

08005880 <__sinit>:
 8005880:	b510      	push	{r4, lr}
 8005882:	4604      	mov	r4, r0
 8005884:	f7ff fff0 	bl	8005868 <__sfp_lock_acquire>
 8005888:	6a23      	ldr	r3, [r4, #32]
 800588a:	b11b      	cbz	r3, 8005894 <__sinit+0x14>
 800588c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005890:	f7ff bff0 	b.w	8005874 <__sfp_lock_release>
 8005894:	4b04      	ldr	r3, [pc, #16]	@ (80058a8 <__sinit+0x28>)
 8005896:	6223      	str	r3, [r4, #32]
 8005898:	4b04      	ldr	r3, [pc, #16]	@ (80058ac <__sinit+0x2c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f5      	bne.n	800588c <__sinit+0xc>
 80058a0:	f7ff ffc4 	bl	800582c <global_stdio_init.part.0>
 80058a4:	e7f2      	b.n	800588c <__sinit+0xc>
 80058a6:	bf00      	nop
 80058a8:	080057ed 	.word	0x080057ed
 80058ac:	20000548 	.word	0x20000548

080058b0 <_fwalk_sglue>:
 80058b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b4:	4607      	mov	r7, r0
 80058b6:	4688      	mov	r8, r1
 80058b8:	4614      	mov	r4, r2
 80058ba:	2600      	movs	r6, #0
 80058bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058c0:	f1b9 0901 	subs.w	r9, r9, #1
 80058c4:	d505      	bpl.n	80058d2 <_fwalk_sglue+0x22>
 80058c6:	6824      	ldr	r4, [r4, #0]
 80058c8:	2c00      	cmp	r4, #0
 80058ca:	d1f7      	bne.n	80058bc <_fwalk_sglue+0xc>
 80058cc:	4630      	mov	r0, r6
 80058ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058d2:	89ab      	ldrh	r3, [r5, #12]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d907      	bls.n	80058e8 <_fwalk_sglue+0x38>
 80058d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058dc:	3301      	adds	r3, #1
 80058de:	d003      	beq.n	80058e8 <_fwalk_sglue+0x38>
 80058e0:	4629      	mov	r1, r5
 80058e2:	4638      	mov	r0, r7
 80058e4:	47c0      	blx	r8
 80058e6:	4306      	orrs	r6, r0
 80058e8:	3568      	adds	r5, #104	@ 0x68
 80058ea:	e7e9      	b.n	80058c0 <_fwalk_sglue+0x10>

080058ec <iprintf>:
 80058ec:	b40f      	push	{r0, r1, r2, r3}
 80058ee:	b507      	push	{r0, r1, r2, lr}
 80058f0:	4906      	ldr	r1, [pc, #24]	@ (800590c <iprintf+0x20>)
 80058f2:	ab04      	add	r3, sp, #16
 80058f4:	6808      	ldr	r0, [r1, #0]
 80058f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058fa:	6881      	ldr	r1, [r0, #8]
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	f000 f959 	bl	8005bb4 <_vfiprintf_r>
 8005902:	b003      	add	sp, #12
 8005904:	f85d eb04 	ldr.w	lr, [sp], #4
 8005908:	b004      	add	sp, #16
 800590a:	4770      	bx	lr
 800590c:	20000018 	.word	0x20000018

08005910 <__sread>:
 8005910:	b510      	push	{r4, lr}
 8005912:	460c      	mov	r4, r1
 8005914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005918:	f000 f868 	bl	80059ec <_read_r>
 800591c:	2800      	cmp	r0, #0
 800591e:	bfab      	itete	ge
 8005920:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005922:	89a3      	ldrhlt	r3, [r4, #12]
 8005924:	181b      	addge	r3, r3, r0
 8005926:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800592a:	bfac      	ite	ge
 800592c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800592e:	81a3      	strhlt	r3, [r4, #12]
 8005930:	bd10      	pop	{r4, pc}

08005932 <__swrite>:
 8005932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005936:	461f      	mov	r7, r3
 8005938:	898b      	ldrh	r3, [r1, #12]
 800593a:	05db      	lsls	r3, r3, #23
 800593c:	4605      	mov	r5, r0
 800593e:	460c      	mov	r4, r1
 8005940:	4616      	mov	r6, r2
 8005942:	d505      	bpl.n	8005950 <__swrite+0x1e>
 8005944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005948:	2302      	movs	r3, #2
 800594a:	2200      	movs	r2, #0
 800594c:	f000 f83c 	bl	80059c8 <_lseek_r>
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005956:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800595a:	81a3      	strh	r3, [r4, #12]
 800595c:	4632      	mov	r2, r6
 800595e:	463b      	mov	r3, r7
 8005960:	4628      	mov	r0, r5
 8005962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005966:	f000 b863 	b.w	8005a30 <_write_r>

0800596a <__sseek>:
 800596a:	b510      	push	{r4, lr}
 800596c:	460c      	mov	r4, r1
 800596e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005972:	f000 f829 	bl	80059c8 <_lseek_r>
 8005976:	1c43      	adds	r3, r0, #1
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	bf15      	itete	ne
 800597c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800597e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005982:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005986:	81a3      	strheq	r3, [r4, #12]
 8005988:	bf18      	it	ne
 800598a:	81a3      	strhne	r3, [r4, #12]
 800598c:	bd10      	pop	{r4, pc}

0800598e <__sclose>:
 800598e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005992:	f000 b809 	b.w	80059a8 <_close_r>

08005996 <memset>:
 8005996:	4402      	add	r2, r0
 8005998:	4603      	mov	r3, r0
 800599a:	4293      	cmp	r3, r2
 800599c:	d100      	bne.n	80059a0 <memset+0xa>
 800599e:	4770      	bx	lr
 80059a0:	f803 1b01 	strb.w	r1, [r3], #1
 80059a4:	e7f9      	b.n	800599a <memset+0x4>
	...

080059a8 <_close_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	4d06      	ldr	r5, [pc, #24]	@ (80059c4 <_close_r+0x1c>)
 80059ac:	2300      	movs	r3, #0
 80059ae:	4604      	mov	r4, r0
 80059b0:	4608      	mov	r0, r1
 80059b2:	602b      	str	r3, [r5, #0]
 80059b4:	f7fa feb7 	bl	8000726 <_close>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_close_r+0x1a>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_close_r+0x1a>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	2000054c 	.word	0x2000054c

080059c8 <_lseek_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4d07      	ldr	r5, [pc, #28]	@ (80059e8 <_lseek_r+0x20>)
 80059cc:	4604      	mov	r4, r0
 80059ce:	4608      	mov	r0, r1
 80059d0:	4611      	mov	r1, r2
 80059d2:	2200      	movs	r2, #0
 80059d4:	602a      	str	r2, [r5, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f7fa fecc 	bl	8000774 <_lseek>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d102      	bne.n	80059e6 <_lseek_r+0x1e>
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	b103      	cbz	r3, 80059e6 <_lseek_r+0x1e>
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
 80059e8:	2000054c 	.word	0x2000054c

080059ec <_read_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4d07      	ldr	r5, [pc, #28]	@ (8005a0c <_read_r+0x20>)
 80059f0:	4604      	mov	r4, r0
 80059f2:	4608      	mov	r0, r1
 80059f4:	4611      	mov	r1, r2
 80059f6:	2200      	movs	r2, #0
 80059f8:	602a      	str	r2, [r5, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f7fa fe76 	bl	80006ec <_read>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_read_r+0x1e>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_read_r+0x1e>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	2000054c 	.word	0x2000054c

08005a10 <_sbrk_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4d06      	ldr	r5, [pc, #24]	@ (8005a2c <_sbrk_r+0x1c>)
 8005a14:	2300      	movs	r3, #0
 8005a16:	4604      	mov	r4, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	602b      	str	r3, [r5, #0]
 8005a1c:	f7fa feb8 	bl	8000790 <_sbrk>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_sbrk_r+0x1a>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_sbrk_r+0x1a>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	2000054c 	.word	0x2000054c

08005a30 <_write_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4d07      	ldr	r5, [pc, #28]	@ (8005a50 <_write_r+0x20>)
 8005a34:	4604      	mov	r4, r0
 8005a36:	4608      	mov	r0, r1
 8005a38:	4611      	mov	r1, r2
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	602a      	str	r2, [r5, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f7fa fd15 	bl	800046e <_write>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d102      	bne.n	8005a4e <_write_r+0x1e>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	b103      	cbz	r3, 8005a4e <_write_r+0x1e>
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
 8005a50:	2000054c 	.word	0x2000054c

08005a54 <__errno>:
 8005a54:	4b01      	ldr	r3, [pc, #4]	@ (8005a5c <__errno+0x8>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20000018 	.word	0x20000018

08005a60 <__libc_init_array>:
 8005a60:	b570      	push	{r4, r5, r6, lr}
 8005a62:	4d0d      	ldr	r5, [pc, #52]	@ (8005a98 <__libc_init_array+0x38>)
 8005a64:	4c0d      	ldr	r4, [pc, #52]	@ (8005a9c <__libc_init_array+0x3c>)
 8005a66:	1b64      	subs	r4, r4, r5
 8005a68:	10a4      	asrs	r4, r4, #2
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	42a6      	cmp	r6, r4
 8005a6e:	d109      	bne.n	8005a84 <__libc_init_array+0x24>
 8005a70:	4d0b      	ldr	r5, [pc, #44]	@ (8005aa0 <__libc_init_array+0x40>)
 8005a72:	4c0c      	ldr	r4, [pc, #48]	@ (8005aa4 <__libc_init_array+0x44>)
 8005a74:	f000 fd08 	bl	8006488 <_init>
 8005a78:	1b64      	subs	r4, r4, r5
 8005a7a:	10a4      	asrs	r4, r4, #2
 8005a7c:	2600      	movs	r6, #0
 8005a7e:	42a6      	cmp	r6, r4
 8005a80:	d105      	bne.n	8005a8e <__libc_init_array+0x2e>
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a88:	4798      	blx	r3
 8005a8a:	3601      	adds	r6, #1
 8005a8c:	e7ee      	b.n	8005a6c <__libc_init_array+0xc>
 8005a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a92:	4798      	blx	r3
 8005a94:	3601      	adds	r6, #1
 8005a96:	e7f2      	b.n	8005a7e <__libc_init_array+0x1e>
 8005a98:	08006550 	.word	0x08006550
 8005a9c:	08006550 	.word	0x08006550
 8005aa0:	08006550 	.word	0x08006550
 8005aa4:	08006554 	.word	0x08006554

08005aa8 <__retarget_lock_init_recursive>:
 8005aa8:	4770      	bx	lr

08005aaa <__retarget_lock_acquire_recursive>:
 8005aaa:	4770      	bx	lr

08005aac <__retarget_lock_release_recursive>:
 8005aac:	4770      	bx	lr

08005aae <memcpy>:
 8005aae:	440a      	add	r2, r1
 8005ab0:	4291      	cmp	r1, r2
 8005ab2:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ab6:	d100      	bne.n	8005aba <memcpy+0xc>
 8005ab8:	4770      	bx	lr
 8005aba:	b510      	push	{r4, lr}
 8005abc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ac4:	4291      	cmp	r1, r2
 8005ac6:	d1f9      	bne.n	8005abc <memcpy+0xe>
 8005ac8:	bd10      	pop	{r4, pc}
	...

08005acc <_free_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4605      	mov	r5, r0
 8005ad0:	2900      	cmp	r1, #0
 8005ad2:	d041      	beq.n	8005b58 <_free_r+0x8c>
 8005ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ad8:	1f0c      	subs	r4, r1, #4
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bfb8      	it	lt
 8005ade:	18e4      	addlt	r4, r4, r3
 8005ae0:	f7ff fe36 	bl	8005750 <__malloc_lock>
 8005ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b5c <_free_r+0x90>)
 8005ae6:	6813      	ldr	r3, [r2, #0]
 8005ae8:	b933      	cbnz	r3, 8005af8 <_free_r+0x2c>
 8005aea:	6063      	str	r3, [r4, #4]
 8005aec:	6014      	str	r4, [r2, #0]
 8005aee:	4628      	mov	r0, r5
 8005af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005af4:	f7ff be32 	b.w	800575c <__malloc_unlock>
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	d908      	bls.n	8005b0e <_free_r+0x42>
 8005afc:	6820      	ldr	r0, [r4, #0]
 8005afe:	1821      	adds	r1, r4, r0
 8005b00:	428b      	cmp	r3, r1
 8005b02:	bf01      	itttt	eq
 8005b04:	6819      	ldreq	r1, [r3, #0]
 8005b06:	685b      	ldreq	r3, [r3, #4]
 8005b08:	1809      	addeq	r1, r1, r0
 8005b0a:	6021      	streq	r1, [r4, #0]
 8005b0c:	e7ed      	b.n	8005aea <_free_r+0x1e>
 8005b0e:	461a      	mov	r2, r3
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	b10b      	cbz	r3, 8005b18 <_free_r+0x4c>
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	d9fa      	bls.n	8005b0e <_free_r+0x42>
 8005b18:	6811      	ldr	r1, [r2, #0]
 8005b1a:	1850      	adds	r0, r2, r1
 8005b1c:	42a0      	cmp	r0, r4
 8005b1e:	d10b      	bne.n	8005b38 <_free_r+0x6c>
 8005b20:	6820      	ldr	r0, [r4, #0]
 8005b22:	4401      	add	r1, r0
 8005b24:	1850      	adds	r0, r2, r1
 8005b26:	4283      	cmp	r3, r0
 8005b28:	6011      	str	r1, [r2, #0]
 8005b2a:	d1e0      	bne.n	8005aee <_free_r+0x22>
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	6053      	str	r3, [r2, #4]
 8005b32:	4408      	add	r0, r1
 8005b34:	6010      	str	r0, [r2, #0]
 8005b36:	e7da      	b.n	8005aee <_free_r+0x22>
 8005b38:	d902      	bls.n	8005b40 <_free_r+0x74>
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	602b      	str	r3, [r5, #0]
 8005b3e:	e7d6      	b.n	8005aee <_free_r+0x22>
 8005b40:	6820      	ldr	r0, [r4, #0]
 8005b42:	1821      	adds	r1, r4, r0
 8005b44:	428b      	cmp	r3, r1
 8005b46:	bf04      	itt	eq
 8005b48:	6819      	ldreq	r1, [r3, #0]
 8005b4a:	685b      	ldreq	r3, [r3, #4]
 8005b4c:	6063      	str	r3, [r4, #4]
 8005b4e:	bf04      	itt	eq
 8005b50:	1809      	addeq	r1, r1, r0
 8005b52:	6021      	streq	r1, [r4, #0]
 8005b54:	6054      	str	r4, [r2, #4]
 8005b56:	e7ca      	b.n	8005aee <_free_r+0x22>
 8005b58:	bd38      	pop	{r3, r4, r5, pc}
 8005b5a:	bf00      	nop
 8005b5c:	2000040c 	.word	0x2000040c

08005b60 <__sfputc_r>:
 8005b60:	6893      	ldr	r3, [r2, #8]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	b410      	push	{r4}
 8005b68:	6093      	str	r3, [r2, #8]
 8005b6a:	da08      	bge.n	8005b7e <__sfputc_r+0x1e>
 8005b6c:	6994      	ldr	r4, [r2, #24]
 8005b6e:	42a3      	cmp	r3, r4
 8005b70:	db01      	blt.n	8005b76 <__sfputc_r+0x16>
 8005b72:	290a      	cmp	r1, #10
 8005b74:	d103      	bne.n	8005b7e <__sfputc_r+0x1e>
 8005b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b7a:	f000 bb6d 	b.w	8006258 <__swbuf_r>
 8005b7e:	6813      	ldr	r3, [r2, #0]
 8005b80:	1c58      	adds	r0, r3, #1
 8005b82:	6010      	str	r0, [r2, #0]
 8005b84:	7019      	strb	r1, [r3, #0]
 8005b86:	4608      	mov	r0, r1
 8005b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <__sfputs_r>:
 8005b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b90:	4606      	mov	r6, r0
 8005b92:	460f      	mov	r7, r1
 8005b94:	4614      	mov	r4, r2
 8005b96:	18d5      	adds	r5, r2, r3
 8005b98:	42ac      	cmp	r4, r5
 8005b9a:	d101      	bne.n	8005ba0 <__sfputs_r+0x12>
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	e007      	b.n	8005bb0 <__sfputs_r+0x22>
 8005ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba4:	463a      	mov	r2, r7
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f7ff ffda 	bl	8005b60 <__sfputc_r>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d1f3      	bne.n	8005b98 <__sfputs_r+0xa>
 8005bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bb4 <_vfiprintf_r>:
 8005bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb8:	460d      	mov	r5, r1
 8005bba:	b09d      	sub	sp, #116	@ 0x74
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	4698      	mov	r8, r3
 8005bc0:	4606      	mov	r6, r0
 8005bc2:	b118      	cbz	r0, 8005bcc <_vfiprintf_r+0x18>
 8005bc4:	6a03      	ldr	r3, [r0, #32]
 8005bc6:	b90b      	cbnz	r3, 8005bcc <_vfiprintf_r+0x18>
 8005bc8:	f7ff fe5a 	bl	8005880 <__sinit>
 8005bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bce:	07d9      	lsls	r1, r3, #31
 8005bd0:	d405      	bmi.n	8005bde <_vfiprintf_r+0x2a>
 8005bd2:	89ab      	ldrh	r3, [r5, #12]
 8005bd4:	059a      	lsls	r2, r3, #22
 8005bd6:	d402      	bmi.n	8005bde <_vfiprintf_r+0x2a>
 8005bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bda:	f7ff ff66 	bl	8005aaa <__retarget_lock_acquire_recursive>
 8005bde:	89ab      	ldrh	r3, [r5, #12]
 8005be0:	071b      	lsls	r3, r3, #28
 8005be2:	d501      	bpl.n	8005be8 <_vfiprintf_r+0x34>
 8005be4:	692b      	ldr	r3, [r5, #16]
 8005be6:	b99b      	cbnz	r3, 8005c10 <_vfiprintf_r+0x5c>
 8005be8:	4629      	mov	r1, r5
 8005bea:	4630      	mov	r0, r6
 8005bec:	f000 fb72 	bl	80062d4 <__swsetup_r>
 8005bf0:	b170      	cbz	r0, 8005c10 <_vfiprintf_r+0x5c>
 8005bf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bf4:	07dc      	lsls	r4, r3, #31
 8005bf6:	d504      	bpl.n	8005c02 <_vfiprintf_r+0x4e>
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	b01d      	add	sp, #116	@ 0x74
 8005bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c02:	89ab      	ldrh	r3, [r5, #12]
 8005c04:	0598      	lsls	r0, r3, #22
 8005c06:	d4f7      	bmi.n	8005bf8 <_vfiprintf_r+0x44>
 8005c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c0a:	f7ff ff4f 	bl	8005aac <__retarget_lock_release_recursive>
 8005c0e:	e7f3      	b.n	8005bf8 <_vfiprintf_r+0x44>
 8005c10:	2300      	movs	r3, #0
 8005c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c14:	2320      	movs	r3, #32
 8005c16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c1e:	2330      	movs	r3, #48	@ 0x30
 8005c20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005dd0 <_vfiprintf_r+0x21c>
 8005c24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c28:	f04f 0901 	mov.w	r9, #1
 8005c2c:	4623      	mov	r3, r4
 8005c2e:	469a      	mov	sl, r3
 8005c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c34:	b10a      	cbz	r2, 8005c3a <_vfiprintf_r+0x86>
 8005c36:	2a25      	cmp	r2, #37	@ 0x25
 8005c38:	d1f9      	bne.n	8005c2e <_vfiprintf_r+0x7a>
 8005c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8005c3e:	d00b      	beq.n	8005c58 <_vfiprintf_r+0xa4>
 8005c40:	465b      	mov	r3, fp
 8005c42:	4622      	mov	r2, r4
 8005c44:	4629      	mov	r1, r5
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff ffa1 	bl	8005b8e <__sfputs_r>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	f000 80a7 	beq.w	8005da0 <_vfiprintf_r+0x1ec>
 8005c52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c54:	445a      	add	r2, fp
 8005c56:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c58:	f89a 3000 	ldrb.w	r3, [sl]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 809f 	beq.w	8005da0 <_vfiprintf_r+0x1ec>
 8005c62:	2300      	movs	r3, #0
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c6c:	f10a 0a01 	add.w	sl, sl, #1
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	9307      	str	r3, [sp, #28]
 8005c74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c78:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c7a:	4654      	mov	r4, sl
 8005c7c:	2205      	movs	r2, #5
 8005c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c82:	4853      	ldr	r0, [pc, #332]	@ (8005dd0 <_vfiprintf_r+0x21c>)
 8005c84:	f7fa faac 	bl	80001e0 <memchr>
 8005c88:	9a04      	ldr	r2, [sp, #16]
 8005c8a:	b9d8      	cbnz	r0, 8005cc4 <_vfiprintf_r+0x110>
 8005c8c:	06d1      	lsls	r1, r2, #27
 8005c8e:	bf44      	itt	mi
 8005c90:	2320      	movmi	r3, #32
 8005c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c96:	0713      	lsls	r3, r2, #28
 8005c98:	bf44      	itt	mi
 8005c9a:	232b      	movmi	r3, #43	@ 0x2b
 8005c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ca6:	d015      	beq.n	8005cd4 <_vfiprintf_r+0x120>
 8005ca8:	9a07      	ldr	r2, [sp, #28]
 8005caa:	4654      	mov	r4, sl
 8005cac:	2000      	movs	r0, #0
 8005cae:	f04f 0c0a 	mov.w	ip, #10
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cb8:	3b30      	subs	r3, #48	@ 0x30
 8005cba:	2b09      	cmp	r3, #9
 8005cbc:	d94b      	bls.n	8005d56 <_vfiprintf_r+0x1a2>
 8005cbe:	b1b0      	cbz	r0, 8005cee <_vfiprintf_r+0x13a>
 8005cc0:	9207      	str	r2, [sp, #28]
 8005cc2:	e014      	b.n	8005cee <_vfiprintf_r+0x13a>
 8005cc4:	eba0 0308 	sub.w	r3, r0, r8
 8005cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	9304      	str	r3, [sp, #16]
 8005cd0:	46a2      	mov	sl, r4
 8005cd2:	e7d2      	b.n	8005c7a <_vfiprintf_r+0xc6>
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	1d19      	adds	r1, r3, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	9103      	str	r1, [sp, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bfbb      	ittet	lt
 8005ce0:	425b      	neglt	r3, r3
 8005ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ce6:	9307      	strge	r3, [sp, #28]
 8005ce8:	9307      	strlt	r3, [sp, #28]
 8005cea:	bfb8      	it	lt
 8005cec:	9204      	strlt	r2, [sp, #16]
 8005cee:	7823      	ldrb	r3, [r4, #0]
 8005cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cf2:	d10a      	bne.n	8005d0a <_vfiprintf_r+0x156>
 8005cf4:	7863      	ldrb	r3, [r4, #1]
 8005cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cf8:	d132      	bne.n	8005d60 <_vfiprintf_r+0x1ac>
 8005cfa:	9b03      	ldr	r3, [sp, #12]
 8005cfc:	1d1a      	adds	r2, r3, #4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	9203      	str	r2, [sp, #12]
 8005d02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d06:	3402      	adds	r4, #2
 8005d08:	9305      	str	r3, [sp, #20]
 8005d0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005de0 <_vfiprintf_r+0x22c>
 8005d0e:	7821      	ldrb	r1, [r4, #0]
 8005d10:	2203      	movs	r2, #3
 8005d12:	4650      	mov	r0, sl
 8005d14:	f7fa fa64 	bl	80001e0 <memchr>
 8005d18:	b138      	cbz	r0, 8005d2a <_vfiprintf_r+0x176>
 8005d1a:	9b04      	ldr	r3, [sp, #16]
 8005d1c:	eba0 000a 	sub.w	r0, r0, sl
 8005d20:	2240      	movs	r2, #64	@ 0x40
 8005d22:	4082      	lsls	r2, r0
 8005d24:	4313      	orrs	r3, r2
 8005d26:	3401      	adds	r4, #1
 8005d28:	9304      	str	r3, [sp, #16]
 8005d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d2e:	4829      	ldr	r0, [pc, #164]	@ (8005dd4 <_vfiprintf_r+0x220>)
 8005d30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d34:	2206      	movs	r2, #6
 8005d36:	f7fa fa53 	bl	80001e0 <memchr>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d03f      	beq.n	8005dbe <_vfiprintf_r+0x20a>
 8005d3e:	4b26      	ldr	r3, [pc, #152]	@ (8005dd8 <_vfiprintf_r+0x224>)
 8005d40:	bb1b      	cbnz	r3, 8005d8a <_vfiprintf_r+0x1d6>
 8005d42:	9b03      	ldr	r3, [sp, #12]
 8005d44:	3307      	adds	r3, #7
 8005d46:	f023 0307 	bic.w	r3, r3, #7
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	9303      	str	r3, [sp, #12]
 8005d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d50:	443b      	add	r3, r7
 8005d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d54:	e76a      	b.n	8005c2c <_vfiprintf_r+0x78>
 8005d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	e7a8      	b.n	8005cb2 <_vfiprintf_r+0xfe>
 8005d60:	2300      	movs	r3, #0
 8005d62:	3401      	adds	r4, #1
 8005d64:	9305      	str	r3, [sp, #20]
 8005d66:	4619      	mov	r1, r3
 8005d68:	f04f 0c0a 	mov.w	ip, #10
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d72:	3a30      	subs	r2, #48	@ 0x30
 8005d74:	2a09      	cmp	r2, #9
 8005d76:	d903      	bls.n	8005d80 <_vfiprintf_r+0x1cc>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0c6      	beq.n	8005d0a <_vfiprintf_r+0x156>
 8005d7c:	9105      	str	r1, [sp, #20]
 8005d7e:	e7c4      	b.n	8005d0a <_vfiprintf_r+0x156>
 8005d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d84:	4604      	mov	r4, r0
 8005d86:	2301      	movs	r3, #1
 8005d88:	e7f0      	b.n	8005d6c <_vfiprintf_r+0x1b8>
 8005d8a:	ab03      	add	r3, sp, #12
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	462a      	mov	r2, r5
 8005d90:	4b12      	ldr	r3, [pc, #72]	@ (8005ddc <_vfiprintf_r+0x228>)
 8005d92:	a904      	add	r1, sp, #16
 8005d94:	4630      	mov	r0, r6
 8005d96:	f3af 8000 	nop.w
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	1c78      	adds	r0, r7, #1
 8005d9e:	d1d6      	bne.n	8005d4e <_vfiprintf_r+0x19a>
 8005da0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005da2:	07d9      	lsls	r1, r3, #31
 8005da4:	d405      	bmi.n	8005db2 <_vfiprintf_r+0x1fe>
 8005da6:	89ab      	ldrh	r3, [r5, #12]
 8005da8:	059a      	lsls	r2, r3, #22
 8005daa:	d402      	bmi.n	8005db2 <_vfiprintf_r+0x1fe>
 8005dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dae:	f7ff fe7d 	bl	8005aac <__retarget_lock_release_recursive>
 8005db2:	89ab      	ldrh	r3, [r5, #12]
 8005db4:	065b      	lsls	r3, r3, #25
 8005db6:	f53f af1f 	bmi.w	8005bf8 <_vfiprintf_r+0x44>
 8005dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dbc:	e71e      	b.n	8005bfc <_vfiprintf_r+0x48>
 8005dbe:	ab03      	add	r3, sp, #12
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	462a      	mov	r2, r5
 8005dc4:	4b05      	ldr	r3, [pc, #20]	@ (8005ddc <_vfiprintf_r+0x228>)
 8005dc6:	a904      	add	r1, sp, #16
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f000 f879 	bl	8005ec0 <_printf_i>
 8005dce:	e7e4      	b.n	8005d9a <_vfiprintf_r+0x1e6>
 8005dd0:	08006514 	.word	0x08006514
 8005dd4:	0800651e 	.word	0x0800651e
 8005dd8:	00000000 	.word	0x00000000
 8005ddc:	08005b8f 	.word	0x08005b8f
 8005de0:	0800651a 	.word	0x0800651a

08005de4 <_printf_common>:
 8005de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de8:	4616      	mov	r6, r2
 8005dea:	4698      	mov	r8, r3
 8005dec:	688a      	ldr	r2, [r1, #8]
 8005dee:	690b      	ldr	r3, [r1, #16]
 8005df0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005df4:	4293      	cmp	r3, r2
 8005df6:	bfb8      	it	lt
 8005df8:	4613      	movlt	r3, r2
 8005dfa:	6033      	str	r3, [r6, #0]
 8005dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e00:	4607      	mov	r7, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	b10a      	cbz	r2, 8005e0a <_printf_common+0x26>
 8005e06:	3301      	adds	r3, #1
 8005e08:	6033      	str	r3, [r6, #0]
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	0699      	lsls	r1, r3, #26
 8005e0e:	bf42      	ittt	mi
 8005e10:	6833      	ldrmi	r3, [r6, #0]
 8005e12:	3302      	addmi	r3, #2
 8005e14:	6033      	strmi	r3, [r6, #0]
 8005e16:	6825      	ldr	r5, [r4, #0]
 8005e18:	f015 0506 	ands.w	r5, r5, #6
 8005e1c:	d106      	bne.n	8005e2c <_printf_common+0x48>
 8005e1e:	f104 0a19 	add.w	sl, r4, #25
 8005e22:	68e3      	ldr	r3, [r4, #12]
 8005e24:	6832      	ldr	r2, [r6, #0]
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	42ab      	cmp	r3, r5
 8005e2a:	dc26      	bgt.n	8005e7a <_printf_common+0x96>
 8005e2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e30:	6822      	ldr	r2, [r4, #0]
 8005e32:	3b00      	subs	r3, #0
 8005e34:	bf18      	it	ne
 8005e36:	2301      	movne	r3, #1
 8005e38:	0692      	lsls	r2, r2, #26
 8005e3a:	d42b      	bmi.n	8005e94 <_printf_common+0xb0>
 8005e3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e40:	4641      	mov	r1, r8
 8005e42:	4638      	mov	r0, r7
 8005e44:	47c8      	blx	r9
 8005e46:	3001      	adds	r0, #1
 8005e48:	d01e      	beq.n	8005e88 <_printf_common+0xa4>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	6922      	ldr	r2, [r4, #16]
 8005e4e:	f003 0306 	and.w	r3, r3, #6
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	bf02      	ittt	eq
 8005e56:	68e5      	ldreq	r5, [r4, #12]
 8005e58:	6833      	ldreq	r3, [r6, #0]
 8005e5a:	1aed      	subeq	r5, r5, r3
 8005e5c:	68a3      	ldr	r3, [r4, #8]
 8005e5e:	bf0c      	ite	eq
 8005e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e64:	2500      	movne	r5, #0
 8005e66:	4293      	cmp	r3, r2
 8005e68:	bfc4      	itt	gt
 8005e6a:	1a9b      	subgt	r3, r3, r2
 8005e6c:	18ed      	addgt	r5, r5, r3
 8005e6e:	2600      	movs	r6, #0
 8005e70:	341a      	adds	r4, #26
 8005e72:	42b5      	cmp	r5, r6
 8005e74:	d11a      	bne.n	8005eac <_printf_common+0xc8>
 8005e76:	2000      	movs	r0, #0
 8005e78:	e008      	b.n	8005e8c <_printf_common+0xa8>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4652      	mov	r2, sl
 8005e7e:	4641      	mov	r1, r8
 8005e80:	4638      	mov	r0, r7
 8005e82:	47c8      	blx	r9
 8005e84:	3001      	adds	r0, #1
 8005e86:	d103      	bne.n	8005e90 <_printf_common+0xac>
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e90:	3501      	adds	r5, #1
 8005e92:	e7c6      	b.n	8005e22 <_printf_common+0x3e>
 8005e94:	18e1      	adds	r1, r4, r3
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	2030      	movs	r0, #48	@ 0x30
 8005e9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e9e:	4422      	add	r2, r4
 8005ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ea4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ea8:	3302      	adds	r3, #2
 8005eaa:	e7c7      	b.n	8005e3c <_printf_common+0x58>
 8005eac:	2301      	movs	r3, #1
 8005eae:	4622      	mov	r2, r4
 8005eb0:	4641      	mov	r1, r8
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	47c8      	blx	r9
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d0e6      	beq.n	8005e88 <_printf_common+0xa4>
 8005eba:	3601      	adds	r6, #1
 8005ebc:	e7d9      	b.n	8005e72 <_printf_common+0x8e>
	...

08005ec0 <_printf_i>:
 8005ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec4:	7e0f      	ldrb	r7, [r1, #24]
 8005ec6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ec8:	2f78      	cmp	r7, #120	@ 0x78
 8005eca:	4691      	mov	r9, r2
 8005ecc:	4680      	mov	r8, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	469a      	mov	sl, r3
 8005ed2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ed6:	d807      	bhi.n	8005ee8 <_printf_i+0x28>
 8005ed8:	2f62      	cmp	r7, #98	@ 0x62
 8005eda:	d80a      	bhi.n	8005ef2 <_printf_i+0x32>
 8005edc:	2f00      	cmp	r7, #0
 8005ede:	f000 80d2 	beq.w	8006086 <_printf_i+0x1c6>
 8005ee2:	2f58      	cmp	r7, #88	@ 0x58
 8005ee4:	f000 80b9 	beq.w	800605a <_printf_i+0x19a>
 8005ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ef0:	e03a      	b.n	8005f68 <_printf_i+0xa8>
 8005ef2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ef6:	2b15      	cmp	r3, #21
 8005ef8:	d8f6      	bhi.n	8005ee8 <_printf_i+0x28>
 8005efa:	a101      	add	r1, pc, #4	@ (adr r1, 8005f00 <_printf_i+0x40>)
 8005efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f00:	08005f59 	.word	0x08005f59
 8005f04:	08005f6d 	.word	0x08005f6d
 8005f08:	08005ee9 	.word	0x08005ee9
 8005f0c:	08005ee9 	.word	0x08005ee9
 8005f10:	08005ee9 	.word	0x08005ee9
 8005f14:	08005ee9 	.word	0x08005ee9
 8005f18:	08005f6d 	.word	0x08005f6d
 8005f1c:	08005ee9 	.word	0x08005ee9
 8005f20:	08005ee9 	.word	0x08005ee9
 8005f24:	08005ee9 	.word	0x08005ee9
 8005f28:	08005ee9 	.word	0x08005ee9
 8005f2c:	0800606d 	.word	0x0800606d
 8005f30:	08005f97 	.word	0x08005f97
 8005f34:	08006027 	.word	0x08006027
 8005f38:	08005ee9 	.word	0x08005ee9
 8005f3c:	08005ee9 	.word	0x08005ee9
 8005f40:	0800608f 	.word	0x0800608f
 8005f44:	08005ee9 	.word	0x08005ee9
 8005f48:	08005f97 	.word	0x08005f97
 8005f4c:	08005ee9 	.word	0x08005ee9
 8005f50:	08005ee9 	.word	0x08005ee9
 8005f54:	0800602f 	.word	0x0800602f
 8005f58:	6833      	ldr	r3, [r6, #0]
 8005f5a:	1d1a      	adds	r2, r3, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6032      	str	r2, [r6, #0]
 8005f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e09d      	b.n	80060a8 <_printf_i+0x1e8>
 8005f6c:	6833      	ldr	r3, [r6, #0]
 8005f6e:	6820      	ldr	r0, [r4, #0]
 8005f70:	1d19      	adds	r1, r3, #4
 8005f72:	6031      	str	r1, [r6, #0]
 8005f74:	0606      	lsls	r6, r0, #24
 8005f76:	d501      	bpl.n	8005f7c <_printf_i+0xbc>
 8005f78:	681d      	ldr	r5, [r3, #0]
 8005f7a:	e003      	b.n	8005f84 <_printf_i+0xc4>
 8005f7c:	0645      	lsls	r5, r0, #25
 8005f7e:	d5fb      	bpl.n	8005f78 <_printf_i+0xb8>
 8005f80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	da03      	bge.n	8005f90 <_printf_i+0xd0>
 8005f88:	232d      	movs	r3, #45	@ 0x2d
 8005f8a:	426d      	negs	r5, r5
 8005f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f90:	4859      	ldr	r0, [pc, #356]	@ (80060f8 <_printf_i+0x238>)
 8005f92:	230a      	movs	r3, #10
 8005f94:	e011      	b.n	8005fba <_printf_i+0xfa>
 8005f96:	6821      	ldr	r1, [r4, #0]
 8005f98:	6833      	ldr	r3, [r6, #0]
 8005f9a:	0608      	lsls	r0, r1, #24
 8005f9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fa0:	d402      	bmi.n	8005fa8 <_printf_i+0xe8>
 8005fa2:	0649      	lsls	r1, r1, #25
 8005fa4:	bf48      	it	mi
 8005fa6:	b2ad      	uxthmi	r5, r5
 8005fa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005faa:	4853      	ldr	r0, [pc, #332]	@ (80060f8 <_printf_i+0x238>)
 8005fac:	6033      	str	r3, [r6, #0]
 8005fae:	bf14      	ite	ne
 8005fb0:	230a      	movne	r3, #10
 8005fb2:	2308      	moveq	r3, #8
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fba:	6866      	ldr	r6, [r4, #4]
 8005fbc:	60a6      	str	r6, [r4, #8]
 8005fbe:	2e00      	cmp	r6, #0
 8005fc0:	bfa2      	ittt	ge
 8005fc2:	6821      	ldrge	r1, [r4, #0]
 8005fc4:	f021 0104 	bicge.w	r1, r1, #4
 8005fc8:	6021      	strge	r1, [r4, #0]
 8005fca:	b90d      	cbnz	r5, 8005fd0 <_printf_i+0x110>
 8005fcc:	2e00      	cmp	r6, #0
 8005fce:	d04b      	beq.n	8006068 <_printf_i+0x1a8>
 8005fd0:	4616      	mov	r6, r2
 8005fd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fd6:	fb03 5711 	mls	r7, r3, r1, r5
 8005fda:	5dc7      	ldrb	r7, [r0, r7]
 8005fdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fe0:	462f      	mov	r7, r5
 8005fe2:	42bb      	cmp	r3, r7
 8005fe4:	460d      	mov	r5, r1
 8005fe6:	d9f4      	bls.n	8005fd2 <_printf_i+0x112>
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d10b      	bne.n	8006004 <_printf_i+0x144>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	07df      	lsls	r7, r3, #31
 8005ff0:	d508      	bpl.n	8006004 <_printf_i+0x144>
 8005ff2:	6923      	ldr	r3, [r4, #16]
 8005ff4:	6861      	ldr	r1, [r4, #4]
 8005ff6:	4299      	cmp	r1, r3
 8005ff8:	bfde      	ittt	le
 8005ffa:	2330      	movle	r3, #48	@ 0x30
 8005ffc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006000:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006004:	1b92      	subs	r2, r2, r6
 8006006:	6122      	str	r2, [r4, #16]
 8006008:	f8cd a000 	str.w	sl, [sp]
 800600c:	464b      	mov	r3, r9
 800600e:	aa03      	add	r2, sp, #12
 8006010:	4621      	mov	r1, r4
 8006012:	4640      	mov	r0, r8
 8006014:	f7ff fee6 	bl	8005de4 <_printf_common>
 8006018:	3001      	adds	r0, #1
 800601a:	d14a      	bne.n	80060b2 <_printf_i+0x1f2>
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	b004      	add	sp, #16
 8006022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	f043 0320 	orr.w	r3, r3, #32
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	4833      	ldr	r0, [pc, #204]	@ (80060fc <_printf_i+0x23c>)
 8006030:	2778      	movs	r7, #120	@ 0x78
 8006032:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	6831      	ldr	r1, [r6, #0]
 800603a:	061f      	lsls	r7, r3, #24
 800603c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006040:	d402      	bmi.n	8006048 <_printf_i+0x188>
 8006042:	065f      	lsls	r7, r3, #25
 8006044:	bf48      	it	mi
 8006046:	b2ad      	uxthmi	r5, r5
 8006048:	6031      	str	r1, [r6, #0]
 800604a:	07d9      	lsls	r1, r3, #31
 800604c:	bf44      	itt	mi
 800604e:	f043 0320 	orrmi.w	r3, r3, #32
 8006052:	6023      	strmi	r3, [r4, #0]
 8006054:	b11d      	cbz	r5, 800605e <_printf_i+0x19e>
 8006056:	2310      	movs	r3, #16
 8006058:	e7ac      	b.n	8005fb4 <_printf_i+0xf4>
 800605a:	4827      	ldr	r0, [pc, #156]	@ (80060f8 <_printf_i+0x238>)
 800605c:	e7e9      	b.n	8006032 <_printf_i+0x172>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	f023 0320 	bic.w	r3, r3, #32
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	e7f6      	b.n	8006056 <_printf_i+0x196>
 8006068:	4616      	mov	r6, r2
 800606a:	e7bd      	b.n	8005fe8 <_printf_i+0x128>
 800606c:	6833      	ldr	r3, [r6, #0]
 800606e:	6825      	ldr	r5, [r4, #0]
 8006070:	6961      	ldr	r1, [r4, #20]
 8006072:	1d18      	adds	r0, r3, #4
 8006074:	6030      	str	r0, [r6, #0]
 8006076:	062e      	lsls	r6, r5, #24
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	d501      	bpl.n	8006080 <_printf_i+0x1c0>
 800607c:	6019      	str	r1, [r3, #0]
 800607e:	e002      	b.n	8006086 <_printf_i+0x1c6>
 8006080:	0668      	lsls	r0, r5, #25
 8006082:	d5fb      	bpl.n	800607c <_printf_i+0x1bc>
 8006084:	8019      	strh	r1, [r3, #0]
 8006086:	2300      	movs	r3, #0
 8006088:	6123      	str	r3, [r4, #16]
 800608a:	4616      	mov	r6, r2
 800608c:	e7bc      	b.n	8006008 <_printf_i+0x148>
 800608e:	6833      	ldr	r3, [r6, #0]
 8006090:	1d1a      	adds	r2, r3, #4
 8006092:	6032      	str	r2, [r6, #0]
 8006094:	681e      	ldr	r6, [r3, #0]
 8006096:	6862      	ldr	r2, [r4, #4]
 8006098:	2100      	movs	r1, #0
 800609a:	4630      	mov	r0, r6
 800609c:	f7fa f8a0 	bl	80001e0 <memchr>
 80060a0:	b108      	cbz	r0, 80060a6 <_printf_i+0x1e6>
 80060a2:	1b80      	subs	r0, r0, r6
 80060a4:	6060      	str	r0, [r4, #4]
 80060a6:	6863      	ldr	r3, [r4, #4]
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	2300      	movs	r3, #0
 80060ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060b0:	e7aa      	b.n	8006008 <_printf_i+0x148>
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	4632      	mov	r2, r6
 80060b6:	4649      	mov	r1, r9
 80060b8:	4640      	mov	r0, r8
 80060ba:	47d0      	blx	sl
 80060bc:	3001      	adds	r0, #1
 80060be:	d0ad      	beq.n	800601c <_printf_i+0x15c>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	079b      	lsls	r3, r3, #30
 80060c4:	d413      	bmi.n	80060ee <_printf_i+0x22e>
 80060c6:	68e0      	ldr	r0, [r4, #12]
 80060c8:	9b03      	ldr	r3, [sp, #12]
 80060ca:	4298      	cmp	r0, r3
 80060cc:	bfb8      	it	lt
 80060ce:	4618      	movlt	r0, r3
 80060d0:	e7a6      	b.n	8006020 <_printf_i+0x160>
 80060d2:	2301      	movs	r3, #1
 80060d4:	4632      	mov	r2, r6
 80060d6:	4649      	mov	r1, r9
 80060d8:	4640      	mov	r0, r8
 80060da:	47d0      	blx	sl
 80060dc:	3001      	adds	r0, #1
 80060de:	d09d      	beq.n	800601c <_printf_i+0x15c>
 80060e0:	3501      	adds	r5, #1
 80060e2:	68e3      	ldr	r3, [r4, #12]
 80060e4:	9903      	ldr	r1, [sp, #12]
 80060e6:	1a5b      	subs	r3, r3, r1
 80060e8:	42ab      	cmp	r3, r5
 80060ea:	dcf2      	bgt.n	80060d2 <_printf_i+0x212>
 80060ec:	e7eb      	b.n	80060c6 <_printf_i+0x206>
 80060ee:	2500      	movs	r5, #0
 80060f0:	f104 0619 	add.w	r6, r4, #25
 80060f4:	e7f5      	b.n	80060e2 <_printf_i+0x222>
 80060f6:	bf00      	nop
 80060f8:	08006525 	.word	0x08006525
 80060fc:	08006536 	.word	0x08006536

08006100 <__sflush_r>:
 8006100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006108:	0716      	lsls	r6, r2, #28
 800610a:	4605      	mov	r5, r0
 800610c:	460c      	mov	r4, r1
 800610e:	d454      	bmi.n	80061ba <__sflush_r+0xba>
 8006110:	684b      	ldr	r3, [r1, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	dc02      	bgt.n	800611c <__sflush_r+0x1c>
 8006116:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	dd48      	ble.n	80061ae <__sflush_r+0xae>
 800611c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800611e:	2e00      	cmp	r6, #0
 8006120:	d045      	beq.n	80061ae <__sflush_r+0xae>
 8006122:	2300      	movs	r3, #0
 8006124:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006128:	682f      	ldr	r7, [r5, #0]
 800612a:	6a21      	ldr	r1, [r4, #32]
 800612c:	602b      	str	r3, [r5, #0]
 800612e:	d030      	beq.n	8006192 <__sflush_r+0x92>
 8006130:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	0759      	lsls	r1, r3, #29
 8006136:	d505      	bpl.n	8006144 <__sflush_r+0x44>
 8006138:	6863      	ldr	r3, [r4, #4]
 800613a:	1ad2      	subs	r2, r2, r3
 800613c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800613e:	b10b      	cbz	r3, 8006144 <__sflush_r+0x44>
 8006140:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	2300      	movs	r3, #0
 8006146:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006148:	6a21      	ldr	r1, [r4, #32]
 800614a:	4628      	mov	r0, r5
 800614c:	47b0      	blx	r6
 800614e:	1c43      	adds	r3, r0, #1
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	d106      	bne.n	8006162 <__sflush_r+0x62>
 8006154:	6829      	ldr	r1, [r5, #0]
 8006156:	291d      	cmp	r1, #29
 8006158:	d82b      	bhi.n	80061b2 <__sflush_r+0xb2>
 800615a:	4a2a      	ldr	r2, [pc, #168]	@ (8006204 <__sflush_r+0x104>)
 800615c:	410a      	asrs	r2, r1
 800615e:	07d6      	lsls	r6, r2, #31
 8006160:	d427      	bmi.n	80061b2 <__sflush_r+0xb2>
 8006162:	2200      	movs	r2, #0
 8006164:	6062      	str	r2, [r4, #4]
 8006166:	04d9      	lsls	r1, r3, #19
 8006168:	6922      	ldr	r2, [r4, #16]
 800616a:	6022      	str	r2, [r4, #0]
 800616c:	d504      	bpl.n	8006178 <__sflush_r+0x78>
 800616e:	1c42      	adds	r2, r0, #1
 8006170:	d101      	bne.n	8006176 <__sflush_r+0x76>
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	b903      	cbnz	r3, 8006178 <__sflush_r+0x78>
 8006176:	6560      	str	r0, [r4, #84]	@ 0x54
 8006178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800617a:	602f      	str	r7, [r5, #0]
 800617c:	b1b9      	cbz	r1, 80061ae <__sflush_r+0xae>
 800617e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006182:	4299      	cmp	r1, r3
 8006184:	d002      	beq.n	800618c <__sflush_r+0x8c>
 8006186:	4628      	mov	r0, r5
 8006188:	f7ff fca0 	bl	8005acc <_free_r>
 800618c:	2300      	movs	r3, #0
 800618e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006190:	e00d      	b.n	80061ae <__sflush_r+0xae>
 8006192:	2301      	movs	r3, #1
 8006194:	4628      	mov	r0, r5
 8006196:	47b0      	blx	r6
 8006198:	4602      	mov	r2, r0
 800619a:	1c50      	adds	r0, r2, #1
 800619c:	d1c9      	bne.n	8006132 <__sflush_r+0x32>
 800619e:	682b      	ldr	r3, [r5, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0c6      	beq.n	8006132 <__sflush_r+0x32>
 80061a4:	2b1d      	cmp	r3, #29
 80061a6:	d001      	beq.n	80061ac <__sflush_r+0xac>
 80061a8:	2b16      	cmp	r3, #22
 80061aa:	d11e      	bne.n	80061ea <__sflush_r+0xea>
 80061ac:	602f      	str	r7, [r5, #0]
 80061ae:	2000      	movs	r0, #0
 80061b0:	e022      	b.n	80061f8 <__sflush_r+0xf8>
 80061b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061b6:	b21b      	sxth	r3, r3
 80061b8:	e01b      	b.n	80061f2 <__sflush_r+0xf2>
 80061ba:	690f      	ldr	r7, [r1, #16]
 80061bc:	2f00      	cmp	r7, #0
 80061be:	d0f6      	beq.n	80061ae <__sflush_r+0xae>
 80061c0:	0793      	lsls	r3, r2, #30
 80061c2:	680e      	ldr	r6, [r1, #0]
 80061c4:	bf08      	it	eq
 80061c6:	694b      	ldreq	r3, [r1, #20]
 80061c8:	600f      	str	r7, [r1, #0]
 80061ca:	bf18      	it	ne
 80061cc:	2300      	movne	r3, #0
 80061ce:	eba6 0807 	sub.w	r8, r6, r7
 80061d2:	608b      	str	r3, [r1, #8]
 80061d4:	f1b8 0f00 	cmp.w	r8, #0
 80061d8:	dde9      	ble.n	80061ae <__sflush_r+0xae>
 80061da:	6a21      	ldr	r1, [r4, #32]
 80061dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061de:	4643      	mov	r3, r8
 80061e0:	463a      	mov	r2, r7
 80061e2:	4628      	mov	r0, r5
 80061e4:	47b0      	blx	r6
 80061e6:	2800      	cmp	r0, #0
 80061e8:	dc08      	bgt.n	80061fc <__sflush_r+0xfc>
 80061ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061f2:	81a3      	strh	r3, [r4, #12]
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295
 80061f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061fc:	4407      	add	r7, r0
 80061fe:	eba8 0800 	sub.w	r8, r8, r0
 8006202:	e7e7      	b.n	80061d4 <__sflush_r+0xd4>
 8006204:	dfbffffe 	.word	0xdfbffffe

08006208 <_fflush_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	690b      	ldr	r3, [r1, #16]
 800620c:	4605      	mov	r5, r0
 800620e:	460c      	mov	r4, r1
 8006210:	b913      	cbnz	r3, 8006218 <_fflush_r+0x10>
 8006212:	2500      	movs	r5, #0
 8006214:	4628      	mov	r0, r5
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	b118      	cbz	r0, 8006222 <_fflush_r+0x1a>
 800621a:	6a03      	ldr	r3, [r0, #32]
 800621c:	b90b      	cbnz	r3, 8006222 <_fflush_r+0x1a>
 800621e:	f7ff fb2f 	bl	8005880 <__sinit>
 8006222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0f3      	beq.n	8006212 <_fflush_r+0xa>
 800622a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800622c:	07d0      	lsls	r0, r2, #31
 800622e:	d404      	bmi.n	800623a <_fflush_r+0x32>
 8006230:	0599      	lsls	r1, r3, #22
 8006232:	d402      	bmi.n	800623a <_fflush_r+0x32>
 8006234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006236:	f7ff fc38 	bl	8005aaa <__retarget_lock_acquire_recursive>
 800623a:	4628      	mov	r0, r5
 800623c:	4621      	mov	r1, r4
 800623e:	f7ff ff5f 	bl	8006100 <__sflush_r>
 8006242:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006244:	07da      	lsls	r2, r3, #31
 8006246:	4605      	mov	r5, r0
 8006248:	d4e4      	bmi.n	8006214 <_fflush_r+0xc>
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	059b      	lsls	r3, r3, #22
 800624e:	d4e1      	bmi.n	8006214 <_fflush_r+0xc>
 8006250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006252:	f7ff fc2b 	bl	8005aac <__retarget_lock_release_recursive>
 8006256:	e7dd      	b.n	8006214 <_fflush_r+0xc>

08006258 <__swbuf_r>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	460e      	mov	r6, r1
 800625c:	4614      	mov	r4, r2
 800625e:	4605      	mov	r5, r0
 8006260:	b118      	cbz	r0, 800626a <__swbuf_r+0x12>
 8006262:	6a03      	ldr	r3, [r0, #32]
 8006264:	b90b      	cbnz	r3, 800626a <__swbuf_r+0x12>
 8006266:	f7ff fb0b 	bl	8005880 <__sinit>
 800626a:	69a3      	ldr	r3, [r4, #24]
 800626c:	60a3      	str	r3, [r4, #8]
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	071a      	lsls	r2, r3, #28
 8006272:	d501      	bpl.n	8006278 <__swbuf_r+0x20>
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	b943      	cbnz	r3, 800628a <__swbuf_r+0x32>
 8006278:	4621      	mov	r1, r4
 800627a:	4628      	mov	r0, r5
 800627c:	f000 f82a 	bl	80062d4 <__swsetup_r>
 8006280:	b118      	cbz	r0, 800628a <__swbuf_r+0x32>
 8006282:	f04f 37ff 	mov.w	r7, #4294967295
 8006286:	4638      	mov	r0, r7
 8006288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	6922      	ldr	r2, [r4, #16]
 800628e:	1a98      	subs	r0, r3, r2
 8006290:	6963      	ldr	r3, [r4, #20]
 8006292:	b2f6      	uxtb	r6, r6
 8006294:	4283      	cmp	r3, r0
 8006296:	4637      	mov	r7, r6
 8006298:	dc05      	bgt.n	80062a6 <__swbuf_r+0x4e>
 800629a:	4621      	mov	r1, r4
 800629c:	4628      	mov	r0, r5
 800629e:	f7ff ffb3 	bl	8006208 <_fflush_r>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d1ed      	bne.n	8006282 <__swbuf_r+0x2a>
 80062a6:	68a3      	ldr	r3, [r4, #8]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	60a3      	str	r3, [r4, #8]
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	6022      	str	r2, [r4, #0]
 80062b2:	701e      	strb	r6, [r3, #0]
 80062b4:	6962      	ldr	r2, [r4, #20]
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d004      	beq.n	80062c6 <__swbuf_r+0x6e>
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	07db      	lsls	r3, r3, #31
 80062c0:	d5e1      	bpl.n	8006286 <__swbuf_r+0x2e>
 80062c2:	2e0a      	cmp	r6, #10
 80062c4:	d1df      	bne.n	8006286 <__swbuf_r+0x2e>
 80062c6:	4621      	mov	r1, r4
 80062c8:	4628      	mov	r0, r5
 80062ca:	f7ff ff9d 	bl	8006208 <_fflush_r>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d0d9      	beq.n	8006286 <__swbuf_r+0x2e>
 80062d2:	e7d6      	b.n	8006282 <__swbuf_r+0x2a>

080062d4 <__swsetup_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4b29      	ldr	r3, [pc, #164]	@ (800637c <__swsetup_r+0xa8>)
 80062d8:	4605      	mov	r5, r0
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	460c      	mov	r4, r1
 80062de:	b118      	cbz	r0, 80062e8 <__swsetup_r+0x14>
 80062e0:	6a03      	ldr	r3, [r0, #32]
 80062e2:	b90b      	cbnz	r3, 80062e8 <__swsetup_r+0x14>
 80062e4:	f7ff facc 	bl	8005880 <__sinit>
 80062e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ec:	0719      	lsls	r1, r3, #28
 80062ee:	d422      	bmi.n	8006336 <__swsetup_r+0x62>
 80062f0:	06da      	lsls	r2, r3, #27
 80062f2:	d407      	bmi.n	8006304 <__swsetup_r+0x30>
 80062f4:	2209      	movs	r2, #9
 80062f6:	602a      	str	r2, [r5, #0]
 80062f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062fc:	81a3      	strh	r3, [r4, #12]
 80062fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006302:	e033      	b.n	800636c <__swsetup_r+0x98>
 8006304:	0758      	lsls	r0, r3, #29
 8006306:	d512      	bpl.n	800632e <__swsetup_r+0x5a>
 8006308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800630a:	b141      	cbz	r1, 800631e <__swsetup_r+0x4a>
 800630c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006310:	4299      	cmp	r1, r3
 8006312:	d002      	beq.n	800631a <__swsetup_r+0x46>
 8006314:	4628      	mov	r0, r5
 8006316:	f7ff fbd9 	bl	8005acc <_free_r>
 800631a:	2300      	movs	r3, #0
 800631c:	6363      	str	r3, [r4, #52]	@ 0x34
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006324:	81a3      	strh	r3, [r4, #12]
 8006326:	2300      	movs	r3, #0
 8006328:	6063      	str	r3, [r4, #4]
 800632a:	6923      	ldr	r3, [r4, #16]
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	89a3      	ldrh	r3, [r4, #12]
 8006330:	f043 0308 	orr.w	r3, r3, #8
 8006334:	81a3      	strh	r3, [r4, #12]
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	b94b      	cbnz	r3, 800634e <__swsetup_r+0x7a>
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006344:	d003      	beq.n	800634e <__swsetup_r+0x7a>
 8006346:	4621      	mov	r1, r4
 8006348:	4628      	mov	r0, r5
 800634a:	f000 f83f 	bl	80063cc <__smakebuf_r>
 800634e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006352:	f013 0201 	ands.w	r2, r3, #1
 8006356:	d00a      	beq.n	800636e <__swsetup_r+0x9a>
 8006358:	2200      	movs	r2, #0
 800635a:	60a2      	str	r2, [r4, #8]
 800635c:	6962      	ldr	r2, [r4, #20]
 800635e:	4252      	negs	r2, r2
 8006360:	61a2      	str	r2, [r4, #24]
 8006362:	6922      	ldr	r2, [r4, #16]
 8006364:	b942      	cbnz	r2, 8006378 <__swsetup_r+0xa4>
 8006366:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800636a:	d1c5      	bne.n	80062f8 <__swsetup_r+0x24>
 800636c:	bd38      	pop	{r3, r4, r5, pc}
 800636e:	0799      	lsls	r1, r3, #30
 8006370:	bf58      	it	pl
 8006372:	6962      	ldrpl	r2, [r4, #20]
 8006374:	60a2      	str	r2, [r4, #8]
 8006376:	e7f4      	b.n	8006362 <__swsetup_r+0x8e>
 8006378:	2000      	movs	r0, #0
 800637a:	e7f7      	b.n	800636c <__swsetup_r+0x98>
 800637c:	20000018 	.word	0x20000018

08006380 <__swhatbuf_r>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	460c      	mov	r4, r1
 8006384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006388:	2900      	cmp	r1, #0
 800638a:	b096      	sub	sp, #88	@ 0x58
 800638c:	4615      	mov	r5, r2
 800638e:	461e      	mov	r6, r3
 8006390:	da0d      	bge.n	80063ae <__swhatbuf_r+0x2e>
 8006392:	89a3      	ldrh	r3, [r4, #12]
 8006394:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006398:	f04f 0100 	mov.w	r1, #0
 800639c:	bf14      	ite	ne
 800639e:	2340      	movne	r3, #64	@ 0x40
 80063a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063a4:	2000      	movs	r0, #0
 80063a6:	6031      	str	r1, [r6, #0]
 80063a8:	602b      	str	r3, [r5, #0]
 80063aa:	b016      	add	sp, #88	@ 0x58
 80063ac:	bd70      	pop	{r4, r5, r6, pc}
 80063ae:	466a      	mov	r2, sp
 80063b0:	f000 f848 	bl	8006444 <_fstat_r>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	dbec      	blt.n	8006392 <__swhatbuf_r+0x12>
 80063b8:	9901      	ldr	r1, [sp, #4]
 80063ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063c2:	4259      	negs	r1, r3
 80063c4:	4159      	adcs	r1, r3
 80063c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063ca:	e7eb      	b.n	80063a4 <__swhatbuf_r+0x24>

080063cc <__smakebuf_r>:
 80063cc:	898b      	ldrh	r3, [r1, #12]
 80063ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063d0:	079d      	lsls	r5, r3, #30
 80063d2:	4606      	mov	r6, r0
 80063d4:	460c      	mov	r4, r1
 80063d6:	d507      	bpl.n	80063e8 <__smakebuf_r+0x1c>
 80063d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	6123      	str	r3, [r4, #16]
 80063e0:	2301      	movs	r3, #1
 80063e2:	6163      	str	r3, [r4, #20]
 80063e4:	b003      	add	sp, #12
 80063e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e8:	ab01      	add	r3, sp, #4
 80063ea:	466a      	mov	r2, sp
 80063ec:	f7ff ffc8 	bl	8006380 <__swhatbuf_r>
 80063f0:	9f00      	ldr	r7, [sp, #0]
 80063f2:	4605      	mov	r5, r0
 80063f4:	4639      	mov	r1, r7
 80063f6:	4630      	mov	r0, r6
 80063f8:	f7ff f92a 	bl	8005650 <_malloc_r>
 80063fc:	b948      	cbnz	r0, 8006412 <__smakebuf_r+0x46>
 80063fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006402:	059a      	lsls	r2, r3, #22
 8006404:	d4ee      	bmi.n	80063e4 <__smakebuf_r+0x18>
 8006406:	f023 0303 	bic.w	r3, r3, #3
 800640a:	f043 0302 	orr.w	r3, r3, #2
 800640e:	81a3      	strh	r3, [r4, #12]
 8006410:	e7e2      	b.n	80063d8 <__smakebuf_r+0xc>
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	6020      	str	r0, [r4, #0]
 8006416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	9b01      	ldr	r3, [sp, #4]
 800641e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006422:	b15b      	cbz	r3, 800643c <__smakebuf_r+0x70>
 8006424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006428:	4630      	mov	r0, r6
 800642a:	f000 f81d 	bl	8006468 <_isatty_r>
 800642e:	b128      	cbz	r0, 800643c <__smakebuf_r+0x70>
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	f023 0303 	bic.w	r3, r3, #3
 8006436:	f043 0301 	orr.w	r3, r3, #1
 800643a:	81a3      	strh	r3, [r4, #12]
 800643c:	89a3      	ldrh	r3, [r4, #12]
 800643e:	431d      	orrs	r5, r3
 8006440:	81a5      	strh	r5, [r4, #12]
 8006442:	e7cf      	b.n	80063e4 <__smakebuf_r+0x18>

08006444 <_fstat_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	4d07      	ldr	r5, [pc, #28]	@ (8006464 <_fstat_r+0x20>)
 8006448:	2300      	movs	r3, #0
 800644a:	4604      	mov	r4, r0
 800644c:	4608      	mov	r0, r1
 800644e:	4611      	mov	r1, r2
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	f7fa f974 	bl	800073e <_fstat>
 8006456:	1c43      	adds	r3, r0, #1
 8006458:	d102      	bne.n	8006460 <_fstat_r+0x1c>
 800645a:	682b      	ldr	r3, [r5, #0]
 800645c:	b103      	cbz	r3, 8006460 <_fstat_r+0x1c>
 800645e:	6023      	str	r3, [r4, #0]
 8006460:	bd38      	pop	{r3, r4, r5, pc}
 8006462:	bf00      	nop
 8006464:	2000054c 	.word	0x2000054c

08006468 <_isatty_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4d06      	ldr	r5, [pc, #24]	@ (8006484 <_isatty_r+0x1c>)
 800646c:	2300      	movs	r3, #0
 800646e:	4604      	mov	r4, r0
 8006470:	4608      	mov	r0, r1
 8006472:	602b      	str	r3, [r5, #0]
 8006474:	f7fa f973 	bl	800075e <_isatty>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d102      	bne.n	8006482 <_isatty_r+0x1a>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	b103      	cbz	r3, 8006482 <_isatty_r+0x1a>
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	bd38      	pop	{r3, r4, r5, pc}
 8006484:	2000054c 	.word	0x2000054c

08006488 <_init>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	bf00      	nop
 800648c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648e:	bc08      	pop	{r3}
 8006490:	469e      	mov	lr, r3
 8006492:	4770      	bx	lr

08006494 <_fini>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	bf00      	nop
 8006498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649a:	bc08      	pop	{r3}
 800649c:	469e      	mov	lr, r3
 800649e:	4770      	bx	lr

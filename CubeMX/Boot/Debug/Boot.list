
Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004574  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004708  08004708  00005708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004740  08004740  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004740  08004740  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004740  08004740  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004740  08004740  00005740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004744  08004744  00005744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004748  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          000001a0  20000010  20000010  00006010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c223  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000255f  00000000  00000000  00012263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  000147c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000070b  00000000  00000000  00015120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002063f  00000000  00000000  0001582b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebec  00000000  00000000  00035e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0234  00000000  00000000  00044a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00104c8a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000234c  00000000  00000000  00104cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0010701c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080046f0 	.word	0x080046f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080046f0 	.word	0x080046f0

080001d4 <circularBuffer_init>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_init( tCircularBuffer* pBuffer, uint8_t* pData, uint16_t size )
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	4613      	mov	r3, r2
 80001e0:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if ( pBuffer == NULL || pData == NULL || size == 0 )
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d005      	beq.n	80001f4 <circularBuffer_init+0x20>
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d002      	beq.n	80001f4 <circularBuffer_init+0x20>
 80001ee:	88fb      	ldrh	r3, [r7, #6]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d101      	bne.n	80001f8 <circularBuffer_init+0x24>
	{
		return 1;
 80001f4:	2301      	movs	r3, #1
 80001f6:	e014      	b.n	8000222 <circularBuffer_init+0x4e>
	}

	// initialize the buffer
	pBuffer->size 		= size;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	88fa      	ldrh	r2, [r7, #6]
 80001fc:	801a      	strh	r2, [r3, #0]
	pBuffer->start 	= 0;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	2200      	movs	r2, #0
 8000202:	809a      	strh	r2, [r3, #4]
	pBuffer->end   	= 0;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	2200      	movs	r2, #0
 8000208:	805a      	strh	r2, [r3, #2]
	pBuffer->pBuffer 	= pData;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	68ba      	ldr	r2, [r7, #8]
 800020e:	609a      	str	r2, [r3, #8]
	memset( pBuffer->pBuffer, 1, pBuffer->size );
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	6898      	ldr	r0, [r3, #8]
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	881b      	ldrh	r3, [r3, #0]
 8000218:	461a      	mov	r2, r3
 800021a:	2101      	movs	r1, #1
 800021c:	f004 fa2d 	bl	800467a <memset>

	return 0;
 8000220:	2300      	movs	r3, #0
}
 8000222:	4618      	mov	r0, r3
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}

0800022a <circularBuffer_push>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_push( tCircularBuffer* pCbuffer, uint8_t* pInData, uint16_t size )
{
 800022a:	b580      	push	{r7, lr}
 800022c:	b086      	sub	sp, #24
 800022e:	af00      	add	r7, sp, #0
 8000230:	60f8      	str	r0, [r7, #12]
 8000232:	60b9      	str	r1, [r7, #8]
 8000234:	4613      	mov	r3, r2
 8000236:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if( pCbuffer == NULL || pInData == NULL || pCbuffer->size < size )
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d007      	beq.n	800024e <circularBuffer_push+0x24>
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d004      	beq.n	800024e <circularBuffer_push+0x24>
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	88fa      	ldrh	r2, [r7, #6]
 800024a:	429a      	cmp	r2, r3
 800024c:	d901      	bls.n	8000252 <circularBuffer_push+0x28>
	{
		return 1;
 800024e:	2301      	movs	r3, #1
 8000250:	e037      	b.n	80002c2 <circularBuffer_push+0x98>
	 *    n n s d d d d e n n
	 *    d d d e n n n s d d
	 * */

	// do we need to loop over the buffer?
	uint16_t toTheEnd = pCbuffer->size - pCbuffer->end;
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	881a      	ldrh	r2, [r3, #0]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	885b      	ldrh	r3, [r3, #2]
 800025a:	1ad3      	subs	r3, r2, r3
 800025c:	82fb      	strh	r3, [r7, #22]
	uint8_t* pDes = &(*pCbuffer).pBuffer[pCbuffer->end];
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	68fa      	ldr	r2, [r7, #12]
 8000264:	8852      	ldrh	r2, [r2, #2]
 8000266:	4413      	add	r3, r2
 8000268:	613b      	str	r3, [r7, #16]
	if ( toTheEnd < size )
 800026a:	8afa      	ldrh	r2, [r7, #22]
 800026c:	88fb      	ldrh	r3, [r7, #6]
 800026e:	429a      	cmp	r2, r3
 8000270:	d211      	bcs.n	8000296 <circularBuffer_push+0x6c>
	{
		// first copy from the end of the existing data to the end of the buffer
		memcpy( pDes, pInData, toTheEnd );
 8000272:	8afb      	ldrh	r3, [r7, #22]
 8000274:	461a      	mov	r2, r3
 8000276:	68b9      	ldr	r1, [r7, #8]
 8000278:	6938      	ldr	r0, [r7, #16]
 800027a:	f004 fa2b 	bl	80046d4 <memcpy>
		// copy the reset of the inData from the beginning of the buffer.
		memcpy( (*pCbuffer).pBuffer, &pInData[toTheEnd], ( size - toTheEnd ) );
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	6898      	ldr	r0, [r3, #8]
 8000282:	8afb      	ldrh	r3, [r7, #22]
 8000284:	68ba      	ldr	r2, [r7, #8]
 8000286:	18d1      	adds	r1, r2, r3
 8000288:	88fa      	ldrh	r2, [r7, #6]
 800028a:	8afb      	ldrh	r3, [r7, #22]
 800028c:	1ad3      	subs	r3, r2, r3
 800028e:	461a      	mov	r2, r3
 8000290:	f004 fa20 	bl	80046d4 <memcpy>
 8000294:	e005      	b.n	80002a2 <circularBuffer_push+0x78>
	}
	else
	{
		memcpy( pDes, pInData, size );
 8000296:	88fb      	ldrh	r3, [r7, #6]
 8000298:	461a      	mov	r2, r3
 800029a:	68b9      	ldr	r1, [r7, #8]
 800029c:	6938      	ldr	r0, [r7, #16]
 800029e:	f004 fa19 	bl	80046d4 <memcpy>
		//pBuffer->pBuffer[pBuffer->end] = pInData[0];
	}

	pCbuffer->end = ( pCbuffer->end + size ) % pCbuffer->size;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	885b      	ldrh	r3, [r3, #2]
 80002a6:	461a      	mov	r2, r3
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	4413      	add	r3, r2
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	8812      	ldrh	r2, [r2, #0]
 80002b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80002b4:	fb01 f202 	mul.w	r2, r1, r2
 80002b8:	1a9b      	subs	r3, r3, r2
 80002ba:	b29a      	uxth	r2, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	805a      	strh	r2, [r3, #2]

	return 0;
 80002c0:	2300      	movs	r3, #0
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3718      	adds	r7, #24
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <MX_DMA_Init+0x38>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000304 <MX_DMA_Init+0x38>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <MX_DMA_Init+0x38>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2100      	movs	r1, #0
 80002ee:	2010      	movs	r0, #16
 80002f0:	f000 fd27 	bl	8000d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002f4:	2010      	movs	r0, #16
 80002f6:	f000 fd40 	bl	8000d7a <HAL_NVIC_EnableIRQ>

}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <flash_write>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_write( uint32_t Address, uint8_t* pData, uint32_t size )
{
 8000308:	b5b0      	push	{r4, r5, r7, lr}
 800030a:	b08c      	sub	sp, #48	@ 0x30
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
	// check if valid flash address.
	if ( Address < APP_START_ADD || Address > FLASH_END_ADD )
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	4a58      	ldr	r2, [pc, #352]	@ (8000478 <flash_write+0x170>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d903      	bls.n	8000324 <flash_write+0x1c>
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	4a57      	ldr	r2, [pc, #348]	@ (800047c <flash_write+0x174>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d901      	bls.n	8000328 <flash_write+0x20>
	{
		// return if address is not in application flash area.
		return 1;
 8000324:	2301      	movs	r3, #1
 8000326:	e0a2      	b.n	800046e <flash_write+0x166>
	}

	// check for valid input
	if ( pData == NULL && size == 0 )
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d104      	bne.n	8000338 <flash_write+0x30>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d101      	bne.n	8000338 <flash_write+0x30>
	{
		return 1;
 8000334:	2301      	movs	r3, #1
 8000336:	e09a      	b.n	800046e <flash_write+0x166>
	}

	// erase flash area before writing to it.
	flash_erasePage( Address );
 8000338:	68f8      	ldr	r0, [r7, #12]
 800033a:	f000 f8b2 	bl	80004a2 <flash_erasePage>

	HAL_FLASH_Unlock();
 800033e:	f000 ffd5 	bl	80012ec <HAL_FLASH_Unlock>
	uint32_t remaining_bytes = size;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_StatusTypeDef status = HAL_ERROR;
 8000346:	2301      	movs	r3, #1
 8000348:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	uint32_t read_offset = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t write_offset = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t oneByte= 0;
 8000354:	2300      	movs	r3, #0
 8000356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	while( remaining_bytes )
 800035a:	e081      	b.n	8000460 <flash_write+0x158>
	{
		uint64_t inData= 0xffffffffffffffff;
 800035c:	f04f 32ff 	mov.w	r2, #4294967295
 8000360:	f04f 33ff 	mov.w	r3, #4294967295
 8000364:	e9c7 2304 	strd	r2, r3, [r7, #16]
		uint32_t writing_address = Address + write_offset;
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800036c:	4413      	add	r3, r2
 800036e:	61fb      	str	r3, [r7, #28]
		// write double words as long it is possible.
		if ( remaining_bytes >= DOUBLE_WORD )
 8000370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000372:	2b07      	cmp	r3, #7
 8000374:	d91f      	bls.n	80003b6 <flash_write+0xae>
		{
			memcpy (&inData, &pData[read_offset], DOUBLE_WORD);
 8000376:	68ba      	ldr	r2, [r7, #8]
 8000378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800037a:	4413      	add	r3, r2
 800037c:	681c      	ldr	r4, [r3, #0]
 800037e:	685d      	ldr	r5, [r3, #4]
 8000380:	4622      	mov	r2, r4
 8000382:	462b      	mov	r3, r5
 8000384:	e9c7 2304 	strd	r2, r3, [r7, #16]
			status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD, writing_address, inData );
 8000388:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800038c:	69f9      	ldr	r1, [r7, #28]
 800038e:	2003      	movs	r0, #3
 8000390:	f000 ff3c 	bl	800120c <HAL_FLASH_Program>
 8000394:	4603      	mov	r3, r0
 8000396:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			if ( status == HAL_OK )
 800039a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d15e      	bne.n	8000460 <flash_write+0x158>
			{
				remaining_bytes -= DOUBLE_WORD;
 80003a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003a4:	3b08      	subs	r3, #8
 80003a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				read_offset 	+= DOUBLE_WORD;
 80003a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003aa:	3308      	adds	r3, #8
 80003ac:	62bb      	str	r3, [r7, #40]	@ 0x28
				write_offset	+= DOUBLE_WORD;
 80003ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003b0:	3308      	adds	r3, #8
 80003b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80003b4:	e054      	b.n	8000460 <flash_write+0x158>
			}
		}
		// then write single word
		else if ( remaining_bytes >= ONE_WORD )
 80003b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	d91b      	bls.n	80003f4 <flash_write+0xec>
		{
			memcpy (&inData, &pData[read_offset], ONE_WORD);
 80003bc:	68ba      	ldr	r2, [r7, #8]
 80003be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003c0:	4413      	add	r3, r2
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	613b      	str	r3, [r7, #16]
			status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD, writing_address, inData );
 80003c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80003ca:	69f9      	ldr	r1, [r7, #28]
 80003cc:	2002      	movs	r0, #2
 80003ce:	f000 ff1d 	bl	800120c <HAL_FLASH_Program>
 80003d2:	4603      	mov	r3, r0
 80003d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			if ( status == HAL_OK )
 80003d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d13f      	bne.n	8000460 <flash_write+0x158>
			{
				remaining_bytes -= ONE_WORD;
 80003e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003e2:	3b04      	subs	r3, #4
 80003e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
				read_offset 	+= ONE_WORD;
 80003e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003e8:	3304      	adds	r3, #4
 80003ea:	62bb      	str	r3, [r7, #40]	@ 0x28
				write_offset	+= ONE_WORD;
 80003ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003ee:	3304      	adds	r3, #4
 80003f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80003f2:	e035      	b.n	8000460 <flash_write+0x158>
			}
		}
		// lastly, write half word
		else
		{
			if ( remaining_bytes >= HALF_WORD )
 80003f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d906      	bls.n	8000408 <flash_write+0x100>
				memcpy (&inData, &pData[read_offset], HALF_WORD);
 80003fa:	68ba      	ldr	r2, [r7, #8]
 80003fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003fe:	4413      	add	r3, r2
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	b29b      	uxth	r3, r3
 8000404:	823b      	strh	r3, [r7, #16]
 8000406:	e007      	b.n	8000418 <flash_write+0x110>
			else
			{
				// if there is only one byte, move it to inData.
				memcpy (&inData, &pData[read_offset], 1);
 8000408:	68ba      	ldr	r2, [r7, #8]
 800040a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800040c:	4413      	add	r3, r2
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	743b      	strb	r3, [r7, #16]
				oneByte = 1;
 8000412:	2301      	movs	r3, #1
 8000414:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			}
			status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, writing_address, inData );
 8000418:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800041c:	69f9      	ldr	r1, [r7, #28]
 800041e:	2001      	movs	r0, #1
 8000420:	f000 fef4 	bl	800120c <HAL_FLASH_Program>
 8000424:	4603      	mov	r3, r0
 8000426:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			if ( status == HAL_OK )
 800042a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800042e:	2b00      	cmp	r3, #0
 8000430:	d116      	bne.n	8000460 <flash_write+0x158>
			{
				if ( oneByte == 1 )
 8000432:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000436:	2b01      	cmp	r3, #1
 8000438:	d109      	bne.n	800044e <flash_write+0x146>
				{
					remaining_bytes -= 1;
 800043a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800043c:	3b01      	subs	r3, #1
 800043e:	62fb      	str	r3, [r7, #44]	@ 0x2c
					read_offset 	+= 1;
 8000440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000442:	3301      	adds	r3, #1
 8000444:	62bb      	str	r3, [r7, #40]	@ 0x28
					write_offset	+= 1;
 8000446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000448:	3301      	adds	r3, #1
 800044a:	627b      	str	r3, [r7, #36]	@ 0x24
 800044c:	e008      	b.n	8000460 <flash_write+0x158>
				}
				else
				{
					remaining_bytes -= HALF_WORD;
 800044e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000450:	3b02      	subs	r3, #2
 8000452:	62fb      	str	r3, [r7, #44]	@ 0x2c
					read_offset 	+= HALF_WORD;
 8000454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000456:	3302      	adds	r3, #2
 8000458:	62bb      	str	r3, [r7, #40]	@ 0x28
					write_offset	+= HALF_WORD;
 800045a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800045c:	3302      	adds	r3, #2
 800045e:	627b      	str	r3, [r7, #36]	@ 0x24
	while( remaining_bytes )
 8000460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000462:	2b00      	cmp	r3, #0
 8000464:	f47f af7a 	bne.w	800035c <flash_write+0x54>
			}
		}

	}

	HAL_FLASH_Lock();
 8000468:	f000 ff66 	bl	8001338 <HAL_FLASH_Lock>

	return 0;
 800046c:	2300      	movs	r3, #0
}
 800046e:	4618      	mov	r0, r3
 8000470:	3730      	adds	r7, #48	@ 0x30
 8000472:	46bd      	mov	sp, r7
 8000474:	bdb0      	pop	{r4, r5, r7, pc}
 8000476:	bf00      	nop
 8000478:	0803ffff 	.word	0x0803ffff
 800047c:	08080000 	.word	0x08080000

08000480 <flash_read>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_read(uint32_t address, uint8_t* pData, uint32_t size)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	60f8      	str	r0, [r7, #12]
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
	memcpy( pData, address, size );
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	4619      	mov	r1, r3
 8000492:	68b8      	ldr	r0, [r7, #8]
 8000494:	f004 f91e 	bl	80046d4 <memcpy>
	return 0;
 8000498:	2300      	movs	r3, #0
}
 800049a:	4618      	mov	r0, r3
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <flash_erasePage>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_erasePage( uint32_t Address )
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b088      	sub	sp, #32
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
	// find page start address.
	uint32_t pageStartAddress = ( Address / FLASH_PAGE_SIZE ) * FLASH_PAGE_SIZE;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80004b0:	f023 0307 	bic.w	r3, r3, #7
 80004b4:	61fb      	str	r3, [r7, #28]
	uint8_t nrPages = 1;
 80004b6:	2301      	movs	r3, #1
 80004b8:	76fb      	strb	r3, [r7, #27]


	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages 		= nrPages;
 80004ba:	7efb      	ldrb	r3, [r7, #27]
 80004bc:	617b      	str	r3, [r7, #20]
	eraseInit.PageAddress 	= pageStartAddress;
 80004be:	69fb      	ldr	r3, [r7, #28]
 80004c0:	613b      	str	r3, [r7, #16]
	eraseInit.TypeErase 	= FLASH_TYPEERASE_PAGES;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]

	uint32_t pageError;

	HAL_FLASH_Unlock();
 80004c6:	f000 ff11 	bl	80012ec <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase( &eraseInit, &pageError);
 80004ca:	f107 0208 	add.w	r2, r7, #8
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 ffcd 	bl	8001474 <HAL_FLASHEx_Erase>
 80004da:	4603      	mov	r3, r0
 80004dc:	76bb      	strb	r3, [r7, #26]
	HAL_FLASH_Lock();
 80004de:	f000 ff2b 	bl	8001338 <HAL_FLASH_Lock>
	if ( status != HAL_OK )
 80004e2:	7ebb      	ldrb	r3, [r7, #26]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <flash_erasePage+0x4a>
		return 1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	e000      	b.n	80004ee <flash_erasePage+0x4c>

	return 0;
 80004ec:	2300      	movs	r3, #0
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3720      	adds	r7, #32
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	@ 0x28
 80004fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	4b4b      	ldr	r3, [pc, #300]	@ (800063c <MX_GPIO_Init+0x144>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a4a      	ldr	r2, [pc, #296]	@ (800063c <MX_GPIO_Init+0x144>)
 8000514:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b48      	ldr	r3, [pc, #288]	@ (800063c <MX_GPIO_Init+0x144>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000526:	4b45      	ldr	r3, [pc, #276]	@ (800063c <MX_GPIO_Init+0x144>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a44      	ldr	r2, [pc, #272]	@ (800063c <MX_GPIO_Init+0x144>)
 800052c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b42      	ldr	r3, [pc, #264]	@ (800063c <MX_GPIO_Init+0x144>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b3f      	ldr	r3, [pc, #252]	@ (800063c <MX_GPIO_Init+0x144>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a3e      	ldr	r2, [pc, #248]	@ (800063c <MX_GPIO_Init+0x144>)
 8000544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b3c      	ldr	r3, [pc, #240]	@ (800063c <MX_GPIO_Init+0x144>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b39      	ldr	r3, [pc, #228]	@ (800063c <MX_GPIO_Init+0x144>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a38      	ldr	r2, [pc, #224]	@ (800063c <MX_GPIO_Init+0x144>)
 800055c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b36      	ldr	r3, [pc, #216]	@ (800063c <MX_GPIO_Init+0x144>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	4b33      	ldr	r3, [pc, #204]	@ (800063c <MX_GPIO_Init+0x144>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a32      	ldr	r2, [pc, #200]	@ (800063c <MX_GPIO_Init+0x144>)
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b30      	ldr	r3, [pc, #192]	@ (800063c <MX_GPIO_Init+0x144>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2120      	movs	r1, #32
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f001 f99f 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000592:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000598:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	4825      	ldr	r0, [pc, #148]	@ (8000640 <MX_GPIO_Init+0x148>)
 80005aa:	f001 f807 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005ae:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80005b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b4:	2303      	movs	r3, #3
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	481f      	ldr	r0, [pc, #124]	@ (8000640 <MX_GPIO_Init+0x148>)
 80005c4:	f000 fffa 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80005c8:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 80005cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e0:	f000 ffec 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005e4:	2320      	movs	r3, #32
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fe:	f000 ffdd 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000602:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8000606:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000608:	2303      	movs	r3, #3
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	480b      	ldr	r0, [pc, #44]	@ (8000644 <MX_GPIO_Init+0x14c>)
 8000618:	f000 ffd0 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800061c:	2304      	movs	r3, #4
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000620:	2303      	movs	r3, #3
 8000622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	4806      	ldr	r0, [pc, #24]	@ (8000648 <MX_GPIO_Init+0x150>)
 8000630:	f000 ffc4 	bl	80015bc <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	@ 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	48000800 	.word	0x48000800
 8000644:	48000400 	.word	0x48000400
 8000648:	48000c00 	.word	0x48000c00

0800064c <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
	if ( huart->Instance == USART2 )
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a14      	ldr	r2, [pc, #80]	@ (80006b0 <HAL_UARTEx_RxEventCallback+0x64>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d122      	bne.n	80006a8 <HAL_UARTEx_RxEventCallback+0x5c>
	{
		// copy data to circular buffer;
		circularBuffer_push( &cbuffer, uart_dma_rxBuf, Size );
 8000662:	887b      	ldrh	r3, [r7, #2]
 8000664:	461a      	mov	r2, r3
 8000666:	4913      	ldr	r1, [pc, #76]	@ (80006b4 <HAL_UARTEx_RxEventCallback+0x68>)
 8000668:	4813      	ldr	r0, [pc, #76]	@ (80006b8 <HAL_UARTEx_RxEventCallback+0x6c>)
 800066a:	f7ff fdde 	bl	800022a <circularBuffer_push>
		flash_write( flash_at, &cbuffer.pBuffer[cbuffer.start], Size );
 800066e:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <HAL_UARTEx_RxEventCallback+0x70>)
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	4a10      	ldr	r2, [pc, #64]	@ (80006b8 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000678:	8892      	ldrh	r2, [r2, #4]
 800067a:	4413      	add	r3, r2
 800067c:	887a      	ldrh	r2, [r7, #2]
 800067e:	4619      	mov	r1, r3
 8000680:	f7ff fe42 	bl	8000308 <flash_write>
		data_written = 1;
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <HAL_UARTEx_RxEventCallback+0x74>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
		data_size = Size;
 800068a:	887b      	ldrh	r3, [r7, #2]
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0x78>)
 8000690:	701a      	strb	r2, [r3, #0]
		flash_at += Size;
 8000692:	887a      	ldrh	r2, [r7, #2]
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <HAL_UARTEx_RxEventCallback+0x70>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4413      	add	r3, r2
 800069a:	4a08      	ldr	r2, [pc, #32]	@ (80006bc <HAL_UARTEx_RxEventCallback+0x70>)
 800069c:	6013      	str	r3, [r2, #0]

		// restart receiving data.
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart_dma_rxBuf, RX_BUF_SIZE);
 800069e:	2240      	movs	r2, #64	@ 0x40
 80006a0:	4904      	ldr	r1, [pc, #16]	@ (80006b4 <HAL_UARTEx_RxEventCallback+0x68>)
 80006a2:	4809      	ldr	r0, [pc, #36]	@ (80006c8 <HAL_UARTEx_RxEventCallback+0x7c>)
 80006a4:	f003 ff95 	bl	80045d2 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40004400 	.word	0x40004400
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	200000ac 	.word	0x200000ac
 80006bc:	20000000 	.word	0x20000000
 80006c0:	200000b8 	.word	0x200000b8
 80006c4:	200000b9 	.word	0x200000b9
 80006c8:	200000bc 	.word	0x200000bc

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b092      	sub	sp, #72	@ 0x48
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 f9f5 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d6:	f000 f847 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f7ff ff0d 	bl	80004f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006de:	f7ff fdf5 	bl	80002cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006e2:	f000 f91f 	bl	8000924 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  circularBuffer_init( &cbuffer, cData , BUF_SIZE );
 80006e6:	2240      	movs	r2, #64	@ 0x40
 80006e8:	4918      	ldr	r1, [pc, #96]	@ (800074c <main+0x80>)
 80006ea:	4819      	ldr	r0, [pc, #100]	@ (8000750 <main+0x84>)
 80006ec:	f7ff fd72 	bl	80001d4 <circularBuffer_init>

  HAL_UARTEx_ReceiveToIdle_DMA( &huart2, uart_dma_rxBuf, RX_BUF_SIZE );
 80006f0:	2240      	movs	r2, #64	@ 0x40
 80006f2:	4918      	ldr	r1, [pc, #96]	@ (8000754 <main+0x88>)
 80006f4:	4818      	ldr	r0, [pc, #96]	@ (8000758 <main+0x8c>)
 80006f6:	f003 ff6c 	bl	80045d2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT( huart2.hdmarx, DMA_IT_HT );	// not interested of half transfer interrupt.
 80006fa:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <main+0x8c>)
 80006fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <main+0x8c>)
 8000704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f022 0204 	bic.w	r2, r2, #4
 800070c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t pFlash_data[BUF_SIZE];
  while (1)
  {
	  if ( data_written == 1 )
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <main+0x90>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d1fb      	bne.n	800070e <main+0x42>
	  {
		  uint32_t read_at = (flash_at - data_size);
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <main+0x94>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <main+0x98>)
 800071c:	7812      	ldrb	r2, [r2, #0]
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	647b      	str	r3, [r7, #68]	@ 0x44
		  flash_read( read_at , pFlash_data, data_size);
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <main+0x98>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	461a      	mov	r2, r3
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800072e:	f7ff fea7 	bl	8000480 <flash_read>
		  HAL_UART_Transmit(&huart2, pFlash_data, data_size, HAL_MAX_DELAY);
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <main+0x98>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	1d39      	adds	r1, r7, #4
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	4806      	ldr	r0, [pc, #24]	@ (8000758 <main+0x8c>)
 8000740:	f002 fdbe 	bl	80032c0 <HAL_UART_Transmit>
		  data_written = 0;
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <main+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
	  if ( data_written == 1 )
 800074a:	e7e0      	b.n	800070e <main+0x42>
 800074c:	2000006c 	.word	0x2000006c
 8000750:	200000ac 	.word	0x200000ac
 8000754:	2000002c 	.word	0x2000002c
 8000758:	200000bc 	.word	0x200000bc
 800075c:	200000b8 	.word	0x200000b8
 8000760:	20000000 	.word	0x20000000
 8000764:	200000b9 	.word	0x200000b9

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b0a6      	sub	sp, #152	@ 0x98
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000772:	2228      	movs	r2, #40	@ 0x28
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f003 ff7f 	bl	800467a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2258      	movs	r2, #88	@ 0x58
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f003 ff71 	bl	800467a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2310      	movs	r3, #16
 80007a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007b4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 f89a 	bl	8001900 <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007d2:	f000 f827 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007f0:	2102      	movs	r1, #2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 f8d8 	bl	80029a8 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007fe:	f000 f811 	bl	8000824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000802:	2302      	movs	r3, #2
 8000804:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	4618      	mov	r0, r3
 800080e:	f002 faeb 	bl	8002de8 <HAL_RCCEx_PeriphCLKConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000818:	f000 f804 	bl	8000824 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3798      	adds	r7, #152	@ 0x98
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <HAL_MspInit+0x44>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4a0e      	ldr	r2, [pc, #56]	@ (8000874 <HAL_MspInit+0x44>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6193      	str	r3, [r2, #24]
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <HAL_MspInit+0x44>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <HAL_MspInit+0x44>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a08      	ldr	r2, [pc, #32]	@ (8000874 <HAL_MspInit+0x44>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_MspInit+0x44>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000866:	2007      	movs	r0, #7
 8000868:	f000 fa60 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <NMI_Handler+0x4>

08000880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <UsageFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 f93d 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008dc:	4802      	ldr	r0, [pc, #8]	@ (80008e8 <DMA1_Channel6_IRQHandler+0x10>)
 80008de:	f000 fb88 	bl	8000ff2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000144 	.word	0x20000144

080008ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <USART2_IRQHandler+0x10>)
 80008f2:	f002 fd6f 	bl	80033d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000bc 	.word	0x200000bc

08000900 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <MX_USART2_UART_Init+0x58>)
 800092a:	4a15      	ldr	r2, [pc, #84]	@ (8000980 <MX_USART2_UART_Init+0x5c>)
 800092c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092e:	4b13      	ldr	r3, [pc, #76]	@ (800097c <MX_USART2_UART_Init+0x58>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_USART2_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_USART2_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <MX_USART2_UART_Init+0x58>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b09      	ldr	r3, [pc, #36]	@ (800097c <MX_USART2_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <MX_USART2_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_USART2_UART_Init+0x58>)
 8000968:	f002 fc5c 	bl	8003224 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000972:	f7ff ff57 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000bc 	.word	0x200000bc
 8000980:	40004400 	.word	0x40004400

08000984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a2e      	ldr	r2, [pc, #184]	@ (8000a5c <HAL_UART_MspInit+0xd8>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d156      	bne.n	8000a54 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <HAL_UART_MspInit+0xdc>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	4a2d      	ldr	r2, [pc, #180]	@ (8000a60 <HAL_UART_MspInit+0xdc>)
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b0:	61d3      	str	r3, [r2, #28]
 80009b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <HAL_UART_MspInit+0xdc>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <HAL_UART_MspInit+0xdc>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	4a27      	ldr	r2, [pc, #156]	@ (8000a60 <HAL_UART_MspInit+0xdc>)
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c8:	6153      	str	r3, [r2, #20]
 80009ca:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <HAL_UART_MspInit+0xdc>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d6:	230c      	movs	r3, #12
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e6:	2307      	movs	r3, #7
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f4:	f000 fde2 	bl	80015bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <HAL_UART_MspInit+0xe0>)
 80009fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <HAL_UART_MspInit+0xe4>)
 80009fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009fe:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <HAL_UART_MspInit+0xe0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a04:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <HAL_UART_MspInit+0xe0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <HAL_UART_MspInit+0xe0>)
 8000a0c:	2280      	movs	r2, #128	@ 0x80
 8000a0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a10:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <HAL_UART_MspInit+0xe0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a16:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <HAL_UART_MspInit+0xe0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <HAL_UART_MspInit+0xe0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <HAL_UART_MspInit+0xe0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a28:	480e      	ldr	r0, [pc, #56]	@ (8000a64 <HAL_UART_MspInit+0xe0>)
 8000a2a:	f000 f9c0 	bl	8000dae <HAL_DMA_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000a34:	f7ff fef6 	bl	8000824 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_UART_MspInit+0xe0>)
 8000a3c:	675a      	str	r2, [r3, #116]	@ 0x74
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <HAL_UART_MspInit+0xe0>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2026      	movs	r0, #38	@ 0x26
 8000a4a:	f000 f97a 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a4e:	2026      	movs	r0, #38	@ 0x26
 8000a50:	f000 f993 	bl	8000d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	@ 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	40021000 	.word	0x40021000
 8000a64:	20000144 	.word	0x20000144
 8000a68:	4002006c 	.word	0x4002006c

08000a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a70:	f7ff ff46 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	@ (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f003 fdf7 	bl	800468c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9e:	f7ff fe15 	bl	80006cc <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ab0:	08004748 	.word	0x08004748
  ldr r2, =_sbss
 8000ab4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ab8:	200001b0 	.word	0x200001b0

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <HAL_Init+0x28>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	@ (8000ae8 <HAL_Init+0x28>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f92b 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fea8 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f943 	bl	8000d96 <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f90b 	bl	8000d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	@ (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000004 	.word	0x20000004
 8000b44:	2000000c 	.word	0x2000000c
 8000b48:	20000008 	.word	0x20000008

08000b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	2000000c 	.word	0x2000000c
 8000b70:	20000188 	.word	0x20000188

08000b74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000188 	.word	0x20000188

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0b      	blt.n	8000c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 021f 	and.w	r2, r3, #31
 8000c08:	4907      	ldr	r1, [pc, #28]	@ (8000c28 <__NVIC_EnableIRQ+0x38>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	2001      	movs	r0, #1
 8000c12:	fa00 f202 	lsl.w	r2, r0, r2
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0a      	blt.n	8000c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	490c      	ldr	r1, [pc, #48]	@ (8000c78 <__NVIC_SetPriority+0x4c>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c54:	e00a      	b.n	8000c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4908      	ldr	r1, [pc, #32]	@ (8000c7c <__NVIC_SetPriority+0x50>)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	3b04      	subs	r3, #4
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	761a      	strb	r2, [r3, #24]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	@ 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	bf28      	it	cs
 8000c9e:	2304      	movcs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d902      	bls.n	8000cb0 <NVIC_EncodePriority+0x30>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3b03      	subs	r3, #3
 8000cae:	e000      	b.n	8000cb2 <NVIC_EncodePriority+0x32>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	4313      	orrs	r3, r2
         );
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3724      	adds	r7, #36	@ 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cf8:	d301      	bcc.n	8000cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00f      	b.n	8000d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <SysTick_Config+0x40>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d06:	210f      	movs	r1, #15
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f7ff ff8e 	bl	8000c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <SysTick_Config+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <SysTick_Config+0x40>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff29 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d54:	f7ff ff3e 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff ff8e 	bl	8000c80 <NVIC_EncodePriority>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff5d 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff31 	bl	8000bf0 <__NVIC_EnableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffa2 	bl	8000ce8 <SysTick_Config>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b084      	sub	sp, #16
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d101      	bne.n	8000dc4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e037      	b.n	8000e34 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000dda:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000dde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f9bc 	bl	8001194 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d101      	bne.n	8000e5c <HAL_DMA_Start_IT+0x20>
 8000e58:	2302      	movs	r3, #2
 8000e5a:	e04a      	b.n	8000ef2 <HAL_DMA_Start_IT+0xb6>
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d13a      	bne.n	8000ee4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2202      	movs	r2, #2
 8000e72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0201 	bic.w	r2, r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f000 f950 	bl	8001138 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d008      	beq.n	8000eb2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 020e 	orr.w	r2, r2, #14
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e00f      	b.n	8000ed2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f042 020a 	orr.w	r2, r2, #10
 8000ec0:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0204 	bic.w	r2, r2, #4
 8000ed0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f042 0201 	orr.w	r2, r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	e005      	b.n	8000ef0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000eec:	2302      	movs	r3, #2
 8000eee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e02e      	b.n	8000f6a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d008      	beq.n	8000f28 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2204      	movs	r2, #4
 8000f1a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e020      	b.n	8000f6a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 020e 	bic.w	r2, r2, #14
 8000f36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f50:	2101      	movs	r1, #1
 8000f52:	fa01 f202 	lsl.w	r2, r1, r2
 8000f56:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d005      	beq.n	8000f98 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2204      	movs	r2, #4
 8000f90:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e027      	b.n	8000fe8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 020e 	bic.w	r2, r2, #14
 8000fa6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0201 	bic.w	r2, r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	4798      	blx	r3
    }
  }
  return status;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	2204      	movs	r2, #4
 8001010:	409a      	lsls	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d024      	beq.n	8001064 <HAL_DMA_IRQHandler+0x72>
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	d01f      	beq.n	8001064 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0320 	and.w	r3, r3, #32
 800102e:	2b00      	cmp	r3, #0
 8001030:	d107      	bne.n	8001042 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0204 	bic.w	r2, r2, #4
 8001040:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800104a:	2104      	movs	r1, #4
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001056:	2b00      	cmp	r3, #0
 8001058:	d06a      	beq.n	8001130 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001062:	e065      	b.n	8001130 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	2202      	movs	r2, #2
 800106a:	409a      	lsls	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4013      	ands	r3, r2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d02c      	beq.n	80010ce <HAL_DMA_IRQHandler+0xdc>
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d027      	beq.n	80010ce <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10b      	bne.n	80010a4 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 020a 	bic.w	r2, r2, #10
 800109a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010ac:	2102      	movs	r1, #2
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d035      	beq.n	8001130 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80010cc:	e030      	b.n	8001130 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	2208      	movs	r2, #8
 80010d4:	409a      	lsls	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4013      	ands	r3, r2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d028      	beq.n	8001130 <HAL_DMA_IRQHandler+0x13e>
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d023      	beq.n	8001130 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 020e 	bic.w	r2, r2, #14
 80010f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001100:	2101      	movs	r1, #1
 8001102:	fa01 f202 	lsl.w	r2, r1, r2
 8001106:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	4798      	blx	r3
    }
  }
}
 800112e:	e7ff      	b.n	8001130 <HAL_DMA_IRQHandler+0x13e>
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b10      	cmp	r3, #16
 8001164:	d108      	bne.n	8001178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001176:	e007      	b.n	8001188 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	60da      	str	r2, [r3, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <DMA_CalcBaseAndBitshift+0x60>)
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d80f      	bhi.n	80011c8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <DMA_CalcBaseAndBitshift+0x64>)
 80011b0:	4413      	add	r3, r2
 80011b2:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <DMA_CalcBaseAndBitshift+0x68>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	009a      	lsls	r2, r3, #2
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001200 <DMA_CalcBaseAndBitshift+0x6c>)
 80011c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80011c6:	e00e      	b.n	80011e6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <DMA_CalcBaseAndBitshift+0x70>)
 80011d0:	4413      	add	r3, r2
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <DMA_CalcBaseAndBitshift+0x68>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	009a      	lsls	r2, r3, #2
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a09      	ldr	r2, [pc, #36]	@ (8001208 <DMA_CalcBaseAndBitshift+0x74>)
 80011e4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40020407 	.word	0x40020407
 80011f8:	bffdfff8 	.word	0xbffdfff8
 80011fc:	cccccccd 	.word	0xcccccccd
 8001200:	40020000 	.word	0x40020000
 8001204:	bffdfbf8 	.word	0xbffdfbf8
 8001208:	40020400 	.word	0x40020400

0800120c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001226:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <HAL_FLASH_Program+0xd8>)
 8001228:	7e1b      	ldrb	r3, [r3, #24]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_FLASH_Program+0x26>
 800122e:	2302      	movs	r3, #2
 8001230:	e054      	b.n	80012dc <HAL_FLASH_Program+0xd0>
 8001232:	4b2c      	ldr	r3, [pc, #176]	@ (80012e4 <HAL_FLASH_Program+0xd8>)
 8001234:	2201      	movs	r2, #1
 8001236:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001238:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800123c:	f000 f8a8 	bl	8001390 <FLASH_WaitForLastOperation>
 8001240:	4603      	mov	r3, r0
 8001242:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d144      	bne.n	80012d4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d102      	bne.n	8001256 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001250:	2301      	movs	r3, #1
 8001252:	757b      	strb	r3, [r7, #21]
 8001254:	e007      	b.n	8001266 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d102      	bne.n	8001262 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800125c:	2302      	movs	r3, #2
 800125e:	757b      	strb	r3, [r7, #21]
 8001260:	e001      	b.n	8001266 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001262:	2304      	movs	r3, #4
 8001264:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001266:	2300      	movs	r3, #0
 8001268:	75bb      	strb	r3, [r7, #22]
 800126a:	e02d      	b.n	80012c8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800126c:	7dbb      	ldrb	r3, [r7, #22]
 800126e:	005a      	lsls	r2, r3, #1
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	eb02 0c03 	add.w	ip, r2, r3
 8001276:	7dbb      	ldrb	r3, [r7, #22]
 8001278:	0119      	lsls	r1, r3, #4
 800127a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800127e:	f1c1 0620 	rsb	r6, r1, #32
 8001282:	f1a1 0020 	sub.w	r0, r1, #32
 8001286:	fa22 f401 	lsr.w	r4, r2, r1
 800128a:	fa03 f606 	lsl.w	r6, r3, r6
 800128e:	4334      	orrs	r4, r6
 8001290:	fa23 f000 	lsr.w	r0, r3, r0
 8001294:	4304      	orrs	r4, r0
 8001296:	fa23 f501 	lsr.w	r5, r3, r1
 800129a:	b2a3      	uxth	r3, r4
 800129c:	4619      	mov	r1, r3
 800129e:	4660      	mov	r0, ip
 80012a0:	f000 f85a 	bl	8001358 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80012a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80012a8:	f000 f872 	bl	8001390 <FLASH_WaitForLastOperation>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80012b0:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <HAL_FLASH_Program+0xdc>)
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <HAL_FLASH_Program+0xdc>)
 80012b6:	f023 0301 	bic.w	r3, r3, #1
 80012ba:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d107      	bne.n	80012d2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80012c2:	7dbb      	ldrb	r3, [r7, #22]
 80012c4:	3301      	adds	r3, #1
 80012c6:	75bb      	strb	r3, [r7, #22]
 80012c8:	7dba      	ldrb	r2, [r7, #22]
 80012ca:	7d7b      	ldrb	r3, [r7, #21]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d3cd      	bcc.n	800126c <HAL_FLASH_Program+0x60>
 80012d0:	e000      	b.n	80012d4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80012d2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <HAL_FLASH_Program+0xd8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	761a      	strb	r2, [r3, #24]

  return status;
 80012da:	7dfb      	ldrb	r3, [r7, #23]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	371c      	adds	r7, #28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e4:	20000190 	.word	0x20000190
 80012e8:	40022000 	.word	0x40022000

080012ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012f6:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <HAL_FLASH_Unlock+0x40>)
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00d      	beq.n	800131e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001302:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <HAL_FLASH_Unlock+0x40>)
 8001304:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <HAL_FLASH_Unlock+0x44>)
 8001306:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <HAL_FLASH_Unlock+0x40>)
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <HAL_FLASH_Unlock+0x48>)
 800130c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <HAL_FLASH_Unlock+0x40>)
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800131e:	79fb      	ldrb	r3, [r7, #7]
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40022000 	.word	0x40022000
 8001330:	45670123 	.word	0x45670123
 8001334:	cdef89ab 	.word	0xcdef89ab

08001338 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_FLASH_Lock+0x1c>)
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <HAL_FLASH_Lock+0x1c>)
 8001342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001346:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40022000 	.word	0x40022000

08001358 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <FLASH_Program_HalfWord+0x30>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <FLASH_Program_HalfWord+0x34>)
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	4a07      	ldr	r2, [pc, #28]	@ (800138c <FLASH_Program_HalfWord+0x34>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	887a      	ldrh	r2, [r7, #2]
 800137a:	801a      	strh	r2, [r3, #0]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	20000190 	.word	0x20000190
 800138c:	40022000 	.word	0x40022000

08001390 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff fbec 	bl	8000b74 <HAL_GetTick>
 800139c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800139e:	e010      	b.n	80013c2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a6:	d00c      	beq.n	80013c2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <FLASH_WaitForLastOperation+0x2e>
 80013ae:	f7ff fbe1 	bl	8000b74 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d201      	bcs.n	80013c2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e01f      	b.n	8001402 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013c2:	4b12      	ldr	r3, [pc, #72]	@ (800140c <FLASH_WaitForLastOperation+0x7c>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d0e8      	beq.n	80013a0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <FLASH_WaitForLastOperation+0x7c>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f003 0320 	and.w	r3, r3, #32
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	d102      	bne.n	80013e0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <FLASH_WaitForLastOperation+0x7c>)
 80013dc:	2220      	movs	r2, #32
 80013de:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80013e0:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <FLASH_WaitForLastOperation+0x7c>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b10      	cmp	r3, #16
 80013ea:	d005      	beq.n	80013f8 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <FLASH_WaitForLastOperation+0x7c>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d103      	bne.n	8001400 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80013f8:	f000 f80a 	bl	8001410 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000

08001410 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <FLASH_SetErrorCode+0x5c>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b10      	cmp	r3, #16
 8001424:	d109      	bne.n	800143a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <FLASH_SetErrorCode+0x60>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	4a10      	ldr	r2, [pc, #64]	@ (8001470 <FLASH_SetErrorCode+0x60>)
 8001430:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f043 0310 	orr.w	r3, r3, #16
 8001438:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <FLASH_SetErrorCode+0x5c>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b04      	cmp	r3, #4
 8001444:	d109      	bne.n	800145a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001446:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <FLASH_SetErrorCode+0x60>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	4a08      	ldr	r2, [pc, #32]	@ (8001470 <FLASH_SetErrorCode+0x60>)
 8001450:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800145a:	4a04      	ldr	r2, [pc, #16]	@ (800146c <FLASH_SetErrorCode+0x5c>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	60d3      	str	r3, [r2, #12]
}  
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40022000 	.word	0x40022000
 8001470:	20000190 	.word	0x20000190

08001474 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001486:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <HAL_FLASHEx_Erase+0xcc>)
 8001488:	7e1b      	ldrb	r3, [r3, #24]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d101      	bne.n	8001492 <HAL_FLASHEx_Erase+0x1e>
 800148e:	2302      	movs	r3, #2
 8001490:	e052      	b.n	8001538 <HAL_FLASHEx_Erase+0xc4>
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <HAL_FLASHEx_Erase+0xcc>)
 8001494:	2201      	movs	r2, #1
 8001496:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d115      	bne.n	80014cc <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80014a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80014a4:	f7ff ff74 	bl	8001390 <FLASH_WaitForLastOperation>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d140      	bne.n	8001530 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80014ae:	f000 f84b 	bl	8001548 <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014b2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80014b6:	f7ff ff6b 	bl	8001390 <FLASH_WaitForLastOperation>
 80014ba:	4603      	mov	r3, r0
 80014bc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80014be:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <HAL_FLASHEx_Erase+0xd0>)
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	4a20      	ldr	r2, [pc, #128]	@ (8001544 <HAL_FLASHEx_Erase+0xd0>)
 80014c4:	f023 0304 	bic.w	r3, r3, #4
 80014c8:	6113      	str	r3, [r2, #16]
 80014ca:	e031      	b.n	8001530 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80014cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80014d0:	f7ff ff5e 	bl	8001390 <FLASH_WaitForLastOperation>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d12a      	bne.n	8001530 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	e019      	b.n	800151e <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f000 f846 	bl	800157c <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80014f4:	f7ff ff4c 	bl	8001390 <FLASH_WaitForLastOperation>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_FLASHEx_Erase+0xd0>)
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	4a10      	ldr	r2, [pc, #64]	@ (8001544 <HAL_FLASHEx_Erase+0xd0>)
 8001502:	f023 0302 	bic.w	r3, r3, #2
 8001506:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	601a      	str	r2, [r3, #0]
            break;
 8001514:	e00c      	b.n	8001530 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800151c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	02da      	lsls	r2, r3, #11
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4413      	add	r3, r2
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3dc      	bcc.n	80014ea <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001530:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <HAL_FLASHEx_Erase+0xcc>)
 8001532:	2200      	movs	r2, #0
 8001534:	761a      	strb	r2, [r3, #24]

  return status;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000190 	.word	0x20000190
 8001544:	40022000 	.word	0x40022000

08001548 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <FLASH_MassErase+0x2c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <FLASH_MassErase+0x30>)
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <FLASH_MassErase+0x30>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <FLASH_MassErase+0x30>)
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <FLASH_MassErase+0x30>)
 8001564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001568:	6113      	str	r3, [r2, #16]
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	20000190 	.word	0x20000190
 8001578:	40022000 	.word	0x40022000

0800157c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001584:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <FLASH_PageErase+0x38>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <FLASH_PageErase+0x3c>)
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <FLASH_PageErase+0x3c>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001596:	4a08      	ldr	r2, [pc, #32]	@ (80015b8 <FLASH_PageErase+0x3c>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <FLASH_PageErase+0x3c>)
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	4a05      	ldr	r2, [pc, #20]	@ (80015b8 <FLASH_PageErase+0x3c>)
 80015a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015a6:	6113      	str	r3, [r2, #16]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	20000190 	.word	0x20000190
 80015b8:	40022000 	.word	0x40022000

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ca:	e160      	b.n	800188e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2101      	movs	r1, #1
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8152 	beq.w	8001888 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d005      	beq.n	80015fc <HAL_GPIO_Init+0x40>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d130      	bne.n	800165e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001632:	2201      	movs	r2, #1
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	f003 0201 	and.w	r2, r3, #1
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b03      	cmp	r3, #3
 8001668:	d017      	beq.n	800169a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d123      	bne.n	80016ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	08da      	lsrs	r2, r3, #3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3208      	adds	r2, #8
 80016ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	220f      	movs	r2, #15
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	08da      	lsrs	r2, r3, #3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3208      	adds	r2, #8
 80016e8:	6939      	ldr	r1, [r7, #16]
 80016ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0203 	and.w	r2, r3, #3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 80ac 	beq.w	8001888 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001730:	4b5e      	ldr	r3, [pc, #376]	@ (80018ac <HAL_GPIO_Init+0x2f0>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a5d      	ldr	r2, [pc, #372]	@ (80018ac <HAL_GPIO_Init+0x2f0>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b5b      	ldr	r3, [pc, #364]	@ (80018ac <HAL_GPIO_Init+0x2f0>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001748:	4a59      	ldr	r2, [pc, #356]	@ (80018b0 <HAL_GPIO_Init+0x2f4>)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001772:	d025      	beq.n	80017c0 <HAL_GPIO_Init+0x204>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a4f      	ldr	r2, [pc, #316]	@ (80018b4 <HAL_GPIO_Init+0x2f8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d01f      	beq.n	80017bc <HAL_GPIO_Init+0x200>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a4e      	ldr	r2, [pc, #312]	@ (80018b8 <HAL_GPIO_Init+0x2fc>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d019      	beq.n	80017b8 <HAL_GPIO_Init+0x1fc>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a4d      	ldr	r2, [pc, #308]	@ (80018bc <HAL_GPIO_Init+0x300>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d013      	beq.n	80017b4 <HAL_GPIO_Init+0x1f8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a4c      	ldr	r2, [pc, #304]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d00d      	beq.n	80017b0 <HAL_GPIO_Init+0x1f4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a4b      	ldr	r2, [pc, #300]	@ (80018c4 <HAL_GPIO_Init+0x308>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d007      	beq.n	80017ac <HAL_GPIO_Init+0x1f0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a4a      	ldr	r2, [pc, #296]	@ (80018c8 <HAL_GPIO_Init+0x30c>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d101      	bne.n	80017a8 <HAL_GPIO_Init+0x1ec>
 80017a4:	2306      	movs	r3, #6
 80017a6:	e00c      	b.n	80017c2 <HAL_GPIO_Init+0x206>
 80017a8:	2307      	movs	r3, #7
 80017aa:	e00a      	b.n	80017c2 <HAL_GPIO_Init+0x206>
 80017ac:	2305      	movs	r3, #5
 80017ae:	e008      	b.n	80017c2 <HAL_GPIO_Init+0x206>
 80017b0:	2304      	movs	r3, #4
 80017b2:	e006      	b.n	80017c2 <HAL_GPIO_Init+0x206>
 80017b4:	2303      	movs	r3, #3
 80017b6:	e004      	b.n	80017c2 <HAL_GPIO_Init+0x206>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e002      	b.n	80017c2 <HAL_GPIO_Init+0x206>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_GPIO_Init+0x206>
 80017c0:	2300      	movs	r3, #0
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	f002 0203 	and.w	r2, r2, #3
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	4093      	lsls	r3, r2
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d2:	4937      	ldr	r1, [pc, #220]	@ (80018b0 <HAL_GPIO_Init+0x2f4>)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e0:	4b3a      	ldr	r3, [pc, #232]	@ (80018cc <HAL_GPIO_Init+0x310>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001804:	4a31      	ldr	r2, [pc, #196]	@ (80018cc <HAL_GPIO_Init+0x310>)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800180a:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <HAL_GPIO_Init+0x310>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800182e:	4a27      	ldr	r2, [pc, #156]	@ (80018cc <HAL_GPIO_Init+0x310>)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001834:	4b25      	ldr	r3, [pc, #148]	@ (80018cc <HAL_GPIO_Init+0x310>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001858:	4a1c      	ldr	r2, [pc, #112]	@ (80018cc <HAL_GPIO_Init+0x310>)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185e:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <HAL_GPIO_Init+0x310>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001882:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <HAL_GPIO_Init+0x310>)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	f47f ae97 	bne.w	80015cc <HAL_GPIO_Init+0x10>
  }
}
 800189e:	bf00      	nop
 80018a0:	bf00      	nop
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40010000 	.word	0x40010000
 80018b4:	48000400 	.word	0x48000400
 80018b8:	48000800 	.word	0x48000800
 80018bc:	48000c00 	.word	0x48000c00
 80018c0:	48001000 	.word	0x48001000
 80018c4:	48001400 	.word	0x48001400
 80018c8:	48001800 	.word	0x48001800
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001906:	af00      	add	r7, sp, #0
 8001908:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800190c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001910:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001912:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001916:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	f001 b83a 	b.w	800299a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 816f 	beq.w	8001c1a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800193c:	4bb5      	ldr	r3, [pc, #724]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b04      	cmp	r3, #4
 8001946:	d00c      	beq.n	8001962 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001948:	4bb2      	ldr	r3, [pc, #712]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d15c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x10e>
 8001954:	4baf      	ldr	r3, [pc, #700]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001960:	d155      	bne.n	8001a0e <HAL_RCC_OscConfig+0x10e>
 8001962:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001966:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001976:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	095b      	lsrs	r3, r3, #5
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d102      	bne.n	8001994 <HAL_RCC_OscConfig+0x94>
 800198e:	4ba1      	ldr	r3, [pc, #644]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	e015      	b.n	80019c0 <HAL_RCC_OscConfig+0xc0>
 8001994:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001998:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80019a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ac:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80019b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80019bc:	4b95      	ldr	r3, [pc, #596]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019c4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80019c8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80019cc:	fa92 f2a2 	rbit	r2, r2
 80019d0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80019d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80019d8:	fab2 f282 	clz	r2, r2
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	f042 0220 	orr.w	r2, r2, #32
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	f002 021f 	and.w	r2, r2, #31
 80019e8:	2101      	movs	r1, #1
 80019ea:	fa01 f202 	lsl.w	r2, r1, r2
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 8111 	beq.w	8001c18 <HAL_RCC_OscConfig+0x318>
 80019f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 8108 	bne.w	8001c18 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f000 bfc6 	b.w	800299a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x12e>
 8001a20:	4b7c      	ldr	r3, [pc, #496]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a7b      	ldr	r2, [pc, #492]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	e036      	b.n	8001a9c <HAL_RCC_OscConfig+0x19c>
 8001a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x158>
 8001a3e:	4b75      	ldr	r3, [pc, #468]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a74      	ldr	r2, [pc, #464]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b72      	ldr	r3, [pc, #456]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a71      	ldr	r2, [pc, #452]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e021      	b.n	8001a9c <HAL_RCC_OscConfig+0x19c>
 8001a58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x184>
 8001a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a69      	ldr	r2, [pc, #420]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b67      	ldr	r3, [pc, #412]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a66      	ldr	r2, [pc, #408]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0x19c>
 8001a84:	4b63      	ldr	r3, [pc, #396]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a62      	ldr	r2, [pc, #392]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b60      	ldr	r3, [pc, #384]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a5f      	ldr	r2, [pc, #380]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d059      	beq.n	8001b60 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff f862 	bl	8000b74 <HAL_GetTick>
 8001ab0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab6:	f7ff f85d 	bl	8000b74 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	@ 0x64
 8001ac4:	d902      	bls.n	8001acc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	f000 bf67 	b.w	800299a <HAL_RCC_OscConfig+0x109a>
 8001acc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ad0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001ae0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d102      	bne.n	8001afe <HAL_RCC_OscConfig+0x1fe>
 8001af8:	4b46      	ldr	r3, [pc, #280]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	e015      	b.n	8001b2a <HAL_RCC_OscConfig+0x22a>
 8001afe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b02:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001b12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b16:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001b1a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001b26:	4b3b      	ldr	r3, [pc, #236]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b2e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001b32:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001b36:	fa92 f2a2 	rbit	r2, r2
 8001b3a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001b3e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001b42:	fab2 f282 	clz	r2, r2
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	f042 0220 	orr.w	r2, r2, #32
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	f002 021f 	and.w	r2, r2, #31
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f202 	lsl.w	r2, r1, r2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0ab      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x1b6>
 8001b5e:	e05c      	b.n	8001c1a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff f808 	bl	8000b74 <HAL_GetTick>
 8001b64:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6a:	f7ff f803 	bl	8000b74 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	@ 0x64
 8001b78:	d902      	bls.n	8001b80 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	f000 bf0d 	b.w	800299a <HAL_RCC_OscConfig+0x109a>
 8001b80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b84:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001b94:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d102      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2b2>
 8001bac:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	e015      	b.n	8001bde <HAL_RCC_OscConfig+0x2de>
 8001bb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bb6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001bc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bca:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001bce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001bda:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <HAL_RCC_OscConfig+0x314>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001be2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001be6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001bea:	fa92 f2a2 	rbit	r2, r2
 8001bee:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001bf2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001bf6:	fab2 f282 	clz	r2, r2
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f042 0220 	orr.w	r2, r2, #32
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f002 021f 	and.w	r2, r2, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ab      	bne.n	8001b6a <HAL_RCC_OscConfig+0x26a>
 8001c12:	e002      	b.n	8001c1a <HAL_RCC_OscConfig+0x31a>
 8001c14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 817f 	beq.w	8001f2e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c30:	4ba7      	ldr	r3, [pc, #668]	@ (8001ed0 <HAL_RCC_OscConfig+0x5d0>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c3c:	4ba4      	ldr	r3, [pc, #656]	@ (8001ed0 <HAL_RCC_OscConfig+0x5d0>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d173      	bne.n	8001d30 <HAL_RCC_OscConfig+0x430>
 8001c48:	4ba1      	ldr	r3, [pc, #644]	@ (8001ed0 <HAL_RCC_OscConfig+0x5d0>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c54:	d16c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x430>
 8001c56:	2302      	movs	r3, #2
 8001c58:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001c68:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d102      	bne.n	8001c86 <HAL_RCC_OscConfig+0x386>
 8001c80:	4b93      	ldr	r3, [pc, #588]	@ (8001ed0 <HAL_RCC_OscConfig+0x5d0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	e013      	b.n	8001cae <HAL_RCC_OscConfig+0x3ae>
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c9e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001caa:	4b89      	ldr	r3, [pc, #548]	@ (8001ed0 <HAL_RCC_OscConfig+0x5d0>)
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001cb4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001cb8:	fa92 f2a2 	rbit	r2, r2
 8001cbc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001cc0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f042 0220 	orr.w	r2, r2, #32
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f002 021f 	and.w	r2, r2, #31
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x3f6>
 8001ce0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d002      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f000 be52 	b.w	800299a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf6:	4b76      	ldr	r3, [pc, #472]	@ (8001ed0 <HAL_RCC_OscConfig+0x5d0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	21f8      	movs	r1, #248	@ 0xf8
 8001d0c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001d14:	fa91 f1a1 	rbit	r1, r1
 8001d18:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001d1c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001d20:	fab1 f181 	clz	r1, r1
 8001d24:	b2c9      	uxtb	r1, r1
 8001d26:	408b      	lsls	r3, r1
 8001d28:	4969      	ldr	r1, [pc, #420]	@ (8001ed0 <HAL_RCC_OscConfig+0x5d0>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	e0fe      	b.n	8001f2e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 8088 	beq.w	8001e52 <HAL_RCC_OscConfig+0x552>
 8001d42:	2301      	movs	r3, #1
 8001d44:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001d54:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d62:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7fe ff01 	bl	8000b74 <HAL_GetTick>
 8001d72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d78:	f7fe fefc 	bl	8000b74 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d902      	bls.n	8001d8e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	f000 be06 	b.w	800299a <HAL_RCC_OscConfig+0x109a>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001da0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_OscConfig+0x4be>
 8001db8:	4b45      	ldr	r3, [pc, #276]	@ (8001ed0 <HAL_RCC_OscConfig+0x5d0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	e013      	b.n	8001de6 <HAL_RCC_OscConfig+0x4e6>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001dd6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001de2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed0 <HAL_RCC_OscConfig+0x5d0>)
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de6:	2202      	movs	r2, #2
 8001de8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001dec:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001df0:	fa92 f2a2 	rbit	r2, r2
 8001df4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001df8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001dfc:	fab2 f282 	clz	r2, r2
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f042 0220 	orr.w	r2, r2, #32
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f002 021f 	and.w	r2, r2, #31
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0af      	beq.n	8001d78 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed0 <HAL_RCC_OscConfig+0x5d0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	21f8      	movs	r1, #248	@ 0xf8
 8001e2e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001e36:	fa91 f1a1 	rbit	r1, r1
 8001e3a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001e3e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e42:	fab1 f181 	clz	r1, r1
 8001e46:	b2c9      	uxtb	r1, r1
 8001e48:	408b      	lsls	r3, r1
 8001e4a:	4921      	ldr	r1, [pc, #132]	@ (8001ed0 <HAL_RCC_OscConfig+0x5d0>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	e06d      	b.n	8001f2e <HAL_RCC_OscConfig+0x62e>
 8001e52:	2301      	movs	r3, #1
 8001e54:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001e64:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e72:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7fe fe79 	bl	8000b74 <HAL_GetTick>
 8001e82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e88:	f7fe fe74 	bl	8000b74 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d902      	bls.n	8001e9e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	f000 bd7e 	b.w	800299a <HAL_RCC_OscConfig+0x109a>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001eb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d105      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x5d4>
 8001ec8:	4b01      	ldr	r3, [pc, #4]	@ (8001ed0 <HAL_RCC_OscConfig+0x5d0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	e016      	b.n	8001efc <HAL_RCC_OscConfig+0x5fc>
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001eec:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001ef8:	4bbf      	ldr	r3, [pc, #764]	@ (80021f8 <HAL_RCC_OscConfig+0x8f8>)
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	2202      	movs	r2, #2
 8001efe:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001f02:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001f06:	fa92 f2a2 	rbit	r2, r2
 8001f0a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001f0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001f12:	fab2 f282 	clz	r2, r2
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	f042 0220 	orr.w	r2, r2, #32
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f002 021f 	and.w	r2, r2, #31
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f202 	lsl.w	r2, r1, r2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1ac      	bne.n	8001e88 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8113 	beq.w	800216a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d07c      	beq.n	800204e <HAL_RCC_OscConfig+0x74e>
 8001f54:	2301      	movs	r3, #1
 8001f56:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001f66:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	4ba2      	ldr	r3, [pc, #648]	@ (80021fc <HAL_RCC_OscConfig+0x8fc>)
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe fdf9 	bl	8000b74 <HAL_GetTick>
 8001f82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f88:	f7fe fdf4 	bl	8000b74 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d902      	bls.n	8001f9e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	f000 bcfe 	b.w	800299a <HAL_RCC_OscConfig+0x109a>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fa8:	fa93 f2a3 	rbit	r2, r3
 8001fac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	fa93 f2a3 	rbit	r2, r3
 8001fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fde:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f2a3 	rbit	r2, r3
 8001ff4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ffc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	4b7e      	ldr	r3, [pc, #504]	@ (80021f8 <HAL_RCC_OscConfig+0x8f8>)
 8002000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002002:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002006:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800200a:	2102      	movs	r1, #2
 800200c:	6019      	str	r1, [r3, #0]
 800200e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002012:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f1a3 	rbit	r1, r3
 800201c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002020:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002024:	6019      	str	r1, [r3, #0]
  return result;
 8002026:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d09d      	beq.n	8001f88 <HAL_RCC_OscConfig+0x688>
 800204c:	e08d      	b.n	800216a <HAL_RCC_OscConfig+0x86a>
 800204e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002052:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800205e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	fa93 f2a3 	rbit	r2, r3
 8002068:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002070:	601a      	str	r2, [r3, #0]
  return result;
 8002072:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002076:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800207a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	4b5d      	ldr	r3, [pc, #372]	@ (80021fc <HAL_RCC_OscConfig+0x8fc>)
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	461a      	mov	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002090:	f7fe fd70 	bl	8000b74 <HAL_GetTick>
 8002094:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209a:	f7fe fd6b 	bl	8000b74 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d902      	bls.n	80020b0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	f000 bc75 	b.w	800299a <HAL_RCC_OscConfig+0x109a>
 80020b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80020b8:	2202      	movs	r2, #2
 80020ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fa93 f2a3 	rbit	r2, r3
 80020ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020dc:	2202      	movs	r2, #2
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fa93 f2a3 	rbit	r2, r3
 80020ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002100:	2202      	movs	r2, #2
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002108:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002116:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800211a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211c:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <HAL_RCC_OscConfig+0x8f8>)
 800211e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002120:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002124:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002128:	2102      	movs	r1, #2
 800212a:	6019      	str	r1, [r3, #0]
 800212c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002130:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f1a3 	rbit	r1, r3
 800213a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002142:	6019      	str	r1, [r3, #0]
  return result;
 8002144:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002148:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d197      	bne.n	800209a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 81a5 	beq.w	80024ca <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002186:	4b1c      	ldr	r3, [pc, #112]	@ (80021f8 <HAL_RCC_OscConfig+0x8f8>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d116      	bne.n	80021c0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_RCC_OscConfig+0x8f8>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a18      	ldr	r2, [pc, #96]	@ (80021f8 <HAL_RCC_OscConfig+0x8f8>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800219c:	61d3      	str	r3, [r2, #28]
 800219e:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <HAL_RCC_OscConfig+0x8f8>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80021a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <HAL_RCC_OscConfig+0x900>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d121      	bne.n	8002210 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <HAL_RCC_OscConfig+0x900>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002200 <HAL_RCC_OscConfig+0x900>)
 80021d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d8:	f7fe fccc 	bl	8000b74 <HAL_GetTick>
 80021dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	e010      	b.n	8002204 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7fe fcc7 	bl	8000b74 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d908      	bls.n	8002204 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e3d1      	b.n	800299a <HAL_RCC_OscConfig+0x109a>
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	10908120 	.word	0x10908120
 8002200:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	4b8d      	ldr	r3, [pc, #564]	@ (800243c <HAL_RCC_OscConfig+0xb3c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0e8      	beq.n	80021e2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002210:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002214:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x92e>
 8002220:	4b87      	ldr	r3, [pc, #540]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4a86      	ldr	r2, [pc, #536]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	e035      	b.n	800229a <HAL_RCC_OscConfig+0x99a>
 800222e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002232:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x958>
 800223e:	4b80      	ldr	r3, [pc, #512]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a7f      	ldr	r2, [pc, #508]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6213      	str	r3, [r2, #32]
 800224a:	4b7d      	ldr	r3, [pc, #500]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a7c      	ldr	r2, [pc, #496]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	e020      	b.n	800229a <HAL_RCC_OscConfig+0x99a>
 8002258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800225c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x982>
 8002268:	4b75      	ldr	r3, [pc, #468]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a74      	ldr	r2, [pc, #464]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	4b72      	ldr	r3, [pc, #456]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a71      	ldr	r2, [pc, #452]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6213      	str	r3, [r2, #32]
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0x99a>
 8002282:	4b6f      	ldr	r3, [pc, #444]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a6e      	ldr	r2, [pc, #440]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b6c      	ldr	r3, [pc, #432]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a6b      	ldr	r2, [pc, #428]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800229e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8081 	beq.w	80023ae <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7fe fc62 	bl	8000b74 <HAL_GetTick>
 80022b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	e00b      	b.n	80022ce <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7fe fc5d 	bl	8000b74 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e365      	b.n	800299a <HAL_RCC_OscConfig+0x109a>
 80022ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022d6:	2202      	movs	r2, #2
 80022d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022de:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	fa93 f2a3 	rbit	r2, r3
 80022e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022fa:	2202      	movs	r2, #2
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002302:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fa93 f2a3 	rbit	r2, r3
 800230c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002310:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002314:	601a      	str	r2, [r3, #0]
  return result;
 8002316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800231e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f043 0302 	orr.w	r3, r3, #2
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d102      	bne.n	800233a <HAL_RCC_OscConfig+0xa3a>
 8002334:	4b42      	ldr	r3, [pc, #264]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	e013      	b.n	8002362 <HAL_RCC_OscConfig+0xa62>
 800233a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002342:	2202      	movs	r2, #2
 8002344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800234a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	fa93 f2a3 	rbit	r2, r3
 8002354:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002358:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	4b38      	ldr	r3, [pc, #224]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002366:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800236a:	2102      	movs	r1, #2
 800236c:	6011      	str	r1, [r2, #0]
 800236e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002372:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	fa92 f1a2 	rbit	r1, r2
 800237c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002380:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002384:	6011      	str	r1, [r2, #0]
  return result;
 8002386:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800238a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	fab2 f282 	clz	r2, r2
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	f002 021f 	and.w	r2, r2, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f202 	lsl.w	r2, r1, r2
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d084      	beq.n	80022b6 <HAL_RCC_OscConfig+0x9b6>
 80023ac:	e083      	b.n	80024b6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7fe fbe1 	bl	8000b74 <HAL_GetTick>
 80023b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7fe fbdc 	bl	8000b74 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e2e4      	b.n	800299a <HAL_RCC_OscConfig+0x109a>
 80023d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80023d8:	2202      	movs	r2, #2
 80023da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023fc:	2202      	movs	r2, #2
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002404:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	fa93 f2a3 	rbit	r2, r3
 800240e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002412:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002416:	601a      	str	r2, [r3, #0]
  return result;
 8002418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002420:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d106      	bne.n	8002444 <HAL_RCC_OscConfig+0xb44>
 8002436:	4b02      	ldr	r3, [pc, #8]	@ (8002440 <HAL_RCC_OscConfig+0xb40>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	e017      	b.n	800246c <HAL_RCC_OscConfig+0xb6c>
 800243c:	40007000 	.word	0x40007000
 8002440:	40021000 	.word	0x40021000
 8002444:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002448:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800244c:	2202      	movs	r2, #2
 800244e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002454:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	fa93 f2a3 	rbit	r2, r3
 800245e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002462:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	4bb3      	ldr	r3, [pc, #716]	@ (8002738 <HAL_RCC_OscConfig+0xe38>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002470:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002474:	2102      	movs	r1, #2
 8002476:	6011      	str	r1, [r2, #0]
 8002478:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800247c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	fa92 f1a2 	rbit	r1, r2
 8002486:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800248a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800248e:	6011      	str	r1, [r2, #0]
  return result;
 8002490:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002494:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	fab2 f282 	clz	r2, r2
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	f002 021f 	and.w	r2, r2, #31
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f202 	lsl.w	r2, r1, r2
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d180      	bne.n	80023b8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024b6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b9e      	ldr	r3, [pc, #632]	@ (8002738 <HAL_RCC_OscConfig+0xe38>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a9d      	ldr	r2, [pc, #628]	@ (8002738 <HAL_RCC_OscConfig+0xe38>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 825e 	beq.w	8002998 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024dc:	4b96      	ldr	r3, [pc, #600]	@ (8002738 <HAL_RCC_OscConfig+0xe38>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	f000 821f 	beq.w	8002928 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	f040 8170 	bne.w	80027dc <HAL_RCC_OscConfig+0xedc>
 80024fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002500:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002504:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800250e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800251c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002520:	601a      	str	r2, [r3, #0]
  return result;
 8002522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002526:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800252a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002536:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	461a      	mov	r2, r3
 800253e:	2300      	movs	r3, #0
 8002540:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe fb17 	bl	8000b74 <HAL_GetTick>
 8002546:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	e009      	b.n	8002560 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe fb12 	bl	8000b74 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e21c      	b.n	800299a <HAL_RCC_OscConfig+0x109a>
 8002560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002564:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002568:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800256c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002572:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002580:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002584:	601a      	str	r2, [r3, #0]
  return result;
 8002586:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800258a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800258e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d102      	bne.n	80025aa <HAL_RCC_OscConfig+0xcaa>
 80025a4:	4b64      	ldr	r3, [pc, #400]	@ (8002738 <HAL_RCC_OscConfig+0xe38>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	e027      	b.n	80025fa <HAL_RCC_OscConfig+0xcfa>
 80025aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80025b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025bc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f2a3 	rbit	r2, r3
 80025c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	fa93 f2a3 	rbit	r2, r3
 80025ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	4b50      	ldr	r3, [pc, #320]	@ (8002738 <HAL_RCC_OscConfig+0xe38>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025fe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002602:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002606:	6011      	str	r1, [r2, #0]
 8002608:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800260c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	fa92 f1a2 	rbit	r1, r2
 8002616:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800261a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800261e:	6011      	str	r1, [r2, #0]
  return result;
 8002620:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002624:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	fab2 f282 	clz	r2, r2
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f042 0220 	orr.w	r2, r2, #32
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f002 021f 	and.w	r2, r2, #31
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d182      	bne.n	800254c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002646:	4b3c      	ldr	r3, [pc, #240]	@ (8002738 <HAL_RCC_OscConfig+0xe38>)
 8002648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264a:	f023 020f 	bic.w	r2, r3, #15
 800264e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002652:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	4937      	ldr	r1, [pc, #220]	@ (8002738 <HAL_RCC_OscConfig+0xe38>)
 800265c:	4313      	orrs	r3, r2
 800265e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002660:	4b35      	ldr	r3, [pc, #212]	@ (8002738 <HAL_RCC_OscConfig+0xe38>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002668:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6a19      	ldr	r1, [r3, #32]
 8002674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002678:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	430b      	orrs	r3, r1
 8002682:	492d      	ldr	r1, [pc, #180]	@ (8002738 <HAL_RCC_OscConfig+0xe38>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
 8002688:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800268c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002690:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	fa93 f2a3 	rbit	r2, r3
 80026a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026ac:	601a      	str	r2, [r3, #0]
  return result;
 80026ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026b6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026c2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	461a      	mov	r2, r3
 80026ca:	2301      	movs	r3, #1
 80026cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe fa51 	bl	8000b74 <HAL_GetTick>
 80026d2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d6:	e009      	b.n	80026ec <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe fa4c 	bl	8000b74 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e156      	b.n	800299a <HAL_RCC_OscConfig+0x109a>
 80026ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002710:	601a      	str	r2, [r3, #0]
  return result;
 8002712:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002716:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800271a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d105      	bne.n	800273c <HAL_RCC_OscConfig+0xe3c>
 8002730:	4b01      	ldr	r3, [pc, #4]	@ (8002738 <HAL_RCC_OscConfig+0xe38>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	e02a      	b.n	800278c <HAL_RCC_OscConfig+0xe8c>
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002740:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002744:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800274e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fa93 f2a3 	rbit	r2, r3
 8002758:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002766:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800276a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002774:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	fa93 f2a3 	rbit	r2, r3
 800277e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002782:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	4b86      	ldr	r3, [pc, #536]	@ (80029a4 <HAL_RCC_OscConfig+0x10a4>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002790:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002794:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002798:	6011      	str	r1, [r2, #0]
 800279a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800279e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	fa92 f1a2 	rbit	r1, r2
 80027a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027ac:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80027b0:	6011      	str	r1, [r2, #0]
  return result;
 80027b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027b6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	fab2 f282 	clz	r2, r2
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	f042 0220 	orr.w	r2, r2, #32
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	f002 021f 	and.w	r2, r2, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f43f af7f 	beq.w	80026d8 <HAL_RCC_OscConfig+0xdd8>
 80027da:	e0dd      	b.n	8002998 <HAL_RCC_OscConfig+0x1098>
 80027dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	fa93 f2a3 	rbit	r2, r3
 80027f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027fc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002800:	601a      	str	r2, [r3, #0]
  return result;
 8002802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002806:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800280a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002816:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	461a      	mov	r2, r3
 800281e:	2300      	movs	r3, #0
 8002820:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7fe f9a7 	bl	8000b74 <HAL_GetTick>
 8002826:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282a:	e009      	b.n	8002840 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282c:	f7fe f9a2 	bl	8000b74 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0ac      	b.n	800299a <HAL_RCC_OscConfig+0x109a>
 8002840:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002844:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002848:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800284c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002852:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002860:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002864:	601a      	str	r2, [r3, #0]
  return result;
 8002866:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800286e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d102      	bne.n	800288a <HAL_RCC_OscConfig+0xf8a>
 8002884:	4b47      	ldr	r3, [pc, #284]	@ (80029a4 <HAL_RCC_OscConfig+0x10a4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	e027      	b.n	80028da <HAL_RCC_OscConfig+0xfda>
 800288a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800288e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002892:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800289c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fa93 f2a3 	rbit	r2, r3
 80028a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028aa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80028b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fa93 f2a3 	rbit	r2, r3
 80028cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	4b33      	ldr	r3, [pc, #204]	@ (80029a4 <HAL_RCC_OscConfig+0x10a4>)
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028de:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028e6:	6011      	str	r1, [r2, #0]
 80028e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028ec:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	fa92 f1a2 	rbit	r1, r2
 80028f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028fa:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80028fe:	6011      	str	r1, [r2, #0]
  return result;
 8002900:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002904:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	fab2 f282 	clz	r2, r2
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	f042 0220 	orr.w	r2, r2, #32
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	f002 021f 	and.w	r2, r2, #31
 800291a:	2101      	movs	r1, #1
 800291c:	fa01 f202 	lsl.w	r2, r1, r2
 8002920:	4013      	ands	r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d182      	bne.n	800282c <HAL_RCC_OscConfig+0xf2c>
 8002926:	e037      	b.n	8002998 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800292c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e02e      	b.n	800299a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800293c:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <HAL_RCC_OscConfig+0x10a4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002944:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <HAL_RCC_OscConfig+0x10a4>)
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800294c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002950:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002958:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	429a      	cmp	r2, r3
 8002962:	d117      	bne.n	8002994 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002964:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002968:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800296c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002970:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002978:	429a      	cmp	r2, r3
 800297a:	d10b      	bne.n	8002994 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800297c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002980:	f003 020f 	and.w	r2, r3, #15
 8002984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002988:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000

080029a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b09e      	sub	sp, #120	@ 0x78
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e162      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c0:	4b90      	ldr	r3, [pc, #576]	@ (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d910      	bls.n	80029f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	498b      	ldr	r1, [pc, #556]	@ (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b89      	ldr	r3, [pc, #548]	@ (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e14a      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b82      	ldr	r3, [pc, #520]	@ (8002c08 <HAL_RCC_ClockConfig+0x260>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	497f      	ldr	r1, [pc, #508]	@ (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80dc 	beq.w	8002bd4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d13c      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xf6>
 8002a24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a28:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xa6>
 8002a48:	4b6f      	ldr	r3, [pc, #444]	@ (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	e00f      	b.n	8002a6e <HAL_RCC_ClockConfig+0xc6>
 8002a4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a60:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a6a:	4b67      	ldr	r3, [pc, #412]	@ (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a72:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a76:	fa92 f2a2 	rbit	r2, r2
 8002a7a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a7e:	fab2 f282 	clz	r2, r2
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f042 0220 	orr.w	r2, r2, #32
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	f002 021f 	and.w	r2, r2, #31
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f202 	lsl.w	r2, r1, r2
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d17b      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0f3      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d13c      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x178>
 8002aa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aaa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x128>
 8002aca:	4b4f      	ldr	r3, [pc, #316]	@ (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	e00f      	b.n	8002af0 <HAL_RCC_ClockConfig+0x148>
 8002ad0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ade:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ae2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aec:	4b46      	ldr	r3, [pc, #280]	@ (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002af4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002af6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002af8:	fa92 f2a2 	rbit	r2, r2
 8002afc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002afe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f042 0220 	orr.w	r2, r2, #32
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f002 021f 	and.w	r2, r2, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f202 	lsl.w	r2, r1, r2
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d13a      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0b2      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
 8002b20:	2302      	movs	r3, #2
 8002b22:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d102      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x1a0>
 8002b42:	4b31      	ldr	r3, [pc, #196]	@ (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	e00d      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1bc>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b54:	2302      	movs	r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	4b29      	ldr	r3, [pc, #164]	@ (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	2202      	movs	r2, #2
 8002b66:	61ba      	str	r2, [r7, #24]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	fa92 f2a2 	rbit	r2, r2
 8002b6e:	617a      	str	r2, [r7, #20]
  return result;
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	fab2 f282 	clz	r2, r2
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	f042 0220 	orr.w	r2, r2, #32
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f002 021f 	and.w	r2, r2, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f202 	lsl.w	r2, r1, r2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e079      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b1d      	ldr	r3, [pc, #116]	@ (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	491a      	ldr	r1, [pc, #104]	@ (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba4:	f7fd ffe6 	bl	8000b74 <HAL_GetTick>
 8002ba8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7fd ffe2 	bl	8000b74 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e061      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <HAL_RCC_ClockConfig+0x260>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d214      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	4906      	ldr	r1, [pc, #24]	@ (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <HAL_RCC_ClockConfig+0x25c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e040      	b.n	8002c86 <HAL_RCC_ClockConfig+0x2de>
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c18:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	491a      	ldr	r1, [pc, #104]	@ (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c36:	4b16      	ldr	r3, [pc, #88]	@ (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4912      	ldr	r1, [pc, #72]	@ (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c4a:	f000 f829 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8002c4e:	4601      	mov	r1, r0
 8002c50:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <HAL_RCC_ClockConfig+0x2e8>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c58:	22f0      	movs	r2, #240	@ 0xf0
 8002c5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	fa92 f2a2 	rbit	r2, r2
 8002c62:	60fa      	str	r2, [r7, #12]
  return result;
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	fab2 f282 	clz	r2, r2
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	40d3      	lsrs	r3, r2
 8002c6e:	4a09      	ldr	r2, [pc, #36]	@ (8002c94 <HAL_RCC_ClockConfig+0x2ec>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	fa21 f303 	lsr.w	r3, r1, r3
 8002c76:	4a08      	ldr	r2, [pc, #32]	@ (8002c98 <HAL_RCC_ClockConfig+0x2f0>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c7a:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <HAL_RCC_ClockConfig+0x2f4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd ff34 	bl	8000aec <HAL_InitTick>
  
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3778      	adds	r7, #120	@ 0x78
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08004708 	.word	0x08004708
 8002c98:	20000004 	.word	0x20000004
 8002c9c:	20000008 	.word	0x20000008

08002ca0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002cba:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x30>
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cce:	e029      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cd2:	613b      	str	r3, [r7, #16]
      break;
 8002cd4:	e029      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0c9b      	lsrs	r3, r3, #18
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	4a18      	ldr	r2, [pc, #96]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ce0:	5cd3      	ldrb	r3, [r2, r3]
 8002ce2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ce4:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	4a15      	ldr	r2, [pc, #84]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e007      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	613b      	str	r3, [r7, #16]
      break;
 8002d22:	e002      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d26:	613b      	str	r3, [r7, #16]
      break;
 8002d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2a:	693b      	ldr	r3, [r7, #16]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	007a1200 	.word	0x007a1200
 8002d40:	08004720 	.word	0x08004720
 8002d44:	08004730 	.word	0x08004730

08002d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	@ (8002d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d66:	f7ff ffef 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d6a:	4601      	mov	r1, r0
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d74:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	fa92 f2a2 	rbit	r2, r2
 8002d80:	603a      	str	r2, [r7, #0]
  return result;
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	fab2 f282 	clz	r2, r2
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	40d3      	lsrs	r3, r2
 8002d8c:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08004718 	.word	0x08004718

08002da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002daa:	f7ff ffcd 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002dae:	4601      	mov	r1, r0
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002db8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002dbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	fa92 f2a2 	rbit	r2, r2
 8002dc4:	603a      	str	r2, [r7, #0]
  return result;
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	fab2 f282 	clz	r2, r2
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	40d3      	lsrs	r3, r2
 8002dd0:	4a04      	ldr	r2, [pc, #16]	@ (8002de4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08004718 	.word	0x08004718

08002de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b092      	sub	sp, #72	@ 0x48
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80d4 	beq.w	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10e      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e18:	4b4b      	ldr	r3, [pc, #300]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	61d3      	str	r3, [r2, #28]
 8002e24:	4b48      	ldr	r3, [pc, #288]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b45      	ldr	r3, [pc, #276]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d118      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e42:	4b42      	ldr	r3, [pc, #264]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a41      	ldr	r2, [pc, #260]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4e:	f7fd fe91 	bl	8000b74 <HAL_GetTick>
 8002e52:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	e008      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e56:	f7fd fe8d 	bl	8000b74 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b64      	cmp	r3, #100	@ 0x64
 8002e62:	d901      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e1d6      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	4b38      	ldr	r3, [pc, #224]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e74:	4b34      	ldr	r3, [pc, #208]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8084 	beq.w	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d07c      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e94:	4b2c      	ldr	r3, [pc, #176]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ea2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b26      	ldr	r3, [pc, #152]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b1d      	ldr	r3, [pc, #116]	@ (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ee6:	4a18      	ldr	r2, [pc, #96]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d04b      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7fd fe3d 	bl	8000b74 <HAL_GetTick>
 8002efa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fd fe39 	bl	8000b74 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e180      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002f14:	2302      	movs	r3, #2
 8002f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f20:	2302      	movs	r3, #2
 8002f22:	623b      	str	r3, [r7, #32]
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d108      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f42:	4b01      	ldr	r3, [pc, #4]	@ (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	e00d      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	10908100 	.word	0x10908100
 8002f54:	2302      	movs	r3, #2
 8002f56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	4b9a      	ldr	r3, [pc, #616]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	2202      	movs	r2, #2
 8002f66:	613a      	str	r2, [r7, #16]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	fa92 f2a2 	rbit	r2, r2
 8002f6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	fab2 f282 	clz	r2, r2
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	f002 021f 	and.w	r2, r2, #31
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f202 	lsl.w	r2, r1, r2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0b7      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f8e:	4b8f      	ldr	r3, [pc, #572]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	498c      	ldr	r1, [pc, #560]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fa0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa8:	4b88      	ldr	r3, [pc, #544]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4a87      	ldr	r2, [pc, #540]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fc0:	4b82      	ldr	r3, [pc, #520]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	f023 0203 	bic.w	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	497f      	ldr	r1, [pc, #508]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fde:	4b7b      	ldr	r3, [pc, #492]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	4978      	ldr	r1, [pc, #480]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ffc:	4b73      	ldr	r3, [pc, #460]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003000:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	4970      	ldr	r1, [pc, #448]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800301a:	4b6c      	ldr	r3, [pc, #432]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f023 0210 	bic.w	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	4969      	ldr	r1, [pc, #420]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003038:	4b64      	ldr	r3, [pc, #400]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003044:	4961      	ldr	r1, [pc, #388]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003056:	4b5d      	ldr	r3, [pc, #372]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	f023 0220 	bic.w	r2, r3, #32
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	495a      	ldr	r1, [pc, #360]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003064:	4313      	orrs	r3, r2
 8003066:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003074:	4b55      	ldr	r3, [pc, #340]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	4952      	ldr	r1, [pc, #328]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003082:	4313      	orrs	r3, r2
 8003084:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003092:	4b4e      	ldr	r3, [pc, #312]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	494b      	ldr	r1, [pc, #300]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030b0:	4b46      	ldr	r3, [pc, #280]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4943      	ldr	r1, [pc, #268]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030ce:	4b3f      	ldr	r3, [pc, #252]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	493c      	ldr	r1, [pc, #240]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030ec:	4b37      	ldr	r3, [pc, #220]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	4934      	ldr	r1, [pc, #208]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800310a:	4b30      	ldr	r3, [pc, #192]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003116:	492d      	ldr	r1, [pc, #180]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003118:	4313      	orrs	r3, r2
 800311a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003128:	4b28      	ldr	r3, [pc, #160]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003134:	4925      	ldr	r1, [pc, #148]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003146:	4b21      	ldr	r3, [pc, #132]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	491e      	ldr	r1, [pc, #120]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003168:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	4916      	ldr	r1, [pc, #88]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003182:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318e:	490f      	ldr	r1, [pc, #60]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80031a0:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ac:	4907      	ldr	r1, [pc, #28]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00c      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80031be:	4b03      	ldr	r3, [pc, #12]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	e002      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d2:	4913      	ldr	r1, [pc, #76]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80031e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f0:	490b      	ldr	r1, [pc, #44]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003202:	4b07      	ldr	r3, [pc, #28]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320e:	4904      	ldr	r1, [pc, #16]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003210:	4313      	orrs	r3, r2
 8003212:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3748      	adds	r7, #72	@ 0x48
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000

08003224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e040      	b.n	80032b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd fb9c 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2224      	movs	r2, #36	@ 0x24
 8003250:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fd94 	bl	8003d98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fbbd 	bl	80039f0 <UART_SetConfig>
 8003276:	4603      	mov	r3, r0
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e01b      	b.n	80032b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800328e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800329e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fe13 	bl	8003edc <UART_CheckIdleState>
 80032b6:	4603      	mov	r3, r0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	@ 0x28
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d177      	bne.n	80033c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <HAL_UART_Transmit+0x24>
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e070      	b.n	80033ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2221      	movs	r2, #33	@ 0x21
 80032f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032f6:	f7fd fc3d 	bl	8000b74 <HAL_GetTick>
 80032fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	88fa      	ldrh	r2, [r7, #6]
 8003300:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003314:	d108      	bne.n	8003328 <HAL_UART_Transmit+0x68>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d104      	bne.n	8003328 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	e003      	b.n	8003330 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800332c:	2300      	movs	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003330:	e02f      	b.n	8003392 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	2180      	movs	r1, #128	@ 0x80
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fe75 	bl	800402c <UART_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e03b      	b.n	80033ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10b      	bne.n	8003370 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	881a      	ldrh	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003364:	b292      	uxth	r2, r2
 8003366:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	3302      	adds	r3, #2
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	e007      	b.n	8003380 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	781a      	ldrb	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3301      	adds	r3, #1
 800337e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1c9      	bne.n	8003332 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2200      	movs	r2, #0
 80033a6:	2140      	movs	r1, #64	@ 0x40
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fe3f 	bl	800402c <UART_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e005      	b.n	80033ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b0ba      	sub	sp, #232	@ 0xe8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80033fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003402:	4013      	ands	r3, r2
 8003404:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d115      	bne.n	800343c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00f      	beq.n	800343c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800341c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 82ab 	beq.w	8003988 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
      }
      return;
 800343a:	e2a5      	b.n	8003988 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800343c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8117 	beq.w	8003674 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003452:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003456:	4b85      	ldr	r3, [pc, #532]	@ (800366c <HAL_UART_IRQHandler+0x298>)
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 810a 	beq.w	8003674 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d011      	beq.n	8003490 <HAL_UART_IRQHandler+0xbc>
 800346c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00b      	beq.n	8003490 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2201      	movs	r2, #1
 800347e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d011      	beq.n	80034c0 <HAL_UART_IRQHandler+0xec>
 800349c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00b      	beq.n	80034c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2202      	movs	r2, #2
 80034ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034b6:	f043 0204 	orr.w	r2, r3, #4
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d011      	beq.n	80034f0 <HAL_UART_IRQHandler+0x11c>
 80034cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00b      	beq.n	80034f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2204      	movs	r2, #4
 80034de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034e6:	f043 0202 	orr.w	r2, r3, #2
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d017      	beq.n	800352c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d105      	bne.n	8003514 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800350c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00b      	beq.n	800352c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2208      	movs	r2, #8
 800351a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003522:	f043 0208 	orr.w	r2, r3, #8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800352c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003534:	2b00      	cmp	r3, #0
 8003536:	d012      	beq.n	800355e <HAL_UART_IRQHandler+0x18a>
 8003538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800353c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00c      	beq.n	800355e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800354c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8211 	beq.w	800398c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800356a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003598:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a6:	2b40      	cmp	r3, #64	@ 0x40
 80035a8:	d005      	beq.n	80035b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d04f      	beq.n	8003656 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fe6c 	bl	8004294 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c6:	2b40      	cmp	r3, #64	@ 0x40
 80035c8:	d141      	bne.n	800364e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3308      	adds	r3, #8
 80035d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3308      	adds	r3, #8
 80035f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800360e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1d9      	bne.n	80035ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361a:	2b00      	cmp	r3, #0
 800361c:	d013      	beq.n	8003646 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003622:	4a13      	ldr	r2, [pc, #76]	@ (8003670 <HAL_UART_IRQHandler+0x29c>)
 8003624:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd fca3 	bl	8000f76 <HAL_DMA_Abort_IT>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d017      	beq.n	8003666 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800363a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003640:	4610      	mov	r0, r2
 8003642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	e00f      	b.n	8003666 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f9c8 	bl	80039dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364c:	e00b      	b.n	8003666 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f9c4 	bl	80039dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	e007      	b.n	8003666 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f9c0 	bl	80039dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003664:	e192      	b.n	800398c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003666:	bf00      	nop
    return;
 8003668:	e190      	b.n	800398c <HAL_UART_IRQHandler+0x5b8>
 800366a:	bf00      	nop
 800366c:	04000120 	.word	0x04000120
 8003670:	0800453f 	.word	0x0800453f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003678:	2b01      	cmp	r3, #1
 800367a:	f040 814b 	bne.w	8003914 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8144 	beq.w	8003914 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 813d 	beq.w	8003914 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2210      	movs	r2, #16
 80036a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b40      	cmp	r3, #64	@ 0x40
 80036ae:	f040 80b5 	bne.w	800381c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8164 	beq.w	8003990 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036d2:	429a      	cmp	r2, r3
 80036d4:	f080 815c 	bcs.w	8003990 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	f000 8086 	beq.w	80037fa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036fa:	e853 3f00 	ldrex	r3, [r3]
 80036fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003702:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003706:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800370a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003718:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800371c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003724:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1da      	bne.n	80036ee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3308      	adds	r3, #8
 800373e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003742:	e853 3f00 	ldrex	r3, [r3]
 8003746:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003748:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3308      	adds	r3, #8
 8003758:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800375c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003760:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003764:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800376e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e1      	bne.n	8003738 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3308      	adds	r3, #8
 800377a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800378a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3308      	adds	r3, #8
 8003794:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003798:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800379a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800379e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e3      	bne.n	8003774 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037ca:	f023 0310 	bic.w	r3, r3, #16
 80037ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037de:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037e4:	e841 2300 	strex	r3, r2, [r1]
 80037e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e4      	bne.n	80037ba <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fd fb80 	bl	8000efa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2202      	movs	r2, #2
 80037fe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800380c:	b29b      	uxth	r3, r3
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	b29b      	uxth	r3, r3
 8003812:	4619      	mov	r1, r3
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7fc ff19 	bl	800064c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800381a:	e0b9      	b.n	8003990 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003828:	b29b      	uxth	r3, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80ab 	beq.w	8003994 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800383e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80a6 	beq.w	8003994 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003858:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800385c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800386a:	647b      	str	r3, [r7, #68]	@ 0x44
 800386c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003870:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003872:	e841 2300 	strex	r3, r2, [r1]
 8003876:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1e4      	bne.n	8003848 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3308      	adds	r3, #8
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	623b      	str	r3, [r7, #32]
   return(result);
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3308      	adds	r3, #8
 800389e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80038a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e3      	bne.n	800387e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	e853 3f00 	ldrex	r3, [r3]
 80038d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0310 	bic.w	r3, r3, #16
 80038de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	69b9      	ldr	r1, [r7, #24]
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	617b      	str	r3, [r7, #20]
   return(result);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e4      	bne.n	80038ca <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003906:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800390a:	4619      	mov	r1, r3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7fc fe9d 	bl	800064c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003912:	e03f      	b.n	8003994 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00e      	beq.n	800393e <HAL_UART_IRQHandler+0x56a>
 8003920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003924:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003934:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fe41 	bl	80045be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800393c:	e02d      	b.n	800399a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800393e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00e      	beq.n	8003968 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800394a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800394e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01c      	beq.n	8003998 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
    }
    return;
 8003966:	e017      	b.n	8003998 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800396c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d012      	beq.n	800399a <HAL_UART_IRQHandler+0x5c6>
 8003974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fdf2 	bl	800456a <UART_EndTransmit_IT>
    return;
 8003986:	e008      	b.n	800399a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003988:	bf00      	nop
 800398a:	e006      	b.n	800399a <HAL_UART_IRQHandler+0x5c6>
    return;
 800398c:	bf00      	nop
 800398e:	e004      	b.n	800399a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003990:	bf00      	nop
 8003992:	e002      	b.n	800399a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003994:	bf00      	nop
 8003996:	e000      	b.n	800399a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003998:	bf00      	nop
  }

}
 800399a:	37e8      	adds	r7, #232	@ 0xe8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b92      	ldr	r3, [pc, #584]	@ (8003c64 <UART_SetConfig+0x274>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	6979      	ldr	r1, [r7, #20]
 8003a24:	430b      	orrs	r3, r1
 8003a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a80      	ldr	r2, [pc, #512]	@ (8003c68 <UART_SetConfig+0x278>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d120      	bne.n	8003aae <UART_SetConfig+0xbe>
 8003a6c:	4b7f      	ldr	r3, [pc, #508]	@ (8003c6c <UART_SetConfig+0x27c>)
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d817      	bhi.n	8003aa8 <UART_SetConfig+0xb8>
 8003a78:	a201      	add	r2, pc, #4	@ (adr r2, 8003a80 <UART_SetConfig+0x90>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003a91 	.word	0x08003a91
 8003a84:	08003a9d 	.word	0x08003a9d
 8003a88:	08003aa3 	.word	0x08003aa3
 8003a8c:	08003a97 	.word	0x08003a97
 8003a90:	2301      	movs	r3, #1
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e0b5      	b.n	8003c02 <UART_SetConfig+0x212>
 8003a96:	2302      	movs	r3, #2
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e0b2      	b.n	8003c02 <UART_SetConfig+0x212>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e0af      	b.n	8003c02 <UART_SetConfig+0x212>
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	77fb      	strb	r3, [r7, #31]
 8003aa6:	e0ac      	b.n	8003c02 <UART_SetConfig+0x212>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e0a9      	b.n	8003c02 <UART_SetConfig+0x212>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a6f      	ldr	r2, [pc, #444]	@ (8003c70 <UART_SetConfig+0x280>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d124      	bne.n	8003b02 <UART_SetConfig+0x112>
 8003ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8003c6c <UART_SetConfig+0x27c>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ac0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ac4:	d011      	beq.n	8003aea <UART_SetConfig+0xfa>
 8003ac6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003aca:	d817      	bhi.n	8003afc <UART_SetConfig+0x10c>
 8003acc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ad0:	d011      	beq.n	8003af6 <UART_SetConfig+0x106>
 8003ad2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ad6:	d811      	bhi.n	8003afc <UART_SetConfig+0x10c>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <UART_SetConfig+0xf4>
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae0:	d006      	beq.n	8003af0 <UART_SetConfig+0x100>
 8003ae2:	e00b      	b.n	8003afc <UART_SetConfig+0x10c>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e08b      	b.n	8003c02 <UART_SetConfig+0x212>
 8003aea:	2302      	movs	r3, #2
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e088      	b.n	8003c02 <UART_SetConfig+0x212>
 8003af0:	2304      	movs	r3, #4
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e085      	b.n	8003c02 <UART_SetConfig+0x212>
 8003af6:	2308      	movs	r3, #8
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e082      	b.n	8003c02 <UART_SetConfig+0x212>
 8003afc:	2310      	movs	r3, #16
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e07f      	b.n	8003c02 <UART_SetConfig+0x212>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a5b      	ldr	r2, [pc, #364]	@ (8003c74 <UART_SetConfig+0x284>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d124      	bne.n	8003b56 <UART_SetConfig+0x166>
 8003b0c:	4b57      	ldr	r3, [pc, #348]	@ (8003c6c <UART_SetConfig+0x27c>)
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b10:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003b14:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b18:	d011      	beq.n	8003b3e <UART_SetConfig+0x14e>
 8003b1a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b1e:	d817      	bhi.n	8003b50 <UART_SetConfig+0x160>
 8003b20:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b24:	d011      	beq.n	8003b4a <UART_SetConfig+0x15a>
 8003b26:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b2a:	d811      	bhi.n	8003b50 <UART_SetConfig+0x160>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <UART_SetConfig+0x148>
 8003b30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b34:	d006      	beq.n	8003b44 <UART_SetConfig+0x154>
 8003b36:	e00b      	b.n	8003b50 <UART_SetConfig+0x160>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e061      	b.n	8003c02 <UART_SetConfig+0x212>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e05e      	b.n	8003c02 <UART_SetConfig+0x212>
 8003b44:	2304      	movs	r3, #4
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e05b      	b.n	8003c02 <UART_SetConfig+0x212>
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	77fb      	strb	r3, [r7, #31]
 8003b4e:	e058      	b.n	8003c02 <UART_SetConfig+0x212>
 8003b50:	2310      	movs	r3, #16
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e055      	b.n	8003c02 <UART_SetConfig+0x212>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a47      	ldr	r2, [pc, #284]	@ (8003c78 <UART_SetConfig+0x288>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d124      	bne.n	8003baa <UART_SetConfig+0x1ba>
 8003b60:	4b42      	ldr	r3, [pc, #264]	@ (8003c6c <UART_SetConfig+0x27c>)
 8003b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b64:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003b68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b6c:	d011      	beq.n	8003b92 <UART_SetConfig+0x1a2>
 8003b6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b72:	d817      	bhi.n	8003ba4 <UART_SetConfig+0x1b4>
 8003b74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b78:	d011      	beq.n	8003b9e <UART_SetConfig+0x1ae>
 8003b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b7e:	d811      	bhi.n	8003ba4 <UART_SetConfig+0x1b4>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <UART_SetConfig+0x19c>
 8003b84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b88:	d006      	beq.n	8003b98 <UART_SetConfig+0x1a8>
 8003b8a:	e00b      	b.n	8003ba4 <UART_SetConfig+0x1b4>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e037      	b.n	8003c02 <UART_SetConfig+0x212>
 8003b92:	2302      	movs	r3, #2
 8003b94:	77fb      	strb	r3, [r7, #31]
 8003b96:	e034      	b.n	8003c02 <UART_SetConfig+0x212>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e031      	b.n	8003c02 <UART_SetConfig+0x212>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	77fb      	strb	r3, [r7, #31]
 8003ba2:	e02e      	b.n	8003c02 <UART_SetConfig+0x212>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e02b      	b.n	8003c02 <UART_SetConfig+0x212>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a33      	ldr	r2, [pc, #204]	@ (8003c7c <UART_SetConfig+0x28c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d124      	bne.n	8003bfe <UART_SetConfig+0x20e>
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c6c <UART_SetConfig+0x27c>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003bbc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bc0:	d011      	beq.n	8003be6 <UART_SetConfig+0x1f6>
 8003bc2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bc6:	d817      	bhi.n	8003bf8 <UART_SetConfig+0x208>
 8003bc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bcc:	d011      	beq.n	8003bf2 <UART_SetConfig+0x202>
 8003bce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bd2:	d811      	bhi.n	8003bf8 <UART_SetConfig+0x208>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <UART_SetConfig+0x1f0>
 8003bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bdc:	d006      	beq.n	8003bec <UART_SetConfig+0x1fc>
 8003bde:	e00b      	b.n	8003bf8 <UART_SetConfig+0x208>
 8003be0:	2300      	movs	r3, #0
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e00d      	b.n	8003c02 <UART_SetConfig+0x212>
 8003be6:	2302      	movs	r3, #2
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e00a      	b.n	8003c02 <UART_SetConfig+0x212>
 8003bec:	2304      	movs	r3, #4
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e007      	b.n	8003c02 <UART_SetConfig+0x212>
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e004      	b.n	8003c02 <UART_SetConfig+0x212>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e001      	b.n	8003c02 <UART_SetConfig+0x212>
 8003bfe:	2310      	movs	r3, #16
 8003c00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c0a:	d16b      	bne.n	8003ce4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003c0c:	7ffb      	ldrb	r3, [r7, #31]
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d838      	bhi.n	8003c84 <UART_SetConfig+0x294>
 8003c12:	a201      	add	r2, pc, #4	@ (adr r2, 8003c18 <UART_SetConfig+0x228>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c45 	.word	0x08003c45
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c85 	.word	0x08003c85
 8003c28:	08003c53 	.word	0x08003c53
 8003c2c:	08003c85 	.word	0x08003c85
 8003c30:	08003c85 	.word	0x08003c85
 8003c34:	08003c85 	.word	0x08003c85
 8003c38:	08003c5b 	.word	0x08003c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7ff f890 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 8003c40:	61b8      	str	r0, [r7, #24]
        break;
 8003c42:	e024      	b.n	8003c8e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c44:	f7ff f8ae 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 8003c48:	61b8      	str	r0, [r7, #24]
        break;
 8003c4a:	e020      	b.n	8003c8e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c80 <UART_SetConfig+0x290>)
 8003c4e:	61bb      	str	r3, [r7, #24]
        break;
 8003c50:	e01d      	b.n	8003c8e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c52:	f7ff f825 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8003c56:	61b8      	str	r0, [r7, #24]
        break;
 8003c58:	e019      	b.n	8003c8e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c5e:	61bb      	str	r3, [r7, #24]
        break;
 8003c60:	e015      	b.n	8003c8e <UART_SetConfig+0x29e>
 8003c62:	bf00      	nop
 8003c64:	efff69f3 	.word	0xefff69f3
 8003c68:	40013800 	.word	0x40013800
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40004400 	.word	0x40004400
 8003c74:	40004800 	.word	0x40004800
 8003c78:	40004c00 	.word	0x40004c00
 8003c7c:	40005000 	.word	0x40005000
 8003c80:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	77bb      	strb	r3, [r7, #30]
        break;
 8003c8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d073      	beq.n	8003d7c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	005a      	lsls	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	441a      	add	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b0f      	cmp	r3, #15
 8003cae:	d916      	bls.n	8003cde <UART_SetConfig+0x2ee>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb6:	d212      	bcs.n	8003cde <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	f023 030f 	bic.w	r3, r3, #15
 8003cc0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	89fb      	ldrh	r3, [r7, #14]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	89fa      	ldrh	r2, [r7, #14]
 8003cda:	60da      	str	r2, [r3, #12]
 8003cdc:	e04e      	b.n	8003d7c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	77bb      	strb	r3, [r7, #30]
 8003ce2:	e04b      	b.n	8003d7c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ce4:	7ffb      	ldrb	r3, [r7, #31]
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d827      	bhi.n	8003d3a <UART_SetConfig+0x34a>
 8003cea:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <UART_SetConfig+0x300>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d25 	.word	0x08003d25
 8003cfc:	08003d3b 	.word	0x08003d3b
 8003d00:	08003d2b 	.word	0x08003d2b
 8003d04:	08003d3b 	.word	0x08003d3b
 8003d08:	08003d3b 	.word	0x08003d3b
 8003d0c:	08003d3b 	.word	0x08003d3b
 8003d10:	08003d33 	.word	0x08003d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7ff f824 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 8003d18:	61b8      	str	r0, [r7, #24]
        break;
 8003d1a:	e013      	b.n	8003d44 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d1c:	f7ff f842 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 8003d20:	61b8      	str	r0, [r7, #24]
        break;
 8003d22:	e00f      	b.n	8003d44 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d24:	4b1b      	ldr	r3, [pc, #108]	@ (8003d94 <UART_SetConfig+0x3a4>)
 8003d26:	61bb      	str	r3, [r7, #24]
        break;
 8003d28:	e00c      	b.n	8003d44 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2a:	f7fe ffb9 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8003d2e:	61b8      	str	r0, [r7, #24]
        break;
 8003d30:	e008      	b.n	8003d44 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d36:	61bb      	str	r3, [r7, #24]
        break;
 8003d38:	e004      	b.n	8003d44 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	77bb      	strb	r3, [r7, #30]
        break;
 8003d42:	bf00      	nop
    }

    if (pclk != 0U)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d018      	beq.n	8003d7c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	085a      	lsrs	r2, r3, #1
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	441a      	add	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b0f      	cmp	r3, #15
 8003d62:	d909      	bls.n	8003d78 <UART_SetConfig+0x388>
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6a:	d205      	bcs.n	8003d78 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	e001      	b.n	8003d7c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d88:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	007a1200 	.word	0x007a1200

08003d98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01a      	beq.n	8003eae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e96:	d10a      	bne.n	8003eae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b098      	sub	sp, #96	@ 0x60
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003eec:	f7fc fe42 	bl	8000b74 <HAL_GetTick>
 8003ef0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d12e      	bne.n	8003f5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f88c 	bl	800402c <UART_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d021      	beq.n	8003f5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e6      	bne.n	8003f1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e062      	b.n	8004024 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d149      	bne.n	8004000 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f74:	2200      	movs	r2, #0
 8003f76:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f856 	bl	800402c <UART_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d03c      	beq.n	8004000 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	623b      	str	r3, [r7, #32]
   return(result);
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e6      	bne.n	8003f86 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fd8:	61fa      	str	r2, [r7, #28]
 8003fda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	69b9      	ldr	r1, [r7, #24]
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e5      	bne.n	8003fb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e011      	b.n	8004024 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3758      	adds	r7, #88	@ 0x58
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403c:	e04f      	b.n	80040de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d04b      	beq.n	80040de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004046:	f7fc fd95 	bl	8000b74 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	429a      	cmp	r2, r3
 8004054:	d302      	bcc.n	800405c <UART_WaitOnFlagUntilTimeout+0x30>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e04e      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	d037      	beq.n	80040de <UART_WaitOnFlagUntilTimeout+0xb2>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b80      	cmp	r3, #128	@ 0x80
 8004072:	d034      	beq.n	80040de <UART_WaitOnFlagUntilTimeout+0xb2>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b40      	cmp	r3, #64	@ 0x40
 8004078:	d031      	beq.n	80040de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b08      	cmp	r3, #8
 8004086:	d110      	bne.n	80040aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2208      	movs	r2, #8
 800408e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f8ff 	bl	8004294 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2208      	movs	r2, #8
 800409a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e029      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040b8:	d111      	bne.n	80040de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f8e5 	bl	8004294 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e00f      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d0a0      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b096      	sub	sp, #88	@ 0x58
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	4613      	mov	r3, r2
 8004114:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2222      	movs	r2, #34	@ 0x22
 8004130:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004138:	2b00      	cmp	r3, #0
 800413a:	d028      	beq.n	800418e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004140:	4a3e      	ldr	r2, [pc, #248]	@ (800423c <UART_Start_Receive_DMA+0x134>)
 8004142:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004148:	4a3d      	ldr	r2, [pc, #244]	@ (8004240 <UART_Start_Receive_DMA+0x138>)
 800414a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004150:	4a3c      	ldr	r2, [pc, #240]	@ (8004244 <UART_Start_Receive_DMA+0x13c>)
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004158:	2200      	movs	r2, #0
 800415a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3324      	adds	r3, #36	@ 0x24
 8004166:	4619      	mov	r1, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416c:	461a      	mov	r2, r3
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	f7fc fe64 	bl	8000e3c <HAL_DMA_Start_IT>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2210      	movs	r2, #16
 800417e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e051      	b.n	8004232 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d018      	beq.n	80041c8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041b6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80041c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e6      	bne.n	8004196 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3308      	adds	r3, #8
 80041e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80041e8:	637a      	str	r2, [r7, #52]	@ 0x34
 80041ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80041f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3308      	adds	r3, #8
 8004202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	613b      	str	r3, [r7, #16]
   return(result);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3308      	adds	r3, #8
 800421a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800421c:	623a      	str	r2, [r7, #32]
 800421e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	69f9      	ldr	r1, [r7, #28]
 8004222:	6a3a      	ldr	r2, [r7, #32]
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	61bb      	str	r3, [r7, #24]
   return(result);
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e5      	bne.n	80041fc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3758      	adds	r7, #88	@ 0x58
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	0800435d 	.word	0x0800435d
 8004240:	08004483 	.word	0x08004483
 8004244:	080044c1 	.word	0x080044c1

08004248 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	@ 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	60bb      	str	r3, [r7, #8]
   return(result);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6979      	ldr	r1, [r7, #20]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	613b      	str	r3, [r7, #16]
   return(result);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e6      	bne.n	8004250 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004288:	bf00      	nop
 800428a:	3724      	adds	r7, #36	@ 0x24
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004294:	b480      	push	{r7}
 8004296:	b095      	sub	sp, #84	@ 0x54
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80042bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e6      	bne.n	800429c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3308      	adds	r3, #8
 80042d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3308      	adds	r3, #8
 80042ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e5      	bne.n	80042ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004306:	2b01      	cmp	r3, #1
 8004308:	d118      	bne.n	800433c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	60bb      	str	r3, [r7, #8]
   return(result);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f023 0310 	bic.w	r3, r3, #16
 800431e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6979      	ldr	r1, [r7, #20]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	613b      	str	r3, [r7, #16]
   return(result);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004350:	bf00      	nop
 8004352:	3754      	adds	r7, #84	@ 0x54
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b09c      	sub	sp, #112	@ 0x70
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b20      	cmp	r3, #32
 8004370:	d071      	beq.n	8004456 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004374:	2200      	movs	r2, #0
 8004376:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800437a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004388:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800438a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800438e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004398:	65bb      	str	r3, [r7, #88]	@ 0x58
 800439a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800439e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e6      	bne.n	800437a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3308      	adds	r3, #8
 80043b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80043c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043cc:	647a      	str	r2, [r7, #68]	@ 0x44
 80043ce:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3308      	adds	r3, #8
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	623b      	str	r3, [r7, #32]
   return(result);
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80043f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3308      	adds	r3, #8
 80043fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004400:	633a      	str	r2, [r7, #48]	@ 0x30
 8004402:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004416:	2220      	movs	r2, #32
 8004418:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800441e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004420:	2b01      	cmp	r3, #1
 8004422:	d118      	bne.n	8004456 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	60fb      	str	r3, [r7, #12]
   return(result);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f023 0310 	bic.w	r3, r3, #16
 8004438:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800443a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004442:	61fb      	str	r3, [r7, #28]
 8004444:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	617b      	str	r3, [r7, #20]
   return(result);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e6      	bne.n	8004424 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004458:	2200      	movs	r2, #0
 800445a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800445c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800445e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004466:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800446a:	4619      	mov	r1, r3
 800446c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800446e:	f7fc f8ed 	bl	800064c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004472:	e002      	b.n	800447a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004474:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004476:	f7ff fa9d 	bl	80039b4 <HAL_UART_RxCpltCallback>
}
 800447a:	bf00      	nop
 800447c:	3770      	adds	r7, #112	@ 0x70
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800449a:	2b01      	cmp	r3, #1
 800449c:	d109      	bne.n	80044b2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044a4:	085b      	lsrs	r3, r3, #1
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	4619      	mov	r1, r3
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7fc f8ce 	bl	800064c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044b0:	e002      	b.n	80044b8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7ff fa88 	bl	80039c8 <HAL_UART_RxHalfCpltCallback>
}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044d2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e6:	2b80      	cmp	r3, #128	@ 0x80
 80044e8:	d109      	bne.n	80044fe <UART_DMAError+0x3e>
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b21      	cmp	r3, #33	@ 0x21
 80044ee:	d106      	bne.n	80044fe <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80044f8:	6978      	ldr	r0, [r7, #20]
 80044fa:	f7ff fea5 	bl	8004248 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004508:	2b40      	cmp	r3, #64	@ 0x40
 800450a:	d109      	bne.n	8004520 <UART_DMAError+0x60>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b22      	cmp	r3, #34	@ 0x22
 8004510:	d106      	bne.n	8004520 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800451a:	6978      	ldr	r0, [r7, #20]
 800451c:	f7ff feba 	bl	8004294 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004526:	f043 0210 	orr.w	r2, r3, #16
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004530:	6978      	ldr	r0, [r7, #20]
 8004532:	f7ff fa53 	bl	80039dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004536:	bf00      	nop
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7ff fa3d 	bl	80039dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b088      	sub	sp, #32
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6979      	ldr	r1, [r7, #20]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	613b      	str	r3, [r7, #16]
   return(result);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e6      	bne.n	8004572 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff f9f5 	bl	80039a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045b6:	bf00      	nop
 80045b8:	3720      	adds	r7, #32
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b08c      	sub	sp, #48	@ 0x30
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	4613      	mov	r3, r2
 80045de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d142      	bne.n	8004670 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e03b      	b.n	8004672 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	461a      	mov	r2, r3
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7ff fd7b 	bl	8004108 <UART_Start_Receive_DMA>
 8004612:	4603      	mov	r3, r0
 8004614:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004618:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800461c:	2b00      	cmp	r3, #0
 800461e:	d124      	bne.n	800466a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004624:	2b01      	cmp	r3, #1
 8004626:	d11d      	bne.n	8004664 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2210      	movs	r2, #16
 800462e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	617b      	str	r3, [r7, #20]
   return(result);
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f043 0310 	orr.w	r3, r3, #16
 8004644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004650:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6a39      	ldr	r1, [r7, #32]
 8004654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	61fb      	str	r3, [r7, #28]
   return(result);
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e6      	bne.n	8004630 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004662:	e002      	b.n	800466a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800466a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800466e:	e000      	b.n	8004672 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3730      	adds	r7, #48	@ 0x30
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <memset>:
 800467a:	4402      	add	r2, r0
 800467c:	4603      	mov	r3, r0
 800467e:	4293      	cmp	r3, r2
 8004680:	d100      	bne.n	8004684 <memset+0xa>
 8004682:	4770      	bx	lr
 8004684:	f803 1b01 	strb.w	r1, [r3], #1
 8004688:	e7f9      	b.n	800467e <memset+0x4>
	...

0800468c <__libc_init_array>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4d0d      	ldr	r5, [pc, #52]	@ (80046c4 <__libc_init_array+0x38>)
 8004690:	4c0d      	ldr	r4, [pc, #52]	@ (80046c8 <__libc_init_array+0x3c>)
 8004692:	1b64      	subs	r4, r4, r5
 8004694:	10a4      	asrs	r4, r4, #2
 8004696:	2600      	movs	r6, #0
 8004698:	42a6      	cmp	r6, r4
 800469a:	d109      	bne.n	80046b0 <__libc_init_array+0x24>
 800469c:	4d0b      	ldr	r5, [pc, #44]	@ (80046cc <__libc_init_array+0x40>)
 800469e:	4c0c      	ldr	r4, [pc, #48]	@ (80046d0 <__libc_init_array+0x44>)
 80046a0:	f000 f826 	bl	80046f0 <_init>
 80046a4:	1b64      	subs	r4, r4, r5
 80046a6:	10a4      	asrs	r4, r4, #2
 80046a8:	2600      	movs	r6, #0
 80046aa:	42a6      	cmp	r6, r4
 80046ac:	d105      	bne.n	80046ba <__libc_init_array+0x2e>
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b4:	4798      	blx	r3
 80046b6:	3601      	adds	r6, #1
 80046b8:	e7ee      	b.n	8004698 <__libc_init_array+0xc>
 80046ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80046be:	4798      	blx	r3
 80046c0:	3601      	adds	r6, #1
 80046c2:	e7f2      	b.n	80046aa <__libc_init_array+0x1e>
 80046c4:	08004740 	.word	0x08004740
 80046c8:	08004740 	.word	0x08004740
 80046cc:	08004740 	.word	0x08004740
 80046d0:	08004744 	.word	0x08004744

080046d4 <memcpy>:
 80046d4:	440a      	add	r2, r1
 80046d6:	4291      	cmp	r1, r2
 80046d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80046dc:	d100      	bne.n	80046e0 <memcpy+0xc>
 80046de:	4770      	bx	lr
 80046e0:	b510      	push	{r4, lr}
 80046e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ea:	4291      	cmp	r1, r2
 80046ec:	d1f9      	bne.n	80046e2 <memcpy+0xe>
 80046ee:	bd10      	pop	{r4, pc}

080046f0 <_init>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	bf00      	nop
 80046f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f6:	bc08      	pop	{r3}
 80046f8:	469e      	mov	lr, r3
 80046fa:	4770      	bx	lr

080046fc <_fini>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	bf00      	nop
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr

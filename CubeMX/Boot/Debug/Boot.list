
Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800576c  0800576c  0000676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800580c  0800580c  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  0800580c  0800580c  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800580c  0800580c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800580c  0800580c  0000680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005810  08005810  00006810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005814  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000620  20000068  20000068  00007068  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000688  20000688  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e593  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a4  00000000  00000000  0001562b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  000186d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000861  00000000  00000000  00019210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022364  00000000  00000000  00019a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012359  00000000  00000000  0003bdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2f9f  00000000  00000000  0004e12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001110cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000302c  00000000  00000000  00111110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0011413c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005754 	.word	0x08005754

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08005754 	.word	0x08005754

080001d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001da:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <MX_DMA_Init+0x38>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a0b      	ldr	r2, [pc, #44]	@ (800020c <MX_DMA_Init+0x38>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6153      	str	r3, [r2, #20]
 80001e6:	4b09      	ldr	r3, [pc, #36]	@ (800020c <MX_DMA_Init+0x38>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2100      	movs	r1, #0
 80001f6:	2010      	movs	r0, #16
 80001f8:	f000 fc89 	bl	8000b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80001fc:	2010      	movs	r0, #16
 80001fe:	f000 fca2 	bl	8000b46 <HAL_NVIC_EnableIRQ>

}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40021000 	.word	0x40021000

08000210 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b08a      	sub	sp, #40	@ 0x28
 8000214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000226:	4b4b      	ldr	r3, [pc, #300]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a4a      	ldr	r2, [pc, #296]	@ (8000354 <MX_GPIO_Init+0x144>)
 800022c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b48      	ldr	r3, [pc, #288]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800023a:	613b      	str	r3, [r7, #16]
 800023c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800023e:	4b45      	ldr	r3, [pc, #276]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a44      	ldr	r2, [pc, #272]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000244:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b42      	ldr	r3, [pc, #264]	@ (8000354 <MX_GPIO_Init+0x144>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000256:	4b3f      	ldr	r3, [pc, #252]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	4a3e      	ldr	r2, [pc, #248]	@ (8000354 <MX_GPIO_Init+0x144>)
 800025c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000260:	6153      	str	r3, [r2, #20]
 8000262:	4b3c      	ldr	r3, [pc, #240]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800026a:	60bb      	str	r3, [r7, #8]
 800026c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	4b39      	ldr	r3, [pc, #228]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a38      	ldr	r2, [pc, #224]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000278:	6153      	str	r3, [r2, #20]
 800027a:	4b36      	ldr	r3, [pc, #216]	@ (8000354 <MX_GPIO_Init+0x144>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000282:	607b      	str	r3, [r7, #4]
 8000284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000286:	4b33      	ldr	r3, [pc, #204]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a32      	ldr	r2, [pc, #200]	@ (8000354 <MX_GPIO_Init+0x144>)
 800028c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b30      	ldr	r3, [pc, #192]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2120      	movs	r1, #32
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f001 f9f9 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80002b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	4619      	mov	r1, r3
 80002c0:	4825      	ldr	r0, [pc, #148]	@ (8000358 <MX_GPIO_Init+0x148>)
 80002c2:	f001 f861 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002c6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80002ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002cc:	2303      	movs	r3, #3
 80002ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	4619      	mov	r1, r3
 80002da:	481f      	ldr	r0, [pc, #124]	@ (8000358 <MX_GPIO_Init+0x148>)
 80002dc:	f001 f854 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80002e0:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 80002e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e6:	2303      	movs	r3, #3
 80002e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4619      	mov	r1, r3
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f8:	f001 f846 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002fc:	2320      	movs	r3, #32
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000300:	2301      	movs	r3, #1
 8000302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	2300      	movs	r3, #0
 8000306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000308:	2300      	movs	r3, #0
 800030a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	4619      	mov	r1, r3
 8000312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000316:	f001 f837 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800031a:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 800031e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000320:	2303      	movs	r3, #3
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	4619      	mov	r1, r3
 800032e:	480b      	ldr	r0, [pc, #44]	@ (800035c <MX_GPIO_Init+0x14c>)
 8000330:	f001 f82a 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000334:	2304      	movs	r3, #4
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000338:	2303      	movs	r3, #3
 800033a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	4619      	mov	r1, r3
 8000346:	4806      	ldr	r0, [pc, #24]	@ (8000360 <MX_GPIO_Init+0x150>)
 8000348:	f001 f81e 	bl	8001388 <HAL_GPIO_Init>

}
 800034c:	bf00      	nop
 800034e:	3728      	adds	r7, #40	@ 0x28
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000
 8000358:	48000800 	.word	0x48000800
 800035c:	48000400 	.word	0x48000400
 8000360:	48000c00 	.word	0x48000c00

08000364 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800036c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000370:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000374:	f003 0301 	and.w	r3, r3, #1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d013      	beq.n	80003a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800037c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000380:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000384:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000388:	2b00      	cmp	r3, #0
 800038a:	d00b      	beq.n	80003a4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800038c:	e000      	b.n	8000390 <ITM_SendChar+0x2c>
    {
      __NOP();
 800038e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000390:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800039a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	b2d2      	uxtb	r2, r2
 80003a2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80003a4:	687b      	ldr	r3, [r7, #4]
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <_write>:
{
	scheduler_pushTask( Iprint );
}

int _write(int file, char *ptr, int len)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b086      	sub	sp, #24
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	60f8      	str	r0, [r7, #12]
 80003ba:	60b9      	str	r1, [r7, #8]
 80003bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	e009      	b.n	80003d8 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	1c5a      	adds	r2, r3, #1
 80003c8:	60ba      	str	r2, [r7, #8]
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ffc9 	bl	8000364 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	3301      	adds	r3, #1
 80003d6:	617b      	str	r3, [r7, #20]
 80003d8:	697a      	ldr	r2, [r7, #20]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	429a      	cmp	r2, r3
 80003de:	dbf1      	blt.n	80003c4 <_write+0x12>
  }
  return len;
 80003e0:	687b      	ldr	r3, [r7, #4]
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3718      	adds	r7, #24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fa4c 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f816 	bl	8000424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f7ff ff0a 	bl	8000210 <MX_GPIO_Init>
  MX_DMA_Init();
 80003fc:	f7ff feea 	bl	80001d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000400:	f000 f976 	bl	80006f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // initiate command handler first to be ready to register other modules.
  cmdhandler_init( &huart2 );
 8000404:	4806      	ldr	r0, [pc, #24]	@ (8000420 <main+0x34>)
 8000406:	f004 f8a3 	bl	8004550 <cmdhandler_init>

  led_init();
 800040a:	f004 faa1 	bl	8004950 <led_init>
  flash_init();
 800040e:	f004 f97b 	bl	8004708 <flash_init>



  scheduler_init();
 8000412:	f004 fb15 	bl	8004a40 <scheduler_init>
  //scheduler_addTask(500, excute);
  scheduler_run();
 8000416:	f004 fbb9 	bl	8004b8c <scheduler_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800041a:	bf00      	nop
 800041c:	e7fd      	b.n	800041a <main+0x2e>
 800041e:	bf00      	nop
 8000420:	20000088 	.word	0x20000088

08000424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b0a6      	sub	sp, #152	@ 0x98
 8000428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800042e:	2228      	movs	r2, #40	@ 0x28
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f004 fecc 	bl	80051d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000438:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2258      	movs	r2, #88	@ 0x58
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f004 febe 	bl	80051d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000454:	2302      	movs	r3, #2
 8000456:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000458:	2301      	movs	r3, #1
 800045a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800045c:	2310      	movs	r3, #16
 800045e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000462:	2302      	movs	r3, #2
 8000464:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000468:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800046c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000470:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000474:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000482:	4618      	mov	r0, r3
 8000484:	f001 f93c 	bl	8001700 <HAL_RCC_OscConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800048e:	f000 f827 	bl	80004e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000492:	230f      	movs	r3, #15
 8000494:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000496:	2302      	movs	r3, #2
 8000498:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800049e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80004ac:	2102      	movs	r1, #2
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 f97a 	bl	80027a8 <HAL_RCC_ClockConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004ba:	f000 f811 	bl	80004e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004be:	2302      	movs	r3, #2
 80004c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4618      	mov	r0, r3
 80004ca:	f002 fb8d 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004d4:	f000 f804 	bl	80004e0 <Error_Handler>
  }
}
 80004d8:	bf00      	nop
 80004da:	3798      	adds	r7, #152	@ 0x98
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <Error_Handler+0x8>

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <HAL_MspInit+0x44>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000530 <HAL_MspInit+0x44>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <HAL_MspInit+0x44>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <HAL_MspInit+0x44>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a08      	ldr	r2, [pc, #32]	@ (8000530 <HAL_MspInit+0x44>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <HAL_MspInit+0x44>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000522:	2007      	movs	r0, #7
 8000524:	f000 fae8 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40021000 	.word	0x40021000

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <NMI_Handler+0x4>

0800053c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <HardFault_Handler+0x4>

08000544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <MemManage_Handler+0x4>

0800054c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <BusFault_Handler+0x4>

08000554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <UsageFault_Handler+0x4>

0800055c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800058a:	f000 f9c5 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <DMA1_Channel6_IRQHandler+0x10>)
 800059a:	f000 fc10 	bl	8000dbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000110 	.word	0x20000110

080005a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <USART2_IRQHandler+0x10>)
 80005ae:	f002 fd87 	bl	80030c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000088 	.word	0x20000088

080005bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e00a      	b.n	80005e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005ce:	f3af 8000 	nop.w
 80005d2:	4601      	mov	r1, r0
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	b2ca      	uxtb	r2, r1
 80005dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	dbf0      	blt.n	80005ce <_read+0x12>
  }

  return len;
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800061e:	605a      	str	r2, [r3, #4]
  return 0;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <_isatty>:

int _isatty(int file)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000668:	4a14      	ldr	r2, [pc, #80]	@ (80006bc <_sbrk+0x5c>)
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <_sbrk+0x60>)
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <_sbrk+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d102      	bne.n	8000682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800067c:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <_sbrk+0x64>)
 800067e:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <_sbrk+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <_sbrk+0x64>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	429a      	cmp	r2, r3
 800068e:	d207      	bcs.n	80006a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000690:	f004 fdec 	bl	800526c <__errno>
 8000694:	4603      	mov	r3, r0
 8000696:	220c      	movs	r2, #12
 8000698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	e009      	b.n	80006b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a6:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	4a05      	ldr	r2, [pc, #20]	@ (80006c4 <_sbrk+0x64>)
 80006b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006b2:	68fb      	ldr	r3, [r7, #12]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20010000 	.word	0x20010000
 80006c0:	00000400 	.word	0x00000400
 80006c4:	20000084 	.word	0x20000084
 80006c8:	20000688 	.word	0x20000688

080006cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <SystemInit+0x20>)
 80006d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006d6:	4a05      	ldr	r2, [pc, #20]	@ (80006ec <SystemInit+0x20>)
 80006d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 80006f6:	4a15      	ldr	r2, [pc, #84]	@ (800074c <MX_USART2_UART_Init+0x5c>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 8000734:	f002 fc76 	bl	8003024 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073e:	f7ff fecf 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000088 	.word	0x20000088
 800074c:	40004400 	.word	0x40004400

08000750 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	@ 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a2e      	ldr	r2, [pc, #184]	@ (8000828 <HAL_UART_MspInit+0xd8>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d156      	bne.n	8000820 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000772:	4b2e      	ldr	r3, [pc, #184]	@ (800082c <HAL_UART_MspInit+0xdc>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a2d      	ldr	r2, [pc, #180]	@ (800082c <HAL_UART_MspInit+0xdc>)
 8000778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <HAL_UART_MspInit+0xdc>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b28      	ldr	r3, [pc, #160]	@ (800082c <HAL_UART_MspInit+0xdc>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a27      	ldr	r2, [pc, #156]	@ (800082c <HAL_UART_MspInit+0xdc>)
 8000790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000794:	6153      	str	r3, [r2, #20]
 8000796:	4b25      	ldr	r3, [pc, #148]	@ (800082c <HAL_UART_MspInit+0xdc>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007a2:	230c      	movs	r3, #12
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b2:	2307      	movs	r3, #7
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c0:	f000 fde2 	bl	8001388 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <HAL_UART_MspInit+0xe0>)
 80007c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000834 <HAL_UART_MspInit+0xe4>)
 80007c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <HAL_UART_MspInit+0xe0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d0:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <HAL_UART_MspInit+0xe0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <HAL_UART_MspInit+0xe0>)
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <HAL_UART_MspInit+0xe0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <HAL_UART_MspInit+0xe0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <HAL_UART_MspInit+0xe0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <HAL_UART_MspInit+0xe0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007f4:	480e      	ldr	r0, [pc, #56]	@ (8000830 <HAL_UART_MspInit+0xe0>)
 80007f6:	f000 f9c0 	bl	8000b7a <HAL_DMA_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000800:	f7ff fe6e 	bl	80004e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <HAL_UART_MspInit+0xe0>)
 8000808:	675a      	str	r2, [r3, #116]	@ 0x74
 800080a:	4a09      	ldr	r2, [pc, #36]	@ (8000830 <HAL_UART_MspInit+0xe0>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	2026      	movs	r0, #38	@ 0x26
 8000816:	f000 f97a 	bl	8000b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800081a:	2026      	movs	r0, #38	@ 0x26
 800081c:	f000 f993 	bl	8000b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	@ 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40004400 	.word	0x40004400
 800082c:	40021000 	.word	0x40021000
 8000830:	20000110 	.word	0x20000110
 8000834:	4002006c 	.word	0x4002006c

08000838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000838:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000870 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800083c:	f7ff ff46 	bl	80006cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	@ (8000874 <LoopForever+0x6>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	@ (8000878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <LoopForever+0xe>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	@ (8000880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	@ (8000884 <LoopForever+0x16>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000866:	f004 fd07 	bl	8005278 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086a:	f7ff fdbf 	bl	80003ec <main>

0800086e <LoopForever>:

LoopForever:
    b LoopForever
 800086e:	e7fe      	b.n	800086e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000870:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800087c:	08005814 	.word	0x08005814
  ldr r2, =_sbss
 8000880:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000884:	20000688 	.word	0x20000688

08000888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_2_IRQHandler>
	...

0800088c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <HAL_Init+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	@ (80008b4 <HAL_Init+0x28>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f92b 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 f808 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff fe20 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_InitTick+0x54>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <HAL_InitTick+0x58>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f943 	bl	8000b62 <HAL_SYSTICK_Config>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00e      	b.n	8000904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d80a      	bhi.n	8000902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f000 f90b 	bl	8000b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f8:	4a06      	ldr	r2, [pc, #24]	@ (8000914 <HAL_InitTick+0x5c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000000 	.word	0x20000000
 8000910:	20000008 	.word	0x20000008
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_IncTick+0x20>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <HAL_IncTick+0x24>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <HAL_IncTick+0x24>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000008 	.word	0x20000008
 800093c:	20000154 	.word	0x20000154

08000940 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;  
 8000944:	4b03      	ldr	r3, [pc, #12]	@ (8000954 <HAL_GetTick+0x14>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000154 	.word	0x20000154

08000958 <__NVIC_SetPriorityGrouping>:
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	@ (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_EnableIRQ>:
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db0b      	blt.n	80009e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 021f 	and.w	r2, r3, #31
 80009d4:	4907      	ldr	r1, [pc, #28]	@ (80009f4 <__NVIC_EnableIRQ+0x38>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	2001      	movs	r0, #1
 80009de:	fa00 f202 	lsl.w	r2, r0, r2
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000e100 	.word	0xe000e100

080009f8 <__NVIC_SetPriority>:
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	@ (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	@ (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	@ 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	@ 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <SysTick_Config>:
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f7ff ff8e 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff29 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff3e 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff8e 	bl	8000a4c <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff31 	bl	80009bc <__NVIC_EnableIRQ>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffa2 	bl	8000ab4 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d101      	bne.n	8000b90 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e037      	b.n	8000c00 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2202      	movs	r2, #2
 8000b94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000ba6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000baa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f9bc 	bl	8000f60 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <HAL_DMA_Start_IT+0x20>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e04a      	b.n	8000cbe <HAL_DMA_Start_IT+0xb6>
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d13a      	bne.n	8000cb0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2200      	movs	r2, #0
 8000c46:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f000 f950 	bl	8000f04 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d008      	beq.n	8000c7e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f042 020e 	orr.w	r2, r2, #14
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	e00f      	b.n	8000c9e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f042 020a 	orr.w	r2, r2, #10
 8000c8c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0204 	bic.w	r2, r2, #4
 8000c9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f042 0201 	orr.w	r2, r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e005      	b.n	8000cbc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e02e      	b.n	8000d36 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d008      	beq.n	8000cf4 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e020      	b.n	8000d36 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 020e 	bic.w	r2, r2, #14
 8000d02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 0201 	bic.w	r2, r2, #1
 8000d12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2201      	movs	r2, #1
 8000d28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d005      	beq.n	8000d64 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	e027      	b.n	8000db4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 020e 	bic.w	r2, r2, #14
 8000d72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 0201 	bic.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d92:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	4798      	blx	r3
    }
  }
  return status;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	2204      	movs	r2, #4
 8000ddc:	409a      	lsls	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4013      	ands	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d024      	beq.n	8000e30 <HAL_DMA_IRQHandler+0x72>
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d01f      	beq.n	8000e30 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0320 	and.w	r3, r3, #32
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d107      	bne.n	8000e0e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f022 0204 	bic.w	r2, r2, #4
 8000e0c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e16:	2104      	movs	r1, #4
 8000e18:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d06a      	beq.n	8000efc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e2e:	e065      	b.n	8000efc <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	2202      	movs	r2, #2
 8000e36:	409a      	lsls	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d02c      	beq.n	8000e9a <HAL_DMA_IRQHandler+0xdc>
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d027      	beq.n	8000e9a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0320 	and.w	r3, r3, #32
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10b      	bne.n	8000e70 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 020a 	bic.w	r2, r2, #10
 8000e66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e78:	2102      	movs	r1, #2
 8000e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d035      	beq.n	8000efc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e98:	e030      	b.n	8000efc <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d028      	beq.n	8000efc <HAL_DMA_IRQHandler+0x13e>
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d023      	beq.n	8000efc <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 020e 	bic.w	r2, r2, #14
 8000ec2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d004      	beq.n	8000efc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	4798      	blx	r3
    }
  }
}
 8000efa:	e7ff      	b.n	8000efc <HAL_DMA_IRQHandler+0x13e>
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b10      	cmp	r3, #16
 8000f30:	d108      	bne.n	8000f44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f42:	e007      	b.n	8000f54 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	60da      	str	r2, [r3, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <DMA_CalcBaseAndBitshift+0x60>)
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d80f      	bhi.n	8000f94 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <DMA_CalcBaseAndBitshift+0x64>)
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a12      	ldr	r2, [pc, #72]	@ (8000fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	009a      	lsls	r2, r3, #2
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fcc <DMA_CalcBaseAndBitshift+0x6c>)
 8000f90:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000f92:	e00e      	b.n	8000fb2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <DMA_CalcBaseAndBitshift+0x70>)
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8000fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	009a      	lsls	r2, r3, #2
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a09      	ldr	r2, [pc, #36]	@ (8000fd4 <DMA_CalcBaseAndBitshift+0x74>)
 8000fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40020407 	.word	0x40020407
 8000fc4:	bffdfff8 	.word	0xbffdfff8
 8000fc8:	cccccccd 	.word	0xcccccccd
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	bffdfbf8 	.word	0xbffdfbf8
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80010b0 <HAL_FLASH_Program+0xd8>)
 8000ff4:	7e1b      	ldrb	r3, [r3, #24]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d101      	bne.n	8000ffe <HAL_FLASH_Program+0x26>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e054      	b.n	80010a8 <HAL_FLASH_Program+0xd0>
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <HAL_FLASH_Program+0xd8>)
 8001000:	2201      	movs	r2, #1
 8001002:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001004:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001008:	f000 f8a8 	bl	800115c <FLASH_WaitForLastOperation>
 800100c:	4603      	mov	r3, r0
 800100e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d144      	bne.n	80010a0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d102      	bne.n	8001022 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800101c:	2301      	movs	r3, #1
 800101e:	757b      	strb	r3, [r7, #21]
 8001020:	e007      	b.n	8001032 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d102      	bne.n	800102e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001028:	2302      	movs	r3, #2
 800102a:	757b      	strb	r3, [r7, #21]
 800102c:	e001      	b.n	8001032 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800102e:	2304      	movs	r3, #4
 8001030:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001032:	2300      	movs	r3, #0
 8001034:	75bb      	strb	r3, [r7, #22]
 8001036:	e02d      	b.n	8001094 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001038:	7dbb      	ldrb	r3, [r7, #22]
 800103a:	005a      	lsls	r2, r3, #1
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	eb02 0c03 	add.w	ip, r2, r3
 8001042:	7dbb      	ldrb	r3, [r7, #22]
 8001044:	0119      	lsls	r1, r3, #4
 8001046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800104a:	f1c1 0620 	rsb	r6, r1, #32
 800104e:	f1a1 0020 	sub.w	r0, r1, #32
 8001052:	fa22 f401 	lsr.w	r4, r2, r1
 8001056:	fa03 f606 	lsl.w	r6, r3, r6
 800105a:	4334      	orrs	r4, r6
 800105c:	fa23 f000 	lsr.w	r0, r3, r0
 8001060:	4304      	orrs	r4, r0
 8001062:	fa23 f501 	lsr.w	r5, r3, r1
 8001066:	b2a3      	uxth	r3, r4
 8001068:	4619      	mov	r1, r3
 800106a:	4660      	mov	r0, ip
 800106c:	f000 f85a 	bl	8001124 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001070:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001074:	f000 f872 	bl	800115c <FLASH_WaitForLastOperation>
 8001078:	4603      	mov	r3, r0
 800107a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800107c:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <HAL_FLASH_Program+0xdc>)
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	4a0c      	ldr	r2, [pc, #48]	@ (80010b4 <HAL_FLASH_Program+0xdc>)
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d107      	bne.n	800109e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800108e:	7dbb      	ldrb	r3, [r7, #22]
 8001090:	3301      	adds	r3, #1
 8001092:	75bb      	strb	r3, [r7, #22]
 8001094:	7dba      	ldrb	r2, [r7, #22]
 8001096:	7d7b      	ldrb	r3, [r7, #21]
 8001098:	429a      	cmp	r2, r3
 800109a:	d3cd      	bcc.n	8001038 <HAL_FLASH_Program+0x60>
 800109c:	e000      	b.n	80010a0 <HAL_FLASH_Program+0xc8>
      {
        break;
 800109e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <HAL_FLASH_Program+0xd8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	761a      	strb	r2, [r3, #24]

  return status;
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b0:	20000158 	.word	0x20000158
 80010b4:	40022000 	.word	0x40022000

080010b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <HAL_FLASH_Unlock+0x40>)
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00d      	beq.n	80010ea <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_FLASH_Unlock+0x40>)
 80010d0:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <HAL_FLASH_Unlock+0x44>)
 80010d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_FLASH_Unlock+0x40>)
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <HAL_FLASH_Unlock+0x48>)
 80010d8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <HAL_FLASH_Unlock+0x40>)
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40022000 	.word	0x40022000
 80010fc:	45670123 	.word	0x45670123
 8001100:	cdef89ab 	.word	0xcdef89ab

08001104 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <HAL_FLASH_Lock+0x1c>)
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_FLASH_Lock+0x1c>)
 800110e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001112:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40022000 	.word	0x40022000

08001124 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <FLASH_Program_HalfWord+0x30>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <FLASH_Program_HalfWord+0x34>)
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	4a07      	ldr	r2, [pc, #28]	@ (8001158 <FLASH_Program_HalfWord+0x34>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	887a      	ldrh	r2, [r7, #2]
 8001146:	801a      	strh	r2, [r3, #0]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	20000158 	.word	0x20000158
 8001158:	40022000 	.word	0x40022000

0800115c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff fbec 	bl	8000940 <HAL_GetTick>
 8001168:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800116a:	e010      	b.n	800118e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001172:	d00c      	beq.n	800118e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <FLASH_WaitForLastOperation+0x2e>
 800117a:	f7ff fbe1 	bl	8000940 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	d201      	bcs.n	800118e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e01f      	b.n	80011ce <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800118e:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <FLASH_WaitForLastOperation+0x7c>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b01      	cmp	r3, #1
 8001198:	d0e8      	beq.n	800116c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <FLASH_WaitForLastOperation+0x7c>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	f003 0320 	and.w	r3, r3, #32
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d102      	bne.n	80011ac <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <FLASH_WaitForLastOperation+0x7c>)
 80011a8:	2220      	movs	r2, #32
 80011aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011ac:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <FLASH_WaitForLastOperation+0x7c>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	2b10      	cmp	r3, #16
 80011b6:	d005      	beq.n	80011c4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <FLASH_WaitForLastOperation+0x7c>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d103      	bne.n	80011cc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80011c4:	f000 f80a 	bl	80011dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40022000 	.word	0x40022000

080011dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <FLASH_SetErrorCode+0x5c>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	f003 0310 	and.w	r3, r3, #16
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d109      	bne.n	8001206 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <FLASH_SetErrorCode+0x60>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	4a10      	ldr	r2, [pc, #64]	@ (800123c <FLASH_SetErrorCode+0x60>)
 80011fc:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <FLASH_SetErrorCode+0x5c>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b04      	cmp	r3, #4
 8001210:	d109      	bne.n	8001226 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <FLASH_SetErrorCode+0x60>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	4a08      	ldr	r2, [pc, #32]	@ (800123c <FLASH_SetErrorCode+0x60>)
 800121c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001226:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <FLASH_SetErrorCode+0x5c>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	60d3      	str	r3, [r2, #12]
}  
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	40022000 	.word	0x40022000
 800123c:	20000158 	.word	0x20000158

08001240 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001252:	4b2e      	ldr	r3, [pc, #184]	@ (800130c <HAL_FLASHEx_Erase+0xcc>)
 8001254:	7e1b      	ldrb	r3, [r3, #24]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d101      	bne.n	800125e <HAL_FLASHEx_Erase+0x1e>
 800125a:	2302      	movs	r3, #2
 800125c:	e052      	b.n	8001304 <HAL_FLASHEx_Erase+0xc4>
 800125e:	4b2b      	ldr	r3, [pc, #172]	@ (800130c <HAL_FLASHEx_Erase+0xcc>)
 8001260:	2201      	movs	r2, #1
 8001262:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d115      	bne.n	8001298 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800126c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001270:	f7ff ff74 	bl	800115c <FLASH_WaitForLastOperation>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d140      	bne.n	80012fc <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800127a:	f000 f84b 	bl	8001314 <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800127e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001282:	f7ff ff6b 	bl	800115c <FLASH_WaitForLastOperation>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <HAL_FLASHEx_Erase+0xd0>)
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	4a20      	ldr	r2, [pc, #128]	@ (8001310 <HAL_FLASHEx_Erase+0xd0>)
 8001290:	f023 0304 	bic.w	r3, r3, #4
 8001294:	6113      	str	r3, [r2, #16]
 8001296:	e031      	b.n	80012fc <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001298:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800129c:	f7ff ff5e 	bl	800115c <FLASH_WaitForLastOperation>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d12a      	bne.n	80012fc <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	e019      	b.n	80012ea <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80012b6:	68b8      	ldr	r0, [r7, #8]
 80012b8:	f000 f846 	bl	8001348 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80012c0:	f7ff ff4c 	bl	800115c <FLASH_WaitForLastOperation>
 80012c4:	4603      	mov	r3, r0
 80012c6:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_FLASHEx_Erase+0xd0>)
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	4a10      	ldr	r2, [pc, #64]	@ (8001310 <HAL_FLASHEx_Erase+0xd0>)
 80012ce:	f023 0302 	bic.w	r3, r3, #2
 80012d2:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	601a      	str	r2, [r3, #0]
            break;
 80012e0:	e00c      	b.n	80012fc <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012e8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	02da      	lsls	r2, r3, #11
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3dc      	bcc.n	80012b6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012fc:	4b03      	ldr	r3, [pc, #12]	@ (800130c <HAL_FLASHEx_Erase+0xcc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	761a      	strb	r2, [r3, #24]

  return status;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000158 	.word	0x20000158
 8001310:	40022000 	.word	0x40022000

08001314 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <FLASH_MassErase+0x2c>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <FLASH_MassErase+0x30>)
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <FLASH_MassErase+0x30>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <FLASH_MassErase+0x30>)
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	4a05      	ldr	r2, [pc, #20]	@ (8001344 <FLASH_MassErase+0x30>)
 8001330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001334:	6113      	str	r3, [r2, #16]
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	20000158 	.word	0x20000158
 8001344:	40022000 	.word	0x40022000

08001348 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <FLASH_PageErase+0x38>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <FLASH_PageErase+0x3c>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <FLASH_PageErase+0x3c>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001362:	4a08      	ldr	r2, [pc, #32]	@ (8001384 <FLASH_PageErase+0x3c>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <FLASH_PageErase+0x3c>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <FLASH_PageErase+0x3c>)
 800136e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001372:	6113      	str	r3, [r2, #16]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	20000158 	.word	0x20000158
 8001384:	40022000 	.word	0x40022000

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001396:	e160      	b.n	800165a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	4013      	ands	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8152 	beq.w	8001654 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <HAL_GPIO_Init+0x40>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d130      	bne.n	800142a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013fe:	2201      	movs	r2, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 0201 	and.w	r2, r3, #1
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b03      	cmp	r3, #3
 8001434:	d017      	beq.n	8001466 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d123      	bne.n	80014ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	08da      	lsrs	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3208      	adds	r2, #8
 800147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691a      	ldr	r2, [r3, #16]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3208      	adds	r2, #8
 80014b4:	6939      	ldr	r1, [r7, #16]
 80014b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0203 	and.w	r2, r3, #3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80ac 	beq.w	8001654 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a5d      	ldr	r2, [pc, #372]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b5b      	ldr	r3, [pc, #364]	@ (8001678 <HAL_GPIO_Init+0x2f0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001514:	4a59      	ldr	r2, [pc, #356]	@ (800167c <HAL_GPIO_Init+0x2f4>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800153e:	d025      	beq.n	800158c <HAL_GPIO_Init+0x204>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a4f      	ldr	r2, [pc, #316]	@ (8001680 <HAL_GPIO_Init+0x2f8>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d01f      	beq.n	8001588 <HAL_GPIO_Init+0x200>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4e      	ldr	r2, [pc, #312]	@ (8001684 <HAL_GPIO_Init+0x2fc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d019      	beq.n	8001584 <HAL_GPIO_Init+0x1fc>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4d      	ldr	r2, [pc, #308]	@ (8001688 <HAL_GPIO_Init+0x300>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d013      	beq.n	8001580 <HAL_GPIO_Init+0x1f8>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a4c      	ldr	r2, [pc, #304]	@ (800168c <HAL_GPIO_Init+0x304>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d00d      	beq.n	800157c <HAL_GPIO_Init+0x1f4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a4b      	ldr	r2, [pc, #300]	@ (8001690 <HAL_GPIO_Init+0x308>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d007      	beq.n	8001578 <HAL_GPIO_Init+0x1f0>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a4a      	ldr	r2, [pc, #296]	@ (8001694 <HAL_GPIO_Init+0x30c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d101      	bne.n	8001574 <HAL_GPIO_Init+0x1ec>
 8001570:	2306      	movs	r3, #6
 8001572:	e00c      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001574:	2307      	movs	r3, #7
 8001576:	e00a      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001578:	2305      	movs	r3, #5
 800157a:	e008      	b.n	800158e <HAL_GPIO_Init+0x206>
 800157c:	2304      	movs	r3, #4
 800157e:	e006      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001580:	2303      	movs	r3, #3
 8001582:	e004      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001584:	2302      	movs	r3, #2
 8001586:	e002      	b.n	800158e <HAL_GPIO_Init+0x206>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <HAL_GPIO_Init+0x206>
 800158c:	2300      	movs	r3, #0
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	f002 0203 	and.w	r2, r2, #3
 8001594:	0092      	lsls	r2, r2, #2
 8001596:	4093      	lsls	r3, r2
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800159e:	4937      	ldr	r1, [pc, #220]	@ (800167c <HAL_GPIO_Init+0x2f4>)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	3302      	adds	r3, #2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001698 <HAL_GPIO_Init+0x310>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015d0:	4a31      	ldr	r2, [pc, #196]	@ (8001698 <HAL_GPIO_Init+0x310>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d6:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <HAL_GPIO_Init+0x310>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015fa:	4a27      	ldr	r2, [pc, #156]	@ (8001698 <HAL_GPIO_Init+0x310>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001600:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <HAL_GPIO_Init+0x310>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001624:	4a1c      	ldr	r2, [pc, #112]	@ (8001698 <HAL_GPIO_Init+0x310>)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162a:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_GPIO_Init+0x310>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800164e:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <HAL_GPIO_Init+0x310>)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	f47f ae97 	bne.w	8001398 <HAL_GPIO_Init+0x10>
  }
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	371c      	adds	r7, #28
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	48000c00 	.word	0x48000c00
 800168c:	48001000 	.word	0x48001000
 8001690:	48001400 	.word	0x48001400
 8001694:	48001800 	.word	0x48001800
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	041a      	lsls	r2, r3, #16
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43d9      	mvns	r1, r3
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	400b      	ands	r3, r1
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001706:	af00      	add	r7, sp, #0
 8001708:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800170c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001710:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001712:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001716:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	f001 b83a 	b.w	800279a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 816f 	beq.w	8001a1a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800173c:	4bb5      	ldr	r3, [pc, #724]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b04      	cmp	r3, #4
 8001746:	d00c      	beq.n	8001762 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001748:	4bb2      	ldr	r3, [pc, #712]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d15c      	bne.n	800180e <HAL_RCC_OscConfig+0x10e>
 8001754:	4baf      	ldr	r3, [pc, #700]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001760:	d155      	bne.n	800180e <HAL_RCC_OscConfig+0x10e>
 8001762:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001766:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001776:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	095b      	lsrs	r3, r3, #5
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d102      	bne.n	8001794 <HAL_RCC_OscConfig+0x94>
 800178e:	4ba1      	ldr	r3, [pc, #644]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	e015      	b.n	80017c0 <HAL_RCC_OscConfig+0xc0>
 8001794:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001798:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80017a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017ac:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80017b0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80017b4:	fa93 f3a3 	rbit	r3, r3
 80017b8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017bc:	4b95      	ldr	r3, [pc, #596]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 80017be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017c4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80017c8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80017cc:	fa92 f2a2 	rbit	r2, r2
 80017d0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80017d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80017d8:	fab2 f282 	clz	r2, r2
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	f042 0220 	orr.w	r2, r2, #32
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	f002 021f 	and.w	r2, r2, #31
 80017e8:	2101      	movs	r1, #1
 80017ea:	fa01 f202 	lsl.w	r2, r1, r2
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 8111 	beq.w	8001a18 <HAL_RCC_OscConfig+0x318>
 80017f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 8108 	bne.w	8001a18 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	f000 bfc6 	b.w	800279a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001812:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800181e:	d106      	bne.n	800182e <HAL_RCC_OscConfig+0x12e>
 8001820:	4b7c      	ldr	r3, [pc, #496]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a7b      	ldr	r2, [pc, #492]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	e036      	b.n	800189c <HAL_RCC_OscConfig+0x19c>
 800182e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001832:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x158>
 800183e:	4b75      	ldr	r3, [pc, #468]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a74      	ldr	r2, [pc, #464]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b72      	ldr	r3, [pc, #456]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a71      	ldr	r2, [pc, #452]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001850:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e021      	b.n	800189c <HAL_RCC_OscConfig+0x19c>
 8001858:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800185c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x184>
 800186a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a69      	ldr	r2, [pc, #420]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b67      	ldr	r3, [pc, #412]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a66      	ldr	r2, [pc, #408]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0x19c>
 8001884:	4b63      	ldr	r3, [pc, #396]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a62      	ldr	r2, [pc, #392]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 800188a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b60      	ldr	r3, [pc, #384]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a5f      	ldr	r2, [pc, #380]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800189a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800189c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d059      	beq.n	8001960 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff f848 	bl	8000940 <HAL_GetTick>
 80018b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b6:	f7ff f843 	bl	8000940 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	@ 0x64
 80018c4:	d902      	bls.n	80018cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	f000 bf67 	b.w	800279a <HAL_RCC_OscConfig+0x109a>
 80018cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018d0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80018e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d102      	bne.n	80018fe <HAL_RCC_OscConfig+0x1fe>
 80018f8:	4b46      	ldr	r3, [pc, #280]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	e015      	b.n	800192a <HAL_RCC_OscConfig+0x22a>
 80018fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001902:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001912:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001916:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800191a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001926:	4b3b      	ldr	r3, [pc, #236]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800192e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001932:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001936:	fa92 f2a2 	rbit	r2, r2
 800193a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800193e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001942:	fab2 f282 	clz	r2, r2
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	f042 0220 	orr.w	r2, r2, #32
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	f002 021f 	and.w	r2, r2, #31
 8001952:	2101      	movs	r1, #1
 8001954:	fa01 f202 	lsl.w	r2, r1, r2
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0ab      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1b6>
 800195e:	e05c      	b.n	8001a1a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7fe ffee 	bl	8000940 <HAL_GetTick>
 8001964:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800196a:	f7fe ffe9 	bl	8000940 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	@ 0x64
 8001978:	d902      	bls.n	8001980 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	f000 bf0d 	b.w	800279a <HAL_RCC_OscConfig+0x109a>
 8001980:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001984:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800198c:	fa93 f3a3 	rbit	r3, r3
 8001990:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001994:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d102      	bne.n	80019b2 <HAL_RCC_OscConfig+0x2b2>
 80019ac:	4b19      	ldr	r3, [pc, #100]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	e015      	b.n	80019de <HAL_RCC_OscConfig+0x2de>
 80019b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019b6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80019c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ca:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80019ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <HAL_RCC_OscConfig+0x314>)
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019e2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80019e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80019ea:	fa92 f2a2 	rbit	r2, r2
 80019ee:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80019f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80019f6:	fab2 f282 	clz	r2, r2
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	f042 0220 	orr.w	r2, r2, #32
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	f002 021f 	and.w	r2, r2, #31
 8001a06:	2101      	movs	r1, #1
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ab      	bne.n	800196a <HAL_RCC_OscConfig+0x26a>
 8001a12:	e002      	b.n	8001a1a <HAL_RCC_OscConfig+0x31a>
 8001a14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 817f 	beq.w	8001d2e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a30:	4ba7      	ldr	r3, [pc, #668]	@ (8001cd0 <HAL_RCC_OscConfig+0x5d0>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00c      	beq.n	8001a56 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a3c:	4ba4      	ldr	r3, [pc, #656]	@ (8001cd0 <HAL_RCC_OscConfig+0x5d0>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d173      	bne.n	8001b30 <HAL_RCC_OscConfig+0x430>
 8001a48:	4ba1      	ldr	r3, [pc, #644]	@ (8001cd0 <HAL_RCC_OscConfig+0x5d0>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a54:	d16c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x430>
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001a68:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0x386>
 8001a80:	4b93      	ldr	r3, [pc, #588]	@ (8001cd0 <HAL_RCC_OscConfig+0x5d0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e013      	b.n	8001aae <HAL_RCC_OscConfig+0x3ae>
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001a9e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001aaa:	4b89      	ldr	r3, [pc, #548]	@ (8001cd0 <HAL_RCC_OscConfig+0x5d0>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001ab4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001ab8:	fa92 f2a2 	rbit	r2, r2
 8001abc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001ac0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ac4:	fab2 f282 	clz	r2, r2
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f042 0220 	orr.w	r2, r2, #32
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f002 021f 	and.w	r2, r2, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00a      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3f6>
 8001ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d002      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	f000 be52 	b.w	800279a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b76      	ldr	r3, [pc, #472]	@ (8001cd0 <HAL_RCC_OscConfig+0x5d0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	21f8      	movs	r1, #248	@ 0xf8
 8001b0c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001b14:	fa91 f1a1 	rbit	r1, r1
 8001b18:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001b1c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b20:	fab1 f181 	clz	r1, r1
 8001b24:	b2c9      	uxtb	r1, r1
 8001b26:	408b      	lsls	r3, r1
 8001b28:	4969      	ldr	r1, [pc, #420]	@ (8001cd0 <HAL_RCC_OscConfig+0x5d0>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	e0fe      	b.n	8001d2e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 8088 	beq.w	8001c52 <HAL_RCC_OscConfig+0x552>
 8001b42:	2301      	movs	r3, #1
 8001b44:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001b54:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b62:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7fe fee7 	bl	8000940 <HAL_GetTick>
 8001b72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b78:	f7fe fee2 	bl	8000940 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d902      	bls.n	8001b8e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	f000 be06 	b.w	800279a <HAL_RCC_OscConfig+0x109a>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001ba0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d102      	bne.n	8001bbe <HAL_RCC_OscConfig+0x4be>
 8001bb8:	4b45      	ldr	r3, [pc, #276]	@ (8001cd0 <HAL_RCC_OscConfig+0x5d0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	e013      	b.n	8001be6 <HAL_RCC_OscConfig+0x4e6>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001bd6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001be2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd0 <HAL_RCC_OscConfig+0x5d0>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	2202      	movs	r2, #2
 8001be8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001bec:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001bf0:	fa92 f2a2 	rbit	r2, r2
 8001bf4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001bf8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001bfc:	fab2 f282 	clz	r2, r2
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	f042 0220 	orr.w	r2, r2, #32
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f002 021f 	and.w	r2, r2, #31
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0af      	beq.n	8001b78 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd0 <HAL_RCC_OscConfig+0x5d0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	21f8      	movs	r1, #248	@ 0xf8
 8001c2e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001c36:	fa91 f1a1 	rbit	r1, r1
 8001c3a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001c3e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c42:	fab1 f181 	clz	r1, r1
 8001c46:	b2c9      	uxtb	r1, r1
 8001c48:	408b      	lsls	r3, r1
 8001c4a:	4921      	ldr	r1, [pc, #132]	@ (8001cd0 <HAL_RCC_OscConfig+0x5d0>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e06d      	b.n	8001d2e <HAL_RCC_OscConfig+0x62e>
 8001c52:	2301      	movs	r3, #1
 8001c54:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001c64:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c72:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7fe fe5f 	bl	8000940 <HAL_GetTick>
 8001c82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c88:	f7fe fe5a 	bl	8000940 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d902      	bls.n	8001c9e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	f000 bd7e 	b.w	800279a <HAL_RCC_OscConfig+0x109a>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001cb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5d4>
 8001cc8:	4b01      	ldr	r3, [pc, #4]	@ (8001cd0 <HAL_RCC_OscConfig+0x5d0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	e016      	b.n	8001cfc <HAL_RCC_OscConfig+0x5fc>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001cec:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001cf8:	4bbf      	ldr	r3, [pc, #764]	@ (8001ff8 <HAL_RCC_OscConfig+0x8f8>)
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001d02:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001d06:	fa92 f2a2 	rbit	r2, r2
 8001d0a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001d0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d12:	fab2 f282 	clz	r2, r2
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	f042 0220 	orr.w	r2, r2, #32
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	f002 021f 	and.w	r2, r2, #31
 8001d22:	2101      	movs	r1, #1
 8001d24:	fa01 f202 	lsl.w	r2, r1, r2
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ac      	bne.n	8001c88 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8113 	beq.w	8001f6a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d07c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x74e>
 8001d54:	2301      	movs	r3, #1
 8001d56:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001d66:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	4ba2      	ldr	r3, [pc, #648]	@ (8001ffc <HAL_RCC_OscConfig+0x8fc>)
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7fe fddf 	bl	8000940 <HAL_GetTick>
 8001d82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d88:	f7fe fdda 	bl	8000940 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d902      	bls.n	8001d9e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	f000 bcfe 	b.w	800279a <HAL_RCC_OscConfig+0x109a>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fa93 f2a3 	rbit	r2, r3
 8001dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dde:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001de2:	2202      	movs	r2, #2
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	fa93 f2a3 	rbit	r2, r3
 8001df4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001dfc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	4b7e      	ldr	r3, [pc, #504]	@ (8001ff8 <HAL_RCC_OscConfig+0x8f8>)
 8001e00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	6019      	str	r1, [r3, #0]
 8001e0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e12:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f1a3 	rbit	r1, r3
 8001e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e20:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e24:	6019      	str	r1, [r3, #0]
  return result;
 8001e26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d09d      	beq.n	8001d88 <HAL_RCC_OscConfig+0x688>
 8001e4c:	e08d      	b.n	8001f6a <HAL_RCC_OscConfig+0x86a>
 8001e4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e52:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e5e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	fa93 f2a3 	rbit	r2, r3
 8001e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e70:	601a      	str	r2, [r3, #0]
  return result;
 8001e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e76:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e7a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7c:	fab3 f383 	clz	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b5d      	ldr	r3, [pc, #372]	@ (8001ffc <HAL_RCC_OscConfig+0x8fc>)
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e90:	f7fe fd56 	bl	8000940 <HAL_GetTick>
 8001e94:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7fe fd51 	bl	8000940 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d902      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	f000 bc75 	b.w	800279a <HAL_RCC_OscConfig+0x109a>
 8001eb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001eb8:	2202      	movs	r2, #2
 8001eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	fa93 f2a3 	rbit	r2, r3
 8001eca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ece:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001edc:	2202      	movs	r2, #2
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	fa93 f2a3 	rbit	r2, r3
 8001eee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f00:	2202      	movs	r2, #2
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f2a3 	rbit	r2, r3
 8001f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f16:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f1a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	4b36      	ldr	r3, [pc, #216]	@ (8001ff8 <HAL_RCC_OscConfig+0x8f8>)
 8001f1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f28:	2102      	movs	r1, #2
 8001f2a:	6019      	str	r1, [r3, #0]
 8001f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f1a3 	rbit	r1, r3
 8001f3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f42:	6019      	str	r1, [r3, #0]
  return result;
 8001f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f48:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d197      	bne.n	8001e9a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 81a5 	beq.w	80022ca <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f86:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <HAL_RCC_OscConfig+0x8f8>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d116      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <HAL_RCC_OscConfig+0x8f8>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4a18      	ldr	r2, [pc, #96]	@ (8001ff8 <HAL_RCC_OscConfig+0x8f8>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	61d3      	str	r3, [r2, #28]
 8001f9e:	4b16      	ldr	r3, [pc, #88]	@ (8001ff8 <HAL_RCC_OscConfig+0x8f8>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001fa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001faa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fb8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <HAL_RCC_OscConfig+0x900>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d121      	bne.n	8002010 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <HAL_RCC_OscConfig+0x900>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002000 <HAL_RCC_OscConfig+0x900>)
 8001fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd8:	f7fe fcb2 	bl	8000940 <HAL_GetTick>
 8001fdc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	e010      	b.n	8002004 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe2:	f7fe fcad 	bl	8000940 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	@ 0x64
 8001ff0:	d908      	bls.n	8002004 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e3d1      	b.n	800279a <HAL_RCC_OscConfig+0x109a>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	10908120 	.word	0x10908120
 8002000:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	4b8d      	ldr	r3, [pc, #564]	@ (800223c <HAL_RCC_OscConfig+0xb3c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0e8      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002010:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002014:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x92e>
 8002020:	4b87      	ldr	r3, [pc, #540]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a86      	ldr	r2, [pc, #536]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	e035      	b.n	800209a <HAL_RCC_OscConfig+0x99a>
 800202e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002032:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x958>
 800203e:	4b80      	ldr	r3, [pc, #512]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a7f      	ldr	r2, [pc, #508]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	4b7d      	ldr	r3, [pc, #500]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a7c      	ldr	r2, [pc, #496]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	6213      	str	r3, [r2, #32]
 8002056:	e020      	b.n	800209a <HAL_RCC_OscConfig+0x99a>
 8002058:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800205c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d10c      	bne.n	8002082 <HAL_RCC_OscConfig+0x982>
 8002068:	4b75      	ldr	r3, [pc, #468]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4a74      	ldr	r2, [pc, #464]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	4b72      	ldr	r3, [pc, #456]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a71      	ldr	r2, [pc, #452]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	e00b      	b.n	800209a <HAL_RCC_OscConfig+0x99a>
 8002082:	4b6f      	ldr	r3, [pc, #444]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a6e      	ldr	r2, [pc, #440]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	6213      	str	r3, [r2, #32]
 800208e:	4b6c      	ldr	r3, [pc, #432]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4a6b      	ldr	r2, [pc, #428]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800209e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8081 	beq.w	80021ae <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ac:	f7fe fc48 	bl	8000940 <HAL_GetTick>
 80020b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	e00b      	b.n	80020ce <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7fe fc43 	bl	8000940 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e365      	b.n	800279a <HAL_RCC_OscConfig+0x109a>
 80020ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020d6:	2202      	movs	r2, #2
 80020d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020de:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	fa93 f2a3 	rbit	r2, r3
 80020e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80020fa:	2202      	movs	r2, #2
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002102:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002110:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002114:	601a      	str	r2, [r3, #0]
  return result;
 8002116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800211e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d102      	bne.n	800213a <HAL_RCC_OscConfig+0xa3a>
 8002134:	4b42      	ldr	r3, [pc, #264]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	e013      	b.n	8002162 <HAL_RCC_OscConfig+0xa62>
 800213a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002142:	2202      	movs	r2, #2
 8002144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	fa93 f2a3 	rbit	r2, r3
 8002154:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002158:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002162:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002166:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800216a:	2102      	movs	r1, #2
 800216c:	6011      	str	r1, [r2, #0]
 800216e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002172:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	fa92 f1a2 	rbit	r1, r2
 800217c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002180:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002184:	6011      	str	r1, [r2, #0]
  return result;
 8002186:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800218a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f002 021f 	and.w	r2, r2, #31
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f202 	lsl.w	r2, r1, r2
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d084      	beq.n	80020b6 <HAL_RCC_OscConfig+0x9b6>
 80021ac:	e083      	b.n	80022b6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7fe fbc7 	bl	8000940 <HAL_GetTick>
 80021b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b6:	e00b      	b.n	80021d0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b8:	f7fe fbc2 	bl	8000940 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e2e4      	b.n	800279a <HAL_RCC_OscConfig+0x109a>
 80021d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80021d8:	2202      	movs	r2, #2
 80021da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	fa93 f2a3 	rbit	r2, r3
 80021ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80021fc:	2202      	movs	r2, #2
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002204:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fa93 f2a3 	rbit	r2, r3
 800220e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002212:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002216:	601a      	str	r2, [r3, #0]
  return result;
 8002218:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002220:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d106      	bne.n	8002244 <HAL_RCC_OscConfig+0xb44>
 8002236:	4b02      	ldr	r3, [pc, #8]	@ (8002240 <HAL_RCC_OscConfig+0xb40>)
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	e017      	b.n	800226c <HAL_RCC_OscConfig+0xb6c>
 800223c:	40007000 	.word	0x40007000
 8002240:	40021000 	.word	0x40021000
 8002244:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002248:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800224c:	2202      	movs	r2, #2
 800224e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002254:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	fa93 f2a3 	rbit	r2, r3
 800225e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002262:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	4bb3      	ldr	r3, [pc, #716]	@ (8002538 <HAL_RCC_OscConfig+0xe38>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002270:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002274:	2102      	movs	r1, #2
 8002276:	6011      	str	r1, [r2, #0]
 8002278:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800227c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	fa92 f1a2 	rbit	r1, r2
 8002286:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800228a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800228e:	6011      	str	r1, [r2, #0]
  return result;
 8002290:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002294:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	fab2 f282 	clz	r2, r2
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	f002 021f 	and.w	r2, r2, #31
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f202 	lsl.w	r2, r1, r2
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d180      	bne.n	80021b8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022b6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d105      	bne.n	80022ca <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022be:	4b9e      	ldr	r3, [pc, #632]	@ (8002538 <HAL_RCC_OscConfig+0xe38>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4a9d      	ldr	r2, [pc, #628]	@ (8002538 <HAL_RCC_OscConfig+0xe38>)
 80022c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 825e 	beq.w	8002798 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b96      	ldr	r3, [pc, #600]	@ (8002538 <HAL_RCC_OscConfig+0xe38>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	f000 821f 	beq.w	8002728 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	f040 8170 	bne.w	80025dc <HAL_RCC_OscConfig+0xedc>
 80022fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002300:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002304:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	fa93 f2a3 	rbit	r2, r3
 8002318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002320:	601a      	str	r2, [r3, #0]
  return result;
 8002322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002326:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800232a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002336:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	461a      	mov	r2, r3
 800233e:	2300      	movs	r3, #0
 8002340:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7fe fafd 	bl	8000940 <HAL_GetTick>
 8002346:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234a:	e009      	b.n	8002360 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe faf8 	bl	8000940 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e21c      	b.n	800279a <HAL_RCC_OscConfig+0x109a>
 8002360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002364:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002368:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800236c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002372:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	fa93 f2a3 	rbit	r2, r3
 800237c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002380:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002384:	601a      	str	r2, [r3, #0]
  return result;
 8002386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800238a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800238e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	b2db      	uxtb	r3, r3
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d102      	bne.n	80023aa <HAL_RCC_OscConfig+0xcaa>
 80023a4:	4b64      	ldr	r3, [pc, #400]	@ (8002538 <HAL_RCC_OscConfig+0xe38>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	e027      	b.n	80023fa <HAL_RCC_OscConfig+0xcfa>
 80023aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023bc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fa93 f2a3 	rbit	r2, r3
 80023ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	4b50      	ldr	r3, [pc, #320]	@ (8002538 <HAL_RCC_OscConfig+0xe38>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023fe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002402:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002406:	6011      	str	r1, [r2, #0]
 8002408:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800240c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	fa92 f1a2 	rbit	r1, r2
 8002416:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800241a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800241e:	6011      	str	r1, [r2, #0]
  return result;
 8002420:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002424:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	fab2 f282 	clz	r2, r2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	f042 0220 	orr.w	r2, r2, #32
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	f002 021f 	and.w	r2, r2, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d182      	bne.n	800234c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002446:	4b3c      	ldr	r3, [pc, #240]	@ (8002538 <HAL_RCC_OscConfig+0xe38>)
 8002448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244a:	f023 020f 	bic.w	r2, r3, #15
 800244e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002452:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	4937      	ldr	r1, [pc, #220]	@ (8002538 <HAL_RCC_OscConfig+0xe38>)
 800245c:	4313      	orrs	r3, r2
 800245e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002460:	4b35      	ldr	r3, [pc, #212]	@ (8002538 <HAL_RCC_OscConfig+0xe38>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002468:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800246c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6a19      	ldr	r1, [r3, #32]
 8002474:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002478:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	430b      	orrs	r3, r1
 8002482:	492d      	ldr	r1, [pc, #180]	@ (8002538 <HAL_RCC_OscConfig+0xe38>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
 8002488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002490:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024ac:	601a      	str	r2, [r3, #0]
  return result;
 80024ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024b6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024c2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	461a      	mov	r2, r3
 80024ca:	2301      	movs	r3, #1
 80024cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7fe fa37 	bl	8000940 <HAL_GetTick>
 80024d2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d6:	e009      	b.n	80024ec <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d8:	f7fe fa32 	bl	8000940 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e156      	b.n	800279a <HAL_RCC_OscConfig+0x109a>
 80024ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800250c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002510:	601a      	str	r2, [r3, #0]
  return result;
 8002512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002516:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800251a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_RCC_OscConfig+0xe3c>
 8002530:	4b01      	ldr	r3, [pc, #4]	@ (8002538 <HAL_RCC_OscConfig+0xe38>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	e02a      	b.n	800258c <HAL_RCC_OscConfig+0xe8c>
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002540:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002544:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800254e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fa93 f2a3 	rbit	r2, r3
 8002558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002566:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800256a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002574:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002582:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	4b86      	ldr	r3, [pc, #536]	@ (80027a4 <HAL_RCC_OscConfig+0x10a4>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002590:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002594:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002598:	6011      	str	r1, [r2, #0]
 800259a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800259e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	fa92 f1a2 	rbit	r1, r2
 80025a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025ac:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80025b0:	6011      	str	r1, [r2, #0]
  return result;
 80025b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025b6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	fab2 f282 	clz	r2, r2
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f042 0220 	orr.w	r2, r2, #32
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f002 021f 	and.w	r2, r2, #31
 80025cc:	2101      	movs	r1, #1
 80025ce:	fa01 f202 	lsl.w	r2, r1, r2
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f43f af7f 	beq.w	80024d8 <HAL_RCC_OscConfig+0xdd8>
 80025da:	e0dd      	b.n	8002798 <HAL_RCC_OscConfig+0x1098>
 80025dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fa93 f2a3 	rbit	r2, r3
 80025f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002600:	601a      	str	r2, [r3, #0]
  return result;
 8002602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002606:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800260a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002616:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	461a      	mov	r2, r3
 800261e:	2300      	movs	r3, #0
 8002620:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe f98d 	bl	8000940 <HAL_GetTick>
 8002626:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262a:	e009      	b.n	8002640 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe f988 	bl	8000940 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0ac      	b.n	800279a <HAL_RCC_OscConfig+0x109a>
 8002640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002644:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002648:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800264c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002652:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002660:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002664:	601a      	str	r2, [r3, #0]
  return result;
 8002666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800266e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d102      	bne.n	800268a <HAL_RCC_OscConfig+0xf8a>
 8002684:	4b47      	ldr	r3, [pc, #284]	@ (80027a4 <HAL_RCC_OscConfig+0x10a4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	e027      	b.n	80026da <HAL_RCC_OscConfig+0xfda>
 800268a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800268e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002692:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	fa93 f2a3 	rbit	r2, r3
 80026a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026aa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	4b33      	ldr	r3, [pc, #204]	@ (80027a4 <HAL_RCC_OscConfig+0x10a4>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026de:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026e6:	6011      	str	r1, [r2, #0]
 80026e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026ec:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	fa92 f1a2 	rbit	r1, r2
 80026f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026fa:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80026fe:	6011      	str	r1, [r2, #0]
  return result;
 8002700:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002704:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f042 0220 	orr.w	r2, r2, #32
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d182      	bne.n	800262c <HAL_RCC_OscConfig+0xf2c>
 8002726:	e037      	b.n	8002798 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002728:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800272c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e02e      	b.n	800279a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800273c:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <HAL_RCC_OscConfig+0x10a4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002744:	4b17      	ldr	r3, [pc, #92]	@ (80027a4 <HAL_RCC_OscConfig+0x10a4>)
 8002746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002748:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800274c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002750:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002754:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002758:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	429a      	cmp	r2, r3
 8002762:	d117      	bne.n	8002794 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002764:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002768:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800276c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002770:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002778:	429a      	cmp	r2, r3
 800277a:	d10b      	bne.n	8002794 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800277c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002788:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000

080027a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b09e      	sub	sp, #120	@ 0x78
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e162      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b90      	ldr	r3, [pc, #576]	@ (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d910      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0207 	bic.w	r2, r3, #7
 80027d6:	498b      	ldr	r1, [pc, #556]	@ (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b89      	ldr	r3, [pc, #548]	@ (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e14a      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fc:	4b82      	ldr	r3, [pc, #520]	@ (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	497f      	ldr	r1, [pc, #508]	@ (8002a08 <HAL_RCC_ClockConfig+0x260>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80dc 	beq.w	80029d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d13c      	bne.n	800289e <HAL_RCC_ClockConfig+0xf6>
 8002824:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002828:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d102      	bne.n	800284e <HAL_RCC_ClockConfig+0xa6>
 8002848:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <HAL_RCC_ClockConfig+0x260>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	e00f      	b.n	800286e <HAL_RCC_ClockConfig+0xc6>
 800284e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002852:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	667b      	str	r3, [r7, #100]	@ 0x64
 800285c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002860:	663b      	str	r3, [r7, #96]	@ 0x60
 8002862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800286a:	4b67      	ldr	r3, [pc, #412]	@ (8002a08 <HAL_RCC_ClockConfig+0x260>)
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002872:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002874:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002876:	fa92 f2a2 	rbit	r2, r2
 800287a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800287c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800287e:	fab2 f282 	clz	r2, r2
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	f042 0220 	orr.w	r2, r2, #32
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	f002 021f 	and.w	r2, r2, #31
 800288e:	2101      	movs	r1, #1
 8002890:	fa01 f202 	lsl.w	r2, r1, r2
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d17b      	bne.n	8002992 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0f3      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d13c      	bne.n	8002920 <HAL_RCC_ClockConfig+0x178>
 80028a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028aa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80028b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d102      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x128>
 80028ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	e00f      	b.n	80028f0 <HAL_RCC_ClockConfig+0x148>
 80028d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80028de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80028e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ec:	4b46      	ldr	r3, [pc, #280]	@ (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028f4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80028f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028f8:	fa92 f2a2 	rbit	r2, r2
 80028fc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80028fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	f042 0220 	orr.w	r2, r2, #32
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f002 021f 	and.w	r2, r2, #31
 8002910:	2101      	movs	r1, #1
 8002912:	fa01 f202 	lsl.w	r2, r1, r2
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d13a      	bne.n	8002992 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b2      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
 8002920:	2302      	movs	r3, #2
 8002922:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800292c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d102      	bne.n	8002948 <HAL_RCC_ClockConfig+0x1a0>
 8002942:	4b31      	ldr	r3, [pc, #196]	@ (8002a08 <HAL_RCC_ClockConfig+0x260>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e00d      	b.n	8002964 <HAL_RCC_ClockConfig+0x1bc>
 8002948:	2302      	movs	r3, #2
 800294a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
 8002954:	2302      	movs	r3, #2
 8002956:	623b      	str	r3, [r7, #32]
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	4b29      	ldr	r3, [pc, #164]	@ (8002a08 <HAL_RCC_ClockConfig+0x260>)
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	2202      	movs	r2, #2
 8002966:	61ba      	str	r2, [r7, #24]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	fa92 f2a2 	rbit	r2, r2
 800296e:	617a      	str	r2, [r7, #20]
  return result;
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	fab2 f282 	clz	r2, r2
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f042 0220 	orr.w	r2, r2, #32
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	f002 021f 	and.w	r2, r2, #31
 8002982:	2101      	movs	r1, #1
 8002984:	fa01 f202 	lsl.w	r2, r1, r2
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e079      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002992:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <HAL_RCC_ClockConfig+0x260>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f023 0203 	bic.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	491a      	ldr	r1, [pc, #104]	@ (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a4:	f7fd ffcc 	bl	8000940 <HAL_GetTick>
 80029a8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ac:	f7fd ffc8 	bl	8000940 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e061      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_RCC_ClockConfig+0x260>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 020c 	and.w	r2, r3, #12
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1eb      	bne.n	80029ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d214      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 0207 	bic.w	r2, r3, #7
 80029ea:	4906      	ldr	r1, [pc, #24]	@ (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <HAL_RCC_ClockConfig+0x25c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e040      	b.n	8002a86 <HAL_RCC_ClockConfig+0x2de>
 8002a04:	40022000 	.word	0x40022000
 8002a08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b1d      	ldr	r3, [pc, #116]	@ (8002a90 <HAL_RCC_ClockConfig+0x2e8>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	491a      	ldr	r1, [pc, #104]	@ (8002a90 <HAL_RCC_ClockConfig+0x2e8>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a36:	4b16      	ldr	r3, [pc, #88]	@ (8002a90 <HAL_RCC_ClockConfig+0x2e8>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4912      	ldr	r1, [pc, #72]	@ (8002a90 <HAL_RCC_ClockConfig+0x2e8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a4a:	f000 f829 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4601      	mov	r1, r0
 8002a50:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_RCC_ClockConfig+0x2e8>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a58:	22f0      	movs	r2, #240	@ 0xf0
 8002a5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	fa92 f2a2 	rbit	r2, r2
 8002a62:	60fa      	str	r2, [r7, #12]
  return result;
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	fab2 f282 	clz	r2, r2
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	40d3      	lsrs	r3, r2
 8002a6e:	4a09      	ldr	r2, [pc, #36]	@ (8002a94 <HAL_RCC_ClockConfig+0x2ec>)
 8002a70:	5cd3      	ldrb	r3, [r2, r3]
 8002a72:	fa21 f303 	lsr.w	r3, r1, r3
 8002a76:	4a08      	ldr	r2, [pc, #32]	@ (8002a98 <HAL_RCC_ClockConfig+0x2f0>)
 8002a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <HAL_RCC_ClockConfig+0x2f4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd ff1a 	bl	80008b8 <HAL_InitTick>
  
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3778      	adds	r7, #120	@ 0x78
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000
 8002a94:	080057d4 	.word	0x080057d4
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	20000004 	.word	0x20000004

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002aba:	4b1f      	ldr	r3, [pc, #124]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ace:	e029      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ad2:	613b      	str	r3, [r7, #16]
      break;
 8002ad4:	e029      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	0c9b      	lsrs	r3, r3, #18
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	4a18      	ldr	r2, [pc, #96]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ae0:	5cd3      	ldrb	r3, [r2, r3]
 8002ae2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ae4:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	4a15      	ldr	r2, [pc, #84]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002afc:	4a0f      	ldr	r2, [pc, #60]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e007      	b.n	8002b1e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	613b      	str	r3, [r7, #16]
      break;
 8002b22:	e002      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b24:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b26:	613b      	str	r3, [r7, #16]
      break;
 8002b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2a:	693b      	ldr	r3, [r7, #16]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	007a1200 	.word	0x007a1200
 8002b40:	080057ec 	.word	0x080057ec
 8002b44:	080057fc 	.word	0x080057fc

08002b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	@ (8002b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000000 	.word	0x20000000

08002b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b66:	f7ff ffef 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b74:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	fa92 f2a2 	rbit	r2, r2
 8002b80:	603a      	str	r2, [r7, #0]
  return result;
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	fab2 f282 	clz	r2, r2
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	40d3      	lsrs	r3, r2
 8002b8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ba0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b8e:	5cd3      	ldrb	r3, [r2, r3]
 8002b90:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	080057e4 	.word	0x080057e4

08002ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002baa:	f7ff ffcd 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002bae:	4601      	mov	r1, r0
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002bb8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002bbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	fa92 f2a2 	rbit	r2, r2
 8002bc4:	603a      	str	r2, [r7, #0]
  return result;
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	fab2 f282 	clz	r2, r2
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	40d3      	lsrs	r3, r2
 8002bd0:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000
 8002be4:	080057e4 	.word	0x080057e4

08002be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b092      	sub	sp, #72	@ 0x48
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80d4 	beq.w	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0c:	4b4e      	ldr	r3, [pc, #312]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10e      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c18:	4b4b      	ldr	r3, [pc, #300]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c22:	61d3      	str	r3, [r2, #28]
 8002c24:	4b48      	ldr	r3, [pc, #288]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	4b45      	ldr	r3, [pc, #276]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d118      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c42:	4b42      	ldr	r3, [pc, #264]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a41      	ldr	r2, [pc, #260]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4e:	f7fd fe77 	bl	8000940 <HAL_GetTick>
 8002c52:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c54:	e008      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c56:	f7fd fe73 	bl	8000940 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b64      	cmp	r3, #100	@ 0x64
 8002c62:	d901      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1d6      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	4b38      	ldr	r3, [pc, #224]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c74:	4b34      	ldr	r3, [pc, #208]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8084 	beq.w	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d07c      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c94:	4b2c      	ldr	r3, [pc, #176]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ca2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b26      	ldr	r3, [pc, #152]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ce6:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d04b      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7fd fe23 	bl	8000940 <HAL_GetTick>
 8002cfa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7fd fe1f 	bl	8000940 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e180      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d14:	2302      	movs	r3, #2
 8002d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d20:	2302      	movs	r3, #2
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d108      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d42:	4b01      	ldr	r3, [pc, #4]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	e00d      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	10908100 	.word	0x10908100
 8002d54:	2302      	movs	r3, #2
 8002d56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	4b9a      	ldr	r3, [pc, #616]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	2202      	movs	r2, #2
 8002d66:	613a      	str	r2, [r7, #16]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	fa92 f2a2 	rbit	r2, r2
 8002d6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0b7      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d8e:	4b8f      	ldr	r3, [pc, #572]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	498c      	ldr	r1, [pc, #560]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002da0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4b88      	ldr	r3, [pc, #544]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4a87      	ldr	r2, [pc, #540]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dc0:	4b82      	ldr	r3, [pc, #520]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc4:	f023 0203 	bic.w	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	497f      	ldr	r1, [pc, #508]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dde:	4b7b      	ldr	r3, [pc, #492]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	4978      	ldr	r1, [pc, #480]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dfc:	4b73      	ldr	r3, [pc, #460]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	4970      	ldr	r1, [pc, #448]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e1a:	4b6c      	ldr	r3, [pc, #432]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f023 0210 	bic.w	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	4969      	ldr	r1, [pc, #420]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e38:	4b64      	ldr	r3, [pc, #400]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	4961      	ldr	r1, [pc, #388]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e56:	4b5d      	ldr	r3, [pc, #372]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	f023 0220 	bic.w	r2, r3, #32
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	495a      	ldr	r1, [pc, #360]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e74:	4b55      	ldr	r3, [pc, #340]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e78:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	4952      	ldr	r1, [pc, #328]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e92:	4b4e      	ldr	r3, [pc, #312]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	494b      	ldr	r1, [pc, #300]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eb0:	4b46      	ldr	r3, [pc, #280]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	4943      	ldr	r1, [pc, #268]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ece:	4b3f      	ldr	r3, [pc, #252]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	493c      	ldr	r1, [pc, #240]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002eec:	4b37      	ldr	r3, [pc, #220]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	4934      	ldr	r1, [pc, #208]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f0a:	4b30      	ldr	r3, [pc, #192]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	492d      	ldr	r1, [pc, #180]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f28:	4b28      	ldr	r3, [pc, #160]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f34:	4925      	ldr	r1, [pc, #148]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f46:	4b21      	ldr	r3, [pc, #132]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	491e      	ldr	r1, [pc, #120]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f64:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f70:	4916      	ldr	r1, [pc, #88]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f82:	4b12      	ldr	r3, [pc, #72]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8e:	490f      	ldr	r1, [pc, #60]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fac:	4907      	ldr	r1, [pc, #28]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00c      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002fbe:	4b03      	ldr	r3, [pc, #12]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	e002      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd2:	4913      	ldr	r1, [pc, #76]	@ (8003020 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8003020 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff0:	490b      	ldr	r1, [pc, #44]	@ (8003020 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003002:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800300e:	4904      	ldr	r1, [pc, #16]	@ (8003020 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003010:	4313      	orrs	r3, r2
 8003012:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3748      	adds	r7, #72	@ 0x48
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000

08003024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e040      	b.n	80030b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fd fb82 	bl	8000750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2224      	movs	r2, #36	@ 0x24
 8003050:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fd0a 	bl	8003a84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fb33 	bl	80036dc <UART_SetConfig>
 8003076:	4603      	mov	r3, r0
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e01b      	b.n	80030b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800308e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800309e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fd89 	bl	8003bc8 <UART_CheckIdleState>
 80030b6:	4603      	mov	r3, r0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0ba      	sub	sp, #232	@ 0xe8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80030ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80030ee:	4013      	ands	r3, r2
 80030f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80030f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d115      	bne.n	8003128 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00f      	beq.n	8003128 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d009      	beq.n	8003128 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 82ab 	beq.w	8003674 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
      }
      return;
 8003126:	e2a5      	b.n	8003674 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8117 	beq.w	8003360 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800313e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003142:	4b85      	ldr	r3, [pc, #532]	@ (8003358 <HAL_UART_IRQHandler+0x298>)
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 810a 	beq.w	8003360 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800314c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d011      	beq.n	800317c <HAL_UART_IRQHandler+0xbc>
 8003158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800315c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2201      	movs	r2, #1
 800316a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800317c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d011      	beq.n	80031ac <HAL_UART_IRQHandler+0xec>
 8003188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00b      	beq.n	80031ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2202      	movs	r2, #2
 800319a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031a2:	f043 0204 	orr.w	r2, r3, #4
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d011      	beq.n	80031dc <HAL_UART_IRQHandler+0x11c>
 80031b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2204      	movs	r2, #4
 80031ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031d2:	f043 0202 	orr.w	r2, r3, #2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d017      	beq.n	8003218 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00b      	beq.n	8003218 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2208      	movs	r2, #8
 8003206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800320e:	f043 0208 	orr.w	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800321c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003220:	2b00      	cmp	r3, #0
 8003222:	d012      	beq.n	800324a <HAL_UART_IRQHandler+0x18a>
 8003224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003228:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00c      	beq.n	800324a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8211 	beq.w	8003678 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003284:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003292:	2b40      	cmp	r3, #64	@ 0x40
 8003294:	d005      	beq.n	80032a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800329a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d04f      	beq.n	8003342 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fe6c 	bl	8003f80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b2:	2b40      	cmp	r3, #64	@ 0x40
 80032b4:	d141      	bne.n	800333a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3308      	adds	r3, #8
 80032bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3308      	adds	r3, #8
 80032de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1d9      	bne.n	80032b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003306:	2b00      	cmp	r3, #0
 8003308:	d013      	beq.n	8003332 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800330e:	4a13      	ldr	r2, [pc, #76]	@ (800335c <HAL_UART_IRQHandler+0x29c>)
 8003310:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd fd13 	bl	8000d42 <HAL_DMA_Abort_IT>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d017      	beq.n	8003352 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800332c:	4610      	mov	r0, r2
 800332e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	e00f      	b.n	8003352 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f9c8 	bl	80036c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003338:	e00b      	b.n	8003352 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f9c4 	bl	80036c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	e007      	b.n	8003352 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f9c0 	bl	80036c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003350:	e192      	b.n	8003678 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003352:	bf00      	nop
    return;
 8003354:	e190      	b.n	8003678 <HAL_UART_IRQHandler+0x5b8>
 8003356:	bf00      	nop
 8003358:	04000120 	.word	0x04000120
 800335c:	0800422b 	.word	0x0800422b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003364:	2b01      	cmp	r3, #1
 8003366:	f040 814b 	bne.w	8003600 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800336a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8144 	beq.w	8003600 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 813d 	beq.w	8003600 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2210      	movs	r2, #16
 800338c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003398:	2b40      	cmp	r3, #64	@ 0x40
 800339a:	f040 80b5 	bne.w	8003508 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8164 	beq.w	800367c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80033ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033be:	429a      	cmp	r2, r3
 80033c0:	f080 815c 	bcs.w	800367c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	f000 8086 	beq.w	80034e6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003404:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003408:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003410:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800341c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1da      	bne.n	80033da <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3308      	adds	r3, #8
 800342a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003434:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3308      	adds	r3, #8
 8003444:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003448:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800344c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003450:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003454:	e841 2300 	strex	r3, r2, [r1]
 8003458:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800345a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e1      	bne.n	8003424 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3308      	adds	r3, #8
 8003466:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003468:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800346a:	e853 3f00 	ldrex	r3, [r3]
 800346e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003470:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003476:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3308      	adds	r3, #8
 8003480:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003484:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003486:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800348a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003492:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e3      	bne.n	8003460 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ae:	e853 3f00 	ldrex	r3, [r3]
 80034b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034b6:	f023 0310 	bic.w	r3, r3, #16
 80034ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e4      	bne.n	80034a6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd fbf0 	bl	8000cc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f001 fc41 	bl	8004d88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003506:	e0b9      	b.n	800367c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003514:	b29b      	uxth	r3, r3
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80ab 	beq.w	8003680 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800352a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80a6 	beq.w	8003680 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003548:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003556:	647b      	str	r3, [r7, #68]	@ 0x44
 8003558:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800355c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e4      	bne.n	8003534 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3308      	adds	r3, #8
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	623b      	str	r3, [r7, #32]
   return(result);
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3308      	adds	r3, #8
 800358a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800358e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003590:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800359c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e3      	bne.n	800356a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0310 	bic.w	r3, r3, #16
 80035ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	69b9      	ldr	r1, [r7, #24]
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	617b      	str	r3, [r7, #20]
   return(result);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e4      	bne.n	80035b6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035f6:	4619      	mov	r1, r3
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f001 fbc5 	bl	8004d88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035fe:	e03f      	b.n	8003680 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003604:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <HAL_UART_IRQHandler+0x56a>
 800360c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003620:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fe41 	bl	80042aa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003628:	e02d      	b.n	8003686 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800363a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01c      	beq.n	8003684 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
    }
    return;
 8003652:	e017      	b.n	8003684 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d012      	beq.n	8003686 <HAL_UART_IRQHandler+0x5c6>
 8003660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00c      	beq.n	8003686 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fdf2 	bl	8004256 <UART_EndTransmit_IT>
    return;
 8003672:	e008      	b.n	8003686 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003674:	bf00      	nop
 8003676:	e006      	b.n	8003686 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003678:	bf00      	nop
 800367a:	e004      	b.n	8003686 <HAL_UART_IRQHandler+0x5c6>
      return;
 800367c:	bf00      	nop
 800367e:	e002      	b.n	8003686 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003680:	bf00      	nop
 8003682:	e000      	b.n	8003686 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003684:	bf00      	nop
  }

}
 8003686:	37e8      	adds	r7, #232	@ 0xe8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4b92      	ldr	r3, [pc, #584]	@ (8003950 <UART_SetConfig+0x274>)
 8003708:	4013      	ands	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	6979      	ldr	r1, [r7, #20]
 8003710:	430b      	orrs	r3, r1
 8003712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a80      	ldr	r2, [pc, #512]	@ (8003954 <UART_SetConfig+0x278>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d120      	bne.n	800379a <UART_SetConfig+0xbe>
 8003758:	4b7f      	ldr	r3, [pc, #508]	@ (8003958 <UART_SetConfig+0x27c>)
 800375a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b03      	cmp	r3, #3
 8003762:	d817      	bhi.n	8003794 <UART_SetConfig+0xb8>
 8003764:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <UART_SetConfig+0x90>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	0800377d 	.word	0x0800377d
 8003770:	08003789 	.word	0x08003789
 8003774:	0800378f 	.word	0x0800378f
 8003778:	08003783 	.word	0x08003783
 800377c:	2301      	movs	r3, #1
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e0b5      	b.n	80038ee <UART_SetConfig+0x212>
 8003782:	2302      	movs	r3, #2
 8003784:	77fb      	strb	r3, [r7, #31]
 8003786:	e0b2      	b.n	80038ee <UART_SetConfig+0x212>
 8003788:	2304      	movs	r3, #4
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e0af      	b.n	80038ee <UART_SetConfig+0x212>
 800378e:	2308      	movs	r3, #8
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	e0ac      	b.n	80038ee <UART_SetConfig+0x212>
 8003794:	2310      	movs	r3, #16
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e0a9      	b.n	80038ee <UART_SetConfig+0x212>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6f      	ldr	r2, [pc, #444]	@ (800395c <UART_SetConfig+0x280>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d124      	bne.n	80037ee <UART_SetConfig+0x112>
 80037a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003958 <UART_SetConfig+0x27c>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037b0:	d011      	beq.n	80037d6 <UART_SetConfig+0xfa>
 80037b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037b6:	d817      	bhi.n	80037e8 <UART_SetConfig+0x10c>
 80037b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037bc:	d011      	beq.n	80037e2 <UART_SetConfig+0x106>
 80037be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037c2:	d811      	bhi.n	80037e8 <UART_SetConfig+0x10c>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <UART_SetConfig+0xf4>
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037cc:	d006      	beq.n	80037dc <UART_SetConfig+0x100>
 80037ce:	e00b      	b.n	80037e8 <UART_SetConfig+0x10c>
 80037d0:	2300      	movs	r3, #0
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e08b      	b.n	80038ee <UART_SetConfig+0x212>
 80037d6:	2302      	movs	r3, #2
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e088      	b.n	80038ee <UART_SetConfig+0x212>
 80037dc:	2304      	movs	r3, #4
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e085      	b.n	80038ee <UART_SetConfig+0x212>
 80037e2:	2308      	movs	r3, #8
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e082      	b.n	80038ee <UART_SetConfig+0x212>
 80037e8:	2310      	movs	r3, #16
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e07f      	b.n	80038ee <UART_SetConfig+0x212>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003960 <UART_SetConfig+0x284>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d124      	bne.n	8003842 <UART_SetConfig+0x166>
 80037f8:	4b57      	ldr	r3, [pc, #348]	@ (8003958 <UART_SetConfig+0x27c>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003800:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003804:	d011      	beq.n	800382a <UART_SetConfig+0x14e>
 8003806:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800380a:	d817      	bhi.n	800383c <UART_SetConfig+0x160>
 800380c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003810:	d011      	beq.n	8003836 <UART_SetConfig+0x15a>
 8003812:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003816:	d811      	bhi.n	800383c <UART_SetConfig+0x160>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <UART_SetConfig+0x148>
 800381c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003820:	d006      	beq.n	8003830 <UART_SetConfig+0x154>
 8003822:	e00b      	b.n	800383c <UART_SetConfig+0x160>
 8003824:	2300      	movs	r3, #0
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e061      	b.n	80038ee <UART_SetConfig+0x212>
 800382a:	2302      	movs	r3, #2
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e05e      	b.n	80038ee <UART_SetConfig+0x212>
 8003830:	2304      	movs	r3, #4
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e05b      	b.n	80038ee <UART_SetConfig+0x212>
 8003836:	2308      	movs	r3, #8
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e058      	b.n	80038ee <UART_SetConfig+0x212>
 800383c:	2310      	movs	r3, #16
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e055      	b.n	80038ee <UART_SetConfig+0x212>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a47      	ldr	r2, [pc, #284]	@ (8003964 <UART_SetConfig+0x288>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d124      	bne.n	8003896 <UART_SetConfig+0x1ba>
 800384c:	4b42      	ldr	r3, [pc, #264]	@ (8003958 <UART_SetConfig+0x27c>)
 800384e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003850:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003854:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003858:	d011      	beq.n	800387e <UART_SetConfig+0x1a2>
 800385a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800385e:	d817      	bhi.n	8003890 <UART_SetConfig+0x1b4>
 8003860:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003864:	d011      	beq.n	800388a <UART_SetConfig+0x1ae>
 8003866:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800386a:	d811      	bhi.n	8003890 <UART_SetConfig+0x1b4>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <UART_SetConfig+0x19c>
 8003870:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003874:	d006      	beq.n	8003884 <UART_SetConfig+0x1a8>
 8003876:	e00b      	b.n	8003890 <UART_SetConfig+0x1b4>
 8003878:	2300      	movs	r3, #0
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e037      	b.n	80038ee <UART_SetConfig+0x212>
 800387e:	2302      	movs	r3, #2
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e034      	b.n	80038ee <UART_SetConfig+0x212>
 8003884:	2304      	movs	r3, #4
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e031      	b.n	80038ee <UART_SetConfig+0x212>
 800388a:	2308      	movs	r3, #8
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	e02e      	b.n	80038ee <UART_SetConfig+0x212>
 8003890:	2310      	movs	r3, #16
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e02b      	b.n	80038ee <UART_SetConfig+0x212>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a33      	ldr	r2, [pc, #204]	@ (8003968 <UART_SetConfig+0x28c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d124      	bne.n	80038ea <UART_SetConfig+0x20e>
 80038a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003958 <UART_SetConfig+0x27c>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80038a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038ac:	d011      	beq.n	80038d2 <UART_SetConfig+0x1f6>
 80038ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038b2:	d817      	bhi.n	80038e4 <UART_SetConfig+0x208>
 80038b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038b8:	d011      	beq.n	80038de <UART_SetConfig+0x202>
 80038ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038be:	d811      	bhi.n	80038e4 <UART_SetConfig+0x208>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <UART_SetConfig+0x1f0>
 80038c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038c8:	d006      	beq.n	80038d8 <UART_SetConfig+0x1fc>
 80038ca:	e00b      	b.n	80038e4 <UART_SetConfig+0x208>
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e00d      	b.n	80038ee <UART_SetConfig+0x212>
 80038d2:	2302      	movs	r3, #2
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e00a      	b.n	80038ee <UART_SetConfig+0x212>
 80038d8:	2304      	movs	r3, #4
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e007      	b.n	80038ee <UART_SetConfig+0x212>
 80038de:	2308      	movs	r3, #8
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e004      	b.n	80038ee <UART_SetConfig+0x212>
 80038e4:	2310      	movs	r3, #16
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e001      	b.n	80038ee <UART_SetConfig+0x212>
 80038ea:	2310      	movs	r3, #16
 80038ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038f6:	d16b      	bne.n	80039d0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80038f8:	7ffb      	ldrb	r3, [r7, #31]
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d838      	bhi.n	8003970 <UART_SetConfig+0x294>
 80038fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003904 <UART_SetConfig+0x228>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003929 	.word	0x08003929
 8003908:	08003931 	.word	0x08003931
 800390c:	08003939 	.word	0x08003939
 8003910:	08003971 	.word	0x08003971
 8003914:	0800393f 	.word	0x0800393f
 8003918:	08003971 	.word	0x08003971
 800391c:	08003971 	.word	0x08003971
 8003920:	08003971 	.word	0x08003971
 8003924:	08003947 	.word	0x08003947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003928:	f7ff f91a 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 800392c:	61b8      	str	r0, [r7, #24]
        break;
 800392e:	e024      	b.n	800397a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003930:	f7ff f938 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8003934:	61b8      	str	r0, [r7, #24]
        break;
 8003936:	e020      	b.n	800397a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003938:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <UART_SetConfig+0x290>)
 800393a:	61bb      	str	r3, [r7, #24]
        break;
 800393c:	e01d      	b.n	800397a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393e:	f7ff f8af 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8003942:	61b8      	str	r0, [r7, #24]
        break;
 8003944:	e019      	b.n	800397a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800394a:	61bb      	str	r3, [r7, #24]
        break;
 800394c:	e015      	b.n	800397a <UART_SetConfig+0x29e>
 800394e:	bf00      	nop
 8003950:	efff69f3 	.word	0xefff69f3
 8003954:	40013800 	.word	0x40013800
 8003958:	40021000 	.word	0x40021000
 800395c:	40004400 	.word	0x40004400
 8003960:	40004800 	.word	0x40004800
 8003964:	40004c00 	.word	0x40004c00
 8003968:	40005000 	.word	0x40005000
 800396c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	77bb      	strb	r3, [r7, #30]
        break;
 8003978:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d073      	beq.n	8003a68 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	005a      	lsls	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	085b      	lsrs	r3, r3, #1
 800398a:	441a      	add	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b0f      	cmp	r3, #15
 800399a:	d916      	bls.n	80039ca <UART_SetConfig+0x2ee>
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a2:	d212      	bcs.n	80039ca <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f023 030f 	bic.w	r3, r3, #15
 80039ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	89fb      	ldrh	r3, [r7, #14]
 80039bc:	4313      	orrs	r3, r2
 80039be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	89fa      	ldrh	r2, [r7, #14]
 80039c6:	60da      	str	r2, [r3, #12]
 80039c8:	e04e      	b.n	8003a68 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	77bb      	strb	r3, [r7, #30]
 80039ce:	e04b      	b.n	8003a68 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039d0:	7ffb      	ldrb	r3, [r7, #31]
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d827      	bhi.n	8003a26 <UART_SetConfig+0x34a>
 80039d6:	a201      	add	r2, pc, #4	@ (adr r2, 80039dc <UART_SetConfig+0x300>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a09 	.word	0x08003a09
 80039e4:	08003a11 	.word	0x08003a11
 80039e8:	08003a27 	.word	0x08003a27
 80039ec:	08003a17 	.word	0x08003a17
 80039f0:	08003a27 	.word	0x08003a27
 80039f4:	08003a27 	.word	0x08003a27
 80039f8:	08003a27 	.word	0x08003a27
 80039fc:	08003a1f 	.word	0x08003a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a00:	f7ff f8ae 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 8003a04:	61b8      	str	r0, [r7, #24]
        break;
 8003a06:	e013      	b.n	8003a30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a08:	f7ff f8cc 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8003a0c:	61b8      	str	r0, [r7, #24]
        break;
 8003a0e:	e00f      	b.n	8003a30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a10:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <UART_SetConfig+0x3a4>)
 8003a12:	61bb      	str	r3, [r7, #24]
        break;
 8003a14:	e00c      	b.n	8003a30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a16:	f7ff f843 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8003a1a:	61b8      	str	r0, [r7, #24]
        break;
 8003a1c:	e008      	b.n	8003a30 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a22:	61bb      	str	r3, [r7, #24]
        break;
 8003a24:	e004      	b.n	8003a30 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	77bb      	strb	r3, [r7, #30]
        break;
 8003a2e:	bf00      	nop
    }

    if (pclk != 0U)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d018      	beq.n	8003a68 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	085a      	lsrs	r2, r3, #1
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	441a      	add	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b0f      	cmp	r3, #15
 8003a4e:	d909      	bls.n	8003a64 <UART_SetConfig+0x388>
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a56:	d205      	bcs.n	8003a64 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	e001      	b.n	8003a68 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a74:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	007a1200 	.word	0x007a1200

08003a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01a      	beq.n	8003b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b82:	d10a      	bne.n	8003b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b098      	sub	sp, #96	@ 0x60
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bd8:	f7fc feb2 	bl	8000940 <HAL_GetTick>
 8003bdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d12e      	bne.n	8003c4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f88c 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d021      	beq.n	8003c4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e6      	bne.n	8003c06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e062      	b.n	8003d10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d149      	bne.n	8003cec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c60:	2200      	movs	r2, #0
 8003c62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f856 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d03c      	beq.n	8003cec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	623b      	str	r3, [r7, #32]
   return(result);
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e6      	bne.n	8003c72 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3308      	adds	r3, #8
 8003caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cc4:	61fa      	str	r2, [r7, #28]
 8003cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e5      	bne.n	8003ca4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e011      	b.n	8003d10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3758      	adds	r7, #88	@ 0x58
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d28:	e04f      	b.n	8003dca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d04b      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7fc fe05 	bl	8000940 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e04e      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d037      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b80      	cmp	r3, #128	@ 0x80
 8003d5e:	d034      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b40      	cmp	r3, #64	@ 0x40
 8003d64:	d031      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d110      	bne.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2208      	movs	r2, #8
 8003d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f8ff 	bl	8003f80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2208      	movs	r2, #8
 8003d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e029      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003da4:	d111      	bne.n	8003dca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f8e5 	bl	8003f80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e00f      	b.n	8003dea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d0a0      	beq.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b096      	sub	sp, #88	@ 0x58
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2222      	movs	r2, #34	@ 0x22
 8003e1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d028      	beq.n	8003e7a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e2c:	4a3e      	ldr	r2, [pc, #248]	@ (8003f28 <UART_Start_Receive_DMA+0x134>)
 8003e2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e34:	4a3d      	ldr	r2, [pc, #244]	@ (8003f2c <UART_Start_Receive_DMA+0x138>)
 8003e36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f30 <UART_Start_Receive_DMA+0x13c>)
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e44:	2200      	movs	r2, #0
 8003e46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3324      	adds	r3, #36	@ 0x24
 8003e52:	4619      	mov	r1, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e58:	461a      	mov	r2, r3
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	f7fc fed4 	bl	8000c08 <HAL_DMA_Start_IT>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e051      	b.n	8003f1e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d018      	beq.n	8003eb4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e96:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ea2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003ea6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e6      	bne.n	8003e82 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ed4:	637a      	str	r2, [r7, #52]	@ 0x34
 8003ed6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003eda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e5      	bne.n	8003eb4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f08:	623a      	str	r2, [r7, #32]
 8003f0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	69f9      	ldr	r1, [r7, #28]
 8003f0e:	6a3a      	ldr	r2, [r7, #32]
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e5      	bne.n	8003ee8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3758      	adds	r7, #88	@ 0x58
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	08004049 	.word	0x08004049
 8003f2c:	0800416f 	.word	0x0800416f
 8003f30:	080041ad 	.word	0x080041ad

08003f34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b089      	sub	sp, #36	@ 0x24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6979      	ldr	r1, [r7, #20]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	613b      	str	r3, [r7, #16]
   return(result);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e6      	bne.n	8003f3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003f74:	bf00      	nop
 8003f76:	3724      	adds	r7, #36	@ 0x24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b095      	sub	sp, #84	@ 0x54
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e6      	bne.n	8003f88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e5      	bne.n	8003fba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d118      	bne.n	8004028 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	60bb      	str	r3, [r7, #8]
   return(result);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f023 0310 	bic.w	r3, r3, #16
 800400a:	647b      	str	r3, [r7, #68]	@ 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6979      	ldr	r1, [r7, #20]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	613b      	str	r3, [r7, #16]
   return(result);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e6      	bne.n	8003ff6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800403c:	bf00      	nop
 800403e:	3754      	adds	r7, #84	@ 0x54
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b09c      	sub	sp, #112	@ 0x70
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	2b20      	cmp	r3, #32
 800405c:	d071      	beq.n	8004142 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800405e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004060:	2200      	movs	r2, #0
 8004062:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004066:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004076:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800407a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800407c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004084:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004086:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800408a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e6      	bne.n	8004066 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3308      	adds	r3, #8
 800409e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80040b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3308      	adds	r3, #8
 80040b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80040b8:	647a      	str	r2, [r7, #68]	@ 0x44
 80040ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e5      	bne.n	8004098 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3308      	adds	r3, #8
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	623b      	str	r3, [r7, #32]
   return(result);
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80040e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3308      	adds	r3, #8
 80040ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80040ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e5      	bne.n	80040cc <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004102:	2220      	movs	r2, #32
 8004104:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800410a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410c:	2b01      	cmp	r3, #1
 800410e:	d118      	bne.n	8004142 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	60fb      	str	r3, [r7, #12]
   return(result);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f023 0310 	bic.w	r3, r3, #16
 8004124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	69b9      	ldr	r1, [r7, #24]
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	617b      	str	r3, [r7, #20]
   return(result);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e6      	bne.n	8004110 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004144:	2200      	movs	r2, #0
 8004146:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800414a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414c:	2b01      	cmp	r3, #1
 800414e:	d107      	bne.n	8004160 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004150:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004152:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004156:	4619      	mov	r1, r3
 8004158:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800415a:	f000 fe15 	bl	8004d88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800415e:	e002      	b.n	8004166 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004160:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004162:	f7ff fa9d 	bl	80036a0 <HAL_UART_RxCpltCallback>
}
 8004166:	bf00      	nop
 8004168:	3770      	adds	r7, #112	@ 0x70
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004186:	2b01      	cmp	r3, #1
 8004188:	d109      	bne.n	800419e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	b29b      	uxth	r3, r3
 8004194:	4619      	mov	r1, r3
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fdf6 	bl	8004d88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800419c:	e002      	b.n	80041a4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f7ff fa88 	bl	80036b4 <HAL_UART_RxHalfCpltCallback>
}
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d2:	2b80      	cmp	r3, #128	@ 0x80
 80041d4:	d109      	bne.n	80041ea <UART_DMAError+0x3e>
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b21      	cmp	r3, #33	@ 0x21
 80041da:	d106      	bne.n	80041ea <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80041e4:	6978      	ldr	r0, [r7, #20]
 80041e6:	f7ff fea5 	bl	8003f34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f4:	2b40      	cmp	r3, #64	@ 0x40
 80041f6:	d109      	bne.n	800420c <UART_DMAError+0x60>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b22      	cmp	r3, #34	@ 0x22
 80041fc:	d106      	bne.n	800420c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2200      	movs	r2, #0
 8004202:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004206:	6978      	ldr	r0, [r7, #20]
 8004208:	f7ff feba 	bl	8003f80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004212:	f043 0210 	orr.w	r2, r3, #16
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800421c:	6978      	ldr	r0, [r7, #20]
 800421e:	f7ff fa53 	bl	80036c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004222:	bf00      	nop
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7ff fa3d 	bl	80036c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b088      	sub	sp, #32
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60bb      	str	r3, [r7, #8]
   return(result);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6979      	ldr	r1, [r7, #20]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	613b      	str	r3, [r7, #16]
   return(result);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff f9f5 	bl	800368c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a2:	bf00      	nop
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b08c      	sub	sp, #48	@ 0x30
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	4613      	mov	r3, r2
 80042ca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	d142      	bne.n	800435c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e03b      	b.n	800435e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	461a      	mov	r2, r3
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff fd7b 	bl	8003df4 <UART_Start_Receive_DMA>
 80042fe:	4603      	mov	r3, r0
 8004300:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004304:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004308:	2b00      	cmp	r3, #0
 800430a:	d124      	bne.n	8004356 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004310:	2b01      	cmp	r3, #1
 8004312:	d11d      	bne.n	8004350 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2210      	movs	r2, #16
 800431a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	617b      	str	r3, [r7, #20]
   return(result);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f043 0310 	orr.w	r3, r3, #16
 8004330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433a:	627b      	str	r3, [r7, #36]	@ 0x24
 800433c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6a39      	ldr	r1, [r7, #32]
 8004340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	61fb      	str	r3, [r7, #28]
   return(result);
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e6      	bne.n	800431c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800434e:	e002      	b.n	8004356 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004356:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800435a:	e000      	b.n	800435e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	3730      	adds	r7, #48	@ 0x30
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <circularBuffer_init>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_init( tCircularBuffer* pBuffer, uint8_t* pData, uint16_t capacity )
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	4613      	mov	r3, r2
 8004372:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if ( pBuffer == NULL || pData == NULL || capacity == 0 )
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <circularBuffer_init+0x20>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <circularBuffer_init+0x20>
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <circularBuffer_init+0x24>
	{
		return 1;
 8004386:	2301      	movs	r3, #1
 8004388:	e014      	b.n	80043b4 <circularBuffer_init+0x4e>
	}

	// initialize the buffer
	pBuffer->capacity 		= capacity;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	88fa      	ldrh	r2, [r7, #6]
 800438e:	801a      	strh	r2, [r3, #0]
	pBuffer->head 			= 0;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	809a      	strh	r2, [r3, #4]
	pBuffer->tail   		= 0;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	805a      	strh	r2, [r3, #2]
	pBuffer->pBuffer 		= pData;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	609a      	str	r2, [r3, #8]
	memset( pBuffer->pBuffer, 1, pBuffer->capacity );
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6898      	ldr	r0, [r3, #8]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	2101      	movs	r1, #1
 80043ae:	f000 ff0f 	bl	80051d0 <memset>

	return 0;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <circularBuffer_push>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_push( tCircularBuffer* pCbuffer, uint8_t* pInData, uint16_t length )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	4613      	mov	r3, r2
 80043c8:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if( pCbuffer == NULL || pInData == NULL || pCbuffer->capacity < length )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d007      	beq.n	80043e0 <circularBuffer_push+0x24>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <circularBuffer_push+0x24>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d901      	bls.n	80043e4 <circularBuffer_push+0x28>
	{
		return 1;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e037      	b.n	8004454 <circularBuffer_push+0x98>
	 *    n n s d d d d e n n
	 *    d d d e n n n s d d
	 * */

	// do we need to loop over the buffer?
	uint16_t toTheEnd = pCbuffer->capacity - pCbuffer->tail;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	881a      	ldrh	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	885b      	ldrh	r3, [r3, #2]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	82fb      	strh	r3, [r7, #22]
	uint8_t* pDes = &(*pCbuffer).pBuffer[pCbuffer->tail];
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	8852      	ldrh	r2, [r2, #2]
 80043f8:	4413      	add	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
	if ( toTheEnd < length )
 80043fc:	8afa      	ldrh	r2, [r7, #22]
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	429a      	cmp	r2, r3
 8004402:	d211      	bcs.n	8004428 <circularBuffer_push+0x6c>
	{
		// first copy from the end of the existing data to the end of the buffer
		memcpy( pDes, pInData, toTheEnd );
 8004404:	8afb      	ldrh	r3, [r7, #22]
 8004406:	461a      	mov	r2, r3
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	6938      	ldr	r0, [r7, #16]
 800440c:	f000 ff5b 	bl	80052c6 <memcpy>
		// copy the reset of the inData from the beginning of the buffer.
		memcpy( (*pCbuffer).pBuffer, &pInData[toTheEnd], ( length - toTheEnd ) );
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6898      	ldr	r0, [r3, #8]
 8004414:	8afb      	ldrh	r3, [r7, #22]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	18d1      	adds	r1, r2, r3
 800441a:	88fa      	ldrh	r2, [r7, #6]
 800441c:	8afb      	ldrh	r3, [r7, #22]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	461a      	mov	r2, r3
 8004422:	f000 ff50 	bl	80052c6 <memcpy>
 8004426:	e005      	b.n	8004434 <circularBuffer_push+0x78>
	}
	else
	{
		memcpy( pDes, pInData, length );
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	461a      	mov	r2, r3
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	6938      	ldr	r0, [r7, #16]
 8004430:	f000 ff49 	bl	80052c6 <memcpy>
		//pBuffer->pBuffer[pBuffer->end] = pInData[0];
	}

	pCbuffer->tail = ( pCbuffer->tail + length ) % pCbuffer->capacity;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	885b      	ldrh	r3, [r3, #2]
 8004438:	461a      	mov	r2, r3
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	4413      	add	r3, r2
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	8812      	ldrh	r2, [r2, #0]
 8004442:	fb93 f1f2 	sdiv	r1, r3, r2
 8004446:	fb01 f202 	mul.w	r2, r1, r2
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	805a      	strh	r2, [r3, #2]

	return 0;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <circularBuffer_pop>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_pop( tCircularBuffer* pCbuffer, uint8_t* pOutData, uint16_t length )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
	if ( circularBuffer_isEmepty(pCbuffer) )
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f85d 	bl	800452a <circularBuffer_isEmepty>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <circularBuffer_pop+0x1e>
		return 1;
 8004476:	2301      	movs	r3, #1
 8004478:	e037      	b.n	80044ea <circularBuffer_pop+0x8e>
	// do we need to loop over the buffer?
	uint16_t toTheEnd = pCbuffer->capacity - pCbuffer->head;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	881a      	ldrh	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	889b      	ldrh	r3, [r3, #4]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	82fb      	strh	r3, [r7, #22]
	uint8_t* pSource = &(*pCbuffer).pBuffer[pCbuffer->head];
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	8892      	ldrh	r2, [r2, #4]
 800448e:	4413      	add	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
	if ( toTheEnd < length )
 8004492:	8afa      	ldrh	r2, [r7, #22]
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	429a      	cmp	r2, r3
 8004498:	d211      	bcs.n	80044be <circularBuffer_pop+0x62>
	{
		// first copy from the end of the existing data to the end of the buffer
		memcpy( pOutData, pSource, toTheEnd );
 800449a:	8afb      	ldrh	r3, [r7, #22]
 800449c:	461a      	mov	r2, r3
 800449e:	6939      	ldr	r1, [r7, #16]
 80044a0:	68b8      	ldr	r0, [r7, #8]
 80044a2:	f000 ff10 	bl	80052c6 <memcpy>
		// copy the reset of the inData from the beginning of the buffer.
		memcpy( &pOutData[toTheEnd], (*pCbuffer).pBuffer, ( length - toTheEnd ) );
 80044a6:	8afb      	ldrh	r3, [r7, #22]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	18d0      	adds	r0, r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6899      	ldr	r1, [r3, #8]
 80044b0:	88fa      	ldrh	r2, [r7, #6]
 80044b2:	8afb      	ldrh	r3, [r7, #22]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	f000 ff05 	bl	80052c6 <memcpy>
 80044bc:	e005      	b.n	80044ca <circularBuffer_pop+0x6e>
	}
	else
	{
		memcpy( pOutData, pSource, length );
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	461a      	mov	r2, r3
 80044c2:	6939      	ldr	r1, [r7, #16]
 80044c4:	68b8      	ldr	r0, [r7, #8]
 80044c6:	f000 fefe 	bl	80052c6 <memcpy>
	}

	pCbuffer->head = ( pCbuffer->head + length ) % pCbuffer->capacity;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	889b      	ldrh	r3, [r3, #4]
 80044ce:	461a      	mov	r2, r3
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	4413      	add	r3, r2
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	8812      	ldrh	r2, [r2, #0]
 80044d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80044dc:	fb01 f202 	mul.w	r2, r1, r2
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	809a      	strh	r2, [r3, #4]

	return 0;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <circularBuffer_getSize>:
/************************************
 * Function
 * **********************************
 */
uint16_t circularBuffer_getSize( tCircularBuffer* pBuffer )
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
	uint16_t size = ( pBuffer->capacity + pBuffer->head - pBuffer->tail ) % pBuffer->capacity;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	889b      	ldrh	r3, [r3, #4]
 8004504:	4413      	add	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	8852      	ldrh	r2, [r2, #2]
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	8812      	ldrh	r2, [r2, #0]
 8004510:	fb93 f1f2 	sdiv	r1, r3, r2
 8004514:	fb01 f202 	mul.w	r2, r1, r2
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	81fb      	strh	r3, [r7, #14]
	return size;
 800451c:	89fb      	ldrh	r3, [r7, #14]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <circularBuffer_isEmepty>:
/************************************
 * Function
 * **********************************
 */
uint16_t circularBuffer_isEmepty( tCircularBuffer* pBuffer )
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
	if( pBuffer->head == pBuffer->tail )
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	889a      	ldrh	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	885b      	ldrh	r3, [r3, #2]
 800453a:	429a      	cmp	r2, r3
 800453c:	d101      	bne.n	8004542 <circularBuffer_isEmepty+0x18>
		return 1;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <circularBuffer_isEmepty+0x1a>

	return 0;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <cmdhandler_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void cmdhandler_init( UART_HandleTypeDef* huart )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	// create a circular buffer
	circularBuffer_init( &CBuffer, cbuff_data, CBUFF_DATA_SIZE );
 8004558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800455c:	4912      	ldr	r1, [pc, #72]	@ (80045a8 <cmdhandler_init+0x58>)
 800455e:	4813      	ldr	r0, [pc, #76]	@ (80045ac <cmdhandler_init+0x5c>)
 8004560:	f7ff ff01 	bl	8004366 <circularBuffer_init>

	// init uart.
	serial_uart_init(huart, &CBuffer );
 8004564:	4911      	ldr	r1, [pc, #68]	@ (80045ac <cmdhandler_init+0x5c>)
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fbb2 	bl	8004cd0 <serial_uart_init>
	serial_uart_receiveToIdle( huart );
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fbc3 	bl	8004cf8 <serial_uart_receiveToIdle>

	// to let us know to uart received new data;
	serial_uart_registerCB( cmdhandler_processNewData );
 8004572:	480f      	ldr	r0, [pc, #60]	@ (80045b0 <cmdhandler_init+0x60>)
 8004574:	f000 fbdc 	bl	8004d30 <serial_uart_registerCB>

	// initialize cmd list.
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 8004578:	2300      	movs	r3, #0
 800457a:	73fb      	strb	r3, [r7, #15]
 800457c:	e00d      	b.n	800459a <cmdhandler_init+0x4a>
	{
		cmdhandler_list[i].moduleId	= MODULE_ID_NONE;
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	4a0c      	ldr	r2, [pc, #48]	@ (80045b4 <cmdhandler_init+0x64>)
 8004582:	2100      	movs	r1, #0
 8004584:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		cmdhandler_list[i].funPtr 		= NULL;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	4a0a      	ldr	r2, [pc, #40]	@ (80045b4 <cmdhandler_init+0x64>)
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4413      	add	r3, r2
 8004590:	2200      	movs	r2, #0
 8004592:	605a      	str	r2, [r3, #4]
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	3301      	adds	r3, #1
 8004598:	73fb      	strb	r3, [r7, #15]
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	2b09      	cmp	r3, #9
 800459e:	d9ee      	bls.n	800457e <cmdhandler_init+0x2e>
	}
	return;
 80045a0:	bf00      	nop
}
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000178 	.word	0x20000178
 80045ac:	20000278 	.word	0x20000278
 80045b0:	08004611 	.word	0x08004611
 80045b4:	20000388 	.word	0x20000388

080045b8 <cmdhandler_registerModuleCmdHandler>:

uint8_t cmdhandler_registerModuleCmdHandler( tCmdhandler_moduleCmdHandler handler )
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	463b      	mov	r3, r7
 80045c0:	e883 0003 	stmia.w	r3, {r0, r1}
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80045c4:	2300      	movs	r3, #0
 80045c6:	73fb      	strb	r3, [r7, #15]
 80045c8:	e015      	b.n	80045f6 <cmdhandler_registerModuleCmdHandler+0x3e>
	{
		if ( cmdhandler_list[i].moduleId == MODULE_ID_NONE )
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	4a0f      	ldr	r2, [pc, #60]	@ (800460c <cmdhandler_registerModuleCmdHandler+0x54>)
 80045ce:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10c      	bne.n	80045f0 <cmdhandler_registerModuleCmdHandler+0x38>
		{
			cmdhandler_list[i].moduleId = handler.moduleId;
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	7839      	ldrb	r1, [r7, #0]
 80045da:	4a0c      	ldr	r2, [pc, #48]	@ (800460c <cmdhandler_registerModuleCmdHandler+0x54>)
 80045dc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
			cmdhandler_list[i].funPtr 	 = handler.funPtr;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4909      	ldr	r1, [pc, #36]	@ (800460c <cmdhandler_registerModuleCmdHandler+0x54>)
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	440b      	add	r3, r1
 80045ea:	605a      	str	r2, [r3, #4]
			return 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e006      	b.n	80045fe <cmdhandler_registerModuleCmdHandler+0x46>
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	3301      	adds	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b09      	cmp	r3, #9
 80045fa:	d9e6      	bls.n	80045ca <cmdhandler_registerModuleCmdHandler+0x12>
		}
	}

	// if we looped through the whole list without finding an empty slot.
	return 1;
 80045fc:	2301      	movs	r3, #1
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000388 	.word	0x20000388

08004610 <cmdhandler_processNewData>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void cmdhandler_processNewData()
{
 8004610:	b5b0      	push	{r4, r5, r7, lr}
 8004612:	b0c0      	sub	sp, #256	@ 0x100
 8004614:	af3e      	add	r7, sp, #248	@ 0xf8
	printf( "cmdhandler_processNewData \n" );
 8004616:	4837      	ldr	r0, [pc, #220]	@ (80046f4 <cmdhandler_processNewData+0xe4>)
 8004618:	f000 fcfa 	bl	8005010 <puts>
	uint8_t oneByte 	= 0;
 800461c:	2300      	movs	r3, #0
 800461e:	71bb      	strb	r3, [r7, #6]
	uint16_t dataSize 	= 0;
 8004620:	2300      	movs	r3, #0
 8004622:	80bb      	strh	r3, [r7, #4]
	uint8_t cmd[2] 		= {0};
 8004624:	2300      	movs	r3, #0
 8004626:	803b      	strh	r3, [r7, #0]
	// find new command:
	while( !circularBuffer_isEmepty(&CBuffer) && oneByte != (uint8_t)CMD_NEW )
 8004628:	e005      	b.n	8004636 <cmdhandler_processNewData+0x26>
	{
		circularBuffer_pop( &CBuffer, &oneByte, 1 );
 800462a:	1dbb      	adds	r3, r7, #6
 800462c:	2201      	movs	r2, #1
 800462e:	4619      	mov	r1, r3
 8004630:	4831      	ldr	r0, [pc, #196]	@ (80046f8 <cmdhandler_processNewData+0xe8>)
 8004632:	f7ff ff13 	bl	800445c <circularBuffer_pop>
	while( !circularBuffer_isEmepty(&CBuffer) && oneByte != (uint8_t)CMD_NEW )
 8004636:	4830      	ldr	r0, [pc, #192]	@ (80046f8 <cmdhandler_processNewData+0xe8>)
 8004638:	f7ff ff77 	bl	800452a <circularBuffer_isEmepty>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <cmdhandler_processNewData+0x38>
 8004642:	79bb      	ldrb	r3, [r7, #6]
 8004644:	2bab      	cmp	r3, #171	@ 0xab
 8004646:	d1f0      	bne.n	800462a <cmdhandler_processNewData+0x1a>
	}

	if ( oneByte != (uint8_t)CMD_NEW )
 8004648:	79bb      	ldrb	r3, [r7, #6]
 800464a:	2bab      	cmp	r3, #171	@ 0xab
 800464c:	d14e      	bne.n	80046ec <cmdhandler_processNewData+0xdc>
		// the buffer is empty and we did not found a new command.
		return;
	}

	// read command
	circularBuffer_pop( &CBuffer, cmd, 2 );
 800464e:	463b      	mov	r3, r7
 8004650:	2202      	movs	r2, #2
 8004652:	4619      	mov	r1, r3
 8004654:	4828      	ldr	r0, [pc, #160]	@ (80046f8 <cmdhandler_processNewData+0xe8>)
 8004656:	f7ff ff01 	bl	800445c <circularBuffer_pop>
	inCmd.id.module = cmd[1];
 800465a:	787a      	ldrb	r2, [r7, #1]
 800465c:	4b27      	ldr	r3, [pc, #156]	@ (80046fc <cmdhandler_processNewData+0xec>)
 800465e:	701a      	strb	r2, [r3, #0]
	inCmd.id.cmd 	= cmd[0];
 8004660:	783a      	ldrb	r2, [r7, #0]
 8004662:	4b26      	ldr	r3, [pc, #152]	@ (80046fc <cmdhandler_processNewData+0xec>)
 8004664:	705a      	strb	r2, [r3, #1]

	// read data size
	circularBuffer_pop( &CBuffer, (uint8_t*)&dataSize, 2 );
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	2202      	movs	r2, #2
 800466a:	4619      	mov	r1, r3
 800466c:	4822      	ldr	r0, [pc, #136]	@ (80046f8 <cmdhandler_processNewData+0xe8>)
 800466e:	f7ff fef5 	bl	800445c <circularBuffer_pop>
	inCmd.dataSize = dataSize;
 8004672:	88ba      	ldrh	r2, [r7, #4]
 8004674:	4b21      	ldr	r3, [pc, #132]	@ (80046fc <cmdhandler_processNewData+0xec>)
 8004676:	805a      	strh	r2, [r3, #2]

	// read data
	if ( dataSize != 0 )
 8004678:	88bb      	ldrh	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <cmdhandler_processNewData+0x8a>
	{
		if ( circularBuffer_getSize(&CBuffer) >= dataSize )
 800467e:	481e      	ldr	r0, [pc, #120]	@ (80046f8 <cmdhandler_processNewData+0xe8>)
 8004680:	f7ff ff37 	bl	80044f2 <circularBuffer_getSize>
 8004684:	4603      	mov	r3, r0
 8004686:	461a      	mov	r2, r3
 8004688:	88bb      	ldrh	r3, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d305      	bcc.n	800469a <cmdhandler_processNewData+0x8a>
		{
			circularBuffer_pop( &CBuffer, &inCmd.data, dataSize );
 800468e:	88bb      	ldrh	r3, [r7, #4]
 8004690:	461a      	mov	r2, r3
 8004692:	491b      	ldr	r1, [pc, #108]	@ (8004700 <cmdhandler_processNewData+0xf0>)
 8004694:	4818      	ldr	r0, [pc, #96]	@ (80046f8 <cmdhandler_processNewData+0xe8>)
 8004696:	f7ff fee1 	bl	800445c <circularBuffer_pop>

	// to this point we have a command, either with data or without.

	// send the command to the relevant module.

	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 800469a:	2300      	movs	r3, #0
 800469c:	71fb      	strb	r3, [r7, #7]
 800469e:	e021      	b.n	80046e4 <cmdhandler_processNewData+0xd4>
	{
		if ( cmdhandler_list[i].funPtr != NULL && cmdhandler_list[i].moduleId == inCmd.id.module )
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	4a18      	ldr	r2, [pc, #96]	@ (8004704 <cmdhandler_processNewData+0xf4>)
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d017      	beq.n	80046de <cmdhandler_processNewData+0xce>
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	4a14      	ldr	r2, [pc, #80]	@ (8004704 <cmdhandler_processNewData+0xf4>)
 80046b2:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80046b6:	4b11      	ldr	r3, [pc, #68]	@ (80046fc <cmdhandler_processNewData+0xec>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d10f      	bne.n	80046de <cmdhandler_processNewData+0xce>
		{
			cmdhandler_list[i].funPtr( inCmd );
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	4a10      	ldr	r2, [pc, #64]	@ (8004704 <cmdhandler_processNewData+0xf4>)
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	685d      	ldr	r5, [r3, #4]
 80046c8:	4c0c      	ldr	r4, [pc, #48]	@ (80046fc <cmdhandler_processNewData+0xec>)
 80046ca:	4668      	mov	r0, sp
 80046cc:	f104 0310 	add.w	r3, r4, #16
 80046d0:	22f4      	movs	r2, #244	@ 0xf4
 80046d2:	4619      	mov	r1, r3
 80046d4:	f000 fdf7 	bl	80052c6 <memcpy>
 80046d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80046dc:	47a8      	blx	r5
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	3301      	adds	r3, #1
 80046e2:	71fb      	strb	r3, [r7, #7]
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	2b09      	cmp	r3, #9
 80046e8:	d9da      	bls.n	80046a0 <cmdhandler_processNewData+0x90>
		}
	}

	return;
 80046ea:	e000      	b.n	80046ee <cmdhandler_processNewData+0xde>
		return;
 80046ec:	bf00      	nop
}
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bdb0      	pop	{r4, r5, r7, pc}
 80046f4:	0800576c 	.word	0x0800576c
 80046f8:	20000278 	.word	0x20000278
 80046fc:	20000284 	.word	0x20000284
 8004700:	20000288 	.word	0x20000288
 8004704:	20000388 	.word	0x20000388

08004708 <flash_init>:
/************************************
 * Function
 * **********************************
 */
void flash_init()
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_FLASH, .funPtr = flash_cmd_handler };
 800470e:	4a07      	ldr	r2, [pc, #28]	@ (800472c <flash_init+0x24>)
 8004710:	463b      	mov	r3, r7
 8004712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004716:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 800471a:	463b      	mov	r3, r7
 800471c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004720:	f7ff ff4a 	bl	80045b8 <cmdhandler_registerModuleCmdHandler>
}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	08005788 	.word	0x08005788

08004730 <flash_write>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_write( uint32_t Address, uint8_t* pData, uint32_t size )
{
 8004730:	b5b0      	push	{r4, r5, r7, lr}
 8004732:	b08a      	sub	sp, #40	@ 0x28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
	// check if valid flash address.
	if ( Address < APP_START_ADD || Address > FLASH_END_ADD )
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4a35      	ldr	r2, [pc, #212]	@ (8004814 <flash_write+0xe4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d903      	bls.n	800474c <flash_write+0x1c>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a34      	ldr	r2, [pc, #208]	@ (8004818 <flash_write+0xe8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <flash_write+0x20>
	{
		// return if address is not in application flash area.
		return 1;
 800474c:	2301      	movs	r3, #1
 800474e:	e05c      	b.n	800480a <flash_write+0xda>
	}

	// check for valid input
	if ( pData == NULL && size == 0 )
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d104      	bne.n	8004760 <flash_write+0x30>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <flash_write+0x30>
	{
		return 1;
 800475c:	2301      	movs	r3, #1
 800475e:	e054      	b.n	800480a <flash_write+0xda>
  __ASM volatile ("cpsid i" : : : "memory");
 8004760:	b672      	cpsid	i
}
 8004762:	bf00      	nop
	}

	// Disable interrupts
	__disable_irq();

	HAL_FLASH_Unlock();
 8004764:	f7fc fca8 	bl	80010b8 <HAL_FLASH_Unlock>
	uint32_t remaining_bytes = size;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_StatusTypeDef status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	76bb      	strb	r3, [r7, #26]
	uint32_t read_offset = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	623b      	str	r3, [r7, #32]
	uint32_t write_offset = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
	uint8_t oneByte= 0;
 8004778:	2300      	movs	r3, #0
 800477a:	76fb      	strb	r3, [r7, #27]

	while( remaining_bytes )
 800477c:	e03d      	b.n	80047fa <flash_write+0xca>
	{
		uint16_t inData= 0xffff;
 800477e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004782:	827b      	strh	r3, [r7, #18]
		uint32_t writing_address = Address + write_offset;
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

		if ( remaining_bytes >= HALF_WORD )
 800478c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478e:	2b01      	cmp	r3, #1
 8004790:	d906      	bls.n	80047a0 <flash_write+0x70>
			memcpy (&inData, &pData[read_offset], HALF_WORD);
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	827b      	strh	r3, [r7, #18]
 800479e:	e006      	b.n	80047ae <flash_write+0x7e>
		else
		{
			// if there is only one byte, move it to inData.
			memcpy (&inData, &pData[read_offset], 1);
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	4413      	add	r3, r2
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	74bb      	strb	r3, [r7, #18]
			oneByte = 1;
 80047aa:	2301      	movs	r3, #1
 80047ac:	76fb      	strb	r3, [r7, #27]
		}
		status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, writing_address, inData );
 80047ae:	8a7b      	ldrh	r3, [r7, #18]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2200      	movs	r2, #0
 80047b4:	461c      	mov	r4, r3
 80047b6:	4615      	mov	r5, r2
 80047b8:	4622      	mov	r2, r4
 80047ba:	462b      	mov	r3, r5
 80047bc:	6979      	ldr	r1, [r7, #20]
 80047be:	2001      	movs	r0, #1
 80047c0:	f7fc fc0a 	bl	8000fd8 <HAL_FLASH_Program>
 80047c4:	4603      	mov	r3, r0
 80047c6:	76bb      	strb	r3, [r7, #26]
		if ( status == HAL_OK )
 80047c8:	7ebb      	ldrb	r3, [r7, #26]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d115      	bne.n	80047fa <flash_write+0xca>
		{
			if ( oneByte == 1 )
 80047ce:	7efb      	ldrb	r3, [r7, #27]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d109      	bne.n	80047e8 <flash_write+0xb8>
			{
				remaining_bytes -= 1;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	3b01      	subs	r3, #1
 80047d8:	627b      	str	r3, [r7, #36]	@ 0x24
				read_offset 	+= 1;
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	3301      	adds	r3, #1
 80047de:	623b      	str	r3, [r7, #32]
				write_offset	+= 1;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	3301      	adds	r3, #1
 80047e4:	61fb      	str	r3, [r7, #28]
 80047e6:	e008      	b.n	80047fa <flash_write+0xca>
			}
			else
			{
				remaining_bytes -= HALF_WORD;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	3b02      	subs	r3, #2
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
				read_offset 	+= HALF_WORD;
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	3302      	adds	r3, #2
 80047f2:	623b      	str	r3, [r7, #32]
				write_offset	+= HALF_WORD;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	3302      	adds	r3, #2
 80047f8:	61fb      	str	r3, [r7, #28]
	while( remaining_bytes )
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1be      	bne.n	800477e <flash_write+0x4e>

		}

	}

	HAL_FLASH_Lock();
 8004800:	f7fc fc80 	bl	8001104 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8004804:	b662      	cpsie	i
}
 8004806:	bf00      	nop
	// Re-enable interrupts
	__enable_irq();

	return 0;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3728      	adds	r7, #40	@ 0x28
 800480e:	46bd      	mov	sp, r7
 8004810:	bdb0      	pop	{r4, r5, r7, pc}
 8004812:	bf00      	nop
 8004814:	0803ffff 	.word	0x0803ffff
 8004818:	08080000 	.word	0x08080000

0800481c <flash_erasePage>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_erasePage( uint32_t Address )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	// find page start address.
	uint32_t pageStartAddress = ( Address / FLASH_PAGE_SIZE ) * FLASH_PAGE_SIZE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800482a:	f023 0307 	bic.w	r3, r3, #7
 800482e:	61fb      	str	r3, [r7, #28]
	uint8_t nrPages = 1;
 8004830:	2301      	movs	r3, #1
 8004832:	76fb      	strb	r3, [r7, #27]


	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages 		= nrPages;
 8004834:	7efb      	ldrb	r3, [r7, #27]
 8004836:	617b      	str	r3, [r7, #20]
	eraseInit.PageAddress 	= pageStartAddress;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	613b      	str	r3, [r7, #16]
	eraseInit.TypeErase 	= FLASH_TYPEERASE_PAGES;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

	uint32_t pageError;

	HAL_FLASH_Unlock();
 8004840:	f7fc fc3a 	bl	80010b8 <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase( &eraseInit, &pageError);
 8004844:	f107 0208 	add.w	r2, r7, #8
 8004848:	f107 030c 	add.w	r3, r7, #12
 800484c:	4611      	mov	r1, r2
 800484e:	4618      	mov	r0, r3
 8004850:	f7fc fcf6 	bl	8001240 <HAL_FLASHEx_Erase>
 8004854:	4603      	mov	r3, r0
 8004856:	76bb      	strb	r3, [r7, #26]
	HAL_FLASH_Lock();
 8004858:	f7fc fc54 	bl	8001104 <HAL_FLASH_Lock>
	if ( status != HAL_OK )
 800485c:	7ebb      	ldrb	r3, [r7, #26]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <flash_erasePage+0x4a>
		return 1;
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <flash_erasePage+0x4c>

	return 0;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <flash_cmd_handler>:
/************************************
 * Function
 * **********************************
 */
void flash_cmd_handler( tCmdhandler_cmd inCmd )
{
 8004870:	b084      	sub	sp, #16
 8004872:	b580      	push	{r7, lr}
 8004874:	b0c4      	sub	sp, #272	@ 0x110
 8004876:	af00      	add	r7, sp, #0
 8004878:	f507 7c8c 	add.w	ip, r7, #280	@ 0x118
 800487c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	printf( "flash_cmd_handler \n" );
 8004880:	4832      	ldr	r0, [pc, #200]	@ (800494c <flash_cmd_handler+0xdc>)
 8004882:	f000 fbc5 	bl	8005010 <puts>
	if( inCmd.id.module !=  MODULE_ID_FLASH )
 8004886:	f897 3118 	ldrb.w	r3, [r7, #280]	@ 0x118
 800488a:	2b02      	cmp	r3, #2
 800488c:	d155      	bne.n	800493a <flash_cmd_handler+0xca>
		return;

	tCmdhandler_cmd cmd;
	memcpy( &cmd, (uint8_t*)&inCmd, sizeof(tCmdhandler_cmd) );
 800488e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004896:	4618      	mov	r0, r3
 8004898:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800489c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80048a0:	4619      	mov	r1, r3
 80048a2:	f000 fd10 	bl	80052c6 <memcpy>

	switch( cmd.id.cmd )
 80048a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ae:	785b      	ldrb	r3, [r3, #1]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d002      	beq.n	80048ba <flash_cmd_handler+0x4a>
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d026      	beq.n	8004906 <flash_cmd_handler+0x96>
			memcpy( &address, &cmd.data[0], 4 );
			flash_erasePage( address );
			break;
		}
		default:
			break;
 80048b8:	e03e      	b.n	8004938 <flash_cmd_handler+0xc8>
			uint32_t address = 0;
 80048ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
			memcpy( &address, &cmd.data[0], 4);
 80048c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048d8:	601a      	str	r2, [r3, #0]
			uint8_t* pData 	 = &cmd.data[4];
 80048da:	f107 0308 	add.w	r3, r7, #8
 80048de:	3308      	adds	r3, #8
 80048e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			flash_write(address, pData, cmd.dataSize - 4 );
 80048e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80048f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048f6:	885b      	ldrh	r3, [r3, #2]
 80048f8:	3b04      	subs	r3, #4
 80048fa:	461a      	mov	r2, r3
 80048fc:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8004900:	f7ff ff16 	bl	8004730 <flash_write>
			break;
 8004904:	e018      	b.n	8004938 <flash_cmd_handler+0xc8>
			uint32_t address = 0;
 8004906:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800490a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
			memcpy( &address, &cmd.data[0], 4 );
 8004912:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004920:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004924:	601a      	str	r2, [r3, #0]
			flash_erasePage( address );
 8004926:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800492a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff ff73 	bl	800481c <flash_erasePage>
			break;
 8004936:	bf00      	nop
	}

	return;
 8004938:	e000      	b.n	800493c <flash_cmd_handler+0xcc>
		return;
 800493a:	bf00      	nop
}
 800493c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004940:	46bd      	mov	sp, r7
 8004942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004946:	b004      	add	sp, #16
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	08005790 	.word	0x08005790

08004950 <led_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_init()
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_LED, .funPtr = led_cmd_handler };
 8004956:	4a07      	ldr	r2, [pc, #28]	@ (8004974 <led_init+0x24>)
 8004958:	463b      	mov	r3, r7
 800495a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800495e:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 8004962:	463b      	mov	r3, r7
 8004964:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004968:	f7ff fe26 	bl	80045b8 <cmdhandler_registerModuleCmdHandler>
	return;
 800496c:	bf00      	nop
}
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	080057a4 	.word	0x080057a4

08004978 <led_toggle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_toggle( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin( GPIOx, GPIO_Pin );
 8004984:	887b      	ldrh	r3, [r7, #2]
 8004986:	4619      	mov	r1, r3
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fc fe9f 	bl	80016cc <HAL_GPIO_TogglePin>
	return;
 800498e:	bf00      	nop
}
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <led_cmd_handler>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_cmd_handler( tCmdhandler_cmd inCmd )
{
 8004998:	b084      	sub	sp, #16
 800499a:	b580      	push	{r7, lr}
 800499c:	b0c2      	sub	sp, #264	@ 0x108
 800499e:	af00      	add	r7, sp, #0
 80049a0:	f507 7c88 	add.w	ip, r7, #272	@ 0x110
 80049a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	printf( "led_cmd_handler \n" );
 80049a8:	4824      	ldr	r0, [pc, #144]	@ (8004a3c <led_cmd_handler+0xa4>)
 80049aa:	f000 fb31 	bl	8005010 <puts>
	// make sure the command is for us.
	if ( inCmd.id.module != MODULE_ID_LED )
 80049ae:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d13a      	bne.n	8004a2c <led_cmd_handler+0x94>
		return;

	tCmdhandler_cmd cmd;
	memcpy( &cmd, (uint8_t*)&inCmd, sizeof(tCmdhandler_cmd) );
 80049b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049be:	4618      	mov	r0, r3
 80049c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80049c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80049c8:	4619      	mov	r1, r3
 80049ca:	f000 fc7c 	bl	80052c6 <memcpy>

	switch( cmd.id.cmd )
 80049ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d002      	beq.n	80049e2 <led_cmd_handler+0x4a>
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d01e      	beq.n	8004a1e <led_cmd_handler+0x86>
		{
			led_toggle( LD2_GPIO_Port, LD2_Pin);
			break;
		}
		default:
			break;
 80049e0:	e023      	b.n	8004a2a <led_cmd_handler+0x92>
			uint8_t set = 0;// (uint8_t)param;
 80049e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049e6:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
			memcpy(&set, &cmd.data, cmd.dataSize );
 80049ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049f6:	885b      	ldrh	r3, [r3, #2]
 80049f8:	461a      	mov	r2, r3
 80049fa:	1d3b      	adds	r3, r7, #4
 80049fc:	1d19      	adds	r1, r3, #4
 80049fe:	1cfb      	adds	r3, r7, #3
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fc60 	bl	80052c6 <memcpy>
			HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, set);
 8004a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a0a:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	2120      	movs	r1, #32
 8004a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a18:	f7fc fe40 	bl	800169c <HAL_GPIO_WritePin>
			break;
 8004a1c:	e005      	b.n	8004a2a <led_cmd_handler+0x92>
			led_toggle( LD2_GPIO_Port, LD2_Pin);
 8004a1e:	2120      	movs	r1, #32
 8004a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a24:	f7ff ffa8 	bl	8004978 <led_toggle>
			break;
 8004a28:	bf00      	nop
	}

	return;
 8004a2a:	e000      	b.n	8004a2e <led_cmd_handler+0x96>
		return;
 8004a2c:	bf00      	nop
}
 8004a2e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004a32:	46bd      	mov	sp, r7
 8004a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a38:	b004      	add	sp, #16
 8004a3a:	4770      	bx	lr
 8004a3c:	080057ac 	.word	0x080057ac

08004a40 <scheduler_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void scheduler_init( void )
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
	schedulerVars.nrOfTasks = 0;
 8004a46:	4b2a      	ldr	r3, [pc, #168]	@ (8004af0 <scheduler_init+0xb0>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	71fb      	strb	r3, [r7, #7]
 8004a50:	e020      	b.n	8004a94 <scheduler_init+0x54>
	{
		schedulerVars.taskList[i].pTask = NULL;
 8004a52:	79fa      	ldrb	r2, [r7, #7]
 8004a54:	4926      	ldr	r1, [pc, #152]	@ (8004af0 <scheduler_init+0xb0>)
 8004a56:	4613      	mov	r3, r2
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	3304      	adds	r3, #4
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].delay = 0;
 8004a66:	79fa      	ldrb	r2, [r7, #7]
 8004a68:	4921      	ldr	r1, [pc, #132]	@ (8004af0 <scheduler_init+0xb0>)
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	3308      	adds	r3, #8
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].lastExecutionTime = 0;
 8004a7a:	79fa      	ldrb	r2, [r7, #7]
 8004a7c:	491c      	ldr	r1, [pc, #112]	@ (8004af0 <scheduler_init+0xb0>)
 8004a7e:	4613      	mov	r3, r2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	330c      	adds	r3, #12
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	3301      	adds	r3, #1
 8004a92:	71fb      	strb	r3, [r7, #7]
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	2b09      	cmp	r3, #9
 8004a98:	d9db      	bls.n	8004a52 <scheduler_init+0x12>
	}

	// init run once queue.
	schedulerVars.RunOnceQueue.head  = 0;
 8004a9a:	4b15      	ldr	r3, [pc, #84]	@ (8004af0 <scheduler_init+0xb0>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	schedulerVars.RunOnceQueue.tail  = 0;
 8004aa2:	4b13      	ldr	r3, [pc, #76]	@ (8004af0 <scheduler_init+0xb0>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
	schedulerVars.RunOnceQueue.full  = 0;
 8004aaa:	4b11      	ldr	r3, [pc, #68]	@ (8004af0 <scheduler_init+0xb0>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	schedulerVars.RunOnceQueue.empty = 1;
 8004ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8004af0 <scheduler_init+0xb0>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	schedulerVars.RunOnceQueue.size  = 0;
 8004aba:	4b0d      	ldr	r3, [pc, #52]	@ (8004af0 <scheduler_init+0xb0>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	71bb      	strb	r3, [r7, #6]
 8004ac6:	e009      	b.n	8004adc <scheduler_init+0x9c>
	{
		schedulerVars.RunOnceQueue.runOnceTaskList[i].pTask = NULL;
 8004ac8:	79bb      	ldrb	r3, [r7, #6]
 8004aca:	4a09      	ldr	r2, [pc, #36]	@ (8004af0 <scheduler_init+0xb0>)
 8004acc:	3320      	adds	r3, #32
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	605a      	str	r2, [r3, #4]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8004ad6:	79bb      	ldrb	r3, [r7, #6]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	71bb      	strb	r3, [r7, #6]
 8004adc:	79bb      	ldrb	r3, [r7, #6]
 8004ade:	2b13      	cmp	r3, #19
 8004ae0:	d9f2      	bls.n	8004ac8 <scheduler_init+0x88>
	}
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	200003d8 	.word	0x200003d8

08004af4 <scheduler_pushTask>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t scheduler_pushTask( void (*pTask)(void) )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	// is queue full?
	if ( schedulerVars.RunOnceQueue.full )
 8004afc:	4b21      	ldr	r3, [pc, #132]	@ (8004b84 <scheduler_pushTask+0x90>)
 8004afe:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <scheduler_pushTask+0x16>
		return 1;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e036      	b.n	8004b78 <scheduler_pushTask+0x84>

	// if not, add task.
	schedulerVars.RunOnceQueue.runOnceTaskList[ schedulerVars.RunOnceQueue.tail ].pTask = pTask;
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b84 <scheduler_pushTask+0x90>)
 8004b0c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004b10:	4a1c      	ldr	r2, [pc, #112]	@ (8004b84 <scheduler_pushTask+0x90>)
 8004b12:	3320      	adds	r3, #32
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	605a      	str	r2, [r3, #4]

	// increase tail index and size.
	schedulerVars.RunOnceQueue.tail = ( schedulerVars.RunOnceQueue.tail + 1 ) % SCHEDULER_MAX_NR_RUN_ONCE_TASKS;
 8004b1c:	4b19      	ldr	r3, [pc, #100]	@ (8004b84 <scheduler_pushTask+0x90>)
 8004b1e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	4b18      	ldr	r3, [pc, #96]	@ (8004b88 <scheduler_pushTask+0x94>)
 8004b26:	fb83 1302 	smull	r1, r3, r3, r2
 8004b2a:	10d9      	asrs	r1, r3, #3
 8004b2c:	17d3      	asrs	r3, r2, #31
 8004b2e:	1ac9      	subs	r1, r1, r3
 8004b30:	460b      	mov	r3, r1
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	1ad1      	subs	r1, r2, r3
 8004b3a:	b2ca      	uxtb	r2, r1
 8004b3c:	4b11      	ldr	r3, [pc, #68]	@ (8004b84 <scheduler_pushTask+0x90>)
 8004b3e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
	schedulerVars.RunOnceQueue.size += 1;
 8004b42:	4b10      	ldr	r3, [pc, #64]	@ (8004b84 <scheduler_pushTask+0x90>)
 8004b44:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004b48:	3301      	adds	r3, #1
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <scheduler_pushTask+0x90>)
 8004b4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	// if queue was empty, it is not now.
	if ( schedulerVars.RunOnceQueue.empty )
 8004b52:	4b0c      	ldr	r3, [pc, #48]	@ (8004b84 <scheduler_pushTask+0x90>)
 8004b54:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <scheduler_pushTask+0x70>
	{
		schedulerVars.RunOnceQueue.empty = 0;
 8004b5c:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <scheduler_pushTask+0x90>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	}

	// check if full and update full.
	if( schedulerVars.RunOnceQueue.size == SCHEDULER_MAX_NR_RUN_ONCE_TASKS )
 8004b64:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <scheduler_pushTask+0x90>)
 8004b66:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004b6a:	2b14      	cmp	r3, #20
 8004b6c:	d103      	bne.n	8004b76 <scheduler_pushTask+0x82>
	{
		schedulerVars.RunOnceQueue.full = 1;
 8004b6e:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <scheduler_pushTask+0x90>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	}

	return 0;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	200003d8 	.word	0x200003d8
 8004b88:	66666667 	.word	0x66666667

08004b8c <scheduler_run>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void scheduler_run( void )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
	while( 1 )
	{
		// run once tasks:
		while ( !schedulerVars.RunOnceQueue.empty )
 8004b96:	e00d      	b.n	8004bb4 <scheduler_run+0x28>
		{
			void (*pRunOnce)(void) = NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	607b      	str	r3, [r7, #4]

			if ( 0 == scheduler_popTask( &pRunOnce ) )
 8004b9c:	1d3b      	adds	r3, r7, #4
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f848 	bl	8004c34 <scheduler_popTask>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d104      	bne.n	8004bb4 <scheduler_run+0x28>
				if ( pRunOnce != NULL )
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <scheduler_run+0x28>
					{
						pRunOnce();
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4798      	blx	r3
		while ( !schedulerVars.RunOnceQueue.empty )
 8004bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c30 <scheduler_run+0xa4>)
 8004bb6:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0ec      	beq.n	8004b98 <scheduler_run+0xc>
					}
		}

		// repeated tasks:
		now = HAL_GetTick();
 8004bbe:	f7fb febf 	bl	8000940 <HAL_GetTick>
 8004bc2:	60b8      	str	r0, [r7, #8]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	73fb      	strb	r3, [r7, #15]
 8004bc8:	e02c      	b.n	8004c24 <scheduler_run+0x98>
		{
			if ( now - schedulerVars.taskList[i].lastExecutionTime  >= schedulerVars.taskList[i].delay )
 8004bca:	7bfa      	ldrb	r2, [r7, #15]
 8004bcc:	4918      	ldr	r1, [pc, #96]	@ (8004c30 <scheduler_run+0xa4>)
 8004bce:	4613      	mov	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	330c      	adds	r3, #12
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	1ad1      	subs	r1, r2, r3
 8004be0:	7bfa      	ldrb	r2, [r7, #15]
 8004be2:	4813      	ldr	r0, [pc, #76]	@ (8004c30 <scheduler_run+0xa4>)
 8004be4:	4613      	mov	r3, r2
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4403      	add	r3, r0
 8004bee:	3308      	adds	r3, #8
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4299      	cmp	r1, r3
 8004bf4:	d313      	bcc.n	8004c1e <scheduler_run+0x92>
			{
				// execute task
				schedulerVars.taskList[i].pTask();
 8004bf6:	7bfa      	ldrb	r2, [r7, #15]
 8004bf8:	490d      	ldr	r1, [pc, #52]	@ (8004c30 <scheduler_run+0xa4>)
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	3304      	adds	r3, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4798      	blx	r3
				schedulerVars.taskList[i].lastExecutionTime = now;
 8004c0a:	7bfa      	ldrb	r2, [r7, #15]
 8004c0c:	4908      	ldr	r1, [pc, #32]	@ (8004c30 <scheduler_run+0xa4>)
 8004c0e:	4613      	mov	r3, r2
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	330c      	adds	r3, #12
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	601a      	str	r2, [r3, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	3301      	adds	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
 8004c24:	4b02      	ldr	r3, [pc, #8]	@ (8004c30 <scheduler_run+0xa4>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d3cd      	bcc.n	8004bca <scheduler_run+0x3e>
		while ( !schedulerVars.RunOnceQueue.empty )
 8004c2e:	e7c1      	b.n	8004bb4 <scheduler_run+0x28>
 8004c30:	200003d8 	.word	0x200003d8

08004c34 <scheduler_popTask>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t scheduler_popTask( void (**pTask)(void) )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	// is queue empty?
	if ( schedulerVars.RunOnceQueue.empty )
 8004c3c:	4b22      	ldr	r3, [pc, #136]	@ (8004cc8 <scheduler_popTask+0x94>)
 8004c3e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <scheduler_popTask+0x16>
		return 1;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e037      	b.n	8004cba <scheduler_popTask+0x86>

	// pick that oldest task.
	*pTask = schedulerVars.RunOnceQueue.runOnceTaskList[ schedulerVars.RunOnceQueue.head ].pTask;
 8004c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc8 <scheduler_popTask+0x94>)
 8004c4c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004c50:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc8 <scheduler_popTask+0x94>)
 8004c52:	3320      	adds	r3, #32
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	601a      	str	r2, [r3, #0]

	// update head index
	schedulerVars.RunOnceQueue.head = ( schedulerVars.RunOnceQueue.head + 1 ) % SCHEDULER_MAX_NR_RUN_ONCE_TASKS;
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc8 <scheduler_popTask+0x94>)
 8004c60:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	4b19      	ldr	r3, [pc, #100]	@ (8004ccc <scheduler_popTask+0x98>)
 8004c68:	fb83 1302 	smull	r1, r3, r3, r2
 8004c6c:	10d9      	asrs	r1, r3, #3
 8004c6e:	17d3      	asrs	r3, r2, #31
 8004c70:	1ac9      	subs	r1, r1, r3
 8004c72:	460b      	mov	r3, r1
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	1ad1      	subs	r1, r2, r3
 8004c7c:	b2ca      	uxtb	r2, r1
 8004c7e:	4b12      	ldr	r3, [pc, #72]	@ (8004cc8 <scheduler_popTask+0x94>)
 8004c80:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	schedulerVars.RunOnceQueue.size -= 1;
 8004c84:	4b10      	ldr	r3, [pc, #64]	@ (8004cc8 <scheduler_popTask+0x94>)
 8004c86:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc8 <scheduler_popTask+0x94>)
 8004c90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	// if it was full, it is not now
	if ( schedulerVars.RunOnceQueue.full == 1 )
 8004c94:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc8 <scheduler_popTask+0x94>)
 8004c96:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d103      	bne.n	8004ca6 <scheduler_popTask+0x72>
	{
		schedulerVars.RunOnceQueue.full = 0;
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <scheduler_popTask+0x94>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	}

	// check if empty
	if ( schedulerVars.RunOnceQueue.size == 0 )
 8004ca6:	4b08      	ldr	r3, [pc, #32]	@ (8004cc8 <scheduler_popTask+0x94>)
 8004ca8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d103      	bne.n	8004cb8 <scheduler_popTask+0x84>
	{
		schedulerVars.RunOnceQueue.empty = 1;
 8004cb0:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <scheduler_popTask+0x94>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	}
	return 0;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	200003d8 	.word	0x200003d8
 8004ccc:	66666667 	.word	0x66666667

08004cd0 <serial_uart_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void serial_uart_init(  UART_HandleTypeDef *huart, tCircularBuffer* pCBuff )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
	serialVars.pUart  = huart;
 8004cda:	4a06      	ldr	r2, [pc, #24]	@ (8004cf4 <serial_uart_init+0x24>)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6013      	str	r3, [r2, #0]
	serialVars.pCBuff = pCBuff;
 8004ce0:	4a04      	ldr	r2, [pc, #16]	@ (8004cf4 <serial_uart_init+0x24>)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6053      	str	r3, [r2, #4]

	return;
 8004ce6:	bf00      	nop
}
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	200004ac 	.word	0x200004ac

08004cf8 <serial_uart_receiveToIdle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t serial_uart_receiveToIdle()
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA( serialVars.pUart, serialVars.pRxBuff, RX_BUF_SIZE );
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <serial_uart_receiveToIdle+0x30>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2280      	movs	r2, #128	@ 0x80
 8004d02:	490a      	ldr	r1, [pc, #40]	@ (8004d2c <serial_uart_receiveToIdle+0x34>)
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fada 	bl	80042be <HAL_UARTEx_ReceiveToIdle_DMA>

	  // not interested of half transfer interrupt.
	  __HAL_DMA_DISABLE_IT( serialVars.pUart->hdmarx, DMA_IT_HT );
 8004d0a:	4b07      	ldr	r3, [pc, #28]	@ (8004d28 <serial_uart_receiveToIdle+0x30>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4b04      	ldr	r3, [pc, #16]	@ (8004d28 <serial_uart_receiveToIdle+0x30>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0204 	bic.w	r2, r2, #4
 8004d20:	601a      	str	r2, [r3, #0]
	return 0;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	200004ac 	.word	0x200004ac
 8004d2c:	200004b4 	.word	0x200004b4

08004d30 <serial_uart_registerCB>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void serial_uart_registerCB( void (*pCB)(void) )
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	serialVars.pCmdHandlerCB = pCB;
 8004d38:	4a04      	ldr	r2, [pc, #16]	@ (8004d4c <serial_uart_registerCB+0x1c>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	200004ac 	.word	0x200004ac

08004d50 <pushRxToCBuff>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void pushRxToCBuff()
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
	printf( "pushRxToCBuff \n" );
 8004d54:	4809      	ldr	r0, [pc, #36]	@ (8004d7c <pushRxToCBuff+0x2c>)
 8004d56:	f000 f95b 	bl	8005010 <puts>
	circularBuffer_push( serialVars.pCBuff, serialVars.pRxBuff, serialVars.receivedSize );
 8004d5a:	4b09      	ldr	r3, [pc, #36]	@ (8004d80 <pushRxToCBuff+0x30>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4a08      	ldr	r2, [pc, #32]	@ (8004d80 <pushRxToCBuff+0x30>)
 8004d60:	f892 2088 	ldrb.w	r2, [r2, #136]	@ 0x88
 8004d64:	4907      	ldr	r1, [pc, #28]	@ (8004d84 <pushRxToCBuff+0x34>)
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fb28 	bl	80043bc <circularBuffer_push>

	// notify cmdhandler about the new data.
	scheduler_pushTask( serialVars.pCmdHandlerCB );
 8004d6c:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <pushRxToCBuff+0x30>)
 8004d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff febe 	bl	8004af4 <scheduler_pushTask>
	return;
 8004d78:	bf00      	nop
}
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	080057c0 	.word	0x080057c0
 8004d80:	200004ac 	.word	0x200004ac
 8004d84:	200004b4 	.word	0x200004b4

08004d88 <HAL_UARTEx_RxEventCallback>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	807b      	strh	r3, [r7, #2]
	printf( "I \n" );
 8004d94:	480e      	ldr	r0, [pc, #56]	@ (8004dd0 <HAL_UARTEx_RxEventCallback+0x48>)
 8004d96:	f000 f93b 	bl	8005010 <puts>
	if ( huart->Instance == serialVars.pUart->Instance )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d10f      	bne.n	8004dc8 <HAL_UARTEx_RxEventCallback+0x40>
	{
		// restart receiving data.
		HAL_UARTEx_ReceiveToIdle_DMA( serialVars.pUart, serialVars.pRxBuff, RX_BUF_SIZE );
 8004da8:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2280      	movs	r2, #128	@ 0x80
 8004dae:	490a      	ldr	r1, [pc, #40]	@ (8004dd8 <HAL_UARTEx_RxEventCallback+0x50>)
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fa84 	bl	80042be <HAL_UARTEx_ReceiveToIdle_DMA>
		serialVars.receivedSize = Size;
 8004db6:	887b      	ldrh	r3, [r7, #2]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	4b06      	ldr	r3, [pc, #24]	@ (8004dd4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8004dbc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

		// move received data from rxBuff to cBuffer out side of the interrupt context.
		scheduler_pushTask( pushRxToCBuff );
 8004dc0:	4806      	ldr	r0, [pc, #24]	@ (8004ddc <HAL_UARTEx_RxEventCallback+0x54>)
 8004dc2:	f7ff fe97 	bl	8004af4 <scheduler_pushTask>
	}
	return;
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
}
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	080057d0 	.word	0x080057d0
 8004dd4:	200004ac 	.word	0x200004ac
 8004dd8:	200004b4 	.word	0x200004b4
 8004ddc:	08004d51 	.word	0x08004d51

08004de0 <std>:
 8004de0:	2300      	movs	r3, #0
 8004de2:	b510      	push	{r4, lr}
 8004de4:	4604      	mov	r4, r0
 8004de6:	e9c0 3300 	strd	r3, r3, [r0]
 8004dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dee:	6083      	str	r3, [r0, #8]
 8004df0:	8181      	strh	r1, [r0, #12]
 8004df2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004df4:	81c2      	strh	r2, [r0, #14]
 8004df6:	6183      	str	r3, [r0, #24]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	2208      	movs	r2, #8
 8004dfc:	305c      	adds	r0, #92	@ 0x5c
 8004dfe:	f000 f9e7 	bl	80051d0 <memset>
 8004e02:	4b0d      	ldr	r3, [pc, #52]	@ (8004e38 <std+0x58>)
 8004e04:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e06:	4b0d      	ldr	r3, [pc, #52]	@ (8004e3c <std+0x5c>)
 8004e08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <std+0x60>)
 8004e0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <std+0x64>)
 8004e10:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e12:	4b0d      	ldr	r3, [pc, #52]	@ (8004e48 <std+0x68>)
 8004e14:	6224      	str	r4, [r4, #32]
 8004e16:	429c      	cmp	r4, r3
 8004e18:	d006      	beq.n	8004e28 <std+0x48>
 8004e1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e1e:	4294      	cmp	r4, r2
 8004e20:	d002      	beq.n	8004e28 <std+0x48>
 8004e22:	33d0      	adds	r3, #208	@ 0xd0
 8004e24:	429c      	cmp	r4, r3
 8004e26:	d105      	bne.n	8004e34 <std+0x54>
 8004e28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e30:	f000 ba46 	b.w	80052c0 <__retarget_lock_init_recursive>
 8004e34:	bd10      	pop	{r4, pc}
 8004e36:	bf00      	nop
 8004e38:	08005021 	.word	0x08005021
 8004e3c:	08005043 	.word	0x08005043
 8004e40:	0800507b 	.word	0x0800507b
 8004e44:	0800509f 	.word	0x0800509f
 8004e48:	2000053c 	.word	0x2000053c

08004e4c <stdio_exit_handler>:
 8004e4c:	4a02      	ldr	r2, [pc, #8]	@ (8004e58 <stdio_exit_handler+0xc>)
 8004e4e:	4903      	ldr	r1, [pc, #12]	@ (8004e5c <stdio_exit_handler+0x10>)
 8004e50:	4803      	ldr	r0, [pc, #12]	@ (8004e60 <stdio_exit_handler+0x14>)
 8004e52:	f000 b869 	b.w	8004f28 <_fwalk_sglue>
 8004e56:	bf00      	nop
 8004e58:	2000000c 	.word	0x2000000c
 8004e5c:	080055dd 	.word	0x080055dd
 8004e60:	2000001c 	.word	0x2000001c

08004e64 <cleanup_stdio>:
 8004e64:	6841      	ldr	r1, [r0, #4]
 8004e66:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <cleanup_stdio+0x34>)
 8004e68:	4299      	cmp	r1, r3
 8004e6a:	b510      	push	{r4, lr}
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	d001      	beq.n	8004e74 <cleanup_stdio+0x10>
 8004e70:	f000 fbb4 	bl	80055dc <_fflush_r>
 8004e74:	68a1      	ldr	r1, [r4, #8]
 8004e76:	4b09      	ldr	r3, [pc, #36]	@ (8004e9c <cleanup_stdio+0x38>)
 8004e78:	4299      	cmp	r1, r3
 8004e7a:	d002      	beq.n	8004e82 <cleanup_stdio+0x1e>
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f000 fbad 	bl	80055dc <_fflush_r>
 8004e82:	68e1      	ldr	r1, [r4, #12]
 8004e84:	4b06      	ldr	r3, [pc, #24]	@ (8004ea0 <cleanup_stdio+0x3c>)
 8004e86:	4299      	cmp	r1, r3
 8004e88:	d004      	beq.n	8004e94 <cleanup_stdio+0x30>
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e90:	f000 bba4 	b.w	80055dc <_fflush_r>
 8004e94:	bd10      	pop	{r4, pc}
 8004e96:	bf00      	nop
 8004e98:	2000053c 	.word	0x2000053c
 8004e9c:	200005a4 	.word	0x200005a4
 8004ea0:	2000060c 	.word	0x2000060c

08004ea4 <global_stdio_init.part.0>:
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <global_stdio_init.part.0+0x30>)
 8004ea8:	4c0b      	ldr	r4, [pc, #44]	@ (8004ed8 <global_stdio_init.part.0+0x34>)
 8004eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8004edc <global_stdio_init.part.0+0x38>)
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	4620      	mov	r0, r4
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2104      	movs	r1, #4
 8004eb4:	f7ff ff94 	bl	8004de0 <std>
 8004eb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	2109      	movs	r1, #9
 8004ec0:	f7ff ff8e 	bl	8004de0 <std>
 8004ec4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ec8:	2202      	movs	r2, #2
 8004eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ece:	2112      	movs	r1, #18
 8004ed0:	f7ff bf86 	b.w	8004de0 <std>
 8004ed4:	20000674 	.word	0x20000674
 8004ed8:	2000053c 	.word	0x2000053c
 8004edc:	08004e4d 	.word	0x08004e4d

08004ee0 <__sfp_lock_acquire>:
 8004ee0:	4801      	ldr	r0, [pc, #4]	@ (8004ee8 <__sfp_lock_acquire+0x8>)
 8004ee2:	f000 b9ee 	b.w	80052c2 <__retarget_lock_acquire_recursive>
 8004ee6:	bf00      	nop
 8004ee8:	2000067d 	.word	0x2000067d

08004eec <__sfp_lock_release>:
 8004eec:	4801      	ldr	r0, [pc, #4]	@ (8004ef4 <__sfp_lock_release+0x8>)
 8004eee:	f000 b9e9 	b.w	80052c4 <__retarget_lock_release_recursive>
 8004ef2:	bf00      	nop
 8004ef4:	2000067d 	.word	0x2000067d

08004ef8 <__sinit>:
 8004ef8:	b510      	push	{r4, lr}
 8004efa:	4604      	mov	r4, r0
 8004efc:	f7ff fff0 	bl	8004ee0 <__sfp_lock_acquire>
 8004f00:	6a23      	ldr	r3, [r4, #32]
 8004f02:	b11b      	cbz	r3, 8004f0c <__sinit+0x14>
 8004f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f08:	f7ff bff0 	b.w	8004eec <__sfp_lock_release>
 8004f0c:	4b04      	ldr	r3, [pc, #16]	@ (8004f20 <__sinit+0x28>)
 8004f0e:	6223      	str	r3, [r4, #32]
 8004f10:	4b04      	ldr	r3, [pc, #16]	@ (8004f24 <__sinit+0x2c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1f5      	bne.n	8004f04 <__sinit+0xc>
 8004f18:	f7ff ffc4 	bl	8004ea4 <global_stdio_init.part.0>
 8004f1c:	e7f2      	b.n	8004f04 <__sinit+0xc>
 8004f1e:	bf00      	nop
 8004f20:	08004e65 	.word	0x08004e65
 8004f24:	20000674 	.word	0x20000674

08004f28 <_fwalk_sglue>:
 8004f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f2c:	4607      	mov	r7, r0
 8004f2e:	4688      	mov	r8, r1
 8004f30:	4614      	mov	r4, r2
 8004f32:	2600      	movs	r6, #0
 8004f34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f38:	f1b9 0901 	subs.w	r9, r9, #1
 8004f3c:	d505      	bpl.n	8004f4a <_fwalk_sglue+0x22>
 8004f3e:	6824      	ldr	r4, [r4, #0]
 8004f40:	2c00      	cmp	r4, #0
 8004f42:	d1f7      	bne.n	8004f34 <_fwalk_sglue+0xc>
 8004f44:	4630      	mov	r0, r6
 8004f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f4a:	89ab      	ldrh	r3, [r5, #12]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d907      	bls.n	8004f60 <_fwalk_sglue+0x38>
 8004f50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f54:	3301      	adds	r3, #1
 8004f56:	d003      	beq.n	8004f60 <_fwalk_sglue+0x38>
 8004f58:	4629      	mov	r1, r5
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	47c0      	blx	r8
 8004f5e:	4306      	orrs	r6, r0
 8004f60:	3568      	adds	r5, #104	@ 0x68
 8004f62:	e7e9      	b.n	8004f38 <_fwalk_sglue+0x10>

08004f64 <_puts_r>:
 8004f64:	6a03      	ldr	r3, [r0, #32]
 8004f66:	b570      	push	{r4, r5, r6, lr}
 8004f68:	6884      	ldr	r4, [r0, #8]
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	460e      	mov	r6, r1
 8004f6e:	b90b      	cbnz	r3, 8004f74 <_puts_r+0x10>
 8004f70:	f7ff ffc2 	bl	8004ef8 <__sinit>
 8004f74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f76:	07db      	lsls	r3, r3, #31
 8004f78:	d405      	bmi.n	8004f86 <_puts_r+0x22>
 8004f7a:	89a3      	ldrh	r3, [r4, #12]
 8004f7c:	0598      	lsls	r0, r3, #22
 8004f7e:	d402      	bmi.n	8004f86 <_puts_r+0x22>
 8004f80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f82:	f000 f99e 	bl	80052c2 <__retarget_lock_acquire_recursive>
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	0719      	lsls	r1, r3, #28
 8004f8a:	d502      	bpl.n	8004f92 <_puts_r+0x2e>
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d135      	bne.n	8004ffe <_puts_r+0x9a>
 8004f92:	4621      	mov	r1, r4
 8004f94:	4628      	mov	r0, r5
 8004f96:	f000 f8c5 	bl	8005124 <__swsetup_r>
 8004f9a:	b380      	cbz	r0, 8004ffe <_puts_r+0x9a>
 8004f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8004fa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fa2:	07da      	lsls	r2, r3, #31
 8004fa4:	d405      	bmi.n	8004fb2 <_puts_r+0x4e>
 8004fa6:	89a3      	ldrh	r3, [r4, #12]
 8004fa8:	059b      	lsls	r3, r3, #22
 8004faa:	d402      	bmi.n	8004fb2 <_puts_r+0x4e>
 8004fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fae:	f000 f989 	bl	80052c4 <__retarget_lock_release_recursive>
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	bd70      	pop	{r4, r5, r6, pc}
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	da04      	bge.n	8004fc4 <_puts_r+0x60>
 8004fba:	69a2      	ldr	r2, [r4, #24]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	dc17      	bgt.n	8004ff0 <_puts_r+0x8c>
 8004fc0:	290a      	cmp	r1, #10
 8004fc2:	d015      	beq.n	8004ff0 <_puts_r+0x8c>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	6022      	str	r2, [r4, #0]
 8004fca:	7019      	strb	r1, [r3, #0]
 8004fcc:	68a3      	ldr	r3, [r4, #8]
 8004fce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	60a3      	str	r3, [r4, #8]
 8004fd6:	2900      	cmp	r1, #0
 8004fd8:	d1ed      	bne.n	8004fb6 <_puts_r+0x52>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da11      	bge.n	8005002 <_puts_r+0x9e>
 8004fde:	4622      	mov	r2, r4
 8004fe0:	210a      	movs	r1, #10
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f000 f85f 	bl	80050a6 <__swbuf_r>
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d0d7      	beq.n	8004f9c <_puts_r+0x38>
 8004fec:	250a      	movs	r5, #10
 8004fee:	e7d7      	b.n	8004fa0 <_puts_r+0x3c>
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	f000 f857 	bl	80050a6 <__swbuf_r>
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	d1e7      	bne.n	8004fcc <_puts_r+0x68>
 8004ffc:	e7ce      	b.n	8004f9c <_puts_r+0x38>
 8004ffe:	3e01      	subs	r6, #1
 8005000:	e7e4      	b.n	8004fcc <_puts_r+0x68>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	6022      	str	r2, [r4, #0]
 8005008:	220a      	movs	r2, #10
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	e7ee      	b.n	8004fec <_puts_r+0x88>
	...

08005010 <puts>:
 8005010:	4b02      	ldr	r3, [pc, #8]	@ (800501c <puts+0xc>)
 8005012:	4601      	mov	r1, r0
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	f7ff bfa5 	b.w	8004f64 <_puts_r>
 800501a:	bf00      	nop
 800501c:	20000018 	.word	0x20000018

08005020 <__sread>:
 8005020:	b510      	push	{r4, lr}
 8005022:	460c      	mov	r4, r1
 8005024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005028:	f000 f8fc 	bl	8005224 <_read_r>
 800502c:	2800      	cmp	r0, #0
 800502e:	bfab      	itete	ge
 8005030:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005032:	89a3      	ldrhlt	r3, [r4, #12]
 8005034:	181b      	addge	r3, r3, r0
 8005036:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800503a:	bfac      	ite	ge
 800503c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800503e:	81a3      	strhlt	r3, [r4, #12]
 8005040:	bd10      	pop	{r4, pc}

08005042 <__swrite>:
 8005042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005046:	461f      	mov	r7, r3
 8005048:	898b      	ldrh	r3, [r1, #12]
 800504a:	05db      	lsls	r3, r3, #23
 800504c:	4605      	mov	r5, r0
 800504e:	460c      	mov	r4, r1
 8005050:	4616      	mov	r6, r2
 8005052:	d505      	bpl.n	8005060 <__swrite+0x1e>
 8005054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005058:	2302      	movs	r3, #2
 800505a:	2200      	movs	r2, #0
 800505c:	f000 f8d0 	bl	8005200 <_lseek_r>
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005066:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800506a:	81a3      	strh	r3, [r4, #12]
 800506c:	4632      	mov	r2, r6
 800506e:	463b      	mov	r3, r7
 8005070:	4628      	mov	r0, r5
 8005072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005076:	f000 b8e7 	b.w	8005248 <_write_r>

0800507a <__sseek>:
 800507a:	b510      	push	{r4, lr}
 800507c:	460c      	mov	r4, r1
 800507e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005082:	f000 f8bd 	bl	8005200 <_lseek_r>
 8005086:	1c43      	adds	r3, r0, #1
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	bf15      	itete	ne
 800508c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800508e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005092:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005096:	81a3      	strheq	r3, [r4, #12]
 8005098:	bf18      	it	ne
 800509a:	81a3      	strhne	r3, [r4, #12]
 800509c:	bd10      	pop	{r4, pc}

0800509e <__sclose>:
 800509e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a2:	f000 b89d 	b.w	80051e0 <_close_r>

080050a6 <__swbuf_r>:
 80050a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a8:	460e      	mov	r6, r1
 80050aa:	4614      	mov	r4, r2
 80050ac:	4605      	mov	r5, r0
 80050ae:	b118      	cbz	r0, 80050b8 <__swbuf_r+0x12>
 80050b0:	6a03      	ldr	r3, [r0, #32]
 80050b2:	b90b      	cbnz	r3, 80050b8 <__swbuf_r+0x12>
 80050b4:	f7ff ff20 	bl	8004ef8 <__sinit>
 80050b8:	69a3      	ldr	r3, [r4, #24]
 80050ba:	60a3      	str	r3, [r4, #8]
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	071a      	lsls	r2, r3, #28
 80050c0:	d501      	bpl.n	80050c6 <__swbuf_r+0x20>
 80050c2:	6923      	ldr	r3, [r4, #16]
 80050c4:	b943      	cbnz	r3, 80050d8 <__swbuf_r+0x32>
 80050c6:	4621      	mov	r1, r4
 80050c8:	4628      	mov	r0, r5
 80050ca:	f000 f82b 	bl	8005124 <__swsetup_r>
 80050ce:	b118      	cbz	r0, 80050d8 <__swbuf_r+0x32>
 80050d0:	f04f 37ff 	mov.w	r7, #4294967295
 80050d4:	4638      	mov	r0, r7
 80050d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	6922      	ldr	r2, [r4, #16]
 80050dc:	1a98      	subs	r0, r3, r2
 80050de:	6963      	ldr	r3, [r4, #20]
 80050e0:	b2f6      	uxtb	r6, r6
 80050e2:	4283      	cmp	r3, r0
 80050e4:	4637      	mov	r7, r6
 80050e6:	dc05      	bgt.n	80050f4 <__swbuf_r+0x4e>
 80050e8:	4621      	mov	r1, r4
 80050ea:	4628      	mov	r0, r5
 80050ec:	f000 fa76 	bl	80055dc <_fflush_r>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d1ed      	bne.n	80050d0 <__swbuf_r+0x2a>
 80050f4:	68a3      	ldr	r3, [r4, #8]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	60a3      	str	r3, [r4, #8]
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	6022      	str	r2, [r4, #0]
 8005100:	701e      	strb	r6, [r3, #0]
 8005102:	6962      	ldr	r2, [r4, #20]
 8005104:	1c43      	adds	r3, r0, #1
 8005106:	429a      	cmp	r2, r3
 8005108:	d004      	beq.n	8005114 <__swbuf_r+0x6e>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	07db      	lsls	r3, r3, #31
 800510e:	d5e1      	bpl.n	80050d4 <__swbuf_r+0x2e>
 8005110:	2e0a      	cmp	r6, #10
 8005112:	d1df      	bne.n	80050d4 <__swbuf_r+0x2e>
 8005114:	4621      	mov	r1, r4
 8005116:	4628      	mov	r0, r5
 8005118:	f000 fa60 	bl	80055dc <_fflush_r>
 800511c:	2800      	cmp	r0, #0
 800511e:	d0d9      	beq.n	80050d4 <__swbuf_r+0x2e>
 8005120:	e7d6      	b.n	80050d0 <__swbuf_r+0x2a>
	...

08005124 <__swsetup_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4b29      	ldr	r3, [pc, #164]	@ (80051cc <__swsetup_r+0xa8>)
 8005128:	4605      	mov	r5, r0
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	460c      	mov	r4, r1
 800512e:	b118      	cbz	r0, 8005138 <__swsetup_r+0x14>
 8005130:	6a03      	ldr	r3, [r0, #32]
 8005132:	b90b      	cbnz	r3, 8005138 <__swsetup_r+0x14>
 8005134:	f7ff fee0 	bl	8004ef8 <__sinit>
 8005138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800513c:	0719      	lsls	r1, r3, #28
 800513e:	d422      	bmi.n	8005186 <__swsetup_r+0x62>
 8005140:	06da      	lsls	r2, r3, #27
 8005142:	d407      	bmi.n	8005154 <__swsetup_r+0x30>
 8005144:	2209      	movs	r2, #9
 8005146:	602a      	str	r2, [r5, #0]
 8005148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800514c:	81a3      	strh	r3, [r4, #12]
 800514e:	f04f 30ff 	mov.w	r0, #4294967295
 8005152:	e033      	b.n	80051bc <__swsetup_r+0x98>
 8005154:	0758      	lsls	r0, r3, #29
 8005156:	d512      	bpl.n	800517e <__swsetup_r+0x5a>
 8005158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800515a:	b141      	cbz	r1, 800516e <__swsetup_r+0x4a>
 800515c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005160:	4299      	cmp	r1, r3
 8005162:	d002      	beq.n	800516a <__swsetup_r+0x46>
 8005164:	4628      	mov	r0, r5
 8005166:	f000 f8bd 	bl	80052e4 <_free_r>
 800516a:	2300      	movs	r3, #0
 800516c:	6363      	str	r3, [r4, #52]	@ 0x34
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005174:	81a3      	strh	r3, [r4, #12]
 8005176:	2300      	movs	r3, #0
 8005178:	6063      	str	r3, [r4, #4]
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	f043 0308 	orr.w	r3, r3, #8
 8005184:	81a3      	strh	r3, [r4, #12]
 8005186:	6923      	ldr	r3, [r4, #16]
 8005188:	b94b      	cbnz	r3, 800519e <__swsetup_r+0x7a>
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005194:	d003      	beq.n	800519e <__swsetup_r+0x7a>
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 fa6d 	bl	8005678 <__smakebuf_r>
 800519e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051a2:	f013 0201 	ands.w	r2, r3, #1
 80051a6:	d00a      	beq.n	80051be <__swsetup_r+0x9a>
 80051a8:	2200      	movs	r2, #0
 80051aa:	60a2      	str	r2, [r4, #8]
 80051ac:	6962      	ldr	r2, [r4, #20]
 80051ae:	4252      	negs	r2, r2
 80051b0:	61a2      	str	r2, [r4, #24]
 80051b2:	6922      	ldr	r2, [r4, #16]
 80051b4:	b942      	cbnz	r2, 80051c8 <__swsetup_r+0xa4>
 80051b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051ba:	d1c5      	bne.n	8005148 <__swsetup_r+0x24>
 80051bc:	bd38      	pop	{r3, r4, r5, pc}
 80051be:	0799      	lsls	r1, r3, #30
 80051c0:	bf58      	it	pl
 80051c2:	6962      	ldrpl	r2, [r4, #20]
 80051c4:	60a2      	str	r2, [r4, #8]
 80051c6:	e7f4      	b.n	80051b2 <__swsetup_r+0x8e>
 80051c8:	2000      	movs	r0, #0
 80051ca:	e7f7      	b.n	80051bc <__swsetup_r+0x98>
 80051cc:	20000018 	.word	0x20000018

080051d0 <memset>:
 80051d0:	4402      	add	r2, r0
 80051d2:	4603      	mov	r3, r0
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d100      	bne.n	80051da <memset+0xa>
 80051d8:	4770      	bx	lr
 80051da:	f803 1b01 	strb.w	r1, [r3], #1
 80051de:	e7f9      	b.n	80051d4 <memset+0x4>

080051e0 <_close_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d06      	ldr	r5, [pc, #24]	@ (80051fc <_close_r+0x1c>)
 80051e4:	2300      	movs	r3, #0
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	f7fb fa03 	bl	80005f6 <_close>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_close_r+0x1a>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_close_r+0x1a>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	20000678 	.word	0x20000678

08005200 <_lseek_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4d07      	ldr	r5, [pc, #28]	@ (8005220 <_lseek_r+0x20>)
 8005204:	4604      	mov	r4, r0
 8005206:	4608      	mov	r0, r1
 8005208:	4611      	mov	r1, r2
 800520a:	2200      	movs	r2, #0
 800520c:	602a      	str	r2, [r5, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	f7fb fa18 	bl	8000644 <_lseek>
 8005214:	1c43      	adds	r3, r0, #1
 8005216:	d102      	bne.n	800521e <_lseek_r+0x1e>
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	b103      	cbz	r3, 800521e <_lseek_r+0x1e>
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	bd38      	pop	{r3, r4, r5, pc}
 8005220:	20000678 	.word	0x20000678

08005224 <_read_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4d07      	ldr	r5, [pc, #28]	@ (8005244 <_read_r+0x20>)
 8005228:	4604      	mov	r4, r0
 800522a:	4608      	mov	r0, r1
 800522c:	4611      	mov	r1, r2
 800522e:	2200      	movs	r2, #0
 8005230:	602a      	str	r2, [r5, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	f7fb f9c2 	bl	80005bc <_read>
 8005238:	1c43      	adds	r3, r0, #1
 800523a:	d102      	bne.n	8005242 <_read_r+0x1e>
 800523c:	682b      	ldr	r3, [r5, #0]
 800523e:	b103      	cbz	r3, 8005242 <_read_r+0x1e>
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	bd38      	pop	{r3, r4, r5, pc}
 8005244:	20000678 	.word	0x20000678

08005248 <_write_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4d07      	ldr	r5, [pc, #28]	@ (8005268 <_write_r+0x20>)
 800524c:	4604      	mov	r4, r0
 800524e:	4608      	mov	r0, r1
 8005250:	4611      	mov	r1, r2
 8005252:	2200      	movs	r2, #0
 8005254:	602a      	str	r2, [r5, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	f7fb f8ab 	bl	80003b2 <_write>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_write_r+0x1e>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_write_r+0x1e>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	20000678 	.word	0x20000678

0800526c <__errno>:
 800526c:	4b01      	ldr	r3, [pc, #4]	@ (8005274 <__errno+0x8>)
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000018 	.word	0x20000018

08005278 <__libc_init_array>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	4d0d      	ldr	r5, [pc, #52]	@ (80052b0 <__libc_init_array+0x38>)
 800527c:	4c0d      	ldr	r4, [pc, #52]	@ (80052b4 <__libc_init_array+0x3c>)
 800527e:	1b64      	subs	r4, r4, r5
 8005280:	10a4      	asrs	r4, r4, #2
 8005282:	2600      	movs	r6, #0
 8005284:	42a6      	cmp	r6, r4
 8005286:	d109      	bne.n	800529c <__libc_init_array+0x24>
 8005288:	4d0b      	ldr	r5, [pc, #44]	@ (80052b8 <__libc_init_array+0x40>)
 800528a:	4c0c      	ldr	r4, [pc, #48]	@ (80052bc <__libc_init_array+0x44>)
 800528c:	f000 fa62 	bl	8005754 <_init>
 8005290:	1b64      	subs	r4, r4, r5
 8005292:	10a4      	asrs	r4, r4, #2
 8005294:	2600      	movs	r6, #0
 8005296:	42a6      	cmp	r6, r4
 8005298:	d105      	bne.n	80052a6 <__libc_init_array+0x2e>
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a0:	4798      	blx	r3
 80052a2:	3601      	adds	r6, #1
 80052a4:	e7ee      	b.n	8005284 <__libc_init_array+0xc>
 80052a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052aa:	4798      	blx	r3
 80052ac:	3601      	adds	r6, #1
 80052ae:	e7f2      	b.n	8005296 <__libc_init_array+0x1e>
 80052b0:	0800580c 	.word	0x0800580c
 80052b4:	0800580c 	.word	0x0800580c
 80052b8:	0800580c 	.word	0x0800580c
 80052bc:	08005810 	.word	0x08005810

080052c0 <__retarget_lock_init_recursive>:
 80052c0:	4770      	bx	lr

080052c2 <__retarget_lock_acquire_recursive>:
 80052c2:	4770      	bx	lr

080052c4 <__retarget_lock_release_recursive>:
 80052c4:	4770      	bx	lr

080052c6 <memcpy>:
 80052c6:	440a      	add	r2, r1
 80052c8:	4291      	cmp	r1, r2
 80052ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80052ce:	d100      	bne.n	80052d2 <memcpy+0xc>
 80052d0:	4770      	bx	lr
 80052d2:	b510      	push	{r4, lr}
 80052d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052dc:	4291      	cmp	r1, r2
 80052de:	d1f9      	bne.n	80052d4 <memcpy+0xe>
 80052e0:	bd10      	pop	{r4, pc}
	...

080052e4 <_free_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4605      	mov	r5, r0
 80052e8:	2900      	cmp	r1, #0
 80052ea:	d041      	beq.n	8005370 <_free_r+0x8c>
 80052ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f0:	1f0c      	subs	r4, r1, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	bfb8      	it	lt
 80052f6:	18e4      	addlt	r4, r4, r3
 80052f8:	f000 f8e0 	bl	80054bc <__malloc_lock>
 80052fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005374 <_free_r+0x90>)
 80052fe:	6813      	ldr	r3, [r2, #0]
 8005300:	b933      	cbnz	r3, 8005310 <_free_r+0x2c>
 8005302:	6063      	str	r3, [r4, #4]
 8005304:	6014      	str	r4, [r2, #0]
 8005306:	4628      	mov	r0, r5
 8005308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800530c:	f000 b8dc 	b.w	80054c8 <__malloc_unlock>
 8005310:	42a3      	cmp	r3, r4
 8005312:	d908      	bls.n	8005326 <_free_r+0x42>
 8005314:	6820      	ldr	r0, [r4, #0]
 8005316:	1821      	adds	r1, r4, r0
 8005318:	428b      	cmp	r3, r1
 800531a:	bf01      	itttt	eq
 800531c:	6819      	ldreq	r1, [r3, #0]
 800531e:	685b      	ldreq	r3, [r3, #4]
 8005320:	1809      	addeq	r1, r1, r0
 8005322:	6021      	streq	r1, [r4, #0]
 8005324:	e7ed      	b.n	8005302 <_free_r+0x1e>
 8005326:	461a      	mov	r2, r3
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	b10b      	cbz	r3, 8005330 <_free_r+0x4c>
 800532c:	42a3      	cmp	r3, r4
 800532e:	d9fa      	bls.n	8005326 <_free_r+0x42>
 8005330:	6811      	ldr	r1, [r2, #0]
 8005332:	1850      	adds	r0, r2, r1
 8005334:	42a0      	cmp	r0, r4
 8005336:	d10b      	bne.n	8005350 <_free_r+0x6c>
 8005338:	6820      	ldr	r0, [r4, #0]
 800533a:	4401      	add	r1, r0
 800533c:	1850      	adds	r0, r2, r1
 800533e:	4283      	cmp	r3, r0
 8005340:	6011      	str	r1, [r2, #0]
 8005342:	d1e0      	bne.n	8005306 <_free_r+0x22>
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	6053      	str	r3, [r2, #4]
 800534a:	4408      	add	r0, r1
 800534c:	6010      	str	r0, [r2, #0]
 800534e:	e7da      	b.n	8005306 <_free_r+0x22>
 8005350:	d902      	bls.n	8005358 <_free_r+0x74>
 8005352:	230c      	movs	r3, #12
 8005354:	602b      	str	r3, [r5, #0]
 8005356:	e7d6      	b.n	8005306 <_free_r+0x22>
 8005358:	6820      	ldr	r0, [r4, #0]
 800535a:	1821      	adds	r1, r4, r0
 800535c:	428b      	cmp	r3, r1
 800535e:	bf04      	itt	eq
 8005360:	6819      	ldreq	r1, [r3, #0]
 8005362:	685b      	ldreq	r3, [r3, #4]
 8005364:	6063      	str	r3, [r4, #4]
 8005366:	bf04      	itt	eq
 8005368:	1809      	addeq	r1, r1, r0
 800536a:	6021      	streq	r1, [r4, #0]
 800536c:	6054      	str	r4, [r2, #4]
 800536e:	e7ca      	b.n	8005306 <_free_r+0x22>
 8005370:	bd38      	pop	{r3, r4, r5, pc}
 8005372:	bf00      	nop
 8005374:	20000684 	.word	0x20000684

08005378 <sbrk_aligned>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	4e0f      	ldr	r6, [pc, #60]	@ (80053b8 <sbrk_aligned+0x40>)
 800537c:	460c      	mov	r4, r1
 800537e:	6831      	ldr	r1, [r6, #0]
 8005380:	4605      	mov	r5, r0
 8005382:	b911      	cbnz	r1, 800538a <sbrk_aligned+0x12>
 8005384:	f000 f9d6 	bl	8005734 <_sbrk_r>
 8005388:	6030      	str	r0, [r6, #0]
 800538a:	4621      	mov	r1, r4
 800538c:	4628      	mov	r0, r5
 800538e:	f000 f9d1 	bl	8005734 <_sbrk_r>
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	d103      	bne.n	800539e <sbrk_aligned+0x26>
 8005396:	f04f 34ff 	mov.w	r4, #4294967295
 800539a:	4620      	mov	r0, r4
 800539c:	bd70      	pop	{r4, r5, r6, pc}
 800539e:	1cc4      	adds	r4, r0, #3
 80053a0:	f024 0403 	bic.w	r4, r4, #3
 80053a4:	42a0      	cmp	r0, r4
 80053a6:	d0f8      	beq.n	800539a <sbrk_aligned+0x22>
 80053a8:	1a21      	subs	r1, r4, r0
 80053aa:	4628      	mov	r0, r5
 80053ac:	f000 f9c2 	bl	8005734 <_sbrk_r>
 80053b0:	3001      	adds	r0, #1
 80053b2:	d1f2      	bne.n	800539a <sbrk_aligned+0x22>
 80053b4:	e7ef      	b.n	8005396 <sbrk_aligned+0x1e>
 80053b6:	bf00      	nop
 80053b8:	20000680 	.word	0x20000680

080053bc <_malloc_r>:
 80053bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c0:	1ccd      	adds	r5, r1, #3
 80053c2:	f025 0503 	bic.w	r5, r5, #3
 80053c6:	3508      	adds	r5, #8
 80053c8:	2d0c      	cmp	r5, #12
 80053ca:	bf38      	it	cc
 80053cc:	250c      	movcc	r5, #12
 80053ce:	2d00      	cmp	r5, #0
 80053d0:	4606      	mov	r6, r0
 80053d2:	db01      	blt.n	80053d8 <_malloc_r+0x1c>
 80053d4:	42a9      	cmp	r1, r5
 80053d6:	d904      	bls.n	80053e2 <_malloc_r+0x26>
 80053d8:	230c      	movs	r3, #12
 80053da:	6033      	str	r3, [r6, #0]
 80053dc:	2000      	movs	r0, #0
 80053de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054b8 <_malloc_r+0xfc>
 80053e6:	f000 f869 	bl	80054bc <__malloc_lock>
 80053ea:	f8d8 3000 	ldr.w	r3, [r8]
 80053ee:	461c      	mov	r4, r3
 80053f0:	bb44      	cbnz	r4, 8005444 <_malloc_r+0x88>
 80053f2:	4629      	mov	r1, r5
 80053f4:	4630      	mov	r0, r6
 80053f6:	f7ff ffbf 	bl	8005378 <sbrk_aligned>
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	4604      	mov	r4, r0
 80053fe:	d158      	bne.n	80054b2 <_malloc_r+0xf6>
 8005400:	f8d8 4000 	ldr.w	r4, [r8]
 8005404:	4627      	mov	r7, r4
 8005406:	2f00      	cmp	r7, #0
 8005408:	d143      	bne.n	8005492 <_malloc_r+0xd6>
 800540a:	2c00      	cmp	r4, #0
 800540c:	d04b      	beq.n	80054a6 <_malloc_r+0xea>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	4639      	mov	r1, r7
 8005412:	4630      	mov	r0, r6
 8005414:	eb04 0903 	add.w	r9, r4, r3
 8005418:	f000 f98c 	bl	8005734 <_sbrk_r>
 800541c:	4581      	cmp	r9, r0
 800541e:	d142      	bne.n	80054a6 <_malloc_r+0xea>
 8005420:	6821      	ldr	r1, [r4, #0]
 8005422:	1a6d      	subs	r5, r5, r1
 8005424:	4629      	mov	r1, r5
 8005426:	4630      	mov	r0, r6
 8005428:	f7ff ffa6 	bl	8005378 <sbrk_aligned>
 800542c:	3001      	adds	r0, #1
 800542e:	d03a      	beq.n	80054a6 <_malloc_r+0xea>
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	442b      	add	r3, r5
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	f8d8 3000 	ldr.w	r3, [r8]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	bb62      	cbnz	r2, 8005498 <_malloc_r+0xdc>
 800543e:	f8c8 7000 	str.w	r7, [r8]
 8005442:	e00f      	b.n	8005464 <_malloc_r+0xa8>
 8005444:	6822      	ldr	r2, [r4, #0]
 8005446:	1b52      	subs	r2, r2, r5
 8005448:	d420      	bmi.n	800548c <_malloc_r+0xd0>
 800544a:	2a0b      	cmp	r2, #11
 800544c:	d917      	bls.n	800547e <_malloc_r+0xc2>
 800544e:	1961      	adds	r1, r4, r5
 8005450:	42a3      	cmp	r3, r4
 8005452:	6025      	str	r5, [r4, #0]
 8005454:	bf18      	it	ne
 8005456:	6059      	strne	r1, [r3, #4]
 8005458:	6863      	ldr	r3, [r4, #4]
 800545a:	bf08      	it	eq
 800545c:	f8c8 1000 	streq.w	r1, [r8]
 8005460:	5162      	str	r2, [r4, r5]
 8005462:	604b      	str	r3, [r1, #4]
 8005464:	4630      	mov	r0, r6
 8005466:	f000 f82f 	bl	80054c8 <__malloc_unlock>
 800546a:	f104 000b 	add.w	r0, r4, #11
 800546e:	1d23      	adds	r3, r4, #4
 8005470:	f020 0007 	bic.w	r0, r0, #7
 8005474:	1ac2      	subs	r2, r0, r3
 8005476:	bf1c      	itt	ne
 8005478:	1a1b      	subne	r3, r3, r0
 800547a:	50a3      	strne	r3, [r4, r2]
 800547c:	e7af      	b.n	80053de <_malloc_r+0x22>
 800547e:	6862      	ldr	r2, [r4, #4]
 8005480:	42a3      	cmp	r3, r4
 8005482:	bf0c      	ite	eq
 8005484:	f8c8 2000 	streq.w	r2, [r8]
 8005488:	605a      	strne	r2, [r3, #4]
 800548a:	e7eb      	b.n	8005464 <_malloc_r+0xa8>
 800548c:	4623      	mov	r3, r4
 800548e:	6864      	ldr	r4, [r4, #4]
 8005490:	e7ae      	b.n	80053f0 <_malloc_r+0x34>
 8005492:	463c      	mov	r4, r7
 8005494:	687f      	ldr	r7, [r7, #4]
 8005496:	e7b6      	b.n	8005406 <_malloc_r+0x4a>
 8005498:	461a      	mov	r2, r3
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	42a3      	cmp	r3, r4
 800549e:	d1fb      	bne.n	8005498 <_malloc_r+0xdc>
 80054a0:	2300      	movs	r3, #0
 80054a2:	6053      	str	r3, [r2, #4]
 80054a4:	e7de      	b.n	8005464 <_malloc_r+0xa8>
 80054a6:	230c      	movs	r3, #12
 80054a8:	6033      	str	r3, [r6, #0]
 80054aa:	4630      	mov	r0, r6
 80054ac:	f000 f80c 	bl	80054c8 <__malloc_unlock>
 80054b0:	e794      	b.n	80053dc <_malloc_r+0x20>
 80054b2:	6005      	str	r5, [r0, #0]
 80054b4:	e7d6      	b.n	8005464 <_malloc_r+0xa8>
 80054b6:	bf00      	nop
 80054b8:	20000684 	.word	0x20000684

080054bc <__malloc_lock>:
 80054bc:	4801      	ldr	r0, [pc, #4]	@ (80054c4 <__malloc_lock+0x8>)
 80054be:	f7ff bf00 	b.w	80052c2 <__retarget_lock_acquire_recursive>
 80054c2:	bf00      	nop
 80054c4:	2000067c 	.word	0x2000067c

080054c8 <__malloc_unlock>:
 80054c8:	4801      	ldr	r0, [pc, #4]	@ (80054d0 <__malloc_unlock+0x8>)
 80054ca:	f7ff befb 	b.w	80052c4 <__retarget_lock_release_recursive>
 80054ce:	bf00      	nop
 80054d0:	2000067c 	.word	0x2000067c

080054d4 <__sflush_r>:
 80054d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054dc:	0716      	lsls	r6, r2, #28
 80054de:	4605      	mov	r5, r0
 80054e0:	460c      	mov	r4, r1
 80054e2:	d454      	bmi.n	800558e <__sflush_r+0xba>
 80054e4:	684b      	ldr	r3, [r1, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dc02      	bgt.n	80054f0 <__sflush_r+0x1c>
 80054ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	dd48      	ble.n	8005582 <__sflush_r+0xae>
 80054f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	d045      	beq.n	8005582 <__sflush_r+0xae>
 80054f6:	2300      	movs	r3, #0
 80054f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80054fc:	682f      	ldr	r7, [r5, #0]
 80054fe:	6a21      	ldr	r1, [r4, #32]
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	d030      	beq.n	8005566 <__sflush_r+0x92>
 8005504:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005506:	89a3      	ldrh	r3, [r4, #12]
 8005508:	0759      	lsls	r1, r3, #29
 800550a:	d505      	bpl.n	8005518 <__sflush_r+0x44>
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005512:	b10b      	cbz	r3, 8005518 <__sflush_r+0x44>
 8005514:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005516:	1ad2      	subs	r2, r2, r3
 8005518:	2300      	movs	r3, #0
 800551a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800551c:	6a21      	ldr	r1, [r4, #32]
 800551e:	4628      	mov	r0, r5
 8005520:	47b0      	blx	r6
 8005522:	1c43      	adds	r3, r0, #1
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	d106      	bne.n	8005536 <__sflush_r+0x62>
 8005528:	6829      	ldr	r1, [r5, #0]
 800552a:	291d      	cmp	r1, #29
 800552c:	d82b      	bhi.n	8005586 <__sflush_r+0xb2>
 800552e:	4a2a      	ldr	r2, [pc, #168]	@ (80055d8 <__sflush_r+0x104>)
 8005530:	410a      	asrs	r2, r1
 8005532:	07d6      	lsls	r6, r2, #31
 8005534:	d427      	bmi.n	8005586 <__sflush_r+0xb2>
 8005536:	2200      	movs	r2, #0
 8005538:	6062      	str	r2, [r4, #4]
 800553a:	04d9      	lsls	r1, r3, #19
 800553c:	6922      	ldr	r2, [r4, #16]
 800553e:	6022      	str	r2, [r4, #0]
 8005540:	d504      	bpl.n	800554c <__sflush_r+0x78>
 8005542:	1c42      	adds	r2, r0, #1
 8005544:	d101      	bne.n	800554a <__sflush_r+0x76>
 8005546:	682b      	ldr	r3, [r5, #0]
 8005548:	b903      	cbnz	r3, 800554c <__sflush_r+0x78>
 800554a:	6560      	str	r0, [r4, #84]	@ 0x54
 800554c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800554e:	602f      	str	r7, [r5, #0]
 8005550:	b1b9      	cbz	r1, 8005582 <__sflush_r+0xae>
 8005552:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005556:	4299      	cmp	r1, r3
 8005558:	d002      	beq.n	8005560 <__sflush_r+0x8c>
 800555a:	4628      	mov	r0, r5
 800555c:	f7ff fec2 	bl	80052e4 <_free_r>
 8005560:	2300      	movs	r3, #0
 8005562:	6363      	str	r3, [r4, #52]	@ 0x34
 8005564:	e00d      	b.n	8005582 <__sflush_r+0xae>
 8005566:	2301      	movs	r3, #1
 8005568:	4628      	mov	r0, r5
 800556a:	47b0      	blx	r6
 800556c:	4602      	mov	r2, r0
 800556e:	1c50      	adds	r0, r2, #1
 8005570:	d1c9      	bne.n	8005506 <__sflush_r+0x32>
 8005572:	682b      	ldr	r3, [r5, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0c6      	beq.n	8005506 <__sflush_r+0x32>
 8005578:	2b1d      	cmp	r3, #29
 800557a:	d001      	beq.n	8005580 <__sflush_r+0xac>
 800557c:	2b16      	cmp	r3, #22
 800557e:	d11e      	bne.n	80055be <__sflush_r+0xea>
 8005580:	602f      	str	r7, [r5, #0]
 8005582:	2000      	movs	r0, #0
 8005584:	e022      	b.n	80055cc <__sflush_r+0xf8>
 8005586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800558a:	b21b      	sxth	r3, r3
 800558c:	e01b      	b.n	80055c6 <__sflush_r+0xf2>
 800558e:	690f      	ldr	r7, [r1, #16]
 8005590:	2f00      	cmp	r7, #0
 8005592:	d0f6      	beq.n	8005582 <__sflush_r+0xae>
 8005594:	0793      	lsls	r3, r2, #30
 8005596:	680e      	ldr	r6, [r1, #0]
 8005598:	bf08      	it	eq
 800559a:	694b      	ldreq	r3, [r1, #20]
 800559c:	600f      	str	r7, [r1, #0]
 800559e:	bf18      	it	ne
 80055a0:	2300      	movne	r3, #0
 80055a2:	eba6 0807 	sub.w	r8, r6, r7
 80055a6:	608b      	str	r3, [r1, #8]
 80055a8:	f1b8 0f00 	cmp.w	r8, #0
 80055ac:	dde9      	ble.n	8005582 <__sflush_r+0xae>
 80055ae:	6a21      	ldr	r1, [r4, #32]
 80055b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80055b2:	4643      	mov	r3, r8
 80055b4:	463a      	mov	r2, r7
 80055b6:	4628      	mov	r0, r5
 80055b8:	47b0      	blx	r6
 80055ba:	2800      	cmp	r0, #0
 80055bc:	dc08      	bgt.n	80055d0 <__sflush_r+0xfc>
 80055be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d0:	4407      	add	r7, r0
 80055d2:	eba8 0800 	sub.w	r8, r8, r0
 80055d6:	e7e7      	b.n	80055a8 <__sflush_r+0xd4>
 80055d8:	dfbffffe 	.word	0xdfbffffe

080055dc <_fflush_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	690b      	ldr	r3, [r1, #16]
 80055e0:	4605      	mov	r5, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b913      	cbnz	r3, 80055ec <_fflush_r+0x10>
 80055e6:	2500      	movs	r5, #0
 80055e8:	4628      	mov	r0, r5
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	b118      	cbz	r0, 80055f6 <_fflush_r+0x1a>
 80055ee:	6a03      	ldr	r3, [r0, #32]
 80055f0:	b90b      	cbnz	r3, 80055f6 <_fflush_r+0x1a>
 80055f2:	f7ff fc81 	bl	8004ef8 <__sinit>
 80055f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f3      	beq.n	80055e6 <_fflush_r+0xa>
 80055fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005600:	07d0      	lsls	r0, r2, #31
 8005602:	d404      	bmi.n	800560e <_fflush_r+0x32>
 8005604:	0599      	lsls	r1, r3, #22
 8005606:	d402      	bmi.n	800560e <_fflush_r+0x32>
 8005608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800560a:	f7ff fe5a 	bl	80052c2 <__retarget_lock_acquire_recursive>
 800560e:	4628      	mov	r0, r5
 8005610:	4621      	mov	r1, r4
 8005612:	f7ff ff5f 	bl	80054d4 <__sflush_r>
 8005616:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005618:	07da      	lsls	r2, r3, #31
 800561a:	4605      	mov	r5, r0
 800561c:	d4e4      	bmi.n	80055e8 <_fflush_r+0xc>
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	059b      	lsls	r3, r3, #22
 8005622:	d4e1      	bmi.n	80055e8 <_fflush_r+0xc>
 8005624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005626:	f7ff fe4d 	bl	80052c4 <__retarget_lock_release_recursive>
 800562a:	e7dd      	b.n	80055e8 <_fflush_r+0xc>

0800562c <__swhatbuf_r>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	460c      	mov	r4, r1
 8005630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005634:	2900      	cmp	r1, #0
 8005636:	b096      	sub	sp, #88	@ 0x58
 8005638:	4615      	mov	r5, r2
 800563a:	461e      	mov	r6, r3
 800563c:	da0d      	bge.n	800565a <__swhatbuf_r+0x2e>
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	bf14      	ite	ne
 800564a:	2340      	movne	r3, #64	@ 0x40
 800564c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005650:	2000      	movs	r0, #0
 8005652:	6031      	str	r1, [r6, #0]
 8005654:	602b      	str	r3, [r5, #0]
 8005656:	b016      	add	sp, #88	@ 0x58
 8005658:	bd70      	pop	{r4, r5, r6, pc}
 800565a:	466a      	mov	r2, sp
 800565c:	f000 f848 	bl	80056f0 <_fstat_r>
 8005660:	2800      	cmp	r0, #0
 8005662:	dbec      	blt.n	800563e <__swhatbuf_r+0x12>
 8005664:	9901      	ldr	r1, [sp, #4]
 8005666:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800566a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800566e:	4259      	negs	r1, r3
 8005670:	4159      	adcs	r1, r3
 8005672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005676:	e7eb      	b.n	8005650 <__swhatbuf_r+0x24>

08005678 <__smakebuf_r>:
 8005678:	898b      	ldrh	r3, [r1, #12]
 800567a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800567c:	079d      	lsls	r5, r3, #30
 800567e:	4606      	mov	r6, r0
 8005680:	460c      	mov	r4, r1
 8005682:	d507      	bpl.n	8005694 <__smakebuf_r+0x1c>
 8005684:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	6123      	str	r3, [r4, #16]
 800568c:	2301      	movs	r3, #1
 800568e:	6163      	str	r3, [r4, #20]
 8005690:	b003      	add	sp, #12
 8005692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005694:	ab01      	add	r3, sp, #4
 8005696:	466a      	mov	r2, sp
 8005698:	f7ff ffc8 	bl	800562c <__swhatbuf_r>
 800569c:	9f00      	ldr	r7, [sp, #0]
 800569e:	4605      	mov	r5, r0
 80056a0:	4639      	mov	r1, r7
 80056a2:	4630      	mov	r0, r6
 80056a4:	f7ff fe8a 	bl	80053bc <_malloc_r>
 80056a8:	b948      	cbnz	r0, 80056be <__smakebuf_r+0x46>
 80056aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ae:	059a      	lsls	r2, r3, #22
 80056b0:	d4ee      	bmi.n	8005690 <__smakebuf_r+0x18>
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	f043 0302 	orr.w	r3, r3, #2
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	e7e2      	b.n	8005684 <__smakebuf_r+0xc>
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	6020      	str	r0, [r4, #0]
 80056c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c6:	81a3      	strh	r3, [r4, #12]
 80056c8:	9b01      	ldr	r3, [sp, #4]
 80056ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80056ce:	b15b      	cbz	r3, 80056e8 <__smakebuf_r+0x70>
 80056d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056d4:	4630      	mov	r0, r6
 80056d6:	f000 f81d 	bl	8005714 <_isatty_r>
 80056da:	b128      	cbz	r0, 80056e8 <__smakebuf_r+0x70>
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	f023 0303 	bic.w	r3, r3, #3
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	431d      	orrs	r5, r3
 80056ec:	81a5      	strh	r5, [r4, #12]
 80056ee:	e7cf      	b.n	8005690 <__smakebuf_r+0x18>

080056f0 <_fstat_r>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	4d07      	ldr	r5, [pc, #28]	@ (8005710 <_fstat_r+0x20>)
 80056f4:	2300      	movs	r3, #0
 80056f6:	4604      	mov	r4, r0
 80056f8:	4608      	mov	r0, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	602b      	str	r3, [r5, #0]
 80056fe:	f7fa ff86 	bl	800060e <_fstat>
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	d102      	bne.n	800570c <_fstat_r+0x1c>
 8005706:	682b      	ldr	r3, [r5, #0]
 8005708:	b103      	cbz	r3, 800570c <_fstat_r+0x1c>
 800570a:	6023      	str	r3, [r4, #0]
 800570c:	bd38      	pop	{r3, r4, r5, pc}
 800570e:	bf00      	nop
 8005710:	20000678 	.word	0x20000678

08005714 <_isatty_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4d06      	ldr	r5, [pc, #24]	@ (8005730 <_isatty_r+0x1c>)
 8005718:	2300      	movs	r3, #0
 800571a:	4604      	mov	r4, r0
 800571c:	4608      	mov	r0, r1
 800571e:	602b      	str	r3, [r5, #0]
 8005720:	f7fa ff85 	bl	800062e <_isatty>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d102      	bne.n	800572e <_isatty_r+0x1a>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	b103      	cbz	r3, 800572e <_isatty_r+0x1a>
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	20000678 	.word	0x20000678

08005734 <_sbrk_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d06      	ldr	r5, [pc, #24]	@ (8005750 <_sbrk_r+0x1c>)
 8005738:	2300      	movs	r3, #0
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	602b      	str	r3, [r5, #0]
 8005740:	f7fa ff8e 	bl	8000660 <_sbrk>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_sbrk_r+0x1a>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_sbrk_r+0x1a>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	20000678 	.word	0x20000678

08005754 <_init>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	bf00      	nop
 8005758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575a:	bc08      	pop	{r3}
 800575c:	469e      	mov	lr, r3
 800575e:	4770      	bx	lr

08005760 <_fini>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	bf00      	nop
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr

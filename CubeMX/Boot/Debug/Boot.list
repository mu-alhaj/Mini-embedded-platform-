
Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a18  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004bac  08004bac  00005bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf4  08004bf4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bf4  08004bf4  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bf4  08004bf4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf4  08004bf4  00005bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bf8  08004bf8  00005bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004bfc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000004d0  20000010  20000010  00006010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200004e0  200004e0  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d960  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c97  00000000  00000000  0001399c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  00016638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b4  00000000  00000000  00017088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002119f  00000000  00000000  0001783c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001136f  00000000  00000000  000389db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c07e2  00000000  00000000  00049d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a52c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002650  00000000  00000000  0010a570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0010cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004b94 	.word	0x08004b94

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004b94 	.word	0x08004b94

080001d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001da:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <MX_DMA_Init+0x38>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a0b      	ldr	r2, [pc, #44]	@ (800020c <MX_DMA_Init+0x38>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6153      	str	r3, [r2, #20]
 80001e6:	4b09      	ldr	r3, [pc, #36]	@ (800020c <MX_DMA_Init+0x38>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2100      	movs	r1, #0
 80001f6:	2010      	movs	r0, #16
 80001f8:	f000 fbbd 	bl	8000976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80001fc:	2010      	movs	r0, #16
 80001fe:	f000 fbd6 	bl	80009ae <HAL_NVIC_EnableIRQ>

}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40021000 	.word	0x40021000

08000210 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b08a      	sub	sp, #40	@ 0x28
 8000214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000226:	4b4b      	ldr	r3, [pc, #300]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a4a      	ldr	r2, [pc, #296]	@ (8000354 <MX_GPIO_Init+0x144>)
 800022c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b48      	ldr	r3, [pc, #288]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800023a:	613b      	str	r3, [r7, #16]
 800023c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800023e:	4b45      	ldr	r3, [pc, #276]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a44      	ldr	r2, [pc, #272]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000244:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b42      	ldr	r3, [pc, #264]	@ (8000354 <MX_GPIO_Init+0x144>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000256:	4b3f      	ldr	r3, [pc, #252]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	4a3e      	ldr	r2, [pc, #248]	@ (8000354 <MX_GPIO_Init+0x144>)
 800025c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000260:	6153      	str	r3, [r2, #20]
 8000262:	4b3c      	ldr	r3, [pc, #240]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800026a:	60bb      	str	r3, [r7, #8]
 800026c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	4b39      	ldr	r3, [pc, #228]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a38      	ldr	r2, [pc, #224]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000278:	6153      	str	r3, [r2, #20]
 800027a:	4b36      	ldr	r3, [pc, #216]	@ (8000354 <MX_GPIO_Init+0x144>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000282:	607b      	str	r3, [r7, #4]
 8000284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000286:	4b33      	ldr	r3, [pc, #204]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a32      	ldr	r2, [pc, #200]	@ (8000354 <MX_GPIO_Init+0x144>)
 800028c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b30      	ldr	r3, [pc, #192]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2120      	movs	r1, #32
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f001 f92d 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80002b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	4619      	mov	r1, r3
 80002c0:	4825      	ldr	r0, [pc, #148]	@ (8000358 <MX_GPIO_Init+0x148>)
 80002c2:	f000 ff95 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002c6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80002ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002cc:	2303      	movs	r3, #3
 80002ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	4619      	mov	r1, r3
 80002da:	481f      	ldr	r0, [pc, #124]	@ (8000358 <MX_GPIO_Init+0x148>)
 80002dc:	f000 ff88 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80002e0:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 80002e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e6:	2303      	movs	r3, #3
 80002e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4619      	mov	r1, r3
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f8:	f000 ff7a 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002fc:	2320      	movs	r3, #32
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000300:	2301      	movs	r3, #1
 8000302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	2300      	movs	r3, #0
 8000306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000308:	2300      	movs	r3, #0
 800030a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	4619      	mov	r1, r3
 8000312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000316:	f000 ff6b 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800031a:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 800031e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000320:	2303      	movs	r3, #3
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	4619      	mov	r1, r3
 800032e:	480b      	ldr	r0, [pc, #44]	@ (800035c <MX_GPIO_Init+0x14c>)
 8000330:	f000 ff5e 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000334:	2304      	movs	r3, #4
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000338:	2303      	movs	r3, #3
 800033a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	4619      	mov	r1, r3
 8000346:	4806      	ldr	r0, [pc, #24]	@ (8000360 <MX_GPIO_Init+0x150>)
 8000348:	f000 ff52 	bl	80011f0 <HAL_GPIO_Init>

}
 800034c:	bf00      	nop
 800034e:	3728      	adds	r7, #40	@ 0x28
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000
 8000358:	48000800 	.word	0x48000800
 800035c:	48000400 	.word	0x48000400
 8000360:	48000c00 	.word	0x48000c00

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 f9c4 	bl	80006f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f816 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f7ff ff4e 	bl	8000210 <MX_GPIO_Init>
  MX_DMA_Init();
 8000374:	f7ff ff2e 	bl	80001d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000378:	f000 f8ee 	bl	8000558 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // initiate command handler first to be ready to register other modules.
  cmdhandler_init( &huart2 );
 800037c:	4806      	ldr	r0, [pc, #24]	@ (8000398 <main+0x34>)
 800037e:	f004 f81b 	bl	80043b8 <cmdhandler_init>

  led_init();
 8000382:	f004 fa13 	bl	80047ac <led_init>
  flash_init();
 8000386:	f004 f8ef 	bl	8004568 <flash_init>



  scheduler_init();
 800038a:	f004 fa81 	bl	8004890 <scheduler_init>
  scheduler_run();
 800038e:	f004 fae3 	bl	8004958 <scheduler_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000392:	bf00      	nop
 8000394:	e7fd      	b.n	8000392 <main+0x2e>
 8000396:	bf00      	nop
 8000398:	2000002c 	.word	0x2000002c

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b0a6      	sub	sp, #152	@ 0x98
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003a6:	2228      	movs	r2, #40	@ 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f004 fbb8 	bl	8004b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2258      	movs	r2, #88	@ 0x58
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f004 fbaa 	bl	8004b20 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003cc:	2302      	movs	r3, #2
 80003ce:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d0:	2301      	movs	r3, #1
 80003d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d4:	2310      	movs	r3, #16
 80003d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003da:	2302      	movs	r3, #2
 80003dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 f8b4 	bl	8001568 <HAL_RCC_OscConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000406:	f000 f827 	bl	8000458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040a:	230f      	movs	r3, #15
 800040c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040e:	2302      	movs	r3, #2
 8000410:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800041a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000420:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000424:	2102      	movs	r1, #2
 8000426:	4618      	mov	r0, r3
 8000428:	f002 f8f2 	bl	8002610 <HAL_RCC_ClockConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000432:	f000 f811 	bl	8000458 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000436:	2302      	movs	r3, #2
 8000438:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800043a:	2300      	movs	r3, #0
 800043c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4618      	mov	r0, r3
 8000442:	f002 fb05 	bl	8002a50 <HAL_RCCEx_PeriphCLKConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800044c:	f000 f804 	bl	8000458 <Error_Handler>
  }
}
 8000450:	bf00      	nop
 8000452:	3798      	adds	r7, #152	@ 0x98
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
}
 800045e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <Error_Handler+0x8>

08000464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <HAL_MspInit+0x44>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	4a0e      	ldr	r2, [pc, #56]	@ (80004a8 <HAL_MspInit+0x44>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6193      	str	r3, [r2, #24]
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <HAL_MspInit+0x44>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <HAL_MspInit+0x44>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	4a08      	ldr	r2, [pc, #32]	@ (80004a8 <HAL_MspInit+0x44>)
 8000488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800048c:	61d3      	str	r3, [r2, #28]
 800048e:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <HAL_MspInit+0x44>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800049a:	2007      	movs	r0, #7
 800049c:	f000 fa60 	bl	8000960 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40021000 	.word	0x40021000

080004ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <NMI_Handler+0x4>

080004b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <HardFault_Handler+0x4>

080004bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <MemManage_Handler+0x4>

080004c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <BusFault_Handler+0x4>

080004cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <UsageFault_Handler+0x4>

080004d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000502:	f000 f93d 	bl	8000780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000510:	4802      	ldr	r0, [pc, #8]	@ (800051c <DMA1_Channel6_IRQHandler+0x10>)
 8000512:	f000 fb88 	bl	8000c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200000b4 	.word	0x200000b4

08000520 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000524:	4802      	ldr	r0, [pc, #8]	@ (8000530 <USART2_IRQHandler+0x10>)
 8000526:	f002 fcff 	bl	8002f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	2000002c 	.word	0x2000002c

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <SystemInit+0x20>)
 800053a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800053e:	4a05      	ldr	r2, [pc, #20]	@ (8000554 <SystemInit+0x20>)
 8000540:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000544:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800055c:	4b14      	ldr	r3, [pc, #80]	@ (80005b0 <MX_USART2_UART_Init+0x58>)
 800055e:	4a15      	ldr	r2, [pc, #84]	@ (80005b4 <MX_USART2_UART_Init+0x5c>)
 8000560:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000562:	4b13      	ldr	r3, [pc, #76]	@ (80005b0 <MX_USART2_UART_Init+0x58>)
 8000564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000568:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800056a:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <MX_USART2_UART_Init+0x58>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000570:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <MX_USART2_UART_Init+0x58>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <MX_USART2_UART_Init+0x58>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800057c:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <MX_USART2_UART_Init+0x58>)
 800057e:	220c      	movs	r2, #12
 8000580:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <MX_USART2_UART_Init+0x58>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000588:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <MX_USART2_UART_Init+0x58>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800058e:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <MX_USART2_UART_Init+0x58>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <MX_USART2_UART_Init+0x58>)
 8000596:	2200      	movs	r2, #0
 8000598:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <MX_USART2_UART_Init+0x58>)
 800059c:	f002 fc76 	bl	8002e8c <HAL_UART_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005a6:	f7ff ff57 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000002c 	.word	0x2000002c
 80005b4:	40004400 	.word	0x40004400

080005b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	@ 0x28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000690 <HAL_UART_MspInit+0xd8>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d156      	bne.n	8000688 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005da:	4b2e      	ldr	r3, [pc, #184]	@ (8000694 <HAL_UART_MspInit+0xdc>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a2d      	ldr	r2, [pc, #180]	@ (8000694 <HAL_UART_MspInit+0xdc>)
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000694 <HAL_UART_MspInit+0xdc>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b28      	ldr	r3, [pc, #160]	@ (8000694 <HAL_UART_MspInit+0xdc>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a27      	ldr	r2, [pc, #156]	@ (8000694 <HAL_UART_MspInit+0xdc>)
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <HAL_UART_MspInit+0xdc>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800060a:	230c      	movs	r3, #12
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2302      	movs	r3, #2
 8000610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800061a:	2307      	movs	r3, #7
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000628:	f000 fde2 	bl	80011f0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800062c:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <HAL_UART_MspInit+0xe0>)
 800062e:	4a1b      	ldr	r2, [pc, #108]	@ (800069c <HAL_UART_MspInit+0xe4>)
 8000630:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000632:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <HAL_UART_MspInit+0xe0>)
 8000634:	2200      	movs	r2, #0
 8000636:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000638:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <HAL_UART_MspInit+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800063e:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <HAL_UART_MspInit+0xe0>)
 8000640:	2280      	movs	r2, #128	@ 0x80
 8000642:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <HAL_UART_MspInit+0xe0>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800064a:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <HAL_UART_MspInit+0xe0>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <HAL_UART_MspInit+0xe0>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <HAL_UART_MspInit+0xe0>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800065c:	480e      	ldr	r0, [pc, #56]	@ (8000698 <HAL_UART_MspInit+0xe0>)
 800065e:	f000 f9c0 	bl	80009e2 <HAL_DMA_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000668:	f7ff fef6 	bl	8000458 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a0a      	ldr	r2, [pc, #40]	@ (8000698 <HAL_UART_MspInit+0xe0>)
 8000670:	675a      	str	r2, [r3, #116]	@ 0x74
 8000672:	4a09      	ldr	r2, [pc, #36]	@ (8000698 <HAL_UART_MspInit+0xe0>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	2026      	movs	r0, #38	@ 0x26
 800067e:	f000 f97a 	bl	8000976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000682:	2026      	movs	r0, #38	@ 0x26
 8000684:	f000 f993 	bl	80009ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	@ 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40004400 	.word	0x40004400
 8000694:	40021000 	.word	0x40021000
 8000698:	200000b4 	.word	0x200000b4
 800069c:	4002006c 	.word	0x4002006c

080006a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006d8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff ff46 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	@ (80006e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	@ (80006ec <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f004 fa2f 	bl	8004b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d2:	f7ff fe47 	bl	8000364 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e4:	08004bfc 	.word	0x08004bfc
  ldr r2, =_sbss
 80006e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006ec:	200004e0 	.word	0x200004e0

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>
	...

080006f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f8:	4b08      	ldr	r3, [pc, #32]	@ (800071c <HAL_Init+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a07      	ldr	r2, [pc, #28]	@ (800071c <HAL_Init+0x28>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000704:	2003      	movs	r0, #3
 8000706:	f000 f92b 	bl	8000960 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f808 	bl	8000720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000710:	f7ff fea8 	bl	8000464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_InitTick+0x54>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <HAL_InitTick+0x58>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000736:	fbb3 f3f1 	udiv	r3, r3, r1
 800073a:	fbb2 f3f3 	udiv	r3, r2, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f943 	bl	80009ca <HAL_SYSTICK_Config>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e00e      	b.n	800076c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b0f      	cmp	r3, #15
 8000752:	d80a      	bhi.n	800076a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000754:	2200      	movs	r2, #0
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f000 f90b 	bl	8000976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000760:	4a06      	ldr	r2, [pc, #24]	@ (800077c <HAL_InitTick+0x5c>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	e000      	b.n	800076c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000000 	.word	0x20000000
 8000778:	20000008 	.word	0x20000008
 800077c:	20000004 	.word	0x20000004

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <HAL_IncTick+0x20>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_IncTick+0x24>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <HAL_IncTick+0x24>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000008 	.word	0x20000008
 80007a4:	200000f8 	.word	0x200000f8

080007a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80007ac:	4b03      	ldr	r3, [pc, #12]	@ (80007bc <HAL_GetTick+0x14>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	200000f8 	.word	0x200000f8

080007c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f2:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <__NVIC_SetPriorityGrouping+0x44>)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	60d3      	str	r3, [r2, #12]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080c:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <__NVIC_GetPriorityGrouping+0x18>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	f003 0307 	and.w	r3, r3, #7
}
 8000816:	4618      	mov	r0, r3
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	db0b      	blt.n	800084e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	f003 021f 	and.w	r2, r3, #31
 800083c:	4907      	ldr	r1, [pc, #28]	@ (800085c <__NVIC_EnableIRQ+0x38>)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	095b      	lsrs	r3, r3, #5
 8000844:	2001      	movs	r0, #1
 8000846:	fa00 f202 	lsl.w	r2, r0, r2
 800084a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000e100 	.word	0xe000e100

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db0a      	blt.n	800088a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	490c      	ldr	r1, [pc, #48]	@ (80008ac <__NVIC_SetPriority+0x4c>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	440b      	add	r3, r1
 8000884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000888:	e00a      	b.n	80008a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <__NVIC_SetPriority+0x50>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	3b04      	subs	r3, #4
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	440b      	add	r3, r1
 800089e:	761a      	strb	r2, [r3, #24]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	@ 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f1c3 0307 	rsb	r3, r3, #7
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	bf28      	it	cs
 80008d2:	2304      	movcs	r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d902      	bls.n	80008e4 <NVIC_EncodePriority+0x30>
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3b03      	subs	r3, #3
 80008e2:	e000      	b.n	80008e6 <NVIC_EncodePriority+0x32>
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	401a      	ands	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43d9      	mvns	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	4313      	orrs	r3, r2
         );
}
 800090e:	4618      	mov	r0, r3
 8000910:	3724      	adds	r7, #36	@ 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800092c:	d301      	bcc.n	8000932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092e:	2301      	movs	r3, #1
 8000930:	e00f      	b.n	8000952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <SysTick_Config+0x40>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093a:	210f      	movs	r1, #15
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f7ff ff8e 	bl	8000860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000944:	4b05      	ldr	r3, [pc, #20]	@ (800095c <SysTick_Config+0x40>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094a:	4b04      	ldr	r3, [pc, #16]	@ (800095c <SysTick_Config+0x40>)
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	e000e010 	.word	0xe000e010

08000960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ff29 	bl	80007c0 <__NVIC_SetPriorityGrouping>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b086      	sub	sp, #24
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000988:	f7ff ff3e 	bl	8000808 <__NVIC_GetPriorityGrouping>
 800098c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	6978      	ldr	r0, [r7, #20]
 8000994:	f7ff ff8e 	bl	80008b4 <NVIC_EncodePriority>
 8000998:	4602      	mov	r2, r0
 800099a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff5d 	bl	8000860 <__NVIC_SetPriority>
}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff31 	bl	8000824 <__NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ffa2 	bl	800091c <SysTick_Config>
 80009d8:	4603      	mov	r3, r0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b084      	sub	sp, #16
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e037      	b.n	8000a68 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2202      	movs	r2, #2
 80009fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000a0e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000a12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 f9bc 	bl	8000dc8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d101      	bne.n	8000a90 <HAL_DMA_Start_IT+0x20>
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	e04a      	b.n	8000b26 <HAL_DMA_Start_IT+0xb6>
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2201      	movs	r2, #1
 8000a94:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d13a      	bne.n	8000b18 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2200      	movs	r2, #0
 8000aae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0201 	bic.w	r2, r2, #1
 8000abe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f000 f950 	bl	8000d6c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d008      	beq.n	8000ae6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f042 020e 	orr.w	r2, r2, #14
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e00f      	b.n	8000b06 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f042 020a 	orr.w	r2, r2, #10
 8000af4:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0204 	bic.w	r2, r2, #4
 8000b04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f042 0201 	orr.w	r2, r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e005      	b.n	8000b24 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b20:	2302      	movs	r3, #2
 8000b22:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e02e      	b.n	8000b9e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d008      	beq.n	8000b5c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e020      	b.n	8000b9e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f022 020e 	bic.w	r2, r2, #14
 8000b6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f022 0201 	bic.w	r2, r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b84:	2101      	movs	r1, #1
 8000b86:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d005      	beq.n	8000bcc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e027      	b.n	8000c1c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 020e 	bic.w	r2, r2, #14
 8000bda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f022 0201 	bic.w	r2, r2, #1
 8000bea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfa:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	4798      	blx	r3
    }
  }
  return status;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b084      	sub	sp, #16
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	2204      	movs	r2, #4
 8000c44:	409a      	lsls	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d024      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x72>
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d01f      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0320 	and.w	r3, r3, #32
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d107      	bne.n	8000c76 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f022 0204 	bic.w	r2, r2, #4
 8000c74:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c7e:	2104      	movs	r1, #4
 8000c80:	fa01 f202 	lsl.w	r2, r1, r2
 8000c84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d06a      	beq.n	8000d64 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000c96:	e065      	b.n	8000d64 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d02c      	beq.n	8000d02 <HAL_DMA_IRQHandler+0xdc>
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d027      	beq.n	8000d02 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0320 	and.w	r3, r3, #32
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f022 020a 	bic.w	r2, r2, #10
 8000cce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d035      	beq.n	8000d64 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d00:	e030      	b.n	8000d64 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	2208      	movs	r2, #8
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d028      	beq.n	8000d64 <HAL_DMA_IRQHandler+0x13e>
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d023      	beq.n	8000d64 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 020e 	bic.w	r2, r2, #14
 8000d2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d34:	2101      	movs	r1, #1
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d004      	beq.n	8000d64 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	4798      	blx	r3
    }
  }
}
 8000d62:	e7ff      	b.n	8000d64 <HAL_DMA_IRQHandler+0x13e>
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d82:	2101      	movs	r1, #1
 8000d84:	fa01 f202 	lsl.w	r2, r1, r2
 8000d88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b10      	cmp	r3, #16
 8000d98:	d108      	bne.n	8000dac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000daa:	e007      	b.n	8000dbc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	60da      	str	r2, [r3, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <DMA_CalcBaseAndBitshift+0x60>)
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d80f      	bhi.n	8000dfc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <DMA_CalcBaseAndBitshift+0x64>)
 8000de4:	4413      	add	r3, r2
 8000de6:	4a12      	ldr	r2, [pc, #72]	@ (8000e30 <DMA_CalcBaseAndBitshift+0x68>)
 8000de8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	009a      	lsls	r2, r3, #2
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a0f      	ldr	r2, [pc, #60]	@ (8000e34 <DMA_CalcBaseAndBitshift+0x6c>)
 8000df8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000dfa:	e00e      	b.n	8000e1a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <DMA_CalcBaseAndBitshift+0x70>)
 8000e04:	4413      	add	r3, r2
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <DMA_CalcBaseAndBitshift+0x68>)
 8000e08:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	009a      	lsls	r2, r3, #2
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a09      	ldr	r2, [pc, #36]	@ (8000e3c <DMA_CalcBaseAndBitshift+0x74>)
 8000e18:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40020407 	.word	0x40020407
 8000e2c:	bffdfff8 	.word	0xbffdfff8
 8000e30:	cccccccd 	.word	0xcccccccd
 8000e34:	40020000 	.word	0x40020000
 8000e38:	bffdfbf8 	.word	0xbffdfbf8
 8000e3c:	40020400 	.word	0x40020400

08000e40 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <HAL_FLASH_Program+0xd8>)
 8000e5c:	7e1b      	ldrb	r3, [r3, #24]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d101      	bne.n	8000e66 <HAL_FLASH_Program+0x26>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e054      	b.n	8000f10 <HAL_FLASH_Program+0xd0>
 8000e66:	4b2c      	ldr	r3, [pc, #176]	@ (8000f18 <HAL_FLASH_Program+0xd8>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e6c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e70:	f000 f8a8 	bl	8000fc4 <FLASH_WaitForLastOperation>
 8000e74:	4603      	mov	r3, r0
 8000e76:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d144      	bne.n	8000f08 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d102      	bne.n	8000e8a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000e84:	2301      	movs	r3, #1
 8000e86:	757b      	strb	r3, [r7, #21]
 8000e88:	e007      	b.n	8000e9a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d102      	bne.n	8000e96 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000e90:	2302      	movs	r3, #2
 8000e92:	757b      	strb	r3, [r7, #21]
 8000e94:	e001      	b.n	8000e9a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000e96:	2304      	movs	r3, #4
 8000e98:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	75bb      	strb	r3, [r7, #22]
 8000e9e:	e02d      	b.n	8000efc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000ea0:	7dbb      	ldrb	r3, [r7, #22]
 8000ea2:	005a      	lsls	r2, r3, #1
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	eb02 0c03 	add.w	ip, r2, r3
 8000eaa:	7dbb      	ldrb	r3, [r7, #22]
 8000eac:	0119      	lsls	r1, r3, #4
 8000eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eb2:	f1c1 0620 	rsb	r6, r1, #32
 8000eb6:	f1a1 0020 	sub.w	r0, r1, #32
 8000eba:	fa22 f401 	lsr.w	r4, r2, r1
 8000ebe:	fa03 f606 	lsl.w	r6, r3, r6
 8000ec2:	4334      	orrs	r4, r6
 8000ec4:	fa23 f000 	lsr.w	r0, r3, r0
 8000ec8:	4304      	orrs	r4, r0
 8000eca:	fa23 f501 	lsr.w	r5, r3, r1
 8000ece:	b2a3      	uxth	r3, r4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	f000 f85a 	bl	8000f8c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ed8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000edc:	f000 f872 	bl	8000fc4 <FLASH_WaitForLastOperation>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <HAL_FLASH_Program+0xdc>)
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8000f1c <HAL_FLASH_Program+0xdc>)
 8000eea:	f023 0301 	bic.w	r3, r3, #1
 8000eee:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000ef0:	7dfb      	ldrb	r3, [r7, #23]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d107      	bne.n	8000f06 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000ef6:	7dbb      	ldrb	r3, [r7, #22]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	75bb      	strb	r3, [r7, #22]
 8000efc:	7dba      	ldrb	r2, [r7, #22]
 8000efe:	7d7b      	ldrb	r3, [r7, #21]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d3cd      	bcc.n	8000ea0 <HAL_FLASH_Program+0x60>
 8000f04:	e000      	b.n	8000f08 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000f06:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <HAL_FLASH_Program+0xd8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	761a      	strb	r2, [r3, #24]

  return status;
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f18:	20000100 	.word	0x20000100
 8000f1c:	40022000 	.word	0x40022000

08000f20 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_FLASH_Unlock+0x40>)
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00d      	beq.n	8000f52 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_FLASH_Unlock+0x40>)
 8000f38:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <HAL_FLASH_Unlock+0x44>)
 8000f3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <HAL_FLASH_Unlock+0x40>)
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <HAL_FLASH_Unlock+0x48>)
 8000f40:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f42:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <HAL_FLASH_Unlock+0x40>)
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000f52:	79fb      	ldrb	r3, [r7, #7]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40022000 	.word	0x40022000
 8000f64:	45670123 	.word	0x45670123
 8000f68:	cdef89ab 	.word	0xcdef89ab

08000f6c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <HAL_FLASH_Lock+0x1c>)
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <HAL_FLASH_Lock+0x1c>)
 8000f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f7a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	40022000 	.word	0x40022000

08000f8c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <FLASH_Program_HalfWord+0x30>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <FLASH_Program_HalfWord+0x34>)
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	4a07      	ldr	r2, [pc, #28]	@ (8000fc0 <FLASH_Program_HalfWord+0x34>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	887a      	ldrh	r2, [r7, #2]
 8000fae:	801a      	strh	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	20000100 	.word	0x20000100
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff fbec 	bl	80007a8 <HAL_GetTick>
 8000fd0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000fd2:	e010      	b.n	8000ff6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fda:	d00c      	beq.n	8000ff6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <FLASH_WaitForLastOperation+0x2e>
 8000fe2:	f7ff fbe1 	bl	80007a8 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d201      	bcs.n	8000ff6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e01f      	b.n	8001036 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <FLASH_WaitForLastOperation+0x7c>)
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d0e8      	beq.n	8000fd4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <FLASH_WaitForLastOperation+0x7c>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	f003 0320 	and.w	r3, r3, #32
 800100a:	2b20      	cmp	r3, #32
 800100c:	d102      	bne.n	8001014 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <FLASH_WaitForLastOperation+0x7c>)
 8001010:	2220      	movs	r2, #32
 8001012:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001014:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <FLASH_WaitForLastOperation+0x7c>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f003 0310 	and.w	r3, r3, #16
 800101c:	2b10      	cmp	r3, #16
 800101e:	d005      	beq.n	800102c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <FLASH_WaitForLastOperation+0x7c>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001028:	2b04      	cmp	r3, #4
 800102a:	d103      	bne.n	8001034 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800102c:	f000 f80a 	bl	8001044 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40022000 	.word	0x40022000

08001044 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <FLASH_SetErrorCode+0x5c>)
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	2b10      	cmp	r3, #16
 8001058:	d109      	bne.n	800106e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <FLASH_SetErrorCode+0x60>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	4a10      	ldr	r2, [pc, #64]	@ (80010a4 <FLASH_SetErrorCode+0x60>)
 8001064:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800106e:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <FLASH_SetErrorCode+0x5c>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	2b04      	cmp	r3, #4
 8001078:	d109      	bne.n	800108e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <FLASH_SetErrorCode+0x60>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <FLASH_SetErrorCode+0x60>)
 8001084:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800108e:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <FLASH_SetErrorCode+0x5c>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60d3      	str	r3, [r2, #12]
}  
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40022000 	.word	0x40022000
 80010a4:	20000100 	.word	0x20000100

080010a8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <HAL_FLASHEx_Erase+0xcc>)
 80010bc:	7e1b      	ldrb	r3, [r3, #24]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d101      	bne.n	80010c6 <HAL_FLASHEx_Erase+0x1e>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e052      	b.n	800116c <HAL_FLASHEx_Erase+0xc4>
 80010c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001174 <HAL_FLASHEx_Erase+0xcc>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d115      	bne.n	8001100 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010d8:	f7ff ff74 	bl	8000fc4 <FLASH_WaitForLastOperation>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d140      	bne.n	8001164 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80010e2:	f000 f84b 	bl	800117c <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010e6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010ea:	f7ff ff6b 	bl	8000fc4 <FLASH_WaitForLastOperation>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80010f2:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <HAL_FLASHEx_Erase+0xd0>)
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	4a20      	ldr	r2, [pc, #128]	@ (8001178 <HAL_FLASHEx_Erase+0xd0>)
 80010f8:	f023 0304 	bic.w	r3, r3, #4
 80010fc:	6113      	str	r3, [r2, #16]
 80010fe:	e031      	b.n	8001164 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001100:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001104:	f7ff ff5e 	bl	8000fc4 <FLASH_WaitForLastOperation>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d12a      	bne.n	8001164 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	e019      	b.n	8001152 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800111e:	68b8      	ldr	r0, [r7, #8]
 8001120:	f000 f846 	bl	80011b0 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001124:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001128:	f7ff ff4c 	bl	8000fc4 <FLASH_WaitForLastOperation>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <HAL_FLASHEx_Erase+0xd0>)
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	4a10      	ldr	r2, [pc, #64]	@ (8001178 <HAL_FLASHEx_Erase+0xd0>)
 8001136:	f023 0302 	bic.w	r3, r3, #2
 800113a:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	601a      	str	r2, [r3, #0]
            break;
 8001148:	e00c      	b.n	8001164 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001150:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	02da      	lsls	r2, r3, #11
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4413      	add	r3, r2
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	429a      	cmp	r2, r3
 8001162:	d3dc      	bcc.n	800111e <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <HAL_FLASHEx_Erase+0xcc>)
 8001166:	2200      	movs	r2, #0
 8001168:	761a      	strb	r2, [r3, #24]

  return status;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000100 	.word	0x20000100
 8001178:	40022000 	.word	0x40022000

0800117c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001180:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <FLASH_MassErase+0x2c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <FLASH_MassErase+0x30>)
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	4a08      	ldr	r2, [pc, #32]	@ (80011ac <FLASH_MassErase+0x30>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <FLASH_MassErase+0x30>)
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <FLASH_MassErase+0x30>)
 8001198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119c:	6113      	str	r3, [r2, #16]
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	20000100 	.word	0x20000100
 80011ac:	40022000 	.word	0x40022000

080011b0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011b8:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <FLASH_PageErase+0x38>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <FLASH_PageErase+0x3c>)
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <FLASH_PageErase+0x3c>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80011ca:	4a08      	ldr	r2, [pc, #32]	@ (80011ec <FLASH_PageErase+0x3c>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <FLASH_PageErase+0x3c>)
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <FLASH_PageErase+0x3c>)
 80011d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011da:	6113      	str	r3, [r2, #16]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	20000100 	.word	0x20000100
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fe:	e160      	b.n	80014c2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2101      	movs	r1, #1
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8152 	beq.w	80014bc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b01      	cmp	r3, #1
 8001222:	d005      	beq.n	8001230 <HAL_GPIO_Init+0x40>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d130      	bne.n	8001292 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001266:	2201      	movs	r2, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	f003 0201 	and.w	r2, r3, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b03      	cmp	r3, #3
 800129c:	d017      	beq.n	80012ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d123      	bne.n	8001322 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	08da      	lsrs	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3208      	adds	r2, #8
 80012e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	08da      	lsrs	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3208      	adds	r2, #8
 800131c:	6939      	ldr	r1, [r7, #16]
 800131e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0203 	and.w	r2, r3, #3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80ac 	beq.w	80014bc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001364:	4b5e      	ldr	r3, [pc, #376]	@ (80014e0 <HAL_GPIO_Init+0x2f0>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a5d      	ldr	r2, [pc, #372]	@ (80014e0 <HAL_GPIO_Init+0x2f0>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b5b      	ldr	r3, [pc, #364]	@ (80014e0 <HAL_GPIO_Init+0x2f0>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800137c:	4a59      	ldr	r2, [pc, #356]	@ (80014e4 <HAL_GPIO_Init+0x2f4>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013a6:	d025      	beq.n	80013f4 <HAL_GPIO_Init+0x204>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a4f      	ldr	r2, [pc, #316]	@ (80014e8 <HAL_GPIO_Init+0x2f8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d01f      	beq.n	80013f0 <HAL_GPIO_Init+0x200>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4e      	ldr	r2, [pc, #312]	@ (80014ec <HAL_GPIO_Init+0x2fc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d019      	beq.n	80013ec <HAL_GPIO_Init+0x1fc>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a4d      	ldr	r2, [pc, #308]	@ (80014f0 <HAL_GPIO_Init+0x300>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d013      	beq.n	80013e8 <HAL_GPIO_Init+0x1f8>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a4c      	ldr	r2, [pc, #304]	@ (80014f4 <HAL_GPIO_Init+0x304>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00d      	beq.n	80013e4 <HAL_GPIO_Init+0x1f4>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a4b      	ldr	r2, [pc, #300]	@ (80014f8 <HAL_GPIO_Init+0x308>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d007      	beq.n	80013e0 <HAL_GPIO_Init+0x1f0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a4a      	ldr	r2, [pc, #296]	@ (80014fc <HAL_GPIO_Init+0x30c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d101      	bne.n	80013dc <HAL_GPIO_Init+0x1ec>
 80013d8:	2306      	movs	r3, #6
 80013da:	e00c      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013dc:	2307      	movs	r3, #7
 80013de:	e00a      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013e0:	2305      	movs	r3, #5
 80013e2:	e008      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013e4:	2304      	movs	r3, #4
 80013e6:	e006      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013e8:	2303      	movs	r3, #3
 80013ea:	e004      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e002      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013f4:	2300      	movs	r3, #0
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	f002 0203 	and.w	r2, r2, #3
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	4093      	lsls	r3, r2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001406:	4937      	ldr	r1, [pc, #220]	@ (80014e4 <HAL_GPIO_Init+0x2f4>)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001414:	4b3a      	ldr	r3, [pc, #232]	@ (8001500 <HAL_GPIO_Init+0x310>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001438:	4a31      	ldr	r2, [pc, #196]	@ (8001500 <HAL_GPIO_Init+0x310>)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800143e:	4b30      	ldr	r3, [pc, #192]	@ (8001500 <HAL_GPIO_Init+0x310>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001462:	4a27      	ldr	r2, [pc, #156]	@ (8001500 <HAL_GPIO_Init+0x310>)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001468:	4b25      	ldr	r3, [pc, #148]	@ (8001500 <HAL_GPIO_Init+0x310>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800148c:	4a1c      	ldr	r2, [pc, #112]	@ (8001500 <HAL_GPIO_Init+0x310>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001492:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <HAL_GPIO_Init+0x310>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <HAL_GPIO_Init+0x310>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fa22 f303 	lsr.w	r3, r2, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f47f ae97 	bne.w	8001200 <HAL_GPIO_Init+0x10>
  }
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	371c      	adds	r7, #28
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800
 80014f0:	48000c00 	.word	0x48000c00
 80014f4:	48001000 	.word	0x48001000
 80014f8:	48001400 	.word	0x48001400
 80014fc:	48001800 	.word	0x48001800
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001520:	e002      	b.n	8001528 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4013      	ands	r3, r2
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	43d9      	mvns	r1, r3
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	400b      	ands	r3, r1
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800156e:	af00      	add	r7, sp, #0
 8001570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001574:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001578:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800157a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	f001 b83a 	b.w	8002602 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001592:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 816f 	beq.w	8001882 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015a4:	4bb5      	ldr	r3, [pc, #724]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d00c      	beq.n	80015ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015b0:	4bb2      	ldr	r3, [pc, #712]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d15c      	bne.n	8001676 <HAL_RCC_OscConfig+0x10e>
 80015bc:	4baf      	ldr	r3, [pc, #700]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80015c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015c8:	d155      	bne.n	8001676 <HAL_RCC_OscConfig+0x10e>
 80015ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015ce:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	095b      	lsrs	r3, r3, #5
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d102      	bne.n	80015fc <HAL_RCC_OscConfig+0x94>
 80015f6:	4ba1      	ldr	r3, [pc, #644]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	e015      	b.n	8001628 <HAL_RCC_OscConfig+0xc0>
 80015fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001600:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001610:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001614:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001618:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800161c:	fa93 f3a3 	rbit	r3, r3
 8001620:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001624:	4b95      	ldr	r3, [pc, #596]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800162c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001630:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001634:	fa92 f2a2 	rbit	r2, r2
 8001638:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800163c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001640:	fab2 f282 	clz	r2, r2
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	f042 0220 	orr.w	r2, r2, #32
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	f002 021f 	and.w	r2, r2, #31
 8001650:	2101      	movs	r1, #1
 8001652:	fa01 f202 	lsl.w	r2, r1, r2
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8111 	beq.w	8001880 <HAL_RCC_OscConfig+0x318>
 800165e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001662:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 8108 	bne.w	8001880 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	f000 bfc6 	b.w	8002602 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001676:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x12e>
 8001688:	4b7c      	ldr	r3, [pc, #496]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a7b      	ldr	r2, [pc, #492]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 800168e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	e036      	b.n	8001704 <HAL_RCC_OscConfig+0x19c>
 8001696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800169a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x158>
 80016a6:	4b75      	ldr	r3, [pc, #468]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a74      	ldr	r2, [pc, #464]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80016ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b72      	ldr	r3, [pc, #456]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a71      	ldr	r2, [pc, #452]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80016b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e021      	b.n	8001704 <HAL_RCC_OscConfig+0x19c>
 80016c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x184>
 80016d2:	4b6a      	ldr	r3, [pc, #424]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a69      	ldr	r2, [pc, #420]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b67      	ldr	r3, [pc, #412]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a66      	ldr	r2, [pc, #408]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0x19c>
 80016ec:	4b63      	ldr	r3, [pc, #396]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a62      	ldr	r2, [pc, #392]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80016f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b60      	ldr	r3, [pc, #384]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a5f      	ldr	r2, [pc, #380]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 80016fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001702:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001704:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001708:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d059      	beq.n	80017c8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff f848 	bl	80007a8 <HAL_GetTick>
 8001718:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171e:	f7ff f843 	bl	80007a8 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	@ 0x64
 800172c:	d902      	bls.n	8001734 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	f000 bf67 	b.w	8002602 <HAL_RCC_OscConfig+0x109a>
 8001734:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001738:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001748:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b01      	cmp	r3, #1
 800175e:	d102      	bne.n	8001766 <HAL_RCC_OscConfig+0x1fe>
 8001760:	4b46      	ldr	r3, [pc, #280]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	e015      	b.n	8001792 <HAL_RCC_OscConfig+0x22a>
 8001766:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800176a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001772:	fa93 f3a3 	rbit	r3, r3
 8001776:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800177a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800177e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001782:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800178e:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001796:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800179a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800179e:	fa92 f2a2 	rbit	r2, r2
 80017a2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80017a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80017aa:	fab2 f282 	clz	r2, r2
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	f042 0220 	orr.w	r2, r2, #32
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	f002 021f 	and.w	r2, r2, #31
 80017ba:	2101      	movs	r1, #1
 80017bc:	fa01 f202 	lsl.w	r2, r1, r2
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0ab      	beq.n	800171e <HAL_RCC_OscConfig+0x1b6>
 80017c6:	e05c      	b.n	8001882 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7fe ffee 	bl	80007a8 <HAL_GetTick>
 80017cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d2:	f7fe ffe9 	bl	80007a8 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	@ 0x64
 80017e0:	d902      	bls.n	80017e8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	f000 bf0d 	b.w	8002602 <HAL_RCC_OscConfig+0x109a>
 80017e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017ec:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80017fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001800:	fab3 f383 	clz	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b01      	cmp	r3, #1
 8001812:	d102      	bne.n	800181a <HAL_RCC_OscConfig+0x2b2>
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x2de>
 800181a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800181e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800182e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001832:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001836:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001842:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_RCC_OscConfig+0x314>)
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800184a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800184e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001852:	fa92 f2a2 	rbit	r2, r2
 8001856:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800185a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800185e:	fab2 f282 	clz	r2, r2
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	f042 0220 	orr.w	r2, r2, #32
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	f002 021f 	and.w	r2, r2, #31
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ab      	bne.n	80017d2 <HAL_RCC_OscConfig+0x26a>
 800187a:	e002      	b.n	8001882 <HAL_RCC_OscConfig+0x31a>
 800187c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001882:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001886:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 817f 	beq.w	8001b96 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001898:	4ba7      	ldr	r3, [pc, #668]	@ (8001b38 <HAL_RCC_OscConfig+0x5d0>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00c      	beq.n	80018be <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018a4:	4ba4      	ldr	r3, [pc, #656]	@ (8001b38 <HAL_RCC_OscConfig+0x5d0>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d173      	bne.n	8001998 <HAL_RCC_OscConfig+0x430>
 80018b0:	4ba1      	ldr	r3, [pc, #644]	@ (8001b38 <HAL_RCC_OscConfig+0x5d0>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80018b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018bc:	d16c      	bne.n	8001998 <HAL_RCC_OscConfig+0x430>
 80018be:	2302      	movs	r3, #2
 80018c0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80018d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0x386>
 80018e8:	4b93      	ldr	r3, [pc, #588]	@ (8001b38 <HAL_RCC_OscConfig+0x5d0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e013      	b.n	8001916 <HAL_RCC_OscConfig+0x3ae>
 80018ee:	2302      	movs	r3, #2
 80018f0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001900:	2302      	movs	r3, #2
 8001902:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001906:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001912:	4b89      	ldr	r3, [pc, #548]	@ (8001b38 <HAL_RCC_OscConfig+0x5d0>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	2202      	movs	r2, #2
 8001918:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800191c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001920:	fa92 f2a2 	rbit	r2, r2
 8001924:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001928:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800192c:	fab2 f282 	clz	r2, r2
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	f042 0220 	orr.w	r2, r2, #32
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f002 021f 	and.w	r2, r2, #31
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00a      	beq.n	800195e <HAL_RCC_OscConfig+0x3f6>
 8001948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d002      	beq.n	800195e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	f000 be52 	b.w	8002602 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195e:	4b76      	ldr	r3, [pc, #472]	@ (8001b38 <HAL_RCC_OscConfig+0x5d0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	21f8      	movs	r1, #248	@ 0xf8
 8001974:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800197c:	fa91 f1a1 	rbit	r1, r1
 8001980:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001984:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001988:	fab1 f181 	clz	r1, r1
 800198c:	b2c9      	uxtb	r1, r1
 800198e:	408b      	lsls	r3, r1
 8001990:	4969      	ldr	r1, [pc, #420]	@ (8001b38 <HAL_RCC_OscConfig+0x5d0>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001996:	e0fe      	b.n	8001b96 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8088 	beq.w	8001aba <HAL_RCC_OscConfig+0x552>
 80019aa:	2301      	movs	r3, #1
 80019ac:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80019bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019ca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	461a      	mov	r2, r3
 80019d2:	2301      	movs	r3, #1
 80019d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7fe fee7 	bl	80007a8 <HAL_GetTick>
 80019da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e0:	f7fe fee2 	bl	80007a8 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d902      	bls.n	80019f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	f000 be06 	b.w	8002602 <HAL_RCC_OscConfig+0x109a>
 80019f6:	2302      	movs	r3, #2
 80019f8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001a08:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d102      	bne.n	8001a26 <HAL_RCC_OscConfig+0x4be>
 8001a20:	4b45      	ldr	r3, [pc, #276]	@ (8001b38 <HAL_RCC_OscConfig+0x5d0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	e013      	b.n	8001a4e <HAL_RCC_OscConfig+0x4e6>
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001a3e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b38 <HAL_RCC_OscConfig+0x5d0>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001a54:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001a58:	fa92 f2a2 	rbit	r2, r2
 8001a5c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001a60:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001a64:	fab2 f282 	clz	r2, r2
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	f042 0220 	orr.w	r2, r2, #32
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	f002 021f 	and.w	r2, r2, #31
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0af      	beq.n	80019e0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	4b2d      	ldr	r3, [pc, #180]	@ (8001b38 <HAL_RCC_OscConfig+0x5d0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	21f8      	movs	r1, #248	@ 0xf8
 8001a96:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001a9e:	fa91 f1a1 	rbit	r1, r1
 8001aa2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001aa6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001aaa:	fab1 f181 	clz	r1, r1
 8001aae:	b2c9      	uxtb	r1, r1
 8001ab0:	408b      	lsls	r3, r1
 8001ab2:	4921      	ldr	r1, [pc, #132]	@ (8001b38 <HAL_RCC_OscConfig+0x5d0>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	e06d      	b.n	8001b96 <HAL_RCC_OscConfig+0x62e>
 8001aba:	2301      	movs	r3, #1
 8001abc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001acc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ada:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7fe fe5f 	bl	80007a8 <HAL_GetTick>
 8001aea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af0:	f7fe fe5a 	bl	80007a8 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d902      	bls.n	8001b06 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	f000 bd7e 	b.w	8002602 <HAL_RCC_OscConfig+0x109a>
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001b18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5d4>
 8001b30:	4b01      	ldr	r3, [pc, #4]	@ (8001b38 <HAL_RCC_OscConfig+0x5d0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	e016      	b.n	8001b64 <HAL_RCC_OscConfig+0x5fc>
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001b54:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001b60:	4bbf      	ldr	r3, [pc, #764]	@ (8001e60 <HAL_RCC_OscConfig+0x8f8>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	2202      	movs	r2, #2
 8001b66:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001b6a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001b6e:	fa92 f2a2 	rbit	r2, r2
 8001b72:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001b76:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b7a:	fab2 f282 	clz	r2, r2
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	f042 0220 	orr.w	r2, r2, #32
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	f002 021f 	and.w	r2, r2, #31
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ac      	bne.n	8001af0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8113 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d07c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x74e>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001bce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4ba2      	ldr	r3, [pc, #648]	@ (8001e64 <HAL_RCC_OscConfig+0x8fc>)
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	461a      	mov	r2, r3
 8001be2:	2301      	movs	r3, #1
 8001be4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7fe fddf 	bl	80007a8 <HAL_GetTick>
 8001bea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7fe fdda 	bl	80007a8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d902      	bls.n	8001c06 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	f000 bcfe 	b.w	8002602 <HAL_RCC_OscConfig+0x109a>
 8001c06:	2302      	movs	r3, #2
 8001c08:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001c10:	fa93 f2a3 	rbit	r2, r3
 8001c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c18:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c26:	2202      	movs	r2, #2
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c60:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001c64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	4b7e      	ldr	r3, [pc, #504]	@ (8001e60 <HAL_RCC_OscConfig+0x8f8>)
 8001c68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c72:	2102      	movs	r1, #2
 8001c74:	6019      	str	r1, [r3, #0]
 8001c76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f1a3 	rbit	r1, r3
 8001c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c88:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c8c:	6019      	str	r1, [r3, #0]
  return result;
 8001c8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c92:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	2101      	movs	r1, #1
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d09d      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x688>
 8001cb4:	e08d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x86a>
 8001cb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	fa93 f2a3 	rbit	r2, r3
 8001cd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001cd8:	601a      	str	r2, [r3, #0]
  return result;
 8001cda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cde:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ce2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b5d      	ldr	r3, [pc, #372]	@ (8001e64 <HAL_RCC_OscConfig+0x8fc>)
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf8:	f7fe fd56 	bl	80007a8 <HAL_GetTick>
 8001cfc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d02:	f7fe fd51 	bl	80007a8 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d902      	bls.n	8001d18 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	f000 bc75 	b.w	8002602 <HAL_RCC_OscConfig+0x109a>
 8001d18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d1c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001d20:	2202      	movs	r2, #2
 8001d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d28:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	fa93 f2a3 	rbit	r2, r3
 8001d32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d36:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001d44:	2202      	movs	r2, #2
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	fa93 f2a3 	rbit	r2, r3
 8001d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d64:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d68:	2202      	movs	r2, #2
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d70:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	fa93 f2a3 	rbit	r2, r3
 8001d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d7e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d82:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	4b36      	ldr	r3, [pc, #216]	@ (8001e60 <HAL_RCC_OscConfig+0x8f8>)
 8001d86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d90:	2102      	movs	r1, #2
 8001d92:	6019      	str	r1, [r3, #0]
 8001d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d98:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f1a3 	rbit	r1, r3
 8001da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001daa:	6019      	str	r1, [r3, #0]
  return result;
 8001dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d197      	bne.n	8001d02 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 81a5 	beq.w	8002132 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <HAL_RCC_OscConfig+0x8f8>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d116      	bne.n	8001e28 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <HAL_RCC_OscConfig+0x8f8>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a18      	ldr	r2, [pc, #96]	@ (8001e60 <HAL_RCC_OscConfig+0x8f8>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b16      	ldr	r3, [pc, #88]	@ (8001e60 <HAL_RCC_OscConfig+0x8f8>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001e0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e20:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e22:	2301      	movs	r3, #1
 8001e24:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <HAL_RCC_OscConfig+0x900>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d121      	bne.n	8001e78 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <HAL_RCC_OscConfig+0x900>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0b      	ldr	r2, [pc, #44]	@ (8001e68 <HAL_RCC_OscConfig+0x900>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e40:	f7fe fcb2 	bl	80007a8 <HAL_GetTick>
 8001e44:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	e010      	b.n	8001e6c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4a:	f7fe fcad 	bl	80007a8 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	@ 0x64
 8001e58:	d908      	bls.n	8001e6c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e3d1      	b.n	8002602 <HAL_RCC_OscConfig+0x109a>
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	10908120 	.word	0x10908120
 8001e68:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	4b8d      	ldr	r3, [pc, #564]	@ (80020a4 <HAL_RCC_OscConfig+0xb3c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0e8      	beq.n	8001e4a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x92e>
 8001e88:	4b87      	ldr	r3, [pc, #540]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a86      	ldr	r2, [pc, #536]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6213      	str	r3, [r2, #32]
 8001e94:	e035      	b.n	8001f02 <HAL_RCC_OscConfig+0x99a>
 8001e96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x958>
 8001ea6:	4b80      	ldr	r3, [pc, #512]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4a7f      	ldr	r2, [pc, #508]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	6213      	str	r3, [r2, #32]
 8001eb2:	4b7d      	ldr	r3, [pc, #500]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a7c      	ldr	r2, [pc, #496]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	e020      	b.n	8001f02 <HAL_RCC_OscConfig+0x99a>
 8001ec0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d10c      	bne.n	8001eea <HAL_RCC_OscConfig+0x982>
 8001ed0:	4b75      	ldr	r3, [pc, #468]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a74      	ldr	r2, [pc, #464]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	4b72      	ldr	r3, [pc, #456]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a71      	ldr	r2, [pc, #452]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	e00b      	b.n	8001f02 <HAL_RCC_OscConfig+0x99a>
 8001eea:	4b6f      	ldr	r3, [pc, #444]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a6e      	ldr	r2, [pc, #440]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6213      	str	r3, [r2, #32]
 8001ef6:	4b6c      	ldr	r3, [pc, #432]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a6b      	ldr	r2, [pc, #428]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f06:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8081 	beq.w	8002016 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7fe fc48 	bl	80007a8 <HAL_GetTick>
 8001f18:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	e00b      	b.n	8001f36 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7fe fc43 	bl	80007a8 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e365      	b.n	8002602 <HAL_RCC_OscConfig+0x109a>
 8001f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001f3e:	2202      	movs	r2, #2
 8001f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f46:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	fa93 f2a3 	rbit	r2, r3
 8001f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f54:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f62:	2202      	movs	r2, #2
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	fa93 f2a3 	rbit	r2, r3
 8001f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f78:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f7c:	601a      	str	r2, [r3, #0]
  return result;
 8001f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f82:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f86:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d102      	bne.n	8001fa2 <HAL_RCC_OscConfig+0xa3a>
 8001f9c:	4b42      	ldr	r3, [pc, #264]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	e013      	b.n	8001fca <HAL_RCC_OscConfig+0xa62>
 8001fa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001faa:	2202      	movs	r2, #2
 8001fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	fa93 f2a3 	rbit	r2, r3
 8001fbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fce:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	6011      	str	r1, [r2, #0]
 8001fd6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fda:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	fa92 f1a2 	rbit	r1, r2
 8001fe4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fe8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001fec:	6011      	str	r1, [r2, #0]
  return result;
 8001fee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ff2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f002 021f 	and.w	r2, r2, #31
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d084      	beq.n	8001f1e <HAL_RCC_OscConfig+0x9b6>
 8002014:	e083      	b.n	800211e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7fe fbc7 	bl	80007a8 <HAL_GetTick>
 800201a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7fe fbc2 	bl	80007a8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e2e4      	b.n	8002602 <HAL_RCC_OscConfig+0x109a>
 8002038:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800203c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002040:	2202      	movs	r2, #2
 8002042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002048:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	fa93 f2a3 	rbit	r2, r3
 8002052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002056:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002060:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002064:	2202      	movs	r2, #2
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	fa93 f2a3 	rbit	r2, r3
 8002076:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800207e:	601a      	str	r2, [r3, #0]
  return result;
 8002080:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002084:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002088:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d106      	bne.n	80020ac <HAL_RCC_OscConfig+0xb44>
 800209e:	4b02      	ldr	r3, [pc, #8]	@ (80020a8 <HAL_RCC_OscConfig+0xb40>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	e017      	b.n	80020d4 <HAL_RCC_OscConfig+0xb6c>
 80020a4:	40007000 	.word	0x40007000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80020b4:	2202      	movs	r2, #2
 80020b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020bc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	fa93 f2a3 	rbit	r2, r3
 80020c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ca:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	4bb3      	ldr	r3, [pc, #716]	@ (80023a0 <HAL_RCC_OscConfig+0xe38>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020d8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80020dc:	2102      	movs	r1, #2
 80020de:	6011      	str	r1, [r2, #0]
 80020e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020e4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	fa92 f1a2 	rbit	r1, r2
 80020ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020f2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80020f6:	6011      	str	r1, [r2, #0]
  return result;
 80020f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020fc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f002 021f 	and.w	r2, r2, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d180      	bne.n	8002020 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800211e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002122:	2b01      	cmp	r3, #1
 8002124:	d105      	bne.n	8002132 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	4b9e      	ldr	r3, [pc, #632]	@ (80023a0 <HAL_RCC_OscConfig+0xe38>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a9d      	ldr	r2, [pc, #628]	@ (80023a0 <HAL_RCC_OscConfig+0xe38>)
 800212c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002130:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002132:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002136:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 825e 	beq.w	8002600 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002144:	4b96      	ldr	r3, [pc, #600]	@ (80023a0 <HAL_RCC_OscConfig+0xe38>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	f000 821f 	beq.w	8002590 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002156:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b02      	cmp	r3, #2
 8002160:	f040 8170 	bne.w	8002444 <HAL_RCC_OscConfig+0xedc>
 8002164:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002168:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800216c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002176:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002184:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002188:	601a      	str	r2, [r3, #0]
  return result;
 800218a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002192:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800219e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	461a      	mov	r2, r3
 80021a6:	2300      	movs	r3, #0
 80021a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe fafd 	bl	80007a8 <HAL_GetTick>
 80021ae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b2:	e009      	b.n	80021c8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe faf8 	bl	80007a8 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e21c      	b.n	8002602 <HAL_RCC_OscConfig+0x109a>
 80021c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021cc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80021d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021da:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80021ec:	601a      	str	r2, [r3, #0]
  return result;
 80021ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80021f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d102      	bne.n	8002212 <HAL_RCC_OscConfig+0xcaa>
 800220c:	4b64      	ldr	r3, [pc, #400]	@ (80023a0 <HAL_RCC_OscConfig+0xe38>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	e027      	b.n	8002262 <HAL_RCC_OscConfig+0xcfa>
 8002212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002216:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800221a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800221e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002224:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002232:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002240:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800224a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fa93 f2a3 	rbit	r2, r3
 8002254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002258:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	4b50      	ldr	r3, [pc, #320]	@ (80023a0 <HAL_RCC_OscConfig+0xe38>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002266:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800226a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800226e:	6011      	str	r1, [r2, #0]
 8002270:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002274:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	fa92 f1a2 	rbit	r1, r2
 800227e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002282:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002286:	6011      	str	r1, [r2, #0]
  return result;
 8002288:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800228c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	fab2 f282 	clz	r2, r2
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	f042 0220 	orr.w	r2, r2, #32
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	f002 021f 	and.w	r2, r2, #31
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d182      	bne.n	80021b4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ae:	4b3c      	ldr	r3, [pc, #240]	@ (80023a0 <HAL_RCC_OscConfig+0xe38>)
 80022b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b2:	f023 020f 	bic.w	r2, r3, #15
 80022b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	4937      	ldr	r1, [pc, #220]	@ (80023a0 <HAL_RCC_OscConfig+0xe38>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80022c8:	4b35      	ldr	r3, [pc, #212]	@ (80023a0 <HAL_RCC_OscConfig+0xe38>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80022d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a19      	ldr	r1, [r3, #32]
 80022dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	492d      	ldr	r1, [pc, #180]	@ (80023a0 <HAL_RCC_OscConfig+0xe38>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
 80022f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80022f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002302:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fa93 f2a3 	rbit	r2, r3
 800230c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002310:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002314:	601a      	str	r2, [r3, #0]
  return result;
 8002316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800231e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800232a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	461a      	mov	r2, r3
 8002332:	2301      	movs	r3, #1
 8002334:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7fe fa37 	bl	80007a8 <HAL_GetTick>
 800233a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800233e:	e009      	b.n	8002354 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fa32 	bl	80007a8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e156      	b.n	8002602 <HAL_RCC_OscConfig+0x109a>
 8002354:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002358:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800235c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002366:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	fa93 f2a3 	rbit	r2, r3
 8002370:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002374:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002378:	601a      	str	r2, [r3, #0]
  return result;
 800237a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800237e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002382:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCC_OscConfig+0xe3c>
 8002398:	4b01      	ldr	r3, [pc, #4]	@ (80023a0 <HAL_RCC_OscConfig+0xe38>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	e02a      	b.n	80023f4 <HAL_RCC_OscConfig+0xe8c>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ce:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80023d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023dc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fa93 f2a3 	rbit	r2, r3
 80023e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ea:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	4b86      	ldr	r3, [pc, #536]	@ (800260c <HAL_RCC_OscConfig+0x10a4>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023f8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80023fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002400:	6011      	str	r1, [r2, #0]
 8002402:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002406:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	fa92 f1a2 	rbit	r1, r2
 8002410:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002414:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002418:	6011      	str	r1, [r2, #0]
  return result;
 800241a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800241e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	fab2 f282 	clz	r2, r2
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	f042 0220 	orr.w	r2, r2, #32
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	f002 021f 	and.w	r2, r2, #31
 8002434:	2101      	movs	r1, #1
 8002436:	fa01 f202 	lsl.w	r2, r1, r2
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	f43f af7f 	beq.w	8002340 <HAL_RCC_OscConfig+0xdd8>
 8002442:	e0dd      	b.n	8002600 <HAL_RCC_OscConfig+0x1098>
 8002444:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002448:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800244c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002456:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	fa93 f2a3 	rbit	r2, r3
 8002460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002464:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002468:	601a      	str	r2, [r3, #0]
  return result;
 800246a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800246e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002472:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800247e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	461a      	mov	r2, r3
 8002486:	2300      	movs	r3, #0
 8002488:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7fe f98d 	bl	80007a8 <HAL_GetTick>
 800248e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002492:	e009      	b.n	80024a8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002494:	f7fe f988 	bl	80007a8 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0ac      	b.n	8002602 <HAL_RCC_OscConfig+0x109a>
 80024a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ac:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80024b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ba:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fa93 f2a3 	rbit	r2, r3
 80024c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80024cc:	601a      	str	r2, [r3, #0]
  return result;
 80024ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80024d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_OscConfig+0xf8a>
 80024ec:	4b47      	ldr	r3, [pc, #284]	@ (800260c <HAL_RCC_OscConfig+0x10a4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	e027      	b.n	8002542 <HAL_RCC_OscConfig+0xfda>
 80024f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80024fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002504:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002512:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800251c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002520:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002538:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	4b33      	ldr	r3, [pc, #204]	@ (800260c <HAL_RCC_OscConfig+0x10a4>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002546:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800254a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800254e:	6011      	str	r1, [r2, #0]
 8002550:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002554:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	fa92 f1a2 	rbit	r1, r2
 800255e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002562:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002566:	6011      	str	r1, [r2, #0]
  return result;
 8002568:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800256c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	fab2 f282 	clz	r2, r2
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	f042 0220 	orr.w	r2, r2, #32
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	f002 021f 	and.w	r2, r2, #31
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f202 	lsl.w	r2, r1, r2
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d182      	bne.n	8002494 <HAL_RCC_OscConfig+0xf2c>
 800258e:	e037      	b.n	8002600 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002594:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e02e      	b.n	8002602 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025a4:	4b19      	ldr	r3, [pc, #100]	@ (800260c <HAL_RCC_OscConfig+0x10a4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80025ac:	4b17      	ldr	r3, [pc, #92]	@ (800260c <HAL_RCC_OscConfig+0x10a4>)
 80025ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80025b8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80025bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d117      	bne.n	80025fc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80025d0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d10b      	bne.n	80025fc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80025e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025e8:	f003 020f 	and.w	r2, r3, #15
 80025ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b09e      	sub	sp, #120	@ 0x78
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e162      	b.n	80028ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002628:	4b90      	ldr	r3, [pc, #576]	@ (800286c <HAL_RCC_ClockConfig+0x25c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d910      	bls.n	8002658 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b8d      	ldr	r3, [pc, #564]	@ (800286c <HAL_RCC_ClockConfig+0x25c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 0207 	bic.w	r2, r3, #7
 800263e:	498b      	ldr	r1, [pc, #556]	@ (800286c <HAL_RCC_ClockConfig+0x25c>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b89      	ldr	r3, [pc, #548]	@ (800286c <HAL_RCC_ClockConfig+0x25c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e14a      	b.n	80028ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002664:	4b82      	ldr	r3, [pc, #520]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	497f      	ldr	r1, [pc, #508]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80dc 	beq.w	800283c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d13c      	bne.n	8002706 <HAL_RCC_ClockConfig+0xf6>
 800268c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002690:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800269a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d102      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xa6>
 80026b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	e00f      	b.n	80026d6 <HAL_RCC_ClockConfig+0xc6>
 80026b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80026c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80026ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026d2:	4b67      	ldr	r3, [pc, #412]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80026dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026de:	fa92 f2a2 	rbit	r2, r2
 80026e2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80026e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80026e6:	fab2 f282 	clz	r2, r2
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	f042 0220 	orr.w	r2, r2, #32
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	f002 021f 	and.w	r2, r2, #31
 80026f6:	2101      	movs	r1, #1
 80026f8:	fa01 f202 	lsl.w	r2, r1, r2
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d17b      	bne.n	80027fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0f3      	b.n	80028ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d13c      	bne.n	8002788 <HAL_RCC_ClockConfig+0x178>
 800270e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002712:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800271c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_ClockConfig+0x128>
 8002732:	4b4f      	ldr	r3, [pc, #316]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e00f      	b.n	8002758 <HAL_RCC_ClockConfig+0x148>
 8002738:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800273c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	647b      	str	r3, [r7, #68]	@ 0x44
 8002746:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800274a:	643b      	str	r3, [r7, #64]	@ 0x40
 800274c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002754:	4b46      	ldr	r3, [pc, #280]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800275c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800275e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002760:	fa92 f2a2 	rbit	r2, r2
 8002764:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002766:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f002 021f 	and.w	r2, r2, #31
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f202 	lsl.w	r2, r1, r2
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d13a      	bne.n	80027fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0b2      	b.n	80028ee <HAL_RCC_ClockConfig+0x2de>
 8002788:	2302      	movs	r3, #2
 800278a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x1a0>
 80027aa:	4b31      	ldr	r3, [pc, #196]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	e00d      	b.n	80027cc <HAL_RCC_ClockConfig+0x1bc>
 80027b0:	2302      	movs	r3, #2
 80027b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80027bc:	2302      	movs	r3, #2
 80027be:	623b      	str	r3, [r7, #32]
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	61fb      	str	r3, [r7, #28]
 80027c8:	4b29      	ldr	r3, [pc, #164]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	2202      	movs	r2, #2
 80027ce:	61ba      	str	r2, [r7, #24]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	fa92 f2a2 	rbit	r2, r2
 80027d6:	617a      	str	r2, [r7, #20]
  return result;
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	fab2 f282 	clz	r2, r2
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f042 0220 	orr.w	r2, r2, #32
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	f002 021f 	and.w	r2, r2, #31
 80027ea:	2101      	movs	r1, #1
 80027ec:	fa01 f202 	lsl.w	r2, r1, r2
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e079      	b.n	80028ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f023 0203 	bic.w	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	491a      	ldr	r1, [pc, #104]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800280c:	f7fd ffcc 	bl	80007a8 <HAL_GetTick>
 8002810:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	e00a      	b.n	800282a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002814:	f7fd ffc8 	bl	80007a8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e061      	b.n	80028ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <HAL_RCC_ClockConfig+0x260>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 020c 	and.w	r2, r3, #12
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	429a      	cmp	r2, r3
 800283a:	d1eb      	bne.n	8002814 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800283c:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <HAL_RCC_ClockConfig+0x25c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d214      	bcs.n	8002874 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b08      	ldr	r3, [pc, #32]	@ (800286c <HAL_RCC_ClockConfig+0x25c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 0207 	bic.w	r2, r3, #7
 8002852:	4906      	ldr	r1, [pc, #24]	@ (800286c <HAL_RCC_ClockConfig+0x25c>)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b04      	ldr	r3, [pc, #16]	@ (800286c <HAL_RCC_ClockConfig+0x25c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e040      	b.n	80028ee <HAL_RCC_ClockConfig+0x2de>
 800286c:	40022000 	.word	0x40022000
 8002870:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002880:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	491a      	ldr	r1, [pc, #104]	@ (80028f8 <HAL_RCC_ClockConfig+0x2e8>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800289e:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <HAL_RCC_ClockConfig+0x2e8>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4912      	ldr	r1, [pc, #72]	@ (80028f8 <HAL_RCC_ClockConfig+0x2e8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028b2:	f000 f829 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 80028b6:	4601      	mov	r1, r0
 80028b8:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <HAL_RCC_ClockConfig+0x2e8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028c0:	22f0      	movs	r2, #240	@ 0xf0
 80028c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	fa92 f2a2 	rbit	r2, r2
 80028ca:	60fa      	str	r2, [r7, #12]
  return result;
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	fab2 f282 	clz	r2, r2
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	40d3      	lsrs	r3, r2
 80028d6:	4a09      	ldr	r2, [pc, #36]	@ (80028fc <HAL_RCC_ClockConfig+0x2ec>)
 80028d8:	5cd3      	ldrb	r3, [r2, r3]
 80028da:	fa21 f303 	lsr.w	r3, r1, r3
 80028de:	4a08      	ldr	r2, [pc, #32]	@ (8002900 <HAL_RCC_ClockConfig+0x2f0>)
 80028e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <HAL_RCC_ClockConfig+0x2f4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd ff1a 	bl	8000720 <HAL_InitTick>
  
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3778      	adds	r7, #120	@ 0x78
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
 80028fc:	08004bbc 	.word	0x08004bbc
 8002900:	20000000 	.word	0x20000000
 8002904:	20000004 	.word	0x20000004

08002908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002922:	4b1f      	ldr	r3, [pc, #124]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d002      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x30>
 8002932:	2b08      	cmp	r3, #8
 8002934:	d003      	beq.n	800293e <HAL_RCC_GetSysClockFreq+0x36>
 8002936:	e029      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002938:	4b1a      	ldr	r3, [pc, #104]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800293a:	613b      	str	r3, [r7, #16]
      break;
 800293c:	e029      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	0c9b      	lsrs	r3, r3, #18
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	4a18      	ldr	r2, [pc, #96]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800294c:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800294e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	4a15      	ldr	r2, [pc, #84]	@ (80029ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002964:	4a0f      	ldr	r2, [pc, #60]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	fbb2 f2f3 	udiv	r2, r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	e007      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002976:	4a0b      	ldr	r2, [pc, #44]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	fbb2 f2f3 	udiv	r2, r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	613b      	str	r3, [r7, #16]
      break;
 800298a:	e002      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800298e:	613b      	str	r3, [r7, #16]
      break;
 8002990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002992:	693b      	ldr	r3, [r7, #16]
}
 8002994:	4618      	mov	r0, r3
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	40021000 	.word	0x40021000
 80029a4:	007a1200 	.word	0x007a1200
 80029a8:	08004bd4 	.word	0x08004bd4
 80029ac:	08004be4 	.word	0x08004be4

080029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000000 	.word	0x20000000

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029ce:	f7ff ffef 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029d2:	4601      	mov	r1, r0
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029dc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80029e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	fa92 f2a2 	rbit	r2, r2
 80029e8:	603a      	str	r2, [r7, #0]
  return result;
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	fab2 f282 	clz	r2, r2
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	40d3      	lsrs	r3, r2
 80029f4:	4a04      	ldr	r2, [pc, #16]	@ (8002a08 <HAL_RCC_GetPCLK1Freq+0x40>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08004bcc 	.word	0x08004bcc

08002a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a12:	f7ff ffcd 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 8002a16:	4601      	mov	r1, r0
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002a20:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002a24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	fa92 f2a2 	rbit	r2, r2
 8002a2c:	603a      	str	r2, [r7, #0]
  return result;
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	fab2 f282 	clz	r2, r2
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	40d3      	lsrs	r3, r2
 8002a38:	4a04      	ldr	r2, [pc, #16]	@ (8002a4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08004bcc 	.word	0x08004bcc

08002a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b092      	sub	sp, #72	@ 0x48
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80d4 	beq.w	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a74:	4b4e      	ldr	r3, [pc, #312]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10e      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	4b4b      	ldr	r3, [pc, #300]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	4a4a      	ldr	r2, [pc, #296]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	61d3      	str	r3, [r2, #28]
 8002a8c:	4b48      	ldr	r3, [pc, #288]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b45      	ldr	r3, [pc, #276]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d118      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4b42      	ldr	r3, [pc, #264]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a41      	ldr	r2, [pc, #260]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7fd fe77 	bl	80007a8 <HAL_GetTick>
 8002aba:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	e008      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7fd fe73 	bl	80007a8 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b64      	cmp	r3, #100	@ 0x64
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1d6      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b38      	ldr	r3, [pc, #224]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002adc:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8084 	beq.w	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002af6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d07c      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002afc:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b26      	ldr	r3, [pc, #152]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	461a      	mov	r2, r3
 8002b26:	2301      	movs	r3, #1
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b4e:	4a18      	ldr	r2, [pc, #96]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d04b      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fd fe23 	bl	80007a8 <HAL_GetTick>
 8002b62:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7fd fe1f 	bl	80007a8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e180      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b88:	2302      	movs	r3, #2
 8002b8a:	623b      	str	r3, [r7, #32]
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	61fb      	str	r3, [r7, #28]
  return result;
 8002b94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d108      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002baa:	4b01      	ldr	r3, [pc, #4]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	e00d      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	10908100 	.word	0x10908100
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	4b9a      	ldr	r3, [pc, #616]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	2202      	movs	r2, #2
 8002bce:	613a      	str	r2, [r7, #16]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	fa92 f2a2 	rbit	r2, r2
 8002bd6:	60fa      	str	r2, [r7, #12]
  return result;
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	fab2 f282 	clz	r2, r2
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	f002 021f 	and.w	r2, r2, #31
 8002bea:	2101      	movs	r1, #1
 8002bec:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0b7      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bf6:	4b8f      	ldr	r3, [pc, #572]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	498c      	ldr	r1, [pc, #560]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c08:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	4b88      	ldr	r3, [pc, #544]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	4a87      	ldr	r2, [pc, #540]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c28:	4b82      	ldr	r3, [pc, #520]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	f023 0203 	bic.w	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	497f      	ldr	r1, [pc, #508]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c46:	4b7b      	ldr	r3, [pc, #492]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4978      	ldr	r1, [pc, #480]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c64:	4b73      	ldr	r3, [pc, #460]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	4970      	ldr	r1, [pc, #448]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c82:	4b6c      	ldr	r3, [pc, #432]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	f023 0210 	bic.w	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4969      	ldr	r1, [pc, #420]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ca0:	4b64      	ldr	r3, [pc, #400]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	4961      	ldr	r1, [pc, #388]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	f023 0220 	bic.w	r2, r3, #32
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	495a      	ldr	r1, [pc, #360]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cdc:	4b55      	ldr	r3, [pc, #340]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	4952      	ldr	r1, [pc, #328]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	494b      	ldr	r1, [pc, #300]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d18:	4b46      	ldr	r3, [pc, #280]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	4943      	ldr	r1, [pc, #268]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d36:	4b3f      	ldr	r3, [pc, #252]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	493c      	ldr	r1, [pc, #240]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d54:	4b37      	ldr	r3, [pc, #220]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d58:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	4934      	ldr	r1, [pc, #208]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d008      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d72:	4b30      	ldr	r3, [pc, #192]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d76:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7e:	492d      	ldr	r1, [pc, #180]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d90:	4b28      	ldr	r3, [pc, #160]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9c:	4925      	ldr	r1, [pc, #148]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002dae:	4b21      	ldr	r3, [pc, #132]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	491e      	ldr	r1, [pc, #120]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd8:	4916      	ldr	r1, [pc, #88]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002dea:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df6:	490f      	ldr	r1, [pc, #60]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e08:	4b0a      	ldr	r3, [pc, #40]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e14:	4907      	ldr	r1, [pc, #28]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00c      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e26:	4b03      	ldr	r3, [pc, #12]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	e002      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e3a:	4913      	ldr	r1, [pc, #76]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e58:	490b      	ldr	r1, [pc, #44]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002e6a:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e76:	4904      	ldr	r1, [pc, #16]	@ (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3748      	adds	r7, #72	@ 0x48
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000

08002e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e040      	b.n	8002f20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fd fb82 	bl	80005b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	@ 0x24
 8002eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fd0a 	bl	80038ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fb33 	bl	8003544 <UART_SetConfig>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e01b      	b.n	8002f20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fd89 	bl	8003a30 <UART_CheckIdleState>
 8002f1e:	4603      	mov	r3, r0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b0ba      	sub	sp, #232	@ 0xe8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002f52:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002f56:	4013      	ands	r3, r2
 8002f58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002f5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d115      	bne.n	8002f90 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00f      	beq.n	8002f90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d009      	beq.n	8002f90 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 82ab 	beq.w	80034dc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
      }
      return;
 8002f8e:	e2a5      	b.n	80034dc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8117 	beq.w	80031c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002faa:	4b85      	ldr	r3, [pc, #532]	@ (80031c0 <HAL_UART_IRQHandler+0x298>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 810a 	beq.w	80031c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d011      	beq.n	8002fe4 <HAL_UART_IRQHandler+0xbc>
 8002fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d011      	beq.n	8003014 <HAL_UART_IRQHandler+0xec>
 8002ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00b      	beq.n	8003014 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2202      	movs	r2, #2
 8003002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800300a:	f043 0204 	orr.w	r2, r3, #4
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d011      	beq.n	8003044 <HAL_UART_IRQHandler+0x11c>
 8003020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2204      	movs	r2, #4
 8003032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800303a:	f043 0202 	orr.w	r2, r3, #2
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d017      	beq.n	8003080 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d105      	bne.n	8003068 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800305c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003060:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2208      	movs	r2, #8
 800306e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003076:	f043 0208 	orr.w	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003088:	2b00      	cmp	r3, #0
 800308a:	d012      	beq.n	80030b2 <HAL_UART_IRQHandler+0x18a>
 800308c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003090:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00c      	beq.n	80030b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8211 	beq.w	80034e0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fa:	2b40      	cmp	r3, #64	@ 0x40
 80030fc:	d005      	beq.n	800310a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003102:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003106:	2b00      	cmp	r3, #0
 8003108:	d04f      	beq.n	80031aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fe6c 	bl	8003de8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311a:	2b40      	cmp	r3, #64	@ 0x40
 800311c:	d141      	bne.n	80031a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3308      	adds	r3, #8
 8003124:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800313c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3308      	adds	r3, #8
 8003146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800314a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800314e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1d9      	bne.n	800311e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800316e:	2b00      	cmp	r3, #0
 8003170:	d013      	beq.n	800319a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003176:	4a13      	ldr	r2, [pc, #76]	@ (80031c4 <HAL_UART_IRQHandler+0x29c>)
 8003178:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd fd13 	bl	8000baa <HAL_DMA_Abort_IT>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d017      	beq.n	80031ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003194:	4610      	mov	r0, r2
 8003196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	e00f      	b.n	80031ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f9c8 	bl	8003530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	e00b      	b.n	80031ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f9c4 	bl	8003530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	e007      	b.n	80031ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f9c0 	bl	8003530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80031b8:	e192      	b.n	80034e0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ba:	bf00      	nop
    return;
 80031bc:	e190      	b.n	80034e0 <HAL_UART_IRQHandler+0x5b8>
 80031be:	bf00      	nop
 80031c0:	04000120 	.word	0x04000120
 80031c4:	08004093 	.word	0x08004093

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	f040 814b 	bne.w	8003468 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8144 	beq.w	8003468 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 813d 	beq.w	8003468 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2210      	movs	r2, #16
 80031f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003200:	2b40      	cmp	r3, #64	@ 0x40
 8003202:	f040 80b5 	bne.w	8003370 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003212:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8164 	beq.w	80034e4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003226:	429a      	cmp	r2, r3
 8003228:	f080 815c 	bcs.w	80034e4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003232:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2b20      	cmp	r3, #32
 800323e:	f000 8086 	beq.w	800334e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003256:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800325a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800325e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800326c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003270:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003278:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003284:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1da      	bne.n	8003242 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3308      	adds	r3, #8
 8003292:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003296:	e853 3f00 	ldrex	r3, [r3]
 800329a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800329c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3308      	adds	r3, #8
 80032ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032b0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80032b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80032b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80032c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e1      	bne.n	800328c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3308      	adds	r3, #8
 80032ce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032d2:	e853 3f00 	ldrex	r3, [r3]
 80032d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3308      	adds	r3, #8
 80032e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032f4:	e841 2300 	strex	r3, r2, [r1]
 80032f8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e3      	bne.n	80032c8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003316:	e853 3f00 	ldrex	r3, [r3]
 800331a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800331c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800331e:	f023 0310 	bic.w	r3, r3, #16
 8003322:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003330:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003332:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003334:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003336:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003338:	e841 2300 	strex	r3, r2, [r1]
 800333c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800333e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e4      	bne.n	800330e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd fbf0 	bl	8000b2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f001 fbb1 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800336e:	e0b9      	b.n	80034e4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800337c:	b29b      	uxth	r3, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80ab 	beq.w	80034e8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80a6 	beq.w	80034e8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033be:	647b      	str	r3, [r7, #68]	@ 0x44
 80033c0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e4      	bne.n	800339c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3308      	adds	r3, #8
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	623b      	str	r3, [r7, #32]
   return(result);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3308      	adds	r3, #8
 80033f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e3      	bne.n	80033d2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	60fb      	str	r3, [r7, #12]
   return(result);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0310 	bic.w	r3, r3, #16
 8003432:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	69b9      	ldr	r1, [r7, #24]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	e841 2300 	strex	r3, r2, [r1]
 800344c:	617b      	str	r3, [r7, #20]
   return(result);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e4      	bne.n	800341e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800345a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800345e:	4619      	mov	r1, r3
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f001 fb35 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003466:	e03f      	b.n	80034e8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <HAL_UART_IRQHandler+0x56a>
 8003474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fe41 	bl	8004112 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003490:	e02d      	b.n	80034ee <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00e      	beq.n	80034bc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800349e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d01c      	beq.n	80034ec <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
    }
    return;
 80034ba:	e017      	b.n	80034ec <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d012      	beq.n	80034ee <HAL_UART_IRQHandler+0x5c6>
 80034c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00c      	beq.n	80034ee <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fdf2 	bl	80040be <UART_EndTransmit_IT>
    return;
 80034da:	e008      	b.n	80034ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80034dc:	bf00      	nop
 80034de:	e006      	b.n	80034ee <HAL_UART_IRQHandler+0x5c6>
    return;
 80034e0:	bf00      	nop
 80034e2:	e004      	b.n	80034ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80034e4:	bf00      	nop
 80034e6:	e002      	b.n	80034ee <HAL_UART_IRQHandler+0x5c6>
      return;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_UART_IRQHandler+0x5c6>
    return;
 80034ec:	bf00      	nop
  }

}
 80034ee:	37e8      	adds	r7, #232	@ 0xe8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4b92      	ldr	r3, [pc, #584]	@ (80037b8 <UART_SetConfig+0x274>)
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	6979      	ldr	r1, [r7, #20]
 8003578:	430b      	orrs	r3, r1
 800357a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a80      	ldr	r2, [pc, #512]	@ (80037bc <UART_SetConfig+0x278>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d120      	bne.n	8003602 <UART_SetConfig+0xbe>
 80035c0:	4b7f      	ldr	r3, [pc, #508]	@ (80037c0 <UART_SetConfig+0x27c>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d817      	bhi.n	80035fc <UART_SetConfig+0xb8>
 80035cc:	a201      	add	r2, pc, #4	@ (adr r2, 80035d4 <UART_SetConfig+0x90>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	080035e5 	.word	0x080035e5
 80035d8:	080035f1 	.word	0x080035f1
 80035dc:	080035f7 	.word	0x080035f7
 80035e0:	080035eb 	.word	0x080035eb
 80035e4:	2301      	movs	r3, #1
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e0b5      	b.n	8003756 <UART_SetConfig+0x212>
 80035ea:	2302      	movs	r3, #2
 80035ec:	77fb      	strb	r3, [r7, #31]
 80035ee:	e0b2      	b.n	8003756 <UART_SetConfig+0x212>
 80035f0:	2304      	movs	r3, #4
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e0af      	b.n	8003756 <UART_SetConfig+0x212>
 80035f6:	2308      	movs	r3, #8
 80035f8:	77fb      	strb	r3, [r7, #31]
 80035fa:	e0ac      	b.n	8003756 <UART_SetConfig+0x212>
 80035fc:	2310      	movs	r3, #16
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e0a9      	b.n	8003756 <UART_SetConfig+0x212>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a6f      	ldr	r2, [pc, #444]	@ (80037c4 <UART_SetConfig+0x280>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d124      	bne.n	8003656 <UART_SetConfig+0x112>
 800360c:	4b6c      	ldr	r3, [pc, #432]	@ (80037c0 <UART_SetConfig+0x27c>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003614:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003618:	d011      	beq.n	800363e <UART_SetConfig+0xfa>
 800361a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800361e:	d817      	bhi.n	8003650 <UART_SetConfig+0x10c>
 8003620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003624:	d011      	beq.n	800364a <UART_SetConfig+0x106>
 8003626:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800362a:	d811      	bhi.n	8003650 <UART_SetConfig+0x10c>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <UART_SetConfig+0xf4>
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003634:	d006      	beq.n	8003644 <UART_SetConfig+0x100>
 8003636:	e00b      	b.n	8003650 <UART_SetConfig+0x10c>
 8003638:	2300      	movs	r3, #0
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e08b      	b.n	8003756 <UART_SetConfig+0x212>
 800363e:	2302      	movs	r3, #2
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e088      	b.n	8003756 <UART_SetConfig+0x212>
 8003644:	2304      	movs	r3, #4
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e085      	b.n	8003756 <UART_SetConfig+0x212>
 800364a:	2308      	movs	r3, #8
 800364c:	77fb      	strb	r3, [r7, #31]
 800364e:	e082      	b.n	8003756 <UART_SetConfig+0x212>
 8003650:	2310      	movs	r3, #16
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e07f      	b.n	8003756 <UART_SetConfig+0x212>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a5b      	ldr	r2, [pc, #364]	@ (80037c8 <UART_SetConfig+0x284>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d124      	bne.n	80036aa <UART_SetConfig+0x166>
 8003660:	4b57      	ldr	r3, [pc, #348]	@ (80037c0 <UART_SetConfig+0x27c>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003664:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003668:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800366c:	d011      	beq.n	8003692 <UART_SetConfig+0x14e>
 800366e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003672:	d817      	bhi.n	80036a4 <UART_SetConfig+0x160>
 8003674:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003678:	d011      	beq.n	800369e <UART_SetConfig+0x15a>
 800367a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800367e:	d811      	bhi.n	80036a4 <UART_SetConfig+0x160>
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <UART_SetConfig+0x148>
 8003684:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003688:	d006      	beq.n	8003698 <UART_SetConfig+0x154>
 800368a:	e00b      	b.n	80036a4 <UART_SetConfig+0x160>
 800368c:	2300      	movs	r3, #0
 800368e:	77fb      	strb	r3, [r7, #31]
 8003690:	e061      	b.n	8003756 <UART_SetConfig+0x212>
 8003692:	2302      	movs	r3, #2
 8003694:	77fb      	strb	r3, [r7, #31]
 8003696:	e05e      	b.n	8003756 <UART_SetConfig+0x212>
 8003698:	2304      	movs	r3, #4
 800369a:	77fb      	strb	r3, [r7, #31]
 800369c:	e05b      	b.n	8003756 <UART_SetConfig+0x212>
 800369e:	2308      	movs	r3, #8
 80036a0:	77fb      	strb	r3, [r7, #31]
 80036a2:	e058      	b.n	8003756 <UART_SetConfig+0x212>
 80036a4:	2310      	movs	r3, #16
 80036a6:	77fb      	strb	r3, [r7, #31]
 80036a8:	e055      	b.n	8003756 <UART_SetConfig+0x212>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a47      	ldr	r2, [pc, #284]	@ (80037cc <UART_SetConfig+0x288>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d124      	bne.n	80036fe <UART_SetConfig+0x1ba>
 80036b4:	4b42      	ldr	r3, [pc, #264]	@ (80037c0 <UART_SetConfig+0x27c>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80036bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036c0:	d011      	beq.n	80036e6 <UART_SetConfig+0x1a2>
 80036c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036c6:	d817      	bhi.n	80036f8 <UART_SetConfig+0x1b4>
 80036c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036cc:	d011      	beq.n	80036f2 <UART_SetConfig+0x1ae>
 80036ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036d2:	d811      	bhi.n	80036f8 <UART_SetConfig+0x1b4>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <UART_SetConfig+0x19c>
 80036d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036dc:	d006      	beq.n	80036ec <UART_SetConfig+0x1a8>
 80036de:	e00b      	b.n	80036f8 <UART_SetConfig+0x1b4>
 80036e0:	2300      	movs	r3, #0
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e037      	b.n	8003756 <UART_SetConfig+0x212>
 80036e6:	2302      	movs	r3, #2
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e034      	b.n	8003756 <UART_SetConfig+0x212>
 80036ec:	2304      	movs	r3, #4
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e031      	b.n	8003756 <UART_SetConfig+0x212>
 80036f2:	2308      	movs	r3, #8
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e02e      	b.n	8003756 <UART_SetConfig+0x212>
 80036f8:	2310      	movs	r3, #16
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e02b      	b.n	8003756 <UART_SetConfig+0x212>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a33      	ldr	r2, [pc, #204]	@ (80037d0 <UART_SetConfig+0x28c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d124      	bne.n	8003752 <UART_SetConfig+0x20e>
 8003708:	4b2d      	ldr	r3, [pc, #180]	@ (80037c0 <UART_SetConfig+0x27c>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003710:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003714:	d011      	beq.n	800373a <UART_SetConfig+0x1f6>
 8003716:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800371a:	d817      	bhi.n	800374c <UART_SetConfig+0x208>
 800371c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003720:	d011      	beq.n	8003746 <UART_SetConfig+0x202>
 8003722:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003726:	d811      	bhi.n	800374c <UART_SetConfig+0x208>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <UART_SetConfig+0x1f0>
 800372c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003730:	d006      	beq.n	8003740 <UART_SetConfig+0x1fc>
 8003732:	e00b      	b.n	800374c <UART_SetConfig+0x208>
 8003734:	2300      	movs	r3, #0
 8003736:	77fb      	strb	r3, [r7, #31]
 8003738:	e00d      	b.n	8003756 <UART_SetConfig+0x212>
 800373a:	2302      	movs	r3, #2
 800373c:	77fb      	strb	r3, [r7, #31]
 800373e:	e00a      	b.n	8003756 <UART_SetConfig+0x212>
 8003740:	2304      	movs	r3, #4
 8003742:	77fb      	strb	r3, [r7, #31]
 8003744:	e007      	b.n	8003756 <UART_SetConfig+0x212>
 8003746:	2308      	movs	r3, #8
 8003748:	77fb      	strb	r3, [r7, #31]
 800374a:	e004      	b.n	8003756 <UART_SetConfig+0x212>
 800374c:	2310      	movs	r3, #16
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e001      	b.n	8003756 <UART_SetConfig+0x212>
 8003752:	2310      	movs	r3, #16
 8003754:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800375e:	d16b      	bne.n	8003838 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003760:	7ffb      	ldrb	r3, [r7, #31]
 8003762:	2b08      	cmp	r3, #8
 8003764:	d838      	bhi.n	80037d8 <UART_SetConfig+0x294>
 8003766:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <UART_SetConfig+0x228>)
 8003768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376c:	08003791 	.word	0x08003791
 8003770:	08003799 	.word	0x08003799
 8003774:	080037a1 	.word	0x080037a1
 8003778:	080037d9 	.word	0x080037d9
 800377c:	080037a7 	.word	0x080037a7
 8003780:	080037d9 	.word	0x080037d9
 8003784:	080037d9 	.word	0x080037d9
 8003788:	080037d9 	.word	0x080037d9
 800378c:	080037af 	.word	0x080037af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003790:	f7ff f91a 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8003794:	61b8      	str	r0, [r7, #24]
        break;
 8003796:	e024      	b.n	80037e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003798:	f7ff f938 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 800379c:	61b8      	str	r0, [r7, #24]
        break;
 800379e:	e020      	b.n	80037e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a0:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <UART_SetConfig+0x290>)
 80037a2:	61bb      	str	r3, [r7, #24]
        break;
 80037a4:	e01d      	b.n	80037e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a6:	f7ff f8af 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 80037aa:	61b8      	str	r0, [r7, #24]
        break;
 80037ac:	e019      	b.n	80037e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037b2:	61bb      	str	r3, [r7, #24]
        break;
 80037b4:	e015      	b.n	80037e2 <UART_SetConfig+0x29e>
 80037b6:	bf00      	nop
 80037b8:	efff69f3 	.word	0xefff69f3
 80037bc:	40013800 	.word	0x40013800
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40004400 	.word	0x40004400
 80037c8:	40004800 	.word	0x40004800
 80037cc:	40004c00 	.word	0x40004c00
 80037d0:	40005000 	.word	0x40005000
 80037d4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	77bb      	strb	r3, [r7, #30]
        break;
 80037e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d073      	beq.n	80038d0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	005a      	lsls	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	441a      	add	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b0f      	cmp	r3, #15
 8003802:	d916      	bls.n	8003832 <UART_SetConfig+0x2ee>
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800380a:	d212      	bcs.n	8003832 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	b29b      	uxth	r3, r3
 8003810:	f023 030f 	bic.w	r3, r3, #15
 8003814:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	b29b      	uxth	r3, r3
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	b29a      	uxth	r2, r3
 8003822:	89fb      	ldrh	r3, [r7, #14]
 8003824:	4313      	orrs	r3, r2
 8003826:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	89fa      	ldrh	r2, [r7, #14]
 800382e:	60da      	str	r2, [r3, #12]
 8003830:	e04e      	b.n	80038d0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	77bb      	strb	r3, [r7, #30]
 8003836:	e04b      	b.n	80038d0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003838:	7ffb      	ldrb	r3, [r7, #31]
 800383a:	2b08      	cmp	r3, #8
 800383c:	d827      	bhi.n	800388e <UART_SetConfig+0x34a>
 800383e:	a201      	add	r2, pc, #4	@ (adr r2, 8003844 <UART_SetConfig+0x300>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003869 	.word	0x08003869
 8003848:	08003871 	.word	0x08003871
 800384c:	08003879 	.word	0x08003879
 8003850:	0800388f 	.word	0x0800388f
 8003854:	0800387f 	.word	0x0800387f
 8003858:	0800388f 	.word	0x0800388f
 800385c:	0800388f 	.word	0x0800388f
 8003860:	0800388f 	.word	0x0800388f
 8003864:	08003887 	.word	0x08003887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003868:	f7ff f8ae 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 800386c:	61b8      	str	r0, [r7, #24]
        break;
 800386e:	e013      	b.n	8003898 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003870:	f7ff f8cc 	bl	8002a0c <HAL_RCC_GetPCLK2Freq>
 8003874:	61b8      	str	r0, [r7, #24]
        break;
 8003876:	e00f      	b.n	8003898 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003878:	4b1b      	ldr	r3, [pc, #108]	@ (80038e8 <UART_SetConfig+0x3a4>)
 800387a:	61bb      	str	r3, [r7, #24]
        break;
 800387c:	e00c      	b.n	8003898 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387e:	f7ff f843 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 8003882:	61b8      	str	r0, [r7, #24]
        break;
 8003884:	e008      	b.n	8003898 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800388a:	61bb      	str	r3, [r7, #24]
        break;
 800388c:	e004      	b.n	8003898 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	77bb      	strb	r3, [r7, #30]
        break;
 8003896:	bf00      	nop
    }

    if (pclk != 0U)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d018      	beq.n	80038d0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	085a      	lsrs	r2, r3, #1
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	441a      	add	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b0f      	cmp	r3, #15
 80038b6:	d909      	bls.n	80038cc <UART_SetConfig+0x388>
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038be:	d205      	bcs.n	80038cc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	e001      	b.n	80038d0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80038dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	007a1200 	.word	0x007a1200

080038ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01a      	beq.n	8003a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039ea:	d10a      	bne.n	8003a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]
  }
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b098      	sub	sp, #96	@ 0x60
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a40:	f7fc feb2 	bl	80007a8 <HAL_GetTick>
 8003a44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d12e      	bne.n	8003ab2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f88c 	bl	8003b80 <UART_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d021      	beq.n	8003ab2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a82:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e6      	bne.n	8003a6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e062      	b.n	8003b78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d149      	bne.n	8003b54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f856 	bl	8003b80 <UART_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d03c      	beq.n	8003b54 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003af8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e6      	bne.n	8003ada <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3308      	adds	r3, #8
 8003b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3308      	adds	r3, #8
 8003b2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b2c:	61fa      	str	r2, [r7, #28]
 8003b2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	69b9      	ldr	r1, [r7, #24]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	617b      	str	r3, [r7, #20]
   return(result);
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e5      	bne.n	8003b0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e011      	b.n	8003b78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3758      	adds	r7, #88	@ 0x58
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b90:	e04f      	b.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d04b      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9a:	f7fc fe05 	bl	80007a8 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e04e      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d037      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b80      	cmp	r3, #128	@ 0x80
 8003bc6:	d034      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b40      	cmp	r3, #64	@ 0x40
 8003bcc:	d031      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d110      	bne.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2208      	movs	r2, #8
 8003be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f8ff 	bl	8003de8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2208      	movs	r2, #8
 8003bee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e029      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c0c:	d111      	bne.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f8e5 	bl	8003de8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e00f      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69da      	ldr	r2, [r3, #28]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d0a0      	beq.n	8003b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b096      	sub	sp, #88	@ 0x58
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	4613      	mov	r3, r2
 8003c68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2222      	movs	r2, #34	@ 0x22
 8003c84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d028      	beq.n	8003ce2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c94:	4a3e      	ldr	r2, [pc, #248]	@ (8003d90 <UART_Start_Receive_DMA+0x134>)
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c9c:	4a3d      	ldr	r2, [pc, #244]	@ (8003d94 <UART_Start_Receive_DMA+0x138>)
 8003c9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca4:	4a3c      	ldr	r2, [pc, #240]	@ (8003d98 <UART_Start_Receive_DMA+0x13c>)
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cac:	2200      	movs	r2, #0
 8003cae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3324      	adds	r3, #36	@ 0x24
 8003cba:	4619      	mov	r1, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	f7fc fed4 	bl	8000a70 <HAL_DMA_Start_IT>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e051      	b.n	8003d86 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d018      	beq.n	8003d1c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf2:	e853 3f00 	ldrex	r3, [r3]
 8003cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d0a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003d0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e6      	bne.n	8003cea <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3308      	adds	r3, #8
 8003d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3308      	adds	r3, #8
 8003d3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003d3c:	637a      	str	r2, [r7, #52]	@ 0x34
 8003d3e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3308      	adds	r3, #8
 8003d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d70:	623a      	str	r2, [r7, #32]
 8003d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	69f9      	ldr	r1, [r7, #28]
 8003d76:	6a3a      	ldr	r2, [r7, #32]
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e5      	bne.n	8003d50 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3758      	adds	r7, #88	@ 0x58
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	08003eb1 	.word	0x08003eb1
 8003d94:	08003fd7 	.word	0x08003fd7
 8003d98:	08004015 	.word	0x08004015

08003d9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	@ 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6979      	ldr	r1, [r7, #20]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e6      	bne.n	8003da4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003ddc:	bf00      	nop
 8003dde:	3724      	adds	r7, #36	@ 0x24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b095      	sub	sp, #84	@ 0x54
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e6      	bne.n	8003df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3308      	adds	r3, #8
 8003e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3308      	adds	r3, #8
 8003e40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e5      	bne.n	8003e22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d118      	bne.n	8003e90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f023 0310 	bic.w	r3, r3, #16
 8003e72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e6      	bne.n	8003e5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ea4:	bf00      	nop
 8003ea6:	3754      	adds	r7, #84	@ 0x54
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b09c      	sub	sp, #112	@ 0x70
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d071      	beq.n	8003faa <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003edc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ede:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ee2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003eee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ef2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e6      	bne.n	8003ece <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f20:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f22:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e5      	bne.n	8003f00 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3308      	adds	r3, #8
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	623b      	str	r3, [r7, #32]
   return(result);
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3308      	adds	r3, #8
 8003f52:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f54:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e5      	bne.n	8003f34 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d118      	bne.n	8003faa <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f023 0310 	bic.w	r3, r3, #16
 8003f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	69b9      	ldr	r1, [r7, #24]
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e6      	bne.n	8003f78 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fac:	2200      	movs	r2, #0
 8003fae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d107      	bne.n	8003fc8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003fc2:	f000 fd85 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fc6:	e002      	b.n	8003fce <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003fc8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003fca:	f7ff fa9d 	bl	8003508 <HAL_UART_RxCpltCallback>
}
 8003fce:	bf00      	nop
 8003fd0:	3770      	adds	r7, #112	@ 0x70
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d109      	bne.n	8004006 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fd66 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004004:	e002      	b.n	800400c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f7ff fa88 	bl	800351c <HAL_UART_RxHalfCpltCallback>
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004026:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800402e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800403a:	2b80      	cmp	r3, #128	@ 0x80
 800403c:	d109      	bne.n	8004052 <UART_DMAError+0x3e>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b21      	cmp	r3, #33	@ 0x21
 8004042:	d106      	bne.n	8004052 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2200      	movs	r2, #0
 8004048:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800404c:	6978      	ldr	r0, [r7, #20]
 800404e:	f7ff fea5 	bl	8003d9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405c:	2b40      	cmp	r3, #64	@ 0x40
 800405e:	d109      	bne.n	8004074 <UART_DMAError+0x60>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b22      	cmp	r3, #34	@ 0x22
 8004064:	d106      	bne.n	8004074 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff feba 	bl	8003de8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800407a:	f043 0210 	orr.w	r2, r3, #16
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004084:	6978      	ldr	r0, [r7, #20]
 8004086:	f7ff fa53 	bl	8003530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408a:	bf00      	nop
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff fa3d 	bl	8003530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b088      	sub	sp, #32
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040da:	61fb      	str	r3, [r7, #28]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6979      	ldr	r1, [r7, #20]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	613b      	str	r3, [r7, #16]
   return(result);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e6      	bne.n	80040c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff f9f5 	bl	80034f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800410a:	bf00      	nop
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b08c      	sub	sp, #48	@ 0x30
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	4613      	mov	r3, r2
 8004132:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800413a:	2b20      	cmp	r3, #32
 800413c:	d142      	bne.n	80041c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e03b      	b.n	80041c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	461a      	mov	r2, r3
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7ff fd7b 	bl	8003c5c <UART_Start_Receive_DMA>
 8004166:	4603      	mov	r3, r0
 8004168:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800416c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004170:	2b00      	cmp	r3, #0
 8004172:	d124      	bne.n	80041be <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004178:	2b01      	cmp	r3, #1
 800417a:	d11d      	bne.n	80041b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2210      	movs	r2, #16
 8004182:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	617b      	str	r3, [r7, #20]
   return(result);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f043 0310 	orr.w	r3, r3, #16
 8004198:	62bb      	str	r3, [r7, #40]	@ 0x28
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6a39      	ldr	r1, [r7, #32]
 80041a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e6      	bne.n	8004184 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80041b6:	e002      	b.n	80041be <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80041be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80041c2:	e000      	b.n	80041c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
  }
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3730      	adds	r7, #48	@ 0x30
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <circularBuffer_init>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_init( tCircularBuffer* pBuffer, uint8_t* pData, uint16_t capacity )
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	4613      	mov	r3, r2
 80041da:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if ( pBuffer == NULL || pData == NULL || capacity == 0 )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <circularBuffer_init+0x20>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <circularBuffer_init+0x20>
 80041e8:	88fb      	ldrh	r3, [r7, #6]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <circularBuffer_init+0x24>
	{
		return 1;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e014      	b.n	800421c <circularBuffer_init+0x4e>
	}

	// initialize the buffer
	pBuffer->capacity 		= capacity;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	801a      	strh	r2, [r3, #0]
	pBuffer->head 			= 0;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	809a      	strh	r2, [r3, #4]
	pBuffer->tail   		= 0;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	805a      	strh	r2, [r3, #2]
	pBuffer->pBuffer 		= pData;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	609a      	str	r2, [r3, #8]
	memset( pBuffer->pBuffer, 1, pBuffer->capacity );
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6898      	ldr	r0, [r3, #8]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	2101      	movs	r1, #1
 8004216:	f000 fc83 	bl	8004b20 <memset>

	return 0;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <circularBuffer_push>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_push( tCircularBuffer* pCbuffer, uint8_t* pInData, uint16_t length )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if( pCbuffer == NULL || pInData == NULL || pCbuffer->capacity < length )
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <circularBuffer_push+0x24>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <circularBuffer_push+0x24>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	88fa      	ldrh	r2, [r7, #6]
 8004244:	429a      	cmp	r2, r3
 8004246:	d901      	bls.n	800424c <circularBuffer_push+0x28>
	{
		return 1;
 8004248:	2301      	movs	r3, #1
 800424a:	e037      	b.n	80042bc <circularBuffer_push+0x98>
	 *    n n s d d d d e n n
	 *    d d d e n n n s d d
	 * */

	// do we need to loop over the buffer?
	uint16_t toTheEnd = pCbuffer->capacity - pCbuffer->tail;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	881a      	ldrh	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	885b      	ldrh	r3, [r3, #2]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	82fb      	strh	r3, [r7, #22]
	uint8_t* pDes = &(*pCbuffer).pBuffer[pCbuffer->tail];
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	8852      	ldrh	r2, [r2, #2]
 8004260:	4413      	add	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
	if ( toTheEnd < length )
 8004264:	8afa      	ldrh	r2, [r7, #22]
 8004266:	88fb      	ldrh	r3, [r7, #6]
 8004268:	429a      	cmp	r2, r3
 800426a:	d211      	bcs.n	8004290 <circularBuffer_push+0x6c>
	{
		// first copy from the end of the existing data to the end of the buffer
		memcpy( pDes, pInData, toTheEnd );
 800426c:	8afb      	ldrh	r3, [r7, #22]
 800426e:	461a      	mov	r2, r3
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	6938      	ldr	r0, [r7, #16]
 8004274:	f000 fc80 	bl	8004b78 <memcpy>
		// copy the reset of the inData from the beginning of the buffer.
		memcpy( (*pCbuffer).pBuffer, &pInData[toTheEnd], ( length - toTheEnd ) );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6898      	ldr	r0, [r3, #8]
 800427c:	8afb      	ldrh	r3, [r7, #22]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	18d1      	adds	r1, r2, r3
 8004282:	88fa      	ldrh	r2, [r7, #6]
 8004284:	8afb      	ldrh	r3, [r7, #22]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	461a      	mov	r2, r3
 800428a:	f000 fc75 	bl	8004b78 <memcpy>
 800428e:	e005      	b.n	800429c <circularBuffer_push+0x78>
	}
	else
	{
		memcpy( pDes, pInData, length );
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	461a      	mov	r2, r3
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	6938      	ldr	r0, [r7, #16]
 8004298:	f000 fc6e 	bl	8004b78 <memcpy>
		//pBuffer->pBuffer[pBuffer->end] = pInData[0];
	}

	pCbuffer->tail = ( pCbuffer->tail + length ) % pCbuffer->capacity;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	885b      	ldrh	r3, [r3, #2]
 80042a0:	461a      	mov	r2, r3
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	4413      	add	r3, r2
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	8812      	ldrh	r2, [r2, #0]
 80042aa:	fb93 f1f2 	sdiv	r1, r3, r2
 80042ae:	fb01 f202 	mul.w	r2, r1, r2
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	805a      	strh	r2, [r3, #2]

	return 0;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <circularBuffer_pop>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_pop( tCircularBuffer* pCbuffer, uint8_t* pOutData, uint16_t length )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
	if ( circularBuffer_isEmepty(pCbuffer) )
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f85d 	bl	8004392 <circularBuffer_isEmepty>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <circularBuffer_pop+0x1e>
		return 1;
 80042de:	2301      	movs	r3, #1
 80042e0:	e037      	b.n	8004352 <circularBuffer_pop+0x8e>
	// do we need to loop over the buffer?
	uint16_t toTheEnd = pCbuffer->capacity - pCbuffer->head;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	881a      	ldrh	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	889b      	ldrh	r3, [r3, #4]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	82fb      	strh	r3, [r7, #22]
	uint8_t* pSource = &(*pCbuffer).pBuffer[pCbuffer->head];
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	8892      	ldrh	r2, [r2, #4]
 80042f6:	4413      	add	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
	if ( toTheEnd < length )
 80042fa:	8afa      	ldrh	r2, [r7, #22]
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d211      	bcs.n	8004326 <circularBuffer_pop+0x62>
	{
		// first copy from the end of the existing data to the end of the buffer
		memcpy( pOutData, pSource, toTheEnd );
 8004302:	8afb      	ldrh	r3, [r7, #22]
 8004304:	461a      	mov	r2, r3
 8004306:	6939      	ldr	r1, [r7, #16]
 8004308:	68b8      	ldr	r0, [r7, #8]
 800430a:	f000 fc35 	bl	8004b78 <memcpy>
		// copy the reset of the inData from the beginning of the buffer.
		memcpy( &pOutData[toTheEnd], (*pCbuffer).pBuffer, ( length - toTheEnd ) );
 800430e:	8afb      	ldrh	r3, [r7, #22]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	18d0      	adds	r0, r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6899      	ldr	r1, [r3, #8]
 8004318:	88fa      	ldrh	r2, [r7, #6]
 800431a:	8afb      	ldrh	r3, [r7, #22]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	461a      	mov	r2, r3
 8004320:	f000 fc2a 	bl	8004b78 <memcpy>
 8004324:	e005      	b.n	8004332 <circularBuffer_pop+0x6e>
	}
	else
	{
		memcpy( pOutData, pSource, length );
 8004326:	88fb      	ldrh	r3, [r7, #6]
 8004328:	461a      	mov	r2, r3
 800432a:	6939      	ldr	r1, [r7, #16]
 800432c:	68b8      	ldr	r0, [r7, #8]
 800432e:	f000 fc23 	bl	8004b78 <memcpy>
	}

	pCbuffer->head = ( pCbuffer->head + length ) % pCbuffer->capacity;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	889b      	ldrh	r3, [r3, #4]
 8004336:	461a      	mov	r2, r3
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	4413      	add	r3, r2
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	8812      	ldrh	r2, [r2, #0]
 8004340:	fb93 f1f2 	sdiv	r1, r3, r2
 8004344:	fb01 f202 	mul.w	r2, r1, r2
 8004348:	1a9b      	subs	r3, r3, r2
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	809a      	strh	r2, [r3, #4]

	return 0;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <circularBuffer_getSize>:
/************************************
 * Function
 * **********************************
 */
uint16_t circularBuffer_getSize( tCircularBuffer* pBuffer )
{
 800435a:	b480      	push	{r7}
 800435c:	b085      	sub	sp, #20
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
	uint16_t size = ( pBuffer->capacity + pBuffer->head - pBuffer->tail ) % pBuffer->capacity;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	889b      	ldrh	r3, [r3, #4]
 800436c:	4413      	add	r3, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	8852      	ldrh	r2, [r2, #2]
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	8812      	ldrh	r2, [r2, #0]
 8004378:	fb93 f1f2 	sdiv	r1, r3, r2
 800437c:	fb01 f202 	mul.w	r2, r1, r2
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	81fb      	strh	r3, [r7, #14]
	return size;
 8004384:	89fb      	ldrh	r3, [r7, #14]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <circularBuffer_isEmepty>:
/************************************
 * Function
 * **********************************
 */
uint16_t circularBuffer_isEmepty( tCircularBuffer* pBuffer )
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
	if( pBuffer->head == pBuffer->tail )
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	889a      	ldrh	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	885b      	ldrh	r3, [r3, #2]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d101      	bne.n	80043aa <circularBuffer_isEmepty+0x18>
		return 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <circularBuffer_isEmepty+0x1a>

	return 0;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <cmdhandler_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void cmdhandler_init( UART_HandleTypeDef* huart )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
	// create a circular buffer
	circularBuffer_init( &CBuffer, cbuff_data, CBUFF_DATA_SIZE );
 80043c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043c4:	4912      	ldr	r1, [pc, #72]	@ (8004410 <cmdhandler_init+0x58>)
 80043c6:	4813      	ldr	r0, [pc, #76]	@ (8004414 <cmdhandler_init+0x5c>)
 80043c8:	f7ff ff01 	bl	80041ce <circularBuffer_init>

	// init uart.
	serial_uart_init(huart, &CBuffer );
 80043cc:	4911      	ldr	r1, [pc, #68]	@ (8004414 <cmdhandler_init+0x5c>)
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fb26 	bl	8004a20 <serial_uart_init>
	serial_uart_receiveToIdle( huart );
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fb37 	bl	8004a48 <serial_uart_receiveToIdle>

	// to let us know to uart received new data;
	serial_uart_registerCB( cmdhandler_processNewData );
 80043da:	480f      	ldr	r0, [pc, #60]	@ (8004418 <cmdhandler_init+0x60>)
 80043dc:	f000 fb50 	bl	8004a80 <serial_uart_registerCB>

	// initialize cmd list.
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80043e0:	2300      	movs	r3, #0
 80043e2:	73fb      	strb	r3, [r7, #15]
 80043e4:	e00d      	b.n	8004402 <cmdhandler_init+0x4a>
	{
		cmdhandler_list[i].moduleId	= MODULE_ID_NONE;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	4a0c      	ldr	r2, [pc, #48]	@ (800441c <cmdhandler_init+0x64>)
 80043ea:	2100      	movs	r1, #0
 80043ec:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		cmdhandler_list[i].funPtr 		= NULL;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	4a0a      	ldr	r2, [pc, #40]	@ (800441c <cmdhandler_init+0x64>)
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	2200      	movs	r2, #0
 80043fa:	605a      	str	r2, [r3, #4]
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	3301      	adds	r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	2b09      	cmp	r3, #9
 8004406:	d9ee      	bls.n	80043e6 <cmdhandler_init+0x2e>
	}
	return;
 8004408:	bf00      	nop
}
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000120 	.word	0x20000120
 8004414:	20000220 	.word	0x20000220
 8004418:	08004479 	.word	0x08004479
 800441c:	20000330 	.word	0x20000330

08004420 <cmdhandler_registerModuleCmdHandler>:

uint8_t cmdhandler_registerModuleCmdHandler( tCmdhandler_moduleCmdHandler handler )
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	463b      	mov	r3, r7
 8004428:	e883 0003 	stmia.w	r3, {r0, r1}
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]
 8004430:	e015      	b.n	800445e <cmdhandler_registerModuleCmdHandler+0x3e>
	{
		if ( cmdhandler_list[i].moduleId == MODULE_ID_NONE )
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	4a0f      	ldr	r2, [pc, #60]	@ (8004474 <cmdhandler_registerModuleCmdHandler+0x54>)
 8004436:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10c      	bne.n	8004458 <cmdhandler_registerModuleCmdHandler+0x38>
		{
			cmdhandler_list[i].moduleId = handler.moduleId;
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	7839      	ldrb	r1, [r7, #0]
 8004442:	4a0c      	ldr	r2, [pc, #48]	@ (8004474 <cmdhandler_registerModuleCmdHandler+0x54>)
 8004444:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
			cmdhandler_list[i].funPtr 	 = handler.funPtr;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4909      	ldr	r1, [pc, #36]	@ (8004474 <cmdhandler_registerModuleCmdHandler+0x54>)
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	440b      	add	r3, r1
 8004452:	605a      	str	r2, [r3, #4]
			return 0;
 8004454:	2300      	movs	r3, #0
 8004456:	e006      	b.n	8004466 <cmdhandler_registerModuleCmdHandler+0x46>
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	3301      	adds	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b09      	cmp	r3, #9
 8004462:	d9e6      	bls.n	8004432 <cmdhandler_registerModuleCmdHandler+0x12>
		}
	}

	// if we looped through the whole list without finding an empty slot.
	return 1;
 8004464:	2301      	movs	r3, #1
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000330 	.word	0x20000330

08004478 <cmdhandler_processNewData>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void cmdhandler_processNewData()
{
 8004478:	b5b0      	push	{r4, r5, r7, lr}
 800447a:	b0c0      	sub	sp, #256	@ 0x100
 800447c:	af3e      	add	r7, sp, #248	@ 0xf8
	uint8_t oneByte 	= 0;
 800447e:	2300      	movs	r3, #0
 8004480:	71bb      	strb	r3, [r7, #6]
	uint16_t dataSize 	= 0;
 8004482:	2300      	movs	r3, #0
 8004484:	80bb      	strh	r3, [r7, #4]
	uint8_t cmd[2] 		= {0};
 8004486:	2300      	movs	r3, #0
 8004488:	803b      	strh	r3, [r7, #0]
	// find new command:
	while( !circularBuffer_isEmepty(&CBuffer) && oneByte != (uint8_t)CMD_NEW )
 800448a:	e005      	b.n	8004498 <cmdhandler_processNewData+0x20>
	{
		circularBuffer_pop( &CBuffer, &oneByte, 1 );
 800448c:	1dbb      	adds	r3, r7, #6
 800448e:	2201      	movs	r2, #1
 8004490:	4619      	mov	r1, r3
 8004492:	4831      	ldr	r0, [pc, #196]	@ (8004558 <cmdhandler_processNewData+0xe0>)
 8004494:	f7ff ff16 	bl	80042c4 <circularBuffer_pop>
	while( !circularBuffer_isEmepty(&CBuffer) && oneByte != (uint8_t)CMD_NEW )
 8004498:	482f      	ldr	r0, [pc, #188]	@ (8004558 <cmdhandler_processNewData+0xe0>)
 800449a:	f7ff ff7a 	bl	8004392 <circularBuffer_isEmepty>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <cmdhandler_processNewData+0x32>
 80044a4:	79bb      	ldrb	r3, [r7, #6]
 80044a6:	2bab      	cmp	r3, #171	@ 0xab
 80044a8:	d1f0      	bne.n	800448c <cmdhandler_processNewData+0x14>
	}

	if ( oneByte != (uint8_t)CMD_NEW )
 80044aa:	79bb      	ldrb	r3, [r7, #6]
 80044ac:	2bab      	cmp	r3, #171	@ 0xab
 80044ae:	d14e      	bne.n	800454e <cmdhandler_processNewData+0xd6>
		// the buffer is empty and we did not found a new command.
		return;
	}

	// read command
	circularBuffer_pop( &CBuffer, cmd, 2 );
 80044b0:	463b      	mov	r3, r7
 80044b2:	2202      	movs	r2, #2
 80044b4:	4619      	mov	r1, r3
 80044b6:	4828      	ldr	r0, [pc, #160]	@ (8004558 <cmdhandler_processNewData+0xe0>)
 80044b8:	f7ff ff04 	bl	80042c4 <circularBuffer_pop>
	inCmd.id.module = cmd[1];
 80044bc:	787a      	ldrb	r2, [r7, #1]
 80044be:	4b27      	ldr	r3, [pc, #156]	@ (800455c <cmdhandler_processNewData+0xe4>)
 80044c0:	701a      	strb	r2, [r3, #0]
	inCmd.id.cmd 	= cmd[0];
 80044c2:	783a      	ldrb	r2, [r7, #0]
 80044c4:	4b25      	ldr	r3, [pc, #148]	@ (800455c <cmdhandler_processNewData+0xe4>)
 80044c6:	705a      	strb	r2, [r3, #1]

	// read data size
	circularBuffer_pop( &CBuffer, (uint8_t*)&dataSize, 2 );
 80044c8:	1d3b      	adds	r3, r7, #4
 80044ca:	2202      	movs	r2, #2
 80044cc:	4619      	mov	r1, r3
 80044ce:	4822      	ldr	r0, [pc, #136]	@ (8004558 <cmdhandler_processNewData+0xe0>)
 80044d0:	f7ff fef8 	bl	80042c4 <circularBuffer_pop>
	inCmd.dataSize = dataSize;
 80044d4:	88ba      	ldrh	r2, [r7, #4]
 80044d6:	4b21      	ldr	r3, [pc, #132]	@ (800455c <cmdhandler_processNewData+0xe4>)
 80044d8:	805a      	strh	r2, [r3, #2]

	// read data
	if ( dataSize != 0 )
 80044da:	88bb      	ldrh	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00d      	beq.n	80044fc <cmdhandler_processNewData+0x84>
	{
		if ( circularBuffer_getSize(&CBuffer) >= dataSize )
 80044e0:	481d      	ldr	r0, [pc, #116]	@ (8004558 <cmdhandler_processNewData+0xe0>)
 80044e2:	f7ff ff3a 	bl	800435a <circularBuffer_getSize>
 80044e6:	4603      	mov	r3, r0
 80044e8:	461a      	mov	r2, r3
 80044ea:	88bb      	ldrh	r3, [r7, #4]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d305      	bcc.n	80044fc <cmdhandler_processNewData+0x84>
		{
			circularBuffer_pop( &CBuffer, &inCmd.data, dataSize );
 80044f0:	88bb      	ldrh	r3, [r7, #4]
 80044f2:	461a      	mov	r2, r3
 80044f4:	491a      	ldr	r1, [pc, #104]	@ (8004560 <cmdhandler_processNewData+0xe8>)
 80044f6:	4818      	ldr	r0, [pc, #96]	@ (8004558 <cmdhandler_processNewData+0xe0>)
 80044f8:	f7ff fee4 	bl	80042c4 <circularBuffer_pop>

	// to this point we have a command, either with data or without.

	// send the command to the relevant module.

	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 80044fc:	2300      	movs	r3, #0
 80044fe:	71fb      	strb	r3, [r7, #7]
 8004500:	e021      	b.n	8004546 <cmdhandler_processNewData+0xce>
	{
		if ( cmdhandler_list[i].funPtr != NULL && cmdhandler_list[i].moduleId == inCmd.id.module )
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	4a17      	ldr	r2, [pc, #92]	@ (8004564 <cmdhandler_processNewData+0xec>)
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d017      	beq.n	8004540 <cmdhandler_processNewData+0xc8>
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	4a14      	ldr	r2, [pc, #80]	@ (8004564 <cmdhandler_processNewData+0xec>)
 8004514:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8004518:	4b10      	ldr	r3, [pc, #64]	@ (800455c <cmdhandler_processNewData+0xe4>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d10f      	bne.n	8004540 <cmdhandler_processNewData+0xc8>
		{
			cmdhandler_list[i].funPtr( inCmd );
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	4a10      	ldr	r2, [pc, #64]	@ (8004564 <cmdhandler_processNewData+0xec>)
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4413      	add	r3, r2
 8004528:	685d      	ldr	r5, [r3, #4]
 800452a:	4c0c      	ldr	r4, [pc, #48]	@ (800455c <cmdhandler_processNewData+0xe4>)
 800452c:	4668      	mov	r0, sp
 800452e:	f104 0310 	add.w	r3, r4, #16
 8004532:	22f4      	movs	r2, #244	@ 0xf4
 8004534:	4619      	mov	r1, r3
 8004536:	f000 fb1f 	bl	8004b78 <memcpy>
 800453a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800453e:	47a8      	blx	r5
	for( uint8_t i = 0; i < CMD_LIST_SIZE; i += 1 )
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	3301      	adds	r3, #1
 8004544:	71fb      	strb	r3, [r7, #7]
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	2b09      	cmp	r3, #9
 800454a:	d9da      	bls.n	8004502 <cmdhandler_processNewData+0x8a>
		}
	}

	return;
 800454c:	e000      	b.n	8004550 <cmdhandler_processNewData+0xd8>
		return;
 800454e:	bf00      	nop
}
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bdb0      	pop	{r4, r5, r7, pc}
 8004556:	bf00      	nop
 8004558:	20000220 	.word	0x20000220
 800455c:	2000022c 	.word	0x2000022c
 8004560:	20000230 	.word	0x20000230
 8004564:	20000330 	.word	0x20000330

08004568 <flash_init>:
/************************************
 * Function
 * **********************************
 */
void flash_init()
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_FLASH, .funPtr = flash_cmd_handler };
 800456e:	4a07      	ldr	r2, [pc, #28]	@ (800458c <flash_init+0x24>)
 8004570:	463b      	mov	r3, r7
 8004572:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004576:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 800457a:	463b      	mov	r3, r7
 800457c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004580:	f7ff ff4e 	bl	8004420 <cmdhandler_registerModuleCmdHandler>
}
 8004584:	bf00      	nop
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	08004bac 	.word	0x08004bac

08004590 <flash_write>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_write( uint32_t Address, uint8_t* pData, uint32_t size )
{
 8004590:	b5b0      	push	{r4, r5, r7, lr}
 8004592:	b08a      	sub	sp, #40	@ 0x28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
	// check if valid flash address.
	if ( Address < APP_START_ADD || Address > FLASH_END_ADD )
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a33      	ldr	r2, [pc, #204]	@ (800466c <flash_write+0xdc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d903      	bls.n	80045ac <flash_write+0x1c>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a32      	ldr	r2, [pc, #200]	@ (8004670 <flash_write+0xe0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d901      	bls.n	80045b0 <flash_write+0x20>
	{
		// return if address is not in application flash area.
		return 1;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e058      	b.n	8004662 <flash_write+0xd2>
	}

	// check for valid input
	if ( pData == NULL && size == 0 )
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d104      	bne.n	80045c0 <flash_write+0x30>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <flash_write+0x30>
	{
		return 1;
 80045bc:	2301      	movs	r3, #1
 80045be:	e050      	b.n	8004662 <flash_write+0xd2>
	}

	HAL_FLASH_Unlock();
 80045c0:	f7fc fcae 	bl	8000f20 <HAL_FLASH_Unlock>
	uint32_t remaining_bytes = size;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_StatusTypeDef status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	76bb      	strb	r3, [r7, #26]
	uint32_t read_offset = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	623b      	str	r3, [r7, #32]
	uint32_t write_offset = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
	uint8_t oneByte= 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	76fb      	strb	r3, [r7, #27]

	while( remaining_bytes )
 80045d8:	e03d      	b.n	8004656 <flash_write+0xc6>
	{
		uint16_t inData= 0xffff;
 80045da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045de:	827b      	strh	r3, [r7, #18]
		uint32_t writing_address = Address + write_offset;
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	4413      	add	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

		if ( remaining_bytes >= HALF_WORD )
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d906      	bls.n	80045fc <flash_write+0x6c>
			memcpy (&inData, &pData[read_offset], HALF_WORD);
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	827b      	strh	r3, [r7, #18]
 80045fa:	e006      	b.n	800460a <flash_write+0x7a>
		else
		{
			// if there is only one byte, move it to inData.
			memcpy (&inData, &pData[read_offset], 1);
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	4413      	add	r3, r2
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	74bb      	strb	r3, [r7, #18]
			oneByte = 1;
 8004606:	2301      	movs	r3, #1
 8004608:	76fb      	strb	r3, [r7, #27]
		}
		status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD, writing_address, inData );
 800460a:	8a7b      	ldrh	r3, [r7, #18]
 800460c:	b29b      	uxth	r3, r3
 800460e:	2200      	movs	r2, #0
 8004610:	461c      	mov	r4, r3
 8004612:	4615      	mov	r5, r2
 8004614:	4622      	mov	r2, r4
 8004616:	462b      	mov	r3, r5
 8004618:	6979      	ldr	r1, [r7, #20]
 800461a:	2001      	movs	r0, #1
 800461c:	f7fc fc10 	bl	8000e40 <HAL_FLASH_Program>
 8004620:	4603      	mov	r3, r0
 8004622:	76bb      	strb	r3, [r7, #26]
		if ( status == HAL_OK )
 8004624:	7ebb      	ldrb	r3, [r7, #26]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d115      	bne.n	8004656 <flash_write+0xc6>
		{
			if ( oneByte == 1 )
 800462a:	7efb      	ldrb	r3, [r7, #27]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d109      	bne.n	8004644 <flash_write+0xb4>
			{
				remaining_bytes -= 1;
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	3b01      	subs	r3, #1
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
				read_offset 	+= 1;
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	3301      	adds	r3, #1
 800463a:	623b      	str	r3, [r7, #32]
				write_offset	+= 1;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	3301      	adds	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	e008      	b.n	8004656 <flash_write+0xc6>
			}
			else
			{
				remaining_bytes -= HALF_WORD;
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	3b02      	subs	r3, #2
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
				read_offset 	+= HALF_WORD;
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	3302      	adds	r3, #2
 800464e:	623b      	str	r3, [r7, #32]
				write_offset	+= HALF_WORD;
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	3302      	adds	r3, #2
 8004654:	61fb      	str	r3, [r7, #28]
	while( remaining_bytes )
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1be      	bne.n	80045da <flash_write+0x4a>

		}

	}

	HAL_FLASH_Lock();
 800465c:	f7fc fc86 	bl	8000f6c <HAL_FLASH_Lock>

	return 0;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3728      	adds	r7, #40	@ 0x28
 8004666:	46bd      	mov	sp, r7
 8004668:	bdb0      	pop	{r4, r5, r7, pc}
 800466a:	bf00      	nop
 800466c:	0803ffff 	.word	0x0803ffff
 8004670:	08080000 	.word	0x08080000

08004674 <flash_erasePage>:
/************************************
 * Function
 * **********************************
 */
uint8_t flash_erasePage( uint32_t Address )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
	// find page start address.
	uint32_t pageStartAddress = ( Address / FLASH_PAGE_SIZE ) * FLASH_PAGE_SIZE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004682:	f023 0307 	bic.w	r3, r3, #7
 8004686:	61fb      	str	r3, [r7, #28]
	uint8_t nrPages = 1;
 8004688:	2301      	movs	r3, #1
 800468a:	76fb      	strb	r3, [r7, #27]


	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages 		= nrPages;
 800468c:	7efb      	ldrb	r3, [r7, #27]
 800468e:	617b      	str	r3, [r7, #20]
	eraseInit.PageAddress 	= pageStartAddress;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	613b      	str	r3, [r7, #16]
	eraseInit.TypeErase 	= FLASH_TYPEERASE_PAGES;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]

	uint32_t pageError;

	HAL_FLASH_Unlock();
 8004698:	f7fc fc42 	bl	8000f20 <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase( &eraseInit, &pageError);
 800469c:	f107 0208 	add.w	r2, r7, #8
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fc fcfe 	bl	80010a8 <HAL_FLASHEx_Erase>
 80046ac:	4603      	mov	r3, r0
 80046ae:	76bb      	strb	r3, [r7, #26]
	HAL_FLASH_Lock();
 80046b0:	f7fc fc5c 	bl	8000f6c <HAL_FLASH_Lock>
	if ( status != HAL_OK )
 80046b4:	7ebb      	ldrb	r3, [r7, #26]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <flash_erasePage+0x4a>
		return 1;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <flash_erasePage+0x4c>

	return 0;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <flash_cmd_handler>:
 * Function
 * **********************************
 */
static uint8_t flash_counter = 0;
void flash_cmd_handler( tCmdhandler_cmd inCmd )
{
 80046c8:	b084      	sub	sp, #16
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b0c4      	sub	sp, #272	@ 0x110
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	f507 7c8c 	add.w	ip, r7, #280	@ 0x118
 80046d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	flash_counter += 1;
 80046d8:	4b33      	ldr	r3, [pc, #204]	@ (80047a8 <flash_cmd_handler+0xe0>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	3301      	adds	r3, #1
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	4b31      	ldr	r3, [pc, #196]	@ (80047a8 <flash_cmd_handler+0xe0>)
 80046e2:	701a      	strb	r2, [r3, #0]
	if( inCmd.id.module !=  MODULE_ID_FLASH )
 80046e4:	f897 3118 	ldrb.w	r3, [r7, #280]	@ 0x118
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d155      	bne.n	8004798 <flash_cmd_handler+0xd0>
		return;

	tCmdhandler_cmd cmd;
	memcpy( &cmd, (uint8_t*)&inCmd, sizeof(tCmdhandler_cmd) );
 80046ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80046f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046f4:	4618      	mov	r0, r3
 80046f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80046fa:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80046fe:	4619      	mov	r1, r3
 8004700:	f000 fa3a 	bl	8004b78 <memcpy>

	switch( cmd.id.cmd )
 8004704:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800470c:	785b      	ldrb	r3, [r3, #1]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d002      	beq.n	8004718 <flash_cmd_handler+0x50>
 8004712:	2b02      	cmp	r3, #2
 8004714:	d026      	beq.n	8004764 <flash_cmd_handler+0x9c>
			memcpy( &address, &cmd.data[0], 4 );
			flash_erasePage( address );
			break;
		}
		default:
			break;
 8004716:	e03e      	b.n	8004796 <flash_cmd_handler+0xce>
			uint32_t address = 0;
 8004718:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800471c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
			memcpy( &address, &cmd.data[0], 4);
 8004724:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004732:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004736:	601a      	str	r2, [r3, #0]
			uint8_t* pData 	 = &cmd.data[4];
 8004738:	f107 0308 	add.w	r3, r7, #8
 800473c:	3308      	adds	r3, #8
 800473e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			flash_write(address, pData, cmd.dataSize - 4 );
 8004742:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004746:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004754:	885b      	ldrh	r3, [r3, #2]
 8004756:	3b04      	subs	r3, #4
 8004758:	461a      	mov	r2, r3
 800475a:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800475e:	f7ff ff17 	bl	8004590 <flash_write>
			break;
 8004762:	e018      	b.n	8004796 <flash_cmd_handler+0xce>
			uint32_t address = 0;
 8004764:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004768:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
			memcpy( &address, &cmd.data[0], 4 );
 8004770:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800477e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004782:	601a      	str	r2, [r3, #0]
			flash_erasePage( address );
 8004784:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004788:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ff70 	bl	8004674 <flash_erasePage>
			break;
 8004794:	bf00      	nop
	}

	return;
 8004796:	e000      	b.n	800479a <flash_cmd_handler+0xd2>
		return;
 8004798:	bf00      	nop
}
 800479a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800479e:	46bd      	mov	sp, r7
 80047a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a4:	b004      	add	sp, #16
 80047a6:	4770      	bx	lr
 80047a8:	20000380 	.word	0x20000380

080047ac <led_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_init()
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
	// register led commands with for the command handler to recognize.
	tCmdhandler_moduleCmdHandler cmd_handler = { .moduleId = MODULE_ID_LED, .funPtr = led_cmd_handler };
 80047b2:	4a07      	ldr	r2, [pc, #28]	@ (80047d0 <led_init+0x24>)
 80047b4:	463b      	mov	r3, r7
 80047b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047ba:	e883 0003 	stmia.w	r3, {r0, r1}

	cmdhandler_registerModuleCmdHandler( cmd_handler );
 80047be:	463b      	mov	r3, r7
 80047c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047c4:	f7ff fe2c 	bl	8004420 <cmdhandler_registerModuleCmdHandler>
	return;
 80047c8:	bf00      	nop
}
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	08004bb4 	.word	0x08004bb4

080047d4 <led_toggle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_toggle( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin( GPIOx, GPIO_Pin );
 80047e0:	887b      	ldrh	r3, [r7, #2]
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fc fea5 	bl	8001534 <HAL_GPIO_TogglePin>
	return;
 80047ea:	bf00      	nop
}
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <led_cmd_handler>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void led_cmd_handler( tCmdhandler_cmd inCmd )
{
 80047f2:	b084      	sub	sp, #16
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b0c2      	sub	sp, #264	@ 0x108
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	f507 7c88 	add.w	ip, r7, #272	@ 0x110
 80047fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// make sure the command is for us.
	if ( inCmd.id.module != MODULE_ID_LED )
 8004802:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8004806:	2b01      	cmp	r3, #1
 8004808:	d13a      	bne.n	8004880 <led_cmd_handler+0x8e>
		return;

	tCmdhandler_cmd cmd;
	memcpy( &cmd, (uint8_t*)&inCmd, sizeof(tCmdhandler_cmd) );
 800480a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800480e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004812:	4618      	mov	r0, r3
 8004814:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004818:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800481c:	4619      	mov	r1, r3
 800481e:	f000 f9ab 	bl	8004b78 <memcpy>

	switch( cmd.id.cmd )
 8004822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d002      	beq.n	8004836 <led_cmd_handler+0x44>
 8004830:	2b02      	cmp	r3, #2
 8004832:	d01e      	beq.n	8004872 <led_cmd_handler+0x80>
		{
			led_toggle( LD2_GPIO_Port, LD2_Pin);
			break;
		}
		default:
			break;
 8004834:	e023      	b.n	800487e <led_cmd_handler+0x8c>
			uint8_t set = 0;// (uint8_t)param;
 8004836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800483a:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
			memcpy(&set, &cmd.data, cmd.dataSize );
 8004842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004846:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800484a:	885b      	ldrh	r3, [r3, #2]
 800484c:	461a      	mov	r2, r3
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	1d19      	adds	r1, r3, #4
 8004852:	1cfb      	adds	r3, r7, #3
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f98f 	bl	8004b78 <memcpy>
			HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, set);
 800485a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800485e:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	2120      	movs	r1, #32
 8004868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800486c:	f7fc fe4a 	bl	8001504 <HAL_GPIO_WritePin>
			break;
 8004870:	e005      	b.n	800487e <led_cmd_handler+0x8c>
			led_toggle( LD2_GPIO_Port, LD2_Pin);
 8004872:	2120      	movs	r1, #32
 8004874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004878:	f7ff ffac 	bl	80047d4 <led_toggle>
			break;
 800487c:	bf00      	nop
	}

	return;
 800487e:	e000      	b.n	8004882 <led_cmd_handler+0x90>
		return;
 8004880:	bf00      	nop
}
 8004882:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004886:	46bd      	mov	sp, r7
 8004888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800488c:	b004      	add	sp, #16
 800488e:	4770      	bx	lr

08004890 <scheduler_init>:
/*
 * function
 * */

void scheduler_init( void )
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
	schedulerVars.nrOfTasks = 0;
 8004896:	4b18      	ldr	r3, [pc, #96]	@ (80048f8 <scheduler_init+0x68>)
 8004898:	2200      	movs	r2, #0
 800489a:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 800489e:	2300      	movs	r3, #0
 80048a0:	71fb      	strb	r3, [r7, #7]
 80048a2:	e01f      	b.n	80048e4 <scheduler_init+0x54>
	{
		schedulerVars.taskList[i].pTask = NULL;
 80048a4:	79fa      	ldrb	r2, [r7, #7]
 80048a6:	4914      	ldr	r1, [pc, #80]	@ (80048f8 <scheduler_init+0x68>)
 80048a8:	4613      	mov	r3, r2
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].delay = 0;
 80048b6:	79fa      	ldrb	r2, [r7, #7]
 80048b8:	490f      	ldr	r1, [pc, #60]	@ (80048f8 <scheduler_init+0x68>)
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	3304      	adds	r3, #4
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].lastExecutionTime = 0;
 80048ca:	79fa      	ldrb	r2, [r7, #7]
 80048cc:	490a      	ldr	r1, [pc, #40]	@ (80048f8 <scheduler_init+0x68>)
 80048ce:	4613      	mov	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	3308      	adds	r3, #8
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	3301      	adds	r3, #1
 80048e2:	71fb      	strb	r3, [r7, #7]
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	2b09      	cmp	r3, #9
 80048e8:	d9dc      	bls.n	80048a4 <scheduler_init+0x14>
	}
}
 80048ea:	bf00      	nop
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	20000384 	.word	0x20000384

080048fc <scheduler_runTask>:
	// no available task was found
	return 0;
}

uint8_t scheduler_runTask( void (*pTask)(void) )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]
 8004908:	e019      	b.n	800493e <scheduler_runTask+0x42>
	{
		// search for available task.
		if ( schedulerVars.runOnceTaskList[i].pTask == NULL )
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	4a11      	ldr	r2, [pc, #68]	@ (8004954 <scheduler_runTask+0x58>)
 800490e:	331e      	adds	r3, #30
 8004910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10f      	bne.n	8004938 <scheduler_runTask+0x3c>
		{
			schedulerVars.runOnceTaskList[i].pTask = pTask;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	490e      	ldr	r1, [pc, #56]	@ (8004954 <scheduler_runTask+0x58>)
 800491c:	331e      	adds	r3, #30
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			schedulerVars.nrOfRunOnceTasks += 1;
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <scheduler_runTask+0x58>)
 8004926:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 800492a:	3301      	adds	r3, #1
 800492c:	b2da      	uxtb	r2, r3
 800492e:	4b09      	ldr	r3, [pc, #36]	@ (8004954 <scheduler_runTask+0x58>)
 8004930:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
			return 1;
 8004934:	2301      	movs	r3, #1
 8004936:	e006      	b.n	8004946 <scheduler_runTask+0x4a>
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	3301      	adds	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	2b13      	cmp	r3, #19
 8004942:	d9e2      	bls.n	800490a <scheduler_runTask+0xe>
		}
	}
	// no available task was found
	return 0;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000384 	.word	0x20000384

08004958 <scheduler_run>:

/*
 * function
 * */
void scheduler_run( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	603b      	str	r3, [r7, #0]
	while( 1 )
	{
		// run once tasks:
		for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8004962:	2300      	movs	r3, #0
 8004964:	71fb      	strb	r3, [r7, #7]
 8004966:	e01d      	b.n	80049a4 <scheduler_run+0x4c>
		{
			// execute task
			if ( schedulerVars.runOnceTaskList[i].pTask != NULL )
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a1c <scheduler_run+0xc4>)
 800496c:	331e      	adds	r3, #30
 800496e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d013      	beq.n	800499e <scheduler_run+0x46>
			{
				schedulerVars.runOnceTaskList[i].pTask();
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	4a28      	ldr	r2, [pc, #160]	@ (8004a1c <scheduler_run+0xc4>)
 800497a:	331e      	adds	r3, #30
 800497c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004980:	4798      	blx	r3
				// remove task from list:
				schedulerVars.runOnceTaskList[i].pTask = NULL;
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	4a25      	ldr	r2, [pc, #148]	@ (8004a1c <scheduler_run+0xc4>)
 8004986:	331e      	adds	r3, #30
 8004988:	2100      	movs	r1, #0
 800498a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				schedulerVars.nrOfRunOnceTasks -= 1;
 800498e:	4b23      	ldr	r3, [pc, #140]	@ (8004a1c <scheduler_run+0xc4>)
 8004990:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8004994:	3b01      	subs	r3, #1
 8004996:	b2da      	uxtb	r2, r3
 8004998:	4b20      	ldr	r3, [pc, #128]	@ (8004a1c <scheduler_run+0xc4>)
 800499a:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
		for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	3301      	adds	r3, #1
 80049a2:	71fb      	strb	r3, [r7, #7]
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	2b13      	cmp	r3, #19
 80049a8:	d9de      	bls.n	8004968 <scheduler_run+0x10>
			}

		}

		// repeated tasks:
		now = HAL_GetTick();
 80049aa:	f7fb fefd 	bl	80007a8 <HAL_GetTick>
 80049ae:	6038      	str	r0, [r7, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 80049b0:	2300      	movs	r3, #0
 80049b2:	71bb      	strb	r3, [r7, #6]
 80049b4:	e02b      	b.n	8004a0e <scheduler_run+0xb6>
		{
			if ( now - schedulerVars.taskList[i].lastExecutionTime  >= schedulerVars.taskList[i].delay )
 80049b6:	79ba      	ldrb	r2, [r7, #6]
 80049b8:	4918      	ldr	r1, [pc, #96]	@ (8004a1c <scheduler_run+0xc4>)
 80049ba:	4613      	mov	r3, r2
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	3308      	adds	r3, #8
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	1ad1      	subs	r1, r2, r3
 80049cc:	79ba      	ldrb	r2, [r7, #6]
 80049ce:	4813      	ldr	r0, [pc, #76]	@ (8004a1c <scheduler_run+0xc4>)
 80049d0:	4613      	mov	r3, r2
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4403      	add	r3, r0
 80049da:	3304      	adds	r3, #4
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4299      	cmp	r1, r3
 80049e0:	d312      	bcc.n	8004a08 <scheduler_run+0xb0>
			{
				// execute task
				schedulerVars.taskList[i].pTask();
 80049e2:	79ba      	ldrb	r2, [r7, #6]
 80049e4:	490d      	ldr	r1, [pc, #52]	@ (8004a1c <scheduler_run+0xc4>)
 80049e6:	4613      	mov	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4798      	blx	r3
				schedulerVars.taskList[i].lastExecutionTime = now;
 80049f4:	79ba      	ldrb	r2, [r7, #6]
 80049f6:	4909      	ldr	r1, [pc, #36]	@ (8004a1c <scheduler_run+0xc4>)
 80049f8:	4613      	mov	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	3308      	adds	r3, #8
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	601a      	str	r2, [r3, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8004a08:	79bb      	ldrb	r3, [r7, #6]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	71bb      	strb	r3, [r7, #6]
 8004a0e:	4b03      	ldr	r3, [pc, #12]	@ (8004a1c <scheduler_run+0xc4>)
 8004a10:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8004a14:	79ba      	ldrb	r2, [r7, #6]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d3cd      	bcc.n	80049b6 <scheduler_run+0x5e>
		for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8004a1a:	e7a2      	b.n	8004962 <scheduler_run+0xa>
 8004a1c:	20000384 	.word	0x20000384

08004a20 <serial_uart_init>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void serial_uart_init(  UART_HandleTypeDef *huart, tCircularBuffer* pCBuff )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
	serialVars.pUart  = huart;
 8004a2a:	4a06      	ldr	r2, [pc, #24]	@ (8004a44 <serial_uart_init+0x24>)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6013      	str	r3, [r2, #0]
	serialVars.pCBuff = pCBuff;
 8004a30:	4a04      	ldr	r2, [pc, #16]	@ (8004a44 <serial_uart_init+0x24>)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6053      	str	r3, [r2, #4]

	return;
 8004a36:	bf00      	nop
}
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000450 	.word	0x20000450

08004a48 <serial_uart_receiveToIdle>:
/*
 * ********************************************
 * 					function
 * ********************************************/
uint8_t serial_uart_receiveToIdle()
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA( serialVars.pUart, serialVars.pRxBuff, RX_BUF_SIZE );
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a78 <serial_uart_receiveToIdle+0x30>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2280      	movs	r2, #128	@ 0x80
 8004a52:	490a      	ldr	r1, [pc, #40]	@ (8004a7c <serial_uart_receiveToIdle+0x34>)
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fb66 	bl	8004126 <HAL_UARTEx_ReceiveToIdle_DMA>

	  // not interested of half transfer interrupt.
	  __HAL_DMA_DISABLE_IT( serialVars.pUart->hdmarx, DMA_IT_HT );
 8004a5a:	4b07      	ldr	r3, [pc, #28]	@ (8004a78 <serial_uart_receiveToIdle+0x30>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b04      	ldr	r3, [pc, #16]	@ (8004a78 <serial_uart_receiveToIdle+0x30>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0204 	bic.w	r2, r2, #4
 8004a70:	601a      	str	r2, [r3, #0]
	return 0;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20000450 	.word	0x20000450
 8004a7c:	20000458 	.word	0x20000458

08004a80 <serial_uart_registerCB>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void serial_uart_registerCB( void (*pCB)(void) )
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	serialVars.pCmdHandlerCB = pCB;
 8004a88:	4a04      	ldr	r2, [pc, #16]	@ (8004a9c <serial_uart_registerCB+0x1c>)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	20000450 	.word	0x20000450

08004aa0 <pushRxToCBuff>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void pushRxToCBuff()
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
	circularBuffer_push( serialVars.pCBuff, serialVars.pRxBuff, serialVars.receivedSize );
 8004aa4:	4b08      	ldr	r3, [pc, #32]	@ (8004ac8 <pushRxToCBuff+0x28>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4a07      	ldr	r2, [pc, #28]	@ (8004ac8 <pushRxToCBuff+0x28>)
 8004aaa:	f892 2088 	ldrb.w	r2, [r2, #136]	@ 0x88
 8004aae:	4907      	ldr	r1, [pc, #28]	@ (8004acc <pushRxToCBuff+0x2c>)
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fbb7 	bl	8004224 <circularBuffer_push>

	// notify cmdhandler about the new data.
	scheduler_runTask( serialVars.pCmdHandlerCB );
 8004ab6:	4b04      	ldr	r3, [pc, #16]	@ (8004ac8 <pushRxToCBuff+0x28>)
 8004ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff ff1d 	bl	80048fc <scheduler_runTask>
	return;
 8004ac2:	bf00      	nop
}
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000450 	.word	0x20000450
 8004acc:	20000458 	.word	0x20000458

08004ad0 <HAL_UARTEx_RxEventCallback>:
/*
 * ********************************************
 * 					function
 * ********************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	807b      	strh	r3, [r7, #2]
	if ( huart->Instance == serialVars.pUart->Instance )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b14 <HAL_UARTEx_RxEventCallback+0x44>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d10f      	bne.n	8004b0a <HAL_UARTEx_RxEventCallback+0x3a>
	{
		// restart receiving data.
		HAL_UARTEx_ReceiveToIdle_DMA( serialVars.pUart, serialVars.pRxBuff, RX_BUF_SIZE );
 8004aea:	4b0a      	ldr	r3, [pc, #40]	@ (8004b14 <HAL_UARTEx_RxEventCallback+0x44>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2280      	movs	r2, #128	@ 0x80
 8004af0:	4909      	ldr	r1, [pc, #36]	@ (8004b18 <HAL_UARTEx_RxEventCallback+0x48>)
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fb17 	bl	8004126 <HAL_UARTEx_ReceiveToIdle_DMA>
		serialVars.receivedSize = Size;
 8004af8:	887b      	ldrh	r3, [r7, #2]
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <HAL_UARTEx_RxEventCallback+0x44>)
 8004afe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

		// move received data from rxBuff to cBuffer out side of the interrupt context.
		scheduler_runTask( pushRxToCBuff );
 8004b02:	4806      	ldr	r0, [pc, #24]	@ (8004b1c <HAL_UARTEx_RxEventCallback+0x4c>)
 8004b04:	f7ff fefa 	bl	80048fc <scheduler_runTask>
	}
	return;
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
}
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000450 	.word	0x20000450
 8004b18:	20000458 	.word	0x20000458
 8004b1c:	08004aa1 	.word	0x08004aa1

08004b20 <memset>:
 8004b20:	4402      	add	r2, r0
 8004b22:	4603      	mov	r3, r0
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d100      	bne.n	8004b2a <memset+0xa>
 8004b28:	4770      	bx	lr
 8004b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b2e:	e7f9      	b.n	8004b24 <memset+0x4>

08004b30 <__libc_init_array>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	4d0d      	ldr	r5, [pc, #52]	@ (8004b68 <__libc_init_array+0x38>)
 8004b34:	4c0d      	ldr	r4, [pc, #52]	@ (8004b6c <__libc_init_array+0x3c>)
 8004b36:	1b64      	subs	r4, r4, r5
 8004b38:	10a4      	asrs	r4, r4, #2
 8004b3a:	2600      	movs	r6, #0
 8004b3c:	42a6      	cmp	r6, r4
 8004b3e:	d109      	bne.n	8004b54 <__libc_init_array+0x24>
 8004b40:	4d0b      	ldr	r5, [pc, #44]	@ (8004b70 <__libc_init_array+0x40>)
 8004b42:	4c0c      	ldr	r4, [pc, #48]	@ (8004b74 <__libc_init_array+0x44>)
 8004b44:	f000 f826 	bl	8004b94 <_init>
 8004b48:	1b64      	subs	r4, r4, r5
 8004b4a:	10a4      	asrs	r4, r4, #2
 8004b4c:	2600      	movs	r6, #0
 8004b4e:	42a6      	cmp	r6, r4
 8004b50:	d105      	bne.n	8004b5e <__libc_init_array+0x2e>
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b58:	4798      	blx	r3
 8004b5a:	3601      	adds	r6, #1
 8004b5c:	e7ee      	b.n	8004b3c <__libc_init_array+0xc>
 8004b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b62:	4798      	blx	r3
 8004b64:	3601      	adds	r6, #1
 8004b66:	e7f2      	b.n	8004b4e <__libc_init_array+0x1e>
 8004b68:	08004bf4 	.word	0x08004bf4
 8004b6c:	08004bf4 	.word	0x08004bf4
 8004b70:	08004bf4 	.word	0x08004bf4
 8004b74:	08004bf8 	.word	0x08004bf8

08004b78 <memcpy>:
 8004b78:	440a      	add	r2, r1
 8004b7a:	4291      	cmp	r1, r2
 8004b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b80:	d100      	bne.n	8004b84 <memcpy+0xc>
 8004b82:	4770      	bx	lr
 8004b84:	b510      	push	{r4, lr}
 8004b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b8e:	4291      	cmp	r1, r2
 8004b90:	d1f9      	bne.n	8004b86 <memcpy+0xe>
 8004b92:	bd10      	pop	{r4, pc}

08004b94 <_init>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr

08004ba0 <_fini>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	bf00      	nop
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr

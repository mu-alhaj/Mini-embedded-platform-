
Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004080  08004080  00005080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b8  080040b8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080040b8  080040b8  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040b8  080040b8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040b8  080040b8  000050b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040bc  080040bc  000050bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080040c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000001d0  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b207  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f55  00000000  00000000  00011243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  00013198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000610  00000000  00000000  000139a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002014c  00000000  00000000  00013fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf83  00000000  00000000  000340fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfbf5  00000000  00000000  0004107f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100c74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e30  00000000  00000000  00100cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00102ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004068 	.word	0x08004068

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004068 	.word	0x08004068

080001d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001da:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <MX_DMA_Init+0x38>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a0b      	ldr	r2, [pc, #44]	@ (800020c <MX_DMA_Init+0x38>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6153      	str	r3, [r2, #20]
 80001e6:	4b09      	ldr	r3, [pc, #36]	@ (800020c <MX_DMA_Init+0x38>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2100      	movs	r1, #0
 80001f6:	2010      	movs	r0, #16
 80001f8:	f000 fbf1 	bl	80009de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80001fc:	2010      	movs	r0, #16
 80001fe:	f000 fc0a 	bl	8000a16 <HAL_NVIC_EnableIRQ>

}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40021000 	.word	0x40021000

08000210 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b08a      	sub	sp, #40	@ 0x28
 8000214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000226:	4b4b      	ldr	r3, [pc, #300]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a4a      	ldr	r2, [pc, #296]	@ (8000354 <MX_GPIO_Init+0x144>)
 800022c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b48      	ldr	r3, [pc, #288]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800023a:	613b      	str	r3, [r7, #16]
 800023c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800023e:	4b45      	ldr	r3, [pc, #276]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a44      	ldr	r2, [pc, #272]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000244:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b42      	ldr	r3, [pc, #264]	@ (8000354 <MX_GPIO_Init+0x144>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000256:	4b3f      	ldr	r3, [pc, #252]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	4a3e      	ldr	r2, [pc, #248]	@ (8000354 <MX_GPIO_Init+0x144>)
 800025c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000260:	6153      	str	r3, [r2, #20]
 8000262:	4b3c      	ldr	r3, [pc, #240]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800026a:	60bb      	str	r3, [r7, #8]
 800026c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	4b39      	ldr	r3, [pc, #228]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a38      	ldr	r2, [pc, #224]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000278:	6153      	str	r3, [r2, #20]
 800027a:	4b36      	ldr	r3, [pc, #216]	@ (8000354 <MX_GPIO_Init+0x144>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000282:	607b      	str	r3, [r7, #4]
 8000284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000286:	4b33      	ldr	r3, [pc, #204]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a32      	ldr	r2, [pc, #200]	@ (8000354 <MX_GPIO_Init+0x144>)
 800028c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b30      	ldr	r3, [pc, #192]	@ (8000354 <MX_GPIO_Init+0x144>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2120      	movs	r1, #32
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f000 ff89 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80002b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	4619      	mov	r1, r3
 80002c0:	4825      	ldr	r0, [pc, #148]	@ (8000358 <MX_GPIO_Init+0x148>)
 80002c2:	f000 fdf1 	bl	8000ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002c6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80002ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002cc:	2303      	movs	r3, #3
 80002ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	4619      	mov	r1, r3
 80002da:	481f      	ldr	r0, [pc, #124]	@ (8000358 <MX_GPIO_Init+0x148>)
 80002dc:	f000 fde4 	bl	8000ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80002e0:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 80002e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e6:	2303      	movs	r3, #3
 80002e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4619      	mov	r1, r3
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f8:	f000 fdd6 	bl	8000ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002fc:	2320      	movs	r3, #32
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000300:	2301      	movs	r3, #1
 8000302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	2300      	movs	r3, #0
 8000306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000308:	2300      	movs	r3, #0
 800030a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	4619      	mov	r1, r3
 8000312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000316:	f000 fdc7 	bl	8000ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800031a:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 800031e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000320:	2303      	movs	r3, #3
 8000322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	4619      	mov	r1, r3
 800032e:	480b      	ldr	r0, [pc, #44]	@ (800035c <MX_GPIO_Init+0x14c>)
 8000330:	f000 fdba 	bl	8000ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000334:	2304      	movs	r3, #4
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000338:	2303      	movs	r3, #3
 800033a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	4619      	mov	r1, r3
 8000346:	4806      	ldr	r0, [pc, #24]	@ (8000360 <MX_GPIO_Init+0x150>)
 8000348:	f000 fdae 	bl	8000ea8 <HAL_GPIO_Init>

}
 800034c:	bf00      	nop
 800034e:	3728      	adds	r7, #40	@ 0x28
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000
 8000358:	48000800 	.word	0x48000800
 800035c:	48000400 	.word	0x48000400
 8000360:	48000c00 	.word	0x48000c00

08000364 <toggleLed>:
uint8_t data_written = 0;
uint8_t data_size = 0;
uint32_t flash_at = APP_START_ADD;

void toggleLed()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000368:	2120      	movs	r1, #32
 800036a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800036e:	f000 ff3d 	bl	80011ec <HAL_GPIO_TogglePin>
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	807b      	strh	r3, [r7, #2]
	if ( huart->Instance == USART2 )
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a07      	ldr	r2, [pc, #28]	@ (80003a8 <HAL_UARTEx_RxEventCallback+0x30>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d107      	bne.n	800039e <HAL_UARTEx_RxEventCallback+0x26>
	{
		scheduler_runTask( toggleLed );
 800038e:	4807      	ldr	r0, [pc, #28]	@ (80003ac <HAL_UARTEx_RxEventCallback+0x34>)
 8000390:	f003 fdb0 	bl	8003ef4 <scheduler_runTask>
		// restart receiving data.
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart_dma_rxBuf, RX_BUF_SIZE);
 8000394:	2240      	movs	r2, #64	@ 0x40
 8000396:	4906      	ldr	r1, [pc, #24]	@ (80003b0 <HAL_UARTEx_RxEventCallback+0x38>)
 8000398:	4806      	ldr	r0, [pc, #24]	@ (80003b4 <HAL_UARTEx_RxEventCallback+0x3c>)
 800039a:	f003 fd20 	bl	8003dde <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40004400 	.word	0x40004400
 80003ac:	08000365 	.word	0x08000365
 80003b0:	20000028 	.word	0x20000028
 80003b4:	20000068 	.word	0x20000068

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f000 f9ce 	bl	800075c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f820 	bl	8000404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f7ff ff24 	bl	8000210 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c8:	f7ff ff04 	bl	80001d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80003cc:	f000 f8f8 	bl	80005c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA( &huart2, uart_dma_rxBuf, RX_BUF_SIZE );
 80003d0:	2240      	movs	r2, #64	@ 0x40
 80003d2:	490a      	ldr	r1, [pc, #40]	@ (80003fc <main+0x44>)
 80003d4:	480a      	ldr	r0, [pc, #40]	@ (8000400 <main+0x48>)
 80003d6:	f003 fd02 	bl	8003dde <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT( huart2.hdmarx, DMA_IT_HT );	// not interested of half transfer interrupt.
 80003da:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <main+0x48>)
 80003dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <main+0x48>)
 80003e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f022 0204 	bic.w	r2, r2, #4
 80003ec:	601a      	str	r2, [r3, #0]

  scheduler_init();
 80003ee:	f003 fd4b 	bl	8003e88 <scheduler_init>
  scheduler_run();
 80003f2:	f003 fdad 	bl	8003f50 <scheduler_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f6:	bf00      	nop
 80003f8:	e7fd      	b.n	80003f6 <main+0x3e>
 80003fa:	bf00      	nop
 80003fc:	20000028 	.word	0x20000028
 8000400:	20000068 	.word	0x20000068

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b0a6      	sub	sp, #152	@ 0x98
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800040e:	2228      	movs	r2, #40	@ 0x28
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f003 fdfc 	bl	8004010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]
 8000424:	60da      	str	r2, [r3, #12]
 8000426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2258      	movs	r2, #88	@ 0x58
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f003 fdee 	bl	8004010 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000434:	2302      	movs	r3, #2
 8000436:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000438:	2301      	movs	r3, #1
 800043a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043c:	2310      	movs	r3, #16
 800043e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000448:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800044c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000450:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000454:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fedc 	bl	8001220 <HAL_RCC_OscConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800046e:	f000 f827 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000472:	230f      	movs	r3, #15
 8000474:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000476:	2302      	movs	r3, #2
 8000478:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800047e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000482:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000488:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800048c:	2102      	movs	r1, #2
 800048e:	4618      	mov	r0, r3
 8000490:	f001 ff1a 	bl	80022c8 <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800049a:	f000 f811 	bl	80004c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800049e:	2302      	movs	r3, #2
 80004a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4618      	mov	r0, r3
 80004aa:	f002 f92d 	bl	8002708 <HAL_RCCEx_PeriphCLKConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004b4:	f000 f804 	bl	80004c0 <Error_Handler>
  }
}
 80004b8:	bf00      	nop
 80004ba:	3798      	adds	r7, #152	@ 0x98
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <Error_Handler+0x8>

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <HAL_MspInit+0x44>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <HAL_MspInit+0x44>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <HAL_MspInit+0x44>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <HAL_MspInit+0x44>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a08      	ldr	r2, [pc, #32]	@ (8000510 <HAL_MspInit+0x44>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <HAL_MspInit+0x44>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000502:	2007      	movs	r0, #7
 8000504:	f000 fa60 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000

08000514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <NMI_Handler+0x4>

0800051c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <HardFault_Handler+0x4>

08000524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <MemManage_Handler+0x4>

0800052c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <UsageFault_Handler+0x4>

0800053c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056a:	f000 f93d 	bl	80007e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000578:	4802      	ldr	r0, [pc, #8]	@ (8000584 <DMA1_Channel6_IRQHandler+0x10>)
 800057a:	f000 fb88 	bl	8000c8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000f0 	.word	0x200000f0

08000588 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800058c:	4802      	ldr	r0, [pc, #8]	@ (8000598 <USART2_IRQHandler+0x10>)
 800058e:	f002 fb27 	bl	8002be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000068 	.word	0x20000068

0800059c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <SystemInit+0x20>)
 80005a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005a6:	4a05      	ldr	r2, [pc, #20]	@ (80005bc <SystemInit+0x20>)
 80005a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c4:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005c6:	4a15      	ldr	r2, [pc, #84]	@ (800061c <MX_USART2_UART_Init+0x5c>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ca:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 8000604:	f002 fa9e 	bl	8002b44 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800060e:	f7ff ff57 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000068 	.word	0x20000068
 800061c:	40004400 	.word	0x40004400

08000620 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	@ 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a2e      	ldr	r2, [pc, #184]	@ (80006f8 <HAL_UART_MspInit+0xd8>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d156      	bne.n	80006f0 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000642:	4b2e      	ldr	r3, [pc, #184]	@ (80006fc <HAL_UART_MspInit+0xdc>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a2d      	ldr	r2, [pc, #180]	@ (80006fc <HAL_UART_MspInit+0xdc>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <HAL_UART_MspInit+0xdc>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <HAL_UART_MspInit+0xdc>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a27      	ldr	r2, [pc, #156]	@ (80006fc <HAL_UART_MspInit+0xdc>)
 8000660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <HAL_UART_MspInit+0xdc>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000672:	230c      	movs	r3, #12
 8000674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	2302      	movs	r3, #2
 8000678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000682:	2307      	movs	r3, #7
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000690:	f000 fc0a 	bl	8000ea8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <HAL_UART_MspInit+0xe0>)
 8000696:	4a1b      	ldr	r2, [pc, #108]	@ (8000704 <HAL_UART_MspInit+0xe4>)
 8000698:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069a:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <HAL_UART_MspInit+0xe0>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <HAL_UART_MspInit+0xe0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <HAL_UART_MspInit+0xe0>)
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <HAL_UART_MspInit+0xe0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <HAL_UART_MspInit+0xe0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <HAL_UART_MspInit+0xe0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <HAL_UART_MspInit+0xe0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80006c4:	480e      	ldr	r0, [pc, #56]	@ (8000700 <HAL_UART_MspInit+0xe0>)
 80006c6:	f000 f9c0 	bl	8000a4a <HAL_DMA_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80006d0:	f7ff fef6 	bl	80004c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000700 <HAL_UART_MspInit+0xe0>)
 80006d8:	675a      	str	r2, [r3, #116]	@ 0x74
 80006da:	4a09      	ldr	r2, [pc, #36]	@ (8000700 <HAL_UART_MspInit+0xe0>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2026      	movs	r0, #38	@ 0x26
 80006e6:	f000 f97a 	bl	80009de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006ea:	2026      	movs	r0, #38	@ 0x26
 80006ec:	f000 f993 	bl	8000a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3728      	adds	r7, #40	@ 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40004400 	.word	0x40004400
 80006fc:	40021000 	.word	0x40021000
 8000700:	200000f0 	.word	0x200000f0
 8000704:	4002006c 	.word	0x4002006c

08000708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000740 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800070c:	f7ff ff46 	bl	800059c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <LoopForever+0x6>)
  ldr r1, =_edata
 8000712:	490d      	ldr	r1, [pc, #52]	@ (8000748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000714:	4a0d      	ldr	r2, [pc, #52]	@ (800074c <LoopForever+0xe>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000718:	e002      	b.n	8000720 <LoopCopyDataInit>

0800071a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800071c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071e:	3304      	adds	r3, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000724:	d3f9      	bcc.n	800071a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000726:	4a0a      	ldr	r2, [pc, #40]	@ (8000750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000728:	4c0a      	ldr	r4, [pc, #40]	@ (8000754 <LoopForever+0x16>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800072c:	e001      	b.n	8000732 <LoopFillZerobss>

0800072e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000730:	3204      	adds	r2, #4

08000732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000734:	d3fb      	bcc.n	800072e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000736:	f003 fc73 	bl	8004020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800073a:	f7ff fe3d 	bl	80003b8 <main>

0800073e <LoopForever>:

LoopForever:
    b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000740:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800074c:	080040c0 	.word	0x080040c0
  ldr r2, =_sbss
 8000750:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000754:	200001dc 	.word	0x200001dc

08000758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_2_IRQHandler>
	...

0800075c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <HAL_Init+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <HAL_Init+0x28>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f92b 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000772:	2000      	movs	r0, #0
 8000774:	f000 f808 	bl	8000788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000778:	f7ff fea8 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40022000 	.word	0x40022000

08000788 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <HAL_InitTick+0x54>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <HAL_InitTick+0x58>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079e:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f943 	bl	8000a32 <HAL_SYSTICK_Config>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00e      	b.n	80007d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d80a      	bhi.n	80007d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f000 f90b 	bl	80009de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c8:	4a06      	ldr	r2, [pc, #24]	@ (80007e4 <HAL_InitTick+0x5c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e000      	b.n	80007d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000004 	.word	0x20000004

080007e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_IncTick+0x20>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HAL_IncTick+0x24>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	4a04      	ldr	r2, [pc, #16]	@ (800080c <HAL_IncTick+0x24>)
 80007fa:	6013      	str	r3, [r2, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000008 	.word	0x20000008
 800080c:	20000134 	.word	0x20000134

08000810 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;  
 8000814:	4b03      	ldr	r3, [pc, #12]	@ (8000824 <HAL_GetTick+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000134 	.word	0x20000134

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	@ (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4907      	ldr	r1, [pc, #28]	@ (80008c4 <__NVIC_EnableIRQ+0x38>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	@ (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	@ (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	@ 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	@ 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000994:	d301      	bcc.n	800099a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000996:	2301      	movs	r3, #1
 8000998:	e00f      	b.n	80009ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <SysTick_Config+0x40>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a2:	210f      	movs	r1, #15
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f7ff ff8e 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ac:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <SysTick_Config+0x40>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b2:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <SysTick_Config+0x40>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	e000e010 	.word	0xe000e010

080009c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff29 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f0:	f7ff ff3e 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	6978      	ldr	r0, [r7, #20]
 80009fc:	f7ff ff8e 	bl	800091c <NVIC_EncodePriority>
 8000a00:	4602      	mov	r2, r0
 8000a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff5d 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff31 	bl	800088c <__NVIC_EnableIRQ>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffa2 	bl	8000984 <SysTick_Config>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d101      	bne.n	8000a60 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e037      	b.n	8000ad0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2202      	movs	r2, #2
 8000a64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000a76:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000a7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f9bc 	bl	8000e30 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d101      	bne.n	8000af8 <HAL_DMA_Start_IT+0x20>
 8000af4:	2302      	movs	r3, #2
 8000af6:	e04a      	b.n	8000b8e <HAL_DMA_Start_IT+0xb6>
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2201      	movs	r2, #1
 8000afc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d13a      	bne.n	8000b80 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2200      	movs	r2, #0
 8000b16:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f022 0201 	bic.w	r2, r2, #1
 8000b26:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f000 f950 	bl	8000dd4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d008      	beq.n	8000b4e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f042 020e 	orr.w	r2, r2, #14
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	e00f      	b.n	8000b6e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f042 020a 	orr.w	r2, r2, #10
 8000b5c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 0204 	bic.w	r2, r2, #4
 8000b6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f042 0201 	orr.w	r2, r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e005      	b.n	8000b8c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e02e      	b.n	8000c06 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d008      	beq.n	8000bc4 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e020      	b.n	8000c06 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 020e 	bic.w	r2, r2, #14
 8000bd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0201 	bic.w	r2, r2, #1
 8000be2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bec:	2101      	movs	r1, #1
 8000bee:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d005      	beq.n	8000c34 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]
 8000c32:	e027      	b.n	8000c84 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 020e 	bic.w	r2, r2, #14
 8000c42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 0201 	bic.w	r2, r2, #1
 8000c52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c62:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2201      	movs	r2, #1
 8000c68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	4798      	blx	r3
    }
  }
  return status;
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b084      	sub	sp, #16
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	2204      	movs	r2, #4
 8000cac:	409a      	lsls	r2, r3
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d024      	beq.n	8000d00 <HAL_DMA_IRQHandler+0x72>
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d01f      	beq.n	8000d00 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0320 	and.w	r3, r3, #32
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d107      	bne.n	8000cde <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 0204 	bic.w	r2, r2, #4
 8000cdc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d06a      	beq.n	8000dcc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000cfe:	e065      	b.n	8000dcc <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d04:	2202      	movs	r2, #2
 8000d06:	409a      	lsls	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d02c      	beq.n	8000d6a <HAL_DMA_IRQHandler+0xdc>
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d027      	beq.n	8000d6a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0320 	and.w	r3, r3, #32
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10b      	bne.n	8000d40 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 020a 	bic.w	r2, r2, #10
 8000d36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d48:	2102      	movs	r1, #2
 8000d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d035      	beq.n	8000dcc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d68:	e030      	b.n	8000dcc <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	2208      	movs	r2, #8
 8000d70:	409a      	lsls	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d028      	beq.n	8000dcc <HAL_DMA_IRQHandler+0x13e>
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d023      	beq.n	8000dcc <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 020e 	bic.w	r2, r2, #14
 8000d92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000da2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2201      	movs	r2, #1
 8000da8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d004      	beq.n	8000dcc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	4798      	blx	r3
    }
  }
}
 8000dca:	e7ff      	b.n	8000dcc <HAL_DMA_IRQHandler+0x13e>
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dea:	2101      	movs	r1, #1
 8000dec:	fa01 f202 	lsl.w	r2, r1, r2
 8000df0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b10      	cmp	r3, #16
 8000e00:	d108      	bne.n	8000e14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e12:	e007      	b.n	8000e24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	60da      	str	r2, [r3, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <DMA_CalcBaseAndBitshift+0x60>)
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d80f      	bhi.n	8000e64 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <DMA_CalcBaseAndBitshift+0x64>)
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <DMA_CalcBaseAndBitshift+0x68>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	009a      	lsls	r2, r3, #2
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e9c <DMA_CalcBaseAndBitshift+0x6c>)
 8000e60:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000e62:	e00e      	b.n	8000e82 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <DMA_CalcBaseAndBitshift+0x70>)
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <DMA_CalcBaseAndBitshift+0x68>)
 8000e70:	fba2 2303 	umull	r2, r3, r2, r3
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	009a      	lsls	r2, r3, #2
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ea4 <DMA_CalcBaseAndBitshift+0x74>)
 8000e80:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40020407 	.word	0x40020407
 8000e94:	bffdfff8 	.word	0xbffdfff8
 8000e98:	cccccccd 	.word	0xcccccccd
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	bffdfbf8 	.word	0xbffdfbf8
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e160      	b.n	800117a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8152 	beq.w	8001174 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_GPIO_Init+0x40>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	f003 0201 	and.w	r2, r3, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d017      	beq.n	8000f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d123      	bne.n	8000fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	6939      	ldr	r1, [r7, #16]
 8000fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0203 	and.w	r2, r3, #3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 80ac 	beq.w	8001174 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	4b5e      	ldr	r3, [pc, #376]	@ (8001198 <HAL_GPIO_Init+0x2f0>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a5d      	ldr	r2, [pc, #372]	@ (8001198 <HAL_GPIO_Init+0x2f0>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b5b      	ldr	r3, [pc, #364]	@ (8001198 <HAL_GPIO_Init+0x2f0>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001034:	4a59      	ldr	r2, [pc, #356]	@ (800119c <HAL_GPIO_Init+0x2f4>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800105e:	d025      	beq.n	80010ac <HAL_GPIO_Init+0x204>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a4f      	ldr	r2, [pc, #316]	@ (80011a0 <HAL_GPIO_Init+0x2f8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d01f      	beq.n	80010a8 <HAL_GPIO_Init+0x200>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a4e      	ldr	r2, [pc, #312]	@ (80011a4 <HAL_GPIO_Init+0x2fc>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d019      	beq.n	80010a4 <HAL_GPIO_Init+0x1fc>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a4d      	ldr	r2, [pc, #308]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d013      	beq.n	80010a0 <HAL_GPIO_Init+0x1f8>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a4c      	ldr	r2, [pc, #304]	@ (80011ac <HAL_GPIO_Init+0x304>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d00d      	beq.n	800109c <HAL_GPIO_Init+0x1f4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a4b      	ldr	r2, [pc, #300]	@ (80011b0 <HAL_GPIO_Init+0x308>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d007      	beq.n	8001098 <HAL_GPIO_Init+0x1f0>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a4a      	ldr	r2, [pc, #296]	@ (80011b4 <HAL_GPIO_Init+0x30c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d101      	bne.n	8001094 <HAL_GPIO_Init+0x1ec>
 8001090:	2306      	movs	r3, #6
 8001092:	e00c      	b.n	80010ae <HAL_GPIO_Init+0x206>
 8001094:	2307      	movs	r3, #7
 8001096:	e00a      	b.n	80010ae <HAL_GPIO_Init+0x206>
 8001098:	2305      	movs	r3, #5
 800109a:	e008      	b.n	80010ae <HAL_GPIO_Init+0x206>
 800109c:	2304      	movs	r3, #4
 800109e:	e006      	b.n	80010ae <HAL_GPIO_Init+0x206>
 80010a0:	2303      	movs	r3, #3
 80010a2:	e004      	b.n	80010ae <HAL_GPIO_Init+0x206>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e002      	b.n	80010ae <HAL_GPIO_Init+0x206>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_GPIO_Init+0x206>
 80010ac:	2300      	movs	r3, #0
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	f002 0203 	and.w	r2, r2, #3
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4093      	lsls	r3, r2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010be:	4937      	ldr	r1, [pc, #220]	@ (800119c <HAL_GPIO_Init+0x2f4>)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010cc:	4b3a      	ldr	r3, [pc, #232]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010f0:	4a31      	ldr	r2, [pc, #196]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f6:	4b30      	ldr	r3, [pc, #192]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800111a:	4a27      	ldr	r2, [pc, #156]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114a:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800116e:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	f47f ae97 	bne.w	8000eb8 <HAL_GPIO_Init+0x10>
  }
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000c00 	.word	0x48000c00
 80011ac:	48001000 	.word	0x48001000
 80011b0:	48001400 	.word	0x48001400
 80011b4:	48001800 	.word	0x48001800
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4013      	ands	r3, r2
 8001204:	041a      	lsls	r2, r3, #16
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43d9      	mvns	r1, r3
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	400b      	ands	r3, r1
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	619a      	str	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001226:	af00      	add	r7, sp, #0
 8001228:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800122c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001230:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001232:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001236:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	f001 b83a 	b.w	80022ba <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800124a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 816f 	beq.w	800153a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800125c:	4bb5      	ldr	r3, [pc, #724]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	2b04      	cmp	r3, #4
 8001266:	d00c      	beq.n	8001282 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001268:	4bb2      	ldr	r3, [pc, #712]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b08      	cmp	r3, #8
 8001272:	d15c      	bne.n	800132e <HAL_RCC_OscConfig+0x10e>
 8001274:	4baf      	ldr	r3, [pc, #700]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800127c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001280:	d155      	bne.n	800132e <HAL_RCC_OscConfig+0x10e>
 8001282:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001286:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001296:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129a:	fab3 f383 	clz	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	095b      	lsrs	r3, r3, #5
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d102      	bne.n	80012b4 <HAL_RCC_OscConfig+0x94>
 80012ae:	4ba1      	ldr	r3, [pc, #644]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	e015      	b.n	80012e0 <HAL_RCC_OscConfig+0xc0>
 80012b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012b8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80012c0:	fa93 f3a3 	rbit	r3, r3
 80012c4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80012c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012cc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80012d0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80012d4:	fa93 f3a3 	rbit	r3, r3
 80012d8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80012dc:	4b95      	ldr	r3, [pc, #596]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 80012de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012e4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80012e8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80012ec:	fa92 f2a2 	rbit	r2, r2
 80012f0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80012f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80012f8:	fab2 f282 	clz	r2, r2
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	f042 0220 	orr.w	r2, r2, #32
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	f002 021f 	and.w	r2, r2, #31
 8001308:	2101      	movs	r1, #1
 800130a:	fa01 f202 	lsl.w	r2, r1, r2
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8111 	beq.w	8001538 <HAL_RCC_OscConfig+0x318>
 8001316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800131a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 8108 	bne.w	8001538 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	f000 bfc6 	b.w	80022ba <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001332:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800133e:	d106      	bne.n	800134e <HAL_RCC_OscConfig+0x12e>
 8001340:	4b7c      	ldr	r3, [pc, #496]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a7b      	ldr	r2, [pc, #492]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 8001346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	e036      	b.n	80013bc <HAL_RCC_OscConfig+0x19c>
 800134e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001352:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x158>
 800135e:	4b75      	ldr	r3, [pc, #468]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a74      	ldr	r2, [pc, #464]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 8001364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b72      	ldr	r3, [pc, #456]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a71      	ldr	r2, [pc, #452]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 8001370:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e021      	b.n	80013bc <HAL_RCC_OscConfig+0x19c>
 8001378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800137c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x184>
 800138a:	4b6a      	ldr	r3, [pc, #424]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a69      	ldr	r2, [pc, #420]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 8001390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b67      	ldr	r3, [pc, #412]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a66      	ldr	r2, [pc, #408]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0x19c>
 80013a4:	4b63      	ldr	r3, [pc, #396]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a62      	ldr	r2, [pc, #392]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 80013aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b60      	ldr	r3, [pc, #384]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a5f      	ldr	r2, [pc, #380]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 80013b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ba:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d059      	beq.n	8001480 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fa20 	bl	8000810 <HAL_GetTick>
 80013d0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d4:	e00a      	b.n	80013ec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d6:	f7ff fa1b 	bl	8000810 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	@ 0x64
 80013e4:	d902      	bls.n	80013ec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	f000 bf67 	b.w	80022ba <HAL_RCC_OscConfig+0x109a>
 80013ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013f0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80013f8:	fa93 f3a3 	rbit	r3, r3
 80013fc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001400:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001404:	fab3 f383 	clz	r3, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d102      	bne.n	800141e <HAL_RCC_OscConfig+0x1fe>
 8001418:	4b46      	ldr	r3, [pc, #280]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	e015      	b.n	800144a <HAL_RCC_OscConfig+0x22a>
 800141e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001422:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001432:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001436:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800143a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001446:	4b3b      	ldr	r3, [pc, #236]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 8001448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800144e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001452:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001456:	fa92 f2a2 	rbit	r2, r2
 800145a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800145e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001462:	fab2 f282 	clz	r2, r2
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	f042 0220 	orr.w	r2, r2, #32
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	f002 021f 	and.w	r2, r2, #31
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f202 	lsl.w	r2, r1, r2
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0ab      	beq.n	80013d6 <HAL_RCC_OscConfig+0x1b6>
 800147e:	e05c      	b.n	800153a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff f9c6 	bl	8000810 <HAL_GetTick>
 8001484:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148a:	f7ff f9c1 	bl	8000810 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	@ 0x64
 8001498:	d902      	bls.n	80014a0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	f000 bf0d 	b.w	80022ba <HAL_RCC_OscConfig+0x109a>
 80014a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014a4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80014ac:	fa93 f3a3 	rbit	r3, r3
 80014b0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80014b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b8:	fab3 f383 	clz	r3, r3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <HAL_RCC_OscConfig+0x2b2>
 80014cc:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	e015      	b.n	80014fe <HAL_RCC_OscConfig+0x2de>
 80014d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014d6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80014de:	fa93 f3a3 	rbit	r3, r3
 80014e2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80014e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014ea:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80014ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_RCC_OscConfig+0x314>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001502:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001506:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800150a:	fa92 f2a2 	rbit	r2, r2
 800150e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001512:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001516:	fab2 f282 	clz	r2, r2
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	f042 0220 	orr.w	r2, r2, #32
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	f002 021f 	and.w	r2, r2, #31
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ab      	bne.n	800148a <HAL_RCC_OscConfig+0x26a>
 8001532:	e002      	b.n	800153a <HAL_RCC_OscConfig+0x31a>
 8001534:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800153e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 817f 	beq.w	800184e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001550:	4ba7      	ldr	r3, [pc, #668]	@ (80017f0 <HAL_RCC_OscConfig+0x5d0>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00c      	beq.n	8001576 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800155c:	4ba4      	ldr	r3, [pc, #656]	@ (80017f0 <HAL_RCC_OscConfig+0x5d0>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d173      	bne.n	8001650 <HAL_RCC_OscConfig+0x430>
 8001568:	4ba1      	ldr	r3, [pc, #644]	@ (80017f0 <HAL_RCC_OscConfig+0x5d0>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001570:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001574:	d16c      	bne.n	8001650 <HAL_RCC_OscConfig+0x430>
 8001576:	2302      	movs	r3, #2
 8001578:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001580:	fa93 f3a3 	rbit	r3, r3
 8001584:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001588:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d102      	bne.n	80015a6 <HAL_RCC_OscConfig+0x386>
 80015a0:	4b93      	ldr	r3, [pc, #588]	@ (80017f0 <HAL_RCC_OscConfig+0x5d0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	e013      	b.n	80015ce <HAL_RCC_OscConfig+0x3ae>
 80015a6:	2302      	movs	r3, #2
 80015a8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80015b0:	fa93 f3a3 	rbit	r3, r3
 80015b4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80015b8:	2302      	movs	r3, #2
 80015ba:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80015be:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80015ca:	4b89      	ldr	r3, [pc, #548]	@ (80017f0 <HAL_RCC_OscConfig+0x5d0>)
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	2202      	movs	r2, #2
 80015d0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80015d4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80015d8:	fa92 f2a2 	rbit	r2, r2
 80015dc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80015e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80015e4:	fab2 f282 	clz	r2, r2
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f042 0220 	orr.w	r2, r2, #32
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	f002 021f 	and.w	r2, r2, #31
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00a      	beq.n	8001616 <HAL_RCC_OscConfig+0x3f6>
 8001600:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001604:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d002      	beq.n	8001616 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	f000 be52 	b.w	80022ba <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b76      	ldr	r3, [pc, #472]	@ (80017f0 <HAL_RCC_OscConfig+0x5d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800161e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001622:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	21f8      	movs	r1, #248	@ 0xf8
 800162c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001634:	fa91 f1a1 	rbit	r1, r1
 8001638:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800163c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001640:	fab1 f181 	clz	r1, r1
 8001644:	b2c9      	uxtb	r1, r1
 8001646:	408b      	lsls	r3, r1
 8001648:	4969      	ldr	r1, [pc, #420]	@ (80017f0 <HAL_RCC_OscConfig+0x5d0>)
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	e0fe      	b.n	800184e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001650:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001654:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 8088 	beq.w	8001772 <HAL_RCC_OscConfig+0x552>
 8001662:	2301      	movs	r3, #1
 8001664:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001674:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001682:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	461a      	mov	r2, r3
 800168a:	2301      	movs	r3, #1
 800168c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff f8bf 	bl	8000810 <HAL_GetTick>
 8001692:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	e00a      	b.n	80016ae <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001698:	f7ff f8ba 	bl	8000810 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d902      	bls.n	80016ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	f000 be06 	b.w	80022ba <HAL_RCC_OscConfig+0x109a>
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80016c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	fab3 f383 	clz	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <HAL_RCC_OscConfig+0x4be>
 80016d8:	4b45      	ldr	r3, [pc, #276]	@ (80017f0 <HAL_RCC_OscConfig+0x5d0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	e013      	b.n	8001706 <HAL_RCC_OscConfig+0x4e6>
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80016f0:	2302      	movs	r3, #2
 80016f2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80016f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <HAL_RCC_OscConfig+0x5d0>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	2202      	movs	r2, #2
 8001708:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800170c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001710:	fa92 f2a2 	rbit	r2, r2
 8001714:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001718:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800171c:	fab2 f282 	clz	r2, r2
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	f042 0220 	orr.w	r2, r2, #32
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	f002 021f 	and.w	r2, r2, #31
 800172c:	2101      	movs	r1, #1
 800172e:	fa01 f202 	lsl.w	r2, r1, r2
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0af      	beq.n	8001698 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <HAL_RCC_OscConfig+0x5d0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001744:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	21f8      	movs	r1, #248	@ 0xf8
 800174e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001756:	fa91 f1a1 	rbit	r1, r1
 800175a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800175e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001762:	fab1 f181 	clz	r1, r1
 8001766:	b2c9      	uxtb	r1, r1
 8001768:	408b      	lsls	r3, r1
 800176a:	4921      	ldr	r1, [pc, #132]	@ (80017f0 <HAL_RCC_OscConfig+0x5d0>)
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
 8001770:	e06d      	b.n	800184e <HAL_RCC_OscConfig+0x62e>
 8001772:	2301      	movs	r3, #1
 8001774:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001784:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001792:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	461a      	mov	r2, r3
 800179a:	2300      	movs	r3, #0
 800179c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff f837 	bl	8000810 <HAL_GetTick>
 80017a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff f832 	bl	8000810 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d902      	bls.n	80017be <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	f000 bd7e 	b.w	80022ba <HAL_RCC_OscConfig+0x109a>
 80017be:	2302      	movs	r3, #2
 80017c0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80017d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_RCC_OscConfig+0x5d4>
 80017e8:	4b01      	ldr	r3, [pc, #4]	@ (80017f0 <HAL_RCC_OscConfig+0x5d0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	e016      	b.n	800181c <HAL_RCC_OscConfig+0x5fc>
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800180c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001818:	4bbf      	ldr	r3, [pc, #764]	@ (8001b18 <HAL_RCC_OscConfig+0x8f8>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	2202      	movs	r2, #2
 800181e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001822:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001826:	fa92 f2a2 	rbit	r2, r2
 800182a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800182e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001832:	fab2 f282 	clz	r2, r2
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	f042 0220 	orr.w	r2, r2, #32
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	f002 021f 	and.w	r2, r2, #31
 8001842:	2101      	movs	r1, #1
 8001844:	fa01 f202 	lsl.w	r2, r1, r2
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ac      	bne.n	80017a8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001852:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8113 	beq.w	8001a8a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001868:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d07c      	beq.n	800196e <HAL_RCC_OscConfig+0x74e>
 8001874:	2301      	movs	r3, #1
 8001876:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001886:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	4ba2      	ldr	r3, [pc, #648]	@ (8001b1c <HAL_RCC_OscConfig+0x8fc>)
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	461a      	mov	r2, r3
 800189a:	2301      	movs	r3, #1
 800189c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7fe ffb7 	bl	8000810 <HAL_GetTick>
 80018a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e00a      	b.n	80018be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a8:	f7fe ffb2 	bl	8000810 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d902      	bls.n	80018be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	f000 bcfe 	b.w	80022ba <HAL_RCC_OscConfig+0x109a>
 80018be:	2302      	movs	r3, #2
 80018c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80018c8:	fa93 f2a3 	rbit	r2, r3
 80018cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018de:	2202      	movs	r2, #2
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f2a3 	rbit	r2, r3
 80018f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001902:	2202      	movs	r2, #2
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800190a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fa93 f2a3 	rbit	r2, r3
 8001914:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001918:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800191c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b18 <HAL_RCC_OscConfig+0x8f8>)
 8001920:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001922:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001926:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800192a:	2102      	movs	r1, #2
 800192c:	6019      	str	r1, [r3, #0]
 800192e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001932:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fa93 f1a3 	rbit	r1, r3
 800193c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001940:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001944:	6019      	str	r1, [r3, #0]
  return result;
 8001946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	2101      	movs	r1, #1
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d09d      	beq.n	80018a8 <HAL_RCC_OscConfig+0x688>
 800196c:	e08d      	b.n	8001a8a <HAL_RCC_OscConfig+0x86a>
 800196e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001972:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001990:	601a      	str	r2, [r3, #0]
  return result;
 8001992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001996:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800199a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b5d      	ldr	r3, [pc, #372]	@ (8001b1c <HAL_RCC_OscConfig+0x8fc>)
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	461a      	mov	r2, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b0:	f7fe ff2e 	bl	8000810 <HAL_GetTick>
 80019b4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ba:	f7fe ff29 	bl	8000810 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d902      	bls.n	80019d0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	f000 bc75 	b.w	80022ba <HAL_RCC_OscConfig+0x109a>
 80019d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019d8:	2202      	movs	r2, #2
 80019da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	fa93 f2a3 	rbit	r2, r3
 80019ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019fc:	2202      	movs	r2, #2
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	fa93 f2a3 	rbit	r2, r3
 8001a0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a12:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a20:	2202      	movs	r2, #2
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a28:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a36:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a3a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	4b36      	ldr	r3, [pc, #216]	@ (8001b18 <HAL_RCC_OscConfig+0x8f8>)
 8001a3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a48:	2102      	movs	r1, #2
 8001a4a:	6019      	str	r1, [r3, #0]
 8001a4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fa93 f1a3 	rbit	r1, r3
 8001a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a62:	6019      	str	r1, [r3, #0]
  return result;
 8001a64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a68:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	fab3 f383 	clz	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d197      	bne.n	80019ba <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 81a5 	beq.w	8001dea <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <HAL_RCC_OscConfig+0x8f8>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d116      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	4b19      	ldr	r3, [pc, #100]	@ (8001b18 <HAL_RCC_OscConfig+0x8f8>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a18      	ldr	r2, [pc, #96]	@ (8001b18 <HAL_RCC_OscConfig+0x8f8>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <HAL_RCC_OscConfig+0x8f8>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001ac6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <HAL_RCC_OscConfig+0x900>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d121      	bne.n	8001b30 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <HAL_RCC_OscConfig+0x900>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b20 <HAL_RCC_OscConfig+0x900>)
 8001af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af8:	f7fe fe8a 	bl	8000810 <HAL_GetTick>
 8001afc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	e010      	b.n	8001b24 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b02:	f7fe fe85 	bl	8000810 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	@ 0x64
 8001b10:	d908      	bls.n	8001b24 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e3d1      	b.n	80022ba <HAL_RCC_OscConfig+0x109a>
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	10908120 	.word	0x10908120
 8001b20:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	4b8d      	ldr	r3, [pc, #564]	@ (8001d5c <HAL_RCC_OscConfig+0xb3c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0e8      	beq.n	8001b02 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x92e>
 8001b40:	4b87      	ldr	r3, [pc, #540]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a86      	ldr	r2, [pc, #536]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	e035      	b.n	8001bba <HAL_RCC_OscConfig+0x99a>
 8001b4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x958>
 8001b5e:	4b80      	ldr	r3, [pc, #512]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4a7f      	ldr	r2, [pc, #508]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6213      	str	r3, [r2, #32]
 8001b6a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a7c      	ldr	r2, [pc, #496]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6213      	str	r3, [r2, #32]
 8001b76:	e020      	b.n	8001bba <HAL_RCC_OscConfig+0x99a>
 8001b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x982>
 8001b88:	4b75      	ldr	r3, [pc, #468]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a74      	ldr	r2, [pc, #464]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	4b72      	ldr	r3, [pc, #456]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a71      	ldr	r2, [pc, #452]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	e00b      	b.n	8001bba <HAL_RCC_OscConfig+0x99a>
 8001ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a6e      	ldr	r2, [pc, #440]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6213      	str	r3, [r2, #32]
 8001bae:	4b6c      	ldr	r3, [pc, #432]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a6b      	ldr	r2, [pc, #428]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bbe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8081 	beq.w	8001cce <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bcc:	f7fe fe20 	bl	8000810 <HAL_GetTick>
 8001bd0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	e00b      	b.n	8001bee <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7fe fe1b 	bl	8000810 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e365      	b.n	80022ba <HAL_RCC_OscConfig+0x109a>
 8001bee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bfe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c16:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c22:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c34:	601a      	str	r2, [r3, #0]
  return result;
 8001c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d102      	bne.n	8001c5a <HAL_RCC_OscConfig+0xa3a>
 8001c54:	4b42      	ldr	r3, [pc, #264]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	e013      	b.n	8001c82 <HAL_RCC_OscConfig+0xa62>
 8001c5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c5e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c62:	2202      	movs	r2, #2
 8001c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	fa93 f2a3 	rbit	r2, r3
 8001c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c78:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	4b38      	ldr	r3, [pc, #224]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c86:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	6011      	str	r1, [r2, #0]
 8001c8e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c92:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	fa92 f1a2 	rbit	r1, r2
 8001c9c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ca0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001ca4:	6011      	str	r1, [r2, #0]
  return result;
 8001ca6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001caa:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	fab2 f282 	clz	r2, r2
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f002 021f 	and.w	r2, r2, #31
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d084      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x9b6>
 8001ccc:	e083      	b.n	8001dd6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7fe fd9f 	bl	8000810 <HAL_GetTick>
 8001cd2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd8:	f7fe fd9a 	bl	8000810 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e2e4      	b.n	80022ba <HAL_RCC_OscConfig+0x109a>
 8001cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d00:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	fa93 f2a3 	rbit	r2, r3
 8001d0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d0e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d18:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d24:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	fa93 f2a3 	rbit	r2, r3
 8001d2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d32:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d36:	601a      	str	r2, [r3, #0]
  return result;
 8001d38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d3c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	095b      	lsrs	r3, r3, #5
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d106      	bne.n	8001d64 <HAL_RCC_OscConfig+0xb44>
 8001d56:	4b02      	ldr	r3, [pc, #8]	@ (8001d60 <HAL_RCC_OscConfig+0xb40>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	e017      	b.n	8001d8c <HAL_RCC_OscConfig+0xb6c>
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d68:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d74:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	fa93 f2a3 	rbit	r2, r3
 8001d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d82:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	4bb3      	ldr	r3, [pc, #716]	@ (8002058 <HAL_RCC_OscConfig+0xe38>)
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d90:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d94:	2102      	movs	r1, #2
 8001d96:	6011      	str	r1, [r2, #0]
 8001d98:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d9c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	fa92 f1a2 	rbit	r1, r2
 8001da6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001daa:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001dae:	6011      	str	r1, [r2, #0]
  return result;
 8001db0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001db4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	fab2 f282 	clz	r2, r2
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	f002 021f 	and.w	r2, r2, #31
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d180      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dd6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d105      	bne.n	8001dea <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dde:	4b9e      	ldr	r3, [pc, #632]	@ (8002058 <HAL_RCC_OscConfig+0xe38>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a9d      	ldr	r2, [pc, #628]	@ (8002058 <HAL_RCC_OscConfig+0xe38>)
 8001de4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 825e 	beq.w	80022b8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dfc:	4b96      	ldr	r3, [pc, #600]	@ (8002058 <HAL_RCC_OscConfig+0xe38>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	f000 821f 	beq.w	8002248 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	f040 8170 	bne.w	80020fc <HAL_RCC_OscConfig+0xedc>
 8001e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e20:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e40:	601a      	str	r2, [r3, #0]
  return result;
 8001e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e46:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e4a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e56:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2300      	movs	r3, #0
 8001e60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7fe fcd5 	bl	8000810 <HAL_GetTick>
 8001e66:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6a:	e009      	b.n	8001e80 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe fcd0 	bl	8000810 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e21c      	b.n	80022ba <HAL_RCC_OscConfig+0x109a>
 8001e80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e84:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e92:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	fa93 f2a3 	rbit	r2, r3
 8001e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001ea4:	601a      	str	r2, [r3, #0]
  return result;
 8001ea6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eaa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001eae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb0:	fab3 f383 	clz	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d102      	bne.n	8001eca <HAL_RCC_OscConfig+0xcaa>
 8001ec4:	4b64      	ldr	r3, [pc, #400]	@ (8002058 <HAL_RCC_OscConfig+0xe38>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	e027      	b.n	8001f1a <HAL_RCC_OscConfig+0xcfa>
 8001eca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ece:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001ed2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001edc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	fa93 f2a3 	rbit	r2, r3
 8001ee6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ef8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f02:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	fa93 f2a3 	rbit	r2, r3
 8001f0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f10:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	4b50      	ldr	r3, [pc, #320]	@ (8002058 <HAL_RCC_OscConfig+0xe38>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f1e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f22:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f26:	6011      	str	r1, [r2, #0]
 8001f28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f2c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	fa92 f1a2 	rbit	r1, r2
 8001f36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f3a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001f3e:	6011      	str	r1, [r2, #0]
  return result;
 8001f40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f44:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	fab2 f282 	clz	r2, r2
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f042 0220 	orr.w	r2, r2, #32
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f002 021f 	and.w	r2, r2, #31
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d182      	bne.n	8001e6c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f66:	4b3c      	ldr	r3, [pc, #240]	@ (8002058 <HAL_RCC_OscConfig+0xe38>)
 8001f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6a:	f023 020f 	bic.w	r2, r3, #15
 8001f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	4937      	ldr	r1, [pc, #220]	@ (8002058 <HAL_RCC_OscConfig+0xe38>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001f80:	4b35      	ldr	r3, [pc, #212]	@ (8002058 <HAL_RCC_OscConfig+0xe38>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001f88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a19      	ldr	r1, [r3, #32]
 8001f94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	492d      	ldr	r1, [pc, #180]	@ (8002058 <HAL_RCC_OscConfig+0xe38>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
 8001fa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001fb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	fa93 f2a3 	rbit	r2, r3
 8001fc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001fcc:	601a      	str	r2, [r3, #0]
  return result;
 8001fce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001fd6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fe2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2301      	movs	r3, #1
 8001fec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7fe fc0f 	bl	8000810 <HAL_GetTick>
 8001ff2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff6:	e009      	b.n	800200c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7fe fc0a 	bl	8000810 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e156      	b.n	80022ba <HAL_RCC_OscConfig+0x109a>
 800200c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002010:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002014:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800201e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	fa93 f2a3 	rbit	r2, r3
 8002028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002030:	601a      	str	r2, [r3, #0]
  return result;
 8002032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002036:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800203a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_RCC_OscConfig+0xe3c>
 8002050:	4b01      	ldr	r3, [pc, #4]	@ (8002058 <HAL_RCC_OscConfig+0xe38>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	e02a      	b.n	80020ac <HAL_RCC_OscConfig+0xe8c>
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002060:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002064:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002086:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800208a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002094:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	fa93 f2a3 	rbit	r2, r3
 800209e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	4b86      	ldr	r3, [pc, #536]	@ (80022c4 <HAL_RCC_OscConfig+0x10a4>)
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020b0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80020b4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80020b8:	6011      	str	r1, [r2, #0]
 80020ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020be:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	fa92 f1a2 	rbit	r1, r2
 80020c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020cc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80020d0:	6011      	str	r1, [r2, #0]
  return result;
 80020d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020d6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	fab2 f282 	clz	r2, r2
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	f042 0220 	orr.w	r2, r2, #32
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f002 021f 	and.w	r2, r2, #31
 80020ec:	2101      	movs	r1, #1
 80020ee:	fa01 f202 	lsl.w	r2, r1, r2
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f43f af7f 	beq.w	8001ff8 <HAL_RCC_OscConfig+0xdd8>
 80020fa:	e0dd      	b.n	80022b8 <HAL_RCC_OscConfig+0x1098>
 80020fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002100:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002104:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	fa93 f2a3 	rbit	r2, r3
 8002118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002120:	601a      	str	r2, [r3, #0]
  return result;
 8002122:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002126:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800212a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002136:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	461a      	mov	r2, r3
 800213e:	2300      	movs	r3, #0
 8002140:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7fe fb65 	bl	8000810 <HAL_GetTick>
 8002146:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214a:	e009      	b.n	8002160 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214c:	f7fe fb60 	bl	8000810 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0ac      	b.n	80022ba <HAL_RCC_OscConfig+0x109a>
 8002160:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002164:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002168:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800216c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002172:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	fa93 f2a3 	rbit	r2, r3
 800217c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002180:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002184:	601a      	str	r2, [r3, #0]
  return result;
 8002186:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800218e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_OscConfig+0xf8a>
 80021a4:	4b47      	ldr	r3, [pc, #284]	@ (80022c4 <HAL_RCC_OscConfig+0x10a4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	e027      	b.n	80021fa <HAL_RCC_OscConfig+0xfda>
 80021aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ae:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80021b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021bc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ca:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80021d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	fa93 f2a3 	rbit	r2, r3
 80021ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	4b33      	ldr	r3, [pc, #204]	@ (80022c4 <HAL_RCC_OscConfig+0x10a4>)
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021fe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002202:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002206:	6011      	str	r1, [r2, #0]
 8002208:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800220c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	fa92 f1a2 	rbit	r1, r2
 8002216:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800221a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800221e:	6011      	str	r1, [r2, #0]
  return result;
 8002220:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002224:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	fab2 f282 	clz	r2, r2
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	f042 0220 	orr.w	r2, r2, #32
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	f002 021f 	and.w	r2, r2, #31
 800223a:	2101      	movs	r1, #1
 800223c:	fa01 f202 	lsl.w	r2, r1, r2
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d182      	bne.n	800214c <HAL_RCC_OscConfig+0xf2c>
 8002246:	e037      	b.n	80022b8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002248:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800224c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e02e      	b.n	80022ba <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800225c:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <HAL_RCC_OscConfig+0x10a4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002264:	4b17      	ldr	r3, [pc, #92]	@ (80022c4 <HAL_RCC_OscConfig+0x10a4>)
 8002266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002268:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800226c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002270:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002274:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002278:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	429a      	cmp	r2, r3
 8002282:	d117      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002284:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002288:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800228c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002290:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002298:	429a      	cmp	r2, r3
 800229a:	d10b      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800229c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022a0:	f003 020f 	and.w	r2, r3, #15
 80022a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000

080022c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b09e      	sub	sp, #120	@ 0x78
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e162      	b.n	80025a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e0:	4b90      	ldr	r3, [pc, #576]	@ (8002524 <HAL_RCC_ClockConfig+0x25c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d910      	bls.n	8002310 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b8d      	ldr	r3, [pc, #564]	@ (8002524 <HAL_RCC_ClockConfig+0x25c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 0207 	bic.w	r2, r3, #7
 80022f6:	498b      	ldr	r1, [pc, #556]	@ (8002524 <HAL_RCC_ClockConfig+0x25c>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b89      	ldr	r3, [pc, #548]	@ (8002524 <HAL_RCC_ClockConfig+0x25c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e14a      	b.n	80025a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b82      	ldr	r3, [pc, #520]	@ (8002528 <HAL_RCC_ClockConfig+0x260>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	497f      	ldr	r1, [pc, #508]	@ (8002528 <HAL_RCC_ClockConfig+0x260>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 80dc 	beq.w	80024f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d13c      	bne.n	80023be <HAL_RCC_ClockConfig+0xf6>
 8002344:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002348:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d102      	bne.n	800236e <HAL_RCC_ClockConfig+0xa6>
 8002368:	4b6f      	ldr	r3, [pc, #444]	@ (8002528 <HAL_RCC_ClockConfig+0x260>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	e00f      	b.n	800238e <HAL_RCC_ClockConfig+0xc6>
 800236e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002372:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	667b      	str	r3, [r7, #100]	@ 0x64
 800237c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002380:	663b      	str	r3, [r7, #96]	@ 0x60
 8002382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800238a:	4b67      	ldr	r3, [pc, #412]	@ (8002528 <HAL_RCC_ClockConfig+0x260>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002392:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002394:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002396:	fa92 f2a2 	rbit	r2, r2
 800239a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800239c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800239e:	fab2 f282 	clz	r2, r2
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	f042 0220 	orr.w	r2, r2, #32
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	f002 021f 	and.w	r2, r2, #31
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f202 	lsl.w	r2, r1, r2
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d17b      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0f3      	b.n	80025a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d13c      	bne.n	8002440 <HAL_RCC_ClockConfig+0x178>
 80023c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80023d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d102      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x128>
 80023ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002528 <HAL_RCC_ClockConfig+0x260>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	e00f      	b.n	8002410 <HAL_RCC_ClockConfig+0x148>
 80023f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80023fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002402:	643b      	str	r3, [r7, #64]	@ 0x40
 8002404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800240c:	4b46      	ldr	r3, [pc, #280]	@ (8002528 <HAL_RCC_ClockConfig+0x260>)
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002414:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002416:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002418:	fa92 f2a2 	rbit	r2, r2
 800241c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800241e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002420:	fab2 f282 	clz	r2, r2
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	f042 0220 	orr.w	r2, r2, #32
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	f002 021f 	and.w	r2, r2, #31
 8002430:	2101      	movs	r1, #1
 8002432:	fa01 f202 	lsl.w	r2, r1, r2
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d13a      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0b2      	b.n	80025a6 <HAL_RCC_ClockConfig+0x2de>
 8002440:	2302      	movs	r3, #2
 8002442:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800244c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d102      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1a0>
 8002462:	4b31      	ldr	r3, [pc, #196]	@ (8002528 <HAL_RCC_ClockConfig+0x260>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	e00d      	b.n	8002484 <HAL_RCC_ClockConfig+0x1bc>
 8002468:	2302      	movs	r3, #2
 800246a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
 8002474:	2302      	movs	r3, #2
 8002476:	623b      	str	r3, [r7, #32]
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	61fb      	str	r3, [r7, #28]
 8002480:	4b29      	ldr	r3, [pc, #164]	@ (8002528 <HAL_RCC_ClockConfig+0x260>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	2202      	movs	r2, #2
 8002486:	61ba      	str	r2, [r7, #24]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	fa92 f2a2 	rbit	r2, r2
 800248e:	617a      	str	r2, [r7, #20]
  return result;
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	fab2 f282 	clz	r2, r2
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	f042 0220 	orr.w	r2, r2, #32
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	f002 021f 	and.w	r2, r2, #31
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f202 	lsl.w	r2, r1, r2
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e079      	b.n	80025a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <HAL_RCC_ClockConfig+0x260>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f023 0203 	bic.w	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	491a      	ldr	r1, [pc, #104]	@ (8002528 <HAL_RCC_ClockConfig+0x260>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c4:	f7fe f9a4 	bl	8000810 <HAL_GetTick>
 80024c8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe f9a0 	bl	8000810 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e061      	b.n	80025a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_RCC_ClockConfig+0x260>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 020c 	and.w	r2, r3, #12
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d1eb      	bne.n	80024cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <HAL_RCC_ClockConfig+0x25c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d214      	bcs.n	800252c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HAL_RCC_ClockConfig+0x25c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 0207 	bic.w	r2, r3, #7
 800250a:	4906      	ldr	r1, [pc, #24]	@ (8002524 <HAL_RCC_ClockConfig+0x25c>)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <HAL_RCC_ClockConfig+0x25c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e040      	b.n	80025a6 <HAL_RCC_ClockConfig+0x2de>
 8002524:	40022000 	.word	0x40022000
 8002528:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002538:	4b1d      	ldr	r3, [pc, #116]	@ (80025b0 <HAL_RCC_ClockConfig+0x2e8>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	491a      	ldr	r1, [pc, #104]	@ (80025b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d009      	beq.n	800256a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002556:	4b16      	ldr	r3, [pc, #88]	@ (80025b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4912      	ldr	r1, [pc, #72]	@ (80025b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800256a:	f000 f829 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 800256e:	4601      	mov	r1, r0
 8002570:	4b0f      	ldr	r3, [pc, #60]	@ (80025b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002578:	22f0      	movs	r2, #240	@ 0xf0
 800257a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	fa92 f2a2 	rbit	r2, r2
 8002582:	60fa      	str	r2, [r7, #12]
  return result;
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	fab2 f282 	clz	r2, r2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	40d3      	lsrs	r3, r2
 800258e:	4a09      	ldr	r2, [pc, #36]	@ (80025b4 <HAL_RCC_ClockConfig+0x2ec>)
 8002590:	5cd3      	ldrb	r3, [r2, r3]
 8002592:	fa21 f303 	lsr.w	r3, r1, r3
 8002596:	4a08      	ldr	r2, [pc, #32]	@ (80025b8 <HAL_RCC_ClockConfig+0x2f0>)
 8002598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800259a:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <HAL_RCC_ClockConfig+0x2f4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe f8f2 	bl	8000788 <HAL_InitTick>
  
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3778      	adds	r7, #120	@ 0x78
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08004080 	.word	0x08004080
 80025b8:	20000000 	.word	0x20000000
 80025bc:	20000004 	.word	0x20000004

080025c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80025da:	4b1f      	ldr	r3, [pc, #124]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x98>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x30>
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x36>
 80025ee:	e029      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f0:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025f2:	613b      	str	r3, [r7, #16]
      break;
 80025f4:	e029      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	0c9b      	lsrs	r3, r3, #18
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	4a18      	ldr	r2, [pc, #96]	@ (8002660 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002600:	5cd3      	ldrb	r3, [r2, r3]
 8002602:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002604:	4b14      	ldr	r3, [pc, #80]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x98>)
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	4a15      	ldr	r2, [pc, #84]	@ (8002664 <HAL_RCC_GetSysClockFreq+0xa4>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800261c:	4a0f      	ldr	r2, [pc, #60]	@ (800265c <HAL_RCC_GetSysClockFreq+0x9c>)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	fbb2 f2f3 	udiv	r2, r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	e007      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800262e:	4a0b      	ldr	r2, [pc, #44]	@ (800265c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	fbb2 f2f3 	udiv	r2, r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	613b      	str	r3, [r7, #16]
      break;
 8002642:	e002      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002646:	613b      	str	r3, [r7, #16]
      break;
 8002648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264a:	693b      	ldr	r3, [r7, #16]
}
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40021000 	.word	0x40021000
 800265c:	007a1200 	.word	0x007a1200
 8002660:	08004098 	.word	0x08004098
 8002664:	080040a8 	.word	0x080040a8

08002668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800266c:	4b03      	ldr	r3, [pc, #12]	@ (800267c <HAL_RCC_GetHCLKFreq+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000000 	.word	0x20000000

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002686:	f7ff ffef 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 800268a:	4601      	mov	r1, r0
 800268c:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002694:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002698:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	fa92 f2a2 	rbit	r2, r2
 80026a0:	603a      	str	r2, [r7, #0]
  return result;
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	fab2 f282 	clz	r2, r2
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	40d3      	lsrs	r3, r2
 80026ac:	4a04      	ldr	r2, [pc, #16]	@ (80026c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80026ae:	5cd3      	ldrb	r3, [r2, r3]
 80026b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	08004090 	.word	0x08004090

080026c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026ca:	f7ff ffcd 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 80026ce:	4601      	mov	r1, r0
 80026d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80026d8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80026dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	fa92 f2a2 	rbit	r2, r2
 80026e4:	603a      	str	r2, [r7, #0]
  return result;
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	fab2 f282 	clz	r2, r2
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	40d3      	lsrs	r3, r2
 80026f0:	4a04      	ldr	r2, [pc, #16]	@ (8002704 <HAL_RCC_GetPCLK2Freq+0x40>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	08004090 	.word	0x08004090

08002708 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b092      	sub	sp, #72	@ 0x48
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80d4 	beq.w	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272c:	4b4e      	ldr	r3, [pc, #312]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10e      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002738:	4b4b      	ldr	r3, [pc, #300]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	4a4a      	ldr	r2, [pc, #296]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002742:	61d3      	str	r3, [r2, #28]
 8002744:	4b48      	ldr	r3, [pc, #288]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002750:	2301      	movs	r3, #1
 8002752:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	4b45      	ldr	r3, [pc, #276]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002762:	4b42      	ldr	r3, [pc, #264]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a41      	ldr	r2, [pc, #260]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800276c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276e:	f7fe f84f 	bl	8000810 <HAL_GetTick>
 8002772:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	e008      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7fe f84b 	bl	8000810 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b64      	cmp	r3, #100	@ 0x64
 8002782:	d901      	bls.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1d6      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	4b38      	ldr	r3, [pc, #224]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002794:	4b34      	ldr	r3, [pc, #208]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800279c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800279e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8084 	beq.w	80028ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d07c      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80027cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b26      	ldr	r3, [pc, #152]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	461a      	mov	r2, r3
 80027de:	2301      	movs	r3, #1
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80027f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	461a      	mov	r2, r3
 8002802:	2300      	movs	r3, #0
 8002804:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002806:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800280a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800280c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d04b      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fd fffb 	bl	8000810 <HAL_GetTick>
 800281a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fd fff7 	bl	8000810 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e180      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002834:	2302      	movs	r3, #2
 8002836:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002840:	2302      	movs	r3, #2
 8002842:	623b      	str	r3, [r7, #32]
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	61fb      	str	r3, [r7, #28]
  return result;
 800284c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d108      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002862:	4b01      	ldr	r3, [pc, #4]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	e00d      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002868:	40021000 	.word	0x40021000
 800286c:	40007000 	.word	0x40007000
 8002870:	10908100 	.word	0x10908100
 8002874:	2302      	movs	r3, #2
 8002876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	4b9a      	ldr	r3, [pc, #616]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	2202      	movs	r2, #2
 8002886:	613a      	str	r2, [r7, #16]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	fa92 f2a2 	rbit	r2, r2
 800288e:	60fa      	str	r2, [r7, #12]
  return result;
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	fab2 f282 	clz	r2, r2
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f002 021f 	and.w	r2, r2, #31
 80028a2:	2101      	movs	r1, #1
 80028a4:	fa01 f202 	lsl.w	r2, r1, r2
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0b7      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028ae:	4b8f      	ldr	r3, [pc, #572]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	498c      	ldr	r1, [pc, #560]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d105      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c8:	4b88      	ldr	r3, [pc, #544]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	4a87      	ldr	r2, [pc, #540]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028e0:	4b82      	ldr	r3, [pc, #520]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	f023 0203 	bic.w	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	497f      	ldr	r1, [pc, #508]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028fe:	4b7b      	ldr	r3, [pc, #492]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	4978      	ldr	r1, [pc, #480]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800291c:	4b73      	ldr	r3, [pc, #460]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	4970      	ldr	r1, [pc, #448]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800293a:	4b6c      	ldr	r3, [pc, #432]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	f023 0210 	bic.w	r2, r3, #16
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	4969      	ldr	r1, [pc, #420]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002958:	4b64      	ldr	r3, [pc, #400]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002964:	4961      	ldr	r1, [pc, #388]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002976:	4b5d      	ldr	r3, [pc, #372]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f023 0220 	bic.w	r2, r3, #32
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	495a      	ldr	r1, [pc, #360]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002994:	4b55      	ldr	r3, [pc, #340]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002998:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	4952      	ldr	r1, [pc, #328]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029b2:	4b4e      	ldr	r3, [pc, #312]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	494b      	ldr	r1, [pc, #300]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029d0:	4b46      	ldr	r3, [pc, #280]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4943      	ldr	r1, [pc, #268]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029ee:	4b3f      	ldr	r3, [pc, #252]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	493c      	ldr	r1, [pc, #240]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a0c:	4b37      	ldr	r3, [pc, #220]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a10:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	4934      	ldr	r1, [pc, #208]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a2a:	4b30      	ldr	r3, [pc, #192]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a36:	492d      	ldr	r1, [pc, #180]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a48:	4b28      	ldr	r3, [pc, #160]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a54:	4925      	ldr	r1, [pc, #148]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a66:	4b21      	ldr	r3, [pc, #132]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	491e      	ldr	r1, [pc, #120]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a84:	4b19      	ldr	r3, [pc, #100]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a90:	4916      	ldr	r1, [pc, #88]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002aa2:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aae:	490f      	ldr	r1, [pc, #60]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002acc:	4907      	ldr	r1, [pc, #28]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00c      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002ade:	4b03      	ldr	r3, [pc, #12]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	e002      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af2:	4913      	ldr	r1, [pc, #76]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b04:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b10:	490b      	ldr	r1, [pc, #44]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002b22:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b2e:	4904      	ldr	r1, [pc, #16]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3748      	adds	r7, #72	@ 0x48
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000

08002b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e040      	b.n	8002bd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fd fd5a 	bl	8000620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	@ 0x24
 8002b70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fd0a 	bl	80035a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fb33 	bl	80031fc <UART_SetConfig>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e01b      	b.n	8002bd8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fd89 	bl	80036e8 <UART_CheckIdleState>
 8002bd6:	4603      	mov	r3, r0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b0ba      	sub	sp, #232	@ 0xe8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002c0a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002c0e:	4013      	ands	r3, r2
 8002c10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d115      	bne.n	8002c48 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00f      	beq.n	8002c48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 82ab 	beq.w	8003194 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
      }
      return;
 8002c46:	e2a5      	b.n	8003194 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8117 	beq.w	8002e80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002c62:	4b85      	ldr	r3, [pc, #532]	@ (8002e78 <HAL_UART_IRQHandler+0x298>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 810a 	beq.w	8002e80 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d011      	beq.n	8002c9c <HAL_UART_IRQHandler+0xbc>
 8002c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d011      	beq.n	8002ccc <HAL_UART_IRQHandler+0xec>
 8002ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cc2:	f043 0204 	orr.w	r2, r3, #4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d011      	beq.n	8002cfc <HAL_UART_IRQHandler+0x11c>
 8002cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2204      	movs	r2, #4
 8002cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cf2:	f043 0202 	orr.w	r2, r3, #2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d017      	beq.n	8002d38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2208      	movs	r2, #8
 8002d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d2e:	f043 0208 	orr.w	r2, r3, #8
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d012      	beq.n	8002d6a <HAL_UART_IRQHandler+0x18a>
 8002d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00c      	beq.n	8002d6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8211 	beq.w	8003198 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00d      	beq.n	8002d9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002da4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db2:	2b40      	cmp	r3, #64	@ 0x40
 8002db4:	d005      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d04f      	beq.n	8002e62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fe6c 	bl	8003aa0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd2:	2b40      	cmp	r3, #64	@ 0x40
 8002dd4:	d141      	bne.n	8002e5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3308      	adds	r3, #8
 8002ddc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002df4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e12:	e841 2300 	strex	r3, r2, [r1]
 8002e16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1d9      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d013      	beq.n	8002e52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e2e:	4a13      	ldr	r2, [pc, #76]	@ (8002e7c <HAL_UART_IRQHandler+0x29c>)
 8002e30:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd feeb 	bl	8000c12 <HAL_DMA_Abort_IT>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d017      	beq.n	8002e72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	e00f      	b.n	8002e72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f9c8 	bl	80031e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e58:	e00b      	b.n	8002e72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f9c4 	bl	80031e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e60:	e007      	b.n	8002e72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f9c0 	bl	80031e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002e70:	e192      	b.n	8003198 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e72:	bf00      	nop
    return;
 8002e74:	e190      	b.n	8003198 <HAL_UART_IRQHandler+0x5b8>
 8002e76:	bf00      	nop
 8002e78:	04000120 	.word	0x04000120
 8002e7c:	08003d4b 	.word	0x08003d4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	f040 814b 	bne.w	8003120 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8144 	beq.w	8003120 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 813d 	beq.w	8003120 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2210      	movs	r2, #16
 8002eac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb8:	2b40      	cmp	r3, #64	@ 0x40
 8002eba:	f040 80b5 	bne.w	8003028 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002eca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8164 	beq.w	800319c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	f080 815c 	bcs.w	800319c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002eea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	f000 8086 	beq.w	8003006 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1da      	bne.n	8002efa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3308      	adds	r3, #8
 8002f4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3308      	adds	r3, #8
 8002f64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f74:	e841 2300 	strex	r3, r2, [r1]
 8002f78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e1      	bne.n	8002f44 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3308      	adds	r3, #8
 8002f86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002fa4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fa6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002faa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002fac:	e841 2300 	strex	r3, r2, [r1]
 8002fb0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002fb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e3      	bne.n	8002f80 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fce:	e853 3f00 	ldrex	r3, [r3]
 8002fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fd6:	f023 0310 	bic.w	r3, r3, #16
 8002fda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ff0:	e841 2300 	strex	r3, r2, [r1]
 8002ff4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e4      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd fdc8 	bl	8000b96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003018:	b29b      	uxth	r3, r3
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	b29b      	uxth	r3, r3
 800301e:	4619      	mov	r1, r3
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7fd f9a9 	bl	8000378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003026:	e0b9      	b.n	800319c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003034:	b29b      	uxth	r3, r3
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80ab 	beq.w	80031a0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800304a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80a6 	beq.w	80031a0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305c:	e853 3f00 	ldrex	r3, [r3]
 8003060:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003064:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003068:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003076:	647b      	str	r3, [r7, #68]	@ 0x44
 8003078:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800307c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e4      	bne.n	8003054 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3308      	adds	r3, #8
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	623b      	str	r3, [r7, #32]
   return(result);
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3308      	adds	r3, #8
 80030aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80030ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80030b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e3      	bne.n	800308a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	e853 3f00 	ldrex	r3, [r3]
 80030e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0310 	bic.w	r3, r3, #16
 80030ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	69b9      	ldr	r1, [r7, #24]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	617b      	str	r3, [r7, #20]
   return(result);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e4      	bne.n	80030d6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003112:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7fd f92d 	bl	8000378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800311e:	e03f      	b.n	80031a0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003124:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00e      	beq.n	800314a <HAL_UART_IRQHandler+0x56a>
 800312c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003130:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003140:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fe41 	bl	8003dca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003148:	e02d      	b.n	80031a6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00e      	beq.n	8003174 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800315a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01c      	beq.n	80031a4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
    }
    return;
 8003172:	e017      	b.n	80031a4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d012      	beq.n	80031a6 <HAL_UART_IRQHandler+0x5c6>
 8003180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00c      	beq.n	80031a6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fdf2 	bl	8003d76 <UART_EndTransmit_IT>
    return;
 8003192:	e008      	b.n	80031a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003194:	bf00      	nop
 8003196:	e006      	b.n	80031a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003198:	bf00      	nop
 800319a:	e004      	b.n	80031a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800319c:	bf00      	nop
 800319e:	e002      	b.n	80031a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80031a4:	bf00      	nop
  }

}
 80031a6:	37e8      	adds	r7, #232	@ 0xe8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4b92      	ldr	r3, [pc, #584]	@ (8003470 <UART_SetConfig+0x274>)
 8003228:	4013      	ands	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	6979      	ldr	r1, [r7, #20]
 8003230:	430b      	orrs	r3, r1
 8003232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a80      	ldr	r2, [pc, #512]	@ (8003474 <UART_SetConfig+0x278>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d120      	bne.n	80032ba <UART_SetConfig+0xbe>
 8003278:	4b7f      	ldr	r3, [pc, #508]	@ (8003478 <UART_SetConfig+0x27c>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	2b03      	cmp	r3, #3
 8003282:	d817      	bhi.n	80032b4 <UART_SetConfig+0xb8>
 8003284:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <UART_SetConfig+0x90>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	0800329d 	.word	0x0800329d
 8003290:	080032a9 	.word	0x080032a9
 8003294:	080032af 	.word	0x080032af
 8003298:	080032a3 	.word	0x080032a3
 800329c:	2301      	movs	r3, #1
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	e0b5      	b.n	800340e <UART_SetConfig+0x212>
 80032a2:	2302      	movs	r3, #2
 80032a4:	77fb      	strb	r3, [r7, #31]
 80032a6:	e0b2      	b.n	800340e <UART_SetConfig+0x212>
 80032a8:	2304      	movs	r3, #4
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e0af      	b.n	800340e <UART_SetConfig+0x212>
 80032ae:	2308      	movs	r3, #8
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e0ac      	b.n	800340e <UART_SetConfig+0x212>
 80032b4:	2310      	movs	r3, #16
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e0a9      	b.n	800340e <UART_SetConfig+0x212>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6f      	ldr	r2, [pc, #444]	@ (800347c <UART_SetConfig+0x280>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d124      	bne.n	800330e <UART_SetConfig+0x112>
 80032c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003478 <UART_SetConfig+0x27c>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032d0:	d011      	beq.n	80032f6 <UART_SetConfig+0xfa>
 80032d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032d6:	d817      	bhi.n	8003308 <UART_SetConfig+0x10c>
 80032d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032dc:	d011      	beq.n	8003302 <UART_SetConfig+0x106>
 80032de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032e2:	d811      	bhi.n	8003308 <UART_SetConfig+0x10c>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <UART_SetConfig+0xf4>
 80032e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032ec:	d006      	beq.n	80032fc <UART_SetConfig+0x100>
 80032ee:	e00b      	b.n	8003308 <UART_SetConfig+0x10c>
 80032f0:	2300      	movs	r3, #0
 80032f2:	77fb      	strb	r3, [r7, #31]
 80032f4:	e08b      	b.n	800340e <UART_SetConfig+0x212>
 80032f6:	2302      	movs	r3, #2
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e088      	b.n	800340e <UART_SetConfig+0x212>
 80032fc:	2304      	movs	r3, #4
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e085      	b.n	800340e <UART_SetConfig+0x212>
 8003302:	2308      	movs	r3, #8
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e082      	b.n	800340e <UART_SetConfig+0x212>
 8003308:	2310      	movs	r3, #16
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e07f      	b.n	800340e <UART_SetConfig+0x212>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a5b      	ldr	r2, [pc, #364]	@ (8003480 <UART_SetConfig+0x284>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d124      	bne.n	8003362 <UART_SetConfig+0x166>
 8003318:	4b57      	ldr	r3, [pc, #348]	@ (8003478 <UART_SetConfig+0x27c>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003320:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003324:	d011      	beq.n	800334a <UART_SetConfig+0x14e>
 8003326:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800332a:	d817      	bhi.n	800335c <UART_SetConfig+0x160>
 800332c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003330:	d011      	beq.n	8003356 <UART_SetConfig+0x15a>
 8003332:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003336:	d811      	bhi.n	800335c <UART_SetConfig+0x160>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <UART_SetConfig+0x148>
 800333c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003340:	d006      	beq.n	8003350 <UART_SetConfig+0x154>
 8003342:	e00b      	b.n	800335c <UART_SetConfig+0x160>
 8003344:	2300      	movs	r3, #0
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e061      	b.n	800340e <UART_SetConfig+0x212>
 800334a:	2302      	movs	r3, #2
 800334c:	77fb      	strb	r3, [r7, #31]
 800334e:	e05e      	b.n	800340e <UART_SetConfig+0x212>
 8003350:	2304      	movs	r3, #4
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	e05b      	b.n	800340e <UART_SetConfig+0x212>
 8003356:	2308      	movs	r3, #8
 8003358:	77fb      	strb	r3, [r7, #31]
 800335a:	e058      	b.n	800340e <UART_SetConfig+0x212>
 800335c:	2310      	movs	r3, #16
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e055      	b.n	800340e <UART_SetConfig+0x212>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a47      	ldr	r2, [pc, #284]	@ (8003484 <UART_SetConfig+0x288>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d124      	bne.n	80033b6 <UART_SetConfig+0x1ba>
 800336c:	4b42      	ldr	r3, [pc, #264]	@ (8003478 <UART_SetConfig+0x27c>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003370:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003374:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003378:	d011      	beq.n	800339e <UART_SetConfig+0x1a2>
 800337a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800337e:	d817      	bhi.n	80033b0 <UART_SetConfig+0x1b4>
 8003380:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003384:	d011      	beq.n	80033aa <UART_SetConfig+0x1ae>
 8003386:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800338a:	d811      	bhi.n	80033b0 <UART_SetConfig+0x1b4>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <UART_SetConfig+0x19c>
 8003390:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003394:	d006      	beq.n	80033a4 <UART_SetConfig+0x1a8>
 8003396:	e00b      	b.n	80033b0 <UART_SetConfig+0x1b4>
 8003398:	2300      	movs	r3, #0
 800339a:	77fb      	strb	r3, [r7, #31]
 800339c:	e037      	b.n	800340e <UART_SetConfig+0x212>
 800339e:	2302      	movs	r3, #2
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e034      	b.n	800340e <UART_SetConfig+0x212>
 80033a4:	2304      	movs	r3, #4
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e031      	b.n	800340e <UART_SetConfig+0x212>
 80033aa:	2308      	movs	r3, #8
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e02e      	b.n	800340e <UART_SetConfig+0x212>
 80033b0:	2310      	movs	r3, #16
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e02b      	b.n	800340e <UART_SetConfig+0x212>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a33      	ldr	r2, [pc, #204]	@ (8003488 <UART_SetConfig+0x28c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d124      	bne.n	800340a <UART_SetConfig+0x20e>
 80033c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003478 <UART_SetConfig+0x27c>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80033c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033cc:	d011      	beq.n	80033f2 <UART_SetConfig+0x1f6>
 80033ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033d2:	d817      	bhi.n	8003404 <UART_SetConfig+0x208>
 80033d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033d8:	d011      	beq.n	80033fe <UART_SetConfig+0x202>
 80033da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033de:	d811      	bhi.n	8003404 <UART_SetConfig+0x208>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <UART_SetConfig+0x1f0>
 80033e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033e8:	d006      	beq.n	80033f8 <UART_SetConfig+0x1fc>
 80033ea:	e00b      	b.n	8003404 <UART_SetConfig+0x208>
 80033ec:	2300      	movs	r3, #0
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e00d      	b.n	800340e <UART_SetConfig+0x212>
 80033f2:	2302      	movs	r3, #2
 80033f4:	77fb      	strb	r3, [r7, #31]
 80033f6:	e00a      	b.n	800340e <UART_SetConfig+0x212>
 80033f8:	2304      	movs	r3, #4
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e007      	b.n	800340e <UART_SetConfig+0x212>
 80033fe:	2308      	movs	r3, #8
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e004      	b.n	800340e <UART_SetConfig+0x212>
 8003404:	2310      	movs	r3, #16
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e001      	b.n	800340e <UART_SetConfig+0x212>
 800340a:	2310      	movs	r3, #16
 800340c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003416:	d16b      	bne.n	80034f0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003418:	7ffb      	ldrb	r3, [r7, #31]
 800341a:	2b08      	cmp	r3, #8
 800341c:	d838      	bhi.n	8003490 <UART_SetConfig+0x294>
 800341e:	a201      	add	r2, pc, #4	@ (adr r2, 8003424 <UART_SetConfig+0x228>)
 8003420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003424:	08003449 	.word	0x08003449
 8003428:	08003451 	.word	0x08003451
 800342c:	08003459 	.word	0x08003459
 8003430:	08003491 	.word	0x08003491
 8003434:	0800345f 	.word	0x0800345f
 8003438:	08003491 	.word	0x08003491
 800343c:	08003491 	.word	0x08003491
 8003440:	08003491 	.word	0x08003491
 8003444:	08003467 	.word	0x08003467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003448:	f7ff f91a 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 800344c:	61b8      	str	r0, [r7, #24]
        break;
 800344e:	e024      	b.n	800349a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003450:	f7ff f938 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 8003454:	61b8      	str	r0, [r7, #24]
        break;
 8003456:	e020      	b.n	800349a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003458:	4b0c      	ldr	r3, [pc, #48]	@ (800348c <UART_SetConfig+0x290>)
 800345a:	61bb      	str	r3, [r7, #24]
        break;
 800345c:	e01d      	b.n	800349a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800345e:	f7ff f8af 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8003462:	61b8      	str	r0, [r7, #24]
        break;
 8003464:	e019      	b.n	800349a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800346a:	61bb      	str	r3, [r7, #24]
        break;
 800346c:	e015      	b.n	800349a <UART_SetConfig+0x29e>
 800346e:	bf00      	nop
 8003470:	efff69f3 	.word	0xefff69f3
 8003474:	40013800 	.word	0x40013800
 8003478:	40021000 	.word	0x40021000
 800347c:	40004400 	.word	0x40004400
 8003480:	40004800 	.word	0x40004800
 8003484:	40004c00 	.word	0x40004c00
 8003488:	40005000 	.word	0x40005000
 800348c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	77bb      	strb	r3, [r7, #30]
        break;
 8003498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d073      	beq.n	8003588 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	005a      	lsls	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	441a      	add	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b0f      	cmp	r3, #15
 80034ba:	d916      	bls.n	80034ea <UART_SetConfig+0x2ee>
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c2:	d212      	bcs.n	80034ea <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f023 030f 	bic.w	r3, r3, #15
 80034cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	b29a      	uxth	r2, r3
 80034da:	89fb      	ldrh	r3, [r7, #14]
 80034dc:	4313      	orrs	r3, r2
 80034de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	89fa      	ldrh	r2, [r7, #14]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	e04e      	b.n	8003588 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	77bb      	strb	r3, [r7, #30]
 80034ee:	e04b      	b.n	8003588 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034f0:	7ffb      	ldrb	r3, [r7, #31]
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d827      	bhi.n	8003546 <UART_SetConfig+0x34a>
 80034f6:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <UART_SetConfig+0x300>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7ff f8ae 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8003524:	61b8      	str	r0, [r7, #24]
        break;
 8003526:	e013      	b.n	8003550 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7ff f8cc 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 800352c:	61b8      	str	r0, [r7, #24]
        break;
 800352e:	e00f      	b.n	8003550 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <UART_SetConfig+0x3a4>)
 8003532:	61bb      	str	r3, [r7, #24]
        break;
 8003534:	e00c      	b.n	8003550 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7ff f843 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 800353a:	61b8      	str	r0, [r7, #24]
        break;
 800353c:	e008      	b.n	8003550 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003542:	61bb      	str	r3, [r7, #24]
        break;
 8003544:	e004      	b.n	8003550 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	77bb      	strb	r3, [r7, #30]
        break;
 800354e:	bf00      	nop
    }

    if (pclk != 0U)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d018      	beq.n	8003588 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	085a      	lsrs	r2, r3, #1
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	441a      	add	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b0f      	cmp	r3, #15
 800356e:	d909      	bls.n	8003584 <UART_SetConfig+0x388>
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003576:	d205      	bcs.n	8003584 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	b29a      	uxth	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	e001      	b.n	8003588 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003594:	7fbb      	ldrb	r3, [r7, #30]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	007a1200 	.word	0x007a1200

080035a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01a      	beq.n	80036ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036a2:	d10a      	bne.n	80036ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
  }
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b098      	sub	sp, #96	@ 0x60
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036f8:	f7fd f88a 	bl	8000810 <HAL_GetTick>
 80036fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b08      	cmp	r3, #8
 800370a:	d12e      	bne.n	800376a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800370c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003714:	2200      	movs	r2, #0
 8003716:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f88c 	bl	8003838 <UART_WaitOnFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d021      	beq.n	800376a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800373a:	653b      	str	r3, [r7, #80]	@ 0x50
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003744:	647b      	str	r3, [r7, #68]	@ 0x44
 8003746:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800374a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e6      	bne.n	8003726 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e062      	b.n	8003830 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b04      	cmp	r3, #4
 8003776:	d149      	bne.n	800380c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003778:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003780:	2200      	movs	r2, #0
 8003782:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f856 	bl	8003838 <UART_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d03c      	beq.n	800380c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	623b      	str	r3, [r7, #32]
   return(result);
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e6      	bne.n	8003792 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3308      	adds	r3, #8
 80037ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3308      	adds	r3, #8
 80037e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037e4:	61fa      	str	r2, [r7, #28]
 80037e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	69b9      	ldr	r1, [r7, #24]
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	617b      	str	r3, [r7, #20]
   return(result);
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e5      	bne.n	80037c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e011      	b.n	8003830 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3758      	adds	r7, #88	@ 0x58
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003848:	e04f      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d04b      	beq.n	80038ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003852:	f7fc ffdd 	bl	8000810 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	429a      	cmp	r2, r3
 8003860:	d302      	bcc.n	8003868 <UART_WaitOnFlagUntilTimeout+0x30>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e04e      	b.n	800390a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d037      	beq.n	80038ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b80      	cmp	r3, #128	@ 0x80
 800387e:	d034      	beq.n	80038ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b40      	cmp	r3, #64	@ 0x40
 8003884:	d031      	beq.n	80038ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b08      	cmp	r3, #8
 8003892:	d110      	bne.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2208      	movs	r2, #8
 800389a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f8ff 	bl	8003aa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2208      	movs	r2, #8
 80038a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e029      	b.n	800390a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038c4:	d111      	bne.n	80038ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f8e5 	bl	8003aa0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e00f      	b.n	800390a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	429a      	cmp	r2, r3
 8003906:	d0a0      	beq.n	800384a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b096      	sub	sp, #88	@ 0x58
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2222      	movs	r2, #34	@ 0x22
 800393c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003944:	2b00      	cmp	r3, #0
 8003946:	d028      	beq.n	800399a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800394c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a48 <UART_Start_Receive_DMA+0x134>)
 800394e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003954:	4a3d      	ldr	r2, [pc, #244]	@ (8003a4c <UART_Start_Receive_DMA+0x138>)
 8003956:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a50 <UART_Start_Receive_DMA+0x13c>)
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003964:	2200      	movs	r2, #0
 8003966:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3324      	adds	r3, #36	@ 0x24
 8003972:	4619      	mov	r1, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003978:	461a      	mov	r2, r3
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	f7fd f8ac 	bl	8000ad8 <HAL_DMA_Start_IT>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2210      	movs	r2, #16
 800398a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e051      	b.n	8003a3e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d018      	beq.n	80039d4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039aa:	e853 3f00 	ldrex	r3, [r3]
 80039ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039c2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80039c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80039ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e6      	bne.n	80039a2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3308      	adds	r3, #8
 80039da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3308      	adds	r3, #8
 80039f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80039f4:	637a      	str	r2, [r7, #52]	@ 0x34
 80039f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e5      	bne.n	80039d4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	613b      	str	r3, [r7, #16]
   return(result);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3308      	adds	r3, #8
 8003a26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a28:	623a      	str	r2, [r7, #32]
 8003a2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	69f9      	ldr	r1, [r7, #28]
 8003a2e:	6a3a      	ldr	r2, [r7, #32]
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e5      	bne.n	8003a08 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3758      	adds	r7, #88	@ 0x58
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	08003b69 	.word	0x08003b69
 8003a4c:	08003c8f 	.word	0x08003c8f
 8003a50:	08003ccd 	.word	0x08003ccd

08003a54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	@ 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6979      	ldr	r1, [r7, #20]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	613b      	str	r3, [r7, #16]
   return(result);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e6      	bne.n	8003a5c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003a94:	bf00      	nop
 8003a96:	3724      	adds	r7, #36	@ 0x24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b095      	sub	sp, #84	@ 0x54
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ac6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ac8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003acc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e6      	bne.n	8003aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3308      	adds	r3, #8
 8003af8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d118      	bne.n	8003b48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f023 0310 	bic.w	r3, r3, #16
 8003b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6979      	ldr	r1, [r7, #20]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	613b      	str	r3, [r7, #16]
   return(result);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e6      	bne.n	8003b16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b5c:	bf00      	nop
 8003b5e:	3754      	adds	r7, #84	@ 0x54
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b09c      	sub	sp, #112	@ 0x70
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d071      	beq.n	8003c62 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b80:	2200      	movs	r2, #0
 8003b82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ba6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003baa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e6      	bne.n	8003b86 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003bd8:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bda:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e5      	bne.n	8003bb8 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	623b      	str	r3, [r7, #32]
   return(result);
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c02:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3308      	adds	r3, #8
 8003c0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c22:	2220      	movs	r2, #32
 8003c24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d118      	bne.n	8003c62 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f023 0310 	bic.w	r3, r3, #16
 8003c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	69b9      	ldr	r1, [r7, #24]
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e6      	bne.n	8003c30 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c64:	2200      	movs	r2, #0
 8003c66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d107      	bne.n	8003c80 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c76:	4619      	mov	r1, r3
 8003c78:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c7a:	f7fc fb7d 	bl	8000378 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c7e:	e002      	b.n	8003c86 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003c80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c82:	f7ff fa9d 	bl	80031c0 <HAL_UART_RxCpltCallback>
}
 8003c86:	bf00      	nop
 8003c88:	3770      	adds	r7, #112	@ 0x70
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d109      	bne.n	8003cbe <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f7fc fb5e 	bl	8000378 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cbc:	e002      	b.n	8003cc4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff fa88 	bl	80031d4 <HAL_UART_RxHalfCpltCallback>
}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cde:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf2:	2b80      	cmp	r3, #128	@ 0x80
 8003cf4:	d109      	bne.n	8003d0a <UART_DMAError+0x3e>
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b21      	cmp	r3, #33	@ 0x21
 8003cfa:	d106      	bne.n	8003d0a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8003d04:	6978      	ldr	r0, [r7, #20]
 8003d06:	f7ff fea5 	bl	8003a54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d14:	2b40      	cmp	r3, #64	@ 0x40
 8003d16:	d109      	bne.n	8003d2c <UART_DMAError+0x60>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b22      	cmp	r3, #34	@ 0x22
 8003d1c:	d106      	bne.n	8003d2c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8003d26:	6978      	ldr	r0, [r7, #20]
 8003d28:	f7ff feba 	bl	8003aa0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d32:	f043 0210 	orr.w	r2, r3, #16
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d3c:	6978      	ldr	r0, [r7, #20]
 8003d3e:	f7ff fa53 	bl	80031e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d42:	bf00      	nop
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff fa3d 	bl	80031e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b088      	sub	sp, #32
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	6979      	ldr	r1, [r7, #20]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	613b      	str	r3, [r7, #16]
   return(result);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e6      	bne.n	8003d7e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff f9f5 	bl	80031ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc2:	bf00      	nop
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b08c      	sub	sp, #48	@ 0x30
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	4613      	mov	r3, r2
 8003dea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d142      	bne.n	8003e7c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e03b      	b.n	8003e7e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	461a      	mov	r2, r3
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7ff fd7b 	bl	8003914 <UART_Start_Receive_DMA>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003e24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d124      	bne.n	8003e76 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d11d      	bne.n	8003e70 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	617b      	str	r3, [r7, #20]
   return(result);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f043 0310 	orr.w	r3, r3, #16
 8003e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e5c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6a39      	ldr	r1, [r7, #32]
 8003e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e6      	bne.n	8003e3c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8003e6e:	e002      	b.n	8003e76 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003e76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e7a:	e000      	b.n	8003e7e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3730      	adds	r7, #48	@ 0x30
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <scheduler_init>:
/*
 * function
 * */

void scheduler_init( void )
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
	schedulerVars.nrOfTasks = 0;
 8003e8e:	4b18      	ldr	r3, [pc, #96]	@ (8003ef0 <scheduler_init+0x68>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8003e96:	2300      	movs	r3, #0
 8003e98:	71fb      	strb	r3, [r7, #7]
 8003e9a:	e01f      	b.n	8003edc <scheduler_init+0x54>
	{
		schedulerVars.taskList[i].pTask = NULL;
 8003e9c:	79fa      	ldrb	r2, [r7, #7]
 8003e9e:	4914      	ldr	r1, [pc, #80]	@ (8003ef0 <scheduler_init+0x68>)
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].delay = 0;
 8003eae:	79fa      	ldrb	r2, [r7, #7]
 8003eb0:	490f      	ldr	r1, [pc, #60]	@ (8003ef0 <scheduler_init+0x68>)
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].lastExecutionTime = 0;
 8003ec2:	79fa      	ldrb	r2, [r7, #7]
 8003ec4:	490a      	ldr	r1, [pc, #40]	@ (8003ef0 <scheduler_init+0x68>)
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	71fb      	strb	r3, [r7, #7]
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	2b09      	cmp	r3, #9
 8003ee0:	d9dc      	bls.n	8003e9c <scheduler_init+0x14>
	}
}
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	20000138 	.word	0x20000138

08003ef4 <scheduler_runTask>:
	// no available task was found
	return 0;
}

uint8_t scheduler_runTask( void (*pTask)(void) )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8003efc:	2300      	movs	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	e019      	b.n	8003f36 <scheduler_runTask+0x42>
	{
		// search for available task.
		if ( schedulerVars.runOnceTaskList[i].pTask == NULL )
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	4a11      	ldr	r2, [pc, #68]	@ (8003f4c <scheduler_runTask+0x58>)
 8003f06:	331e      	adds	r3, #30
 8003f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10f      	bne.n	8003f30 <scheduler_runTask+0x3c>
		{
			schedulerVars.runOnceTaskList[i].pTask = pTask;
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	490e      	ldr	r1, [pc, #56]	@ (8003f4c <scheduler_runTask+0x58>)
 8003f14:	331e      	adds	r3, #30
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			schedulerVars.nrOfRunOnceTasks += 1;
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f4c <scheduler_runTask+0x58>)
 8003f1e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003f22:	3301      	adds	r3, #1
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	4b09      	ldr	r3, [pc, #36]	@ (8003f4c <scheduler_runTask+0x58>)
 8003f28:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			return 1;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e006      	b.n	8003f3e <scheduler_runTask+0x4a>
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_RUN_ONCE_TASKS; i += 1 )
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	3301      	adds	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	2b09      	cmp	r3, #9
 8003f3a:	d9e2      	bls.n	8003f02 <scheduler_runTask+0xe>
		}
	}
	// no available task was found
	return 0;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000138 	.word	0x20000138

08003f50 <scheduler_run>:

/*
 * function
 * */
void scheduler_run( void )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	603b      	str	r3, [r7, #0]
	while( 1 )
	{
		// run once tasks:
		for ( uint8_t i = 0; i < schedulerVars.nrOfRunOnceTasks; i += 1 )
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	71fb      	strb	r3, [r7, #7]
 8003f5e:	e016      	b.n	8003f8e <scheduler_run+0x3e>
		{
			// execute task
			schedulerVars.runOnceTaskList[i].pTask();
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	4a2a      	ldr	r2, [pc, #168]	@ (800400c <scheduler_run+0xbc>)
 8003f64:	331e      	adds	r3, #30
 8003f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f6a:	4798      	blx	r3

			// remove task from list:
			schedulerVars.runOnceTaskList[i].pTask = NULL;
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	4a27      	ldr	r2, [pc, #156]	@ (800400c <scheduler_run+0xbc>)
 8003f70:	331e      	adds	r3, #30
 8003f72:	2100      	movs	r1, #0
 8003f74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			schedulerVars.nrOfRunOnceTasks -= 1;
 8003f78:	4b24      	ldr	r3, [pc, #144]	@ (800400c <scheduler_run+0xbc>)
 8003f7a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	4b22      	ldr	r3, [pc, #136]	@ (800400c <scheduler_run+0xbc>)
 8003f84:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
		for ( uint8_t i = 0; i < schedulerVars.nrOfRunOnceTasks; i += 1 )
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	71fb      	strb	r3, [r7, #7]
 8003f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800400c <scheduler_run+0xbc>)
 8003f90:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003f94:	79fa      	ldrb	r2, [r7, #7]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d3e2      	bcc.n	8003f60 <scheduler_run+0x10>
		}

		// repeated tasks:
		now = HAL_GetTick();
 8003f9a:	f7fc fc39 	bl	8000810 <HAL_GetTick>
 8003f9e:	6038      	str	r0, [r7, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	71bb      	strb	r3, [r7, #6]
 8003fa4:	e02b      	b.n	8003ffe <scheduler_run+0xae>
		{
			if ( now - schedulerVars.taskList[i].lastExecutionTime  >= schedulerVars.taskList[i].delay )
 8003fa6:	79ba      	ldrb	r2, [r7, #6]
 8003fa8:	4918      	ldr	r1, [pc, #96]	@ (800400c <scheduler_run+0xbc>)
 8003faa:	4613      	mov	r3, r2
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	1ad1      	subs	r1, r2, r3
 8003fbc:	79ba      	ldrb	r2, [r7, #6]
 8003fbe:	4813      	ldr	r0, [pc, #76]	@ (800400c <scheduler_run+0xbc>)
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4403      	add	r3, r0
 8003fca:	3304      	adds	r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4299      	cmp	r1, r3
 8003fd0:	d312      	bcc.n	8003ff8 <scheduler_run+0xa8>
			{
				// execute task
				schedulerVars.taskList[i].pTask();
 8003fd2:	79ba      	ldrb	r2, [r7, #6]
 8003fd4:	490d      	ldr	r1, [pc, #52]	@ (800400c <scheduler_run+0xbc>)
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4798      	blx	r3
				schedulerVars.taskList[i].lastExecutionTime = now;
 8003fe4:	79ba      	ldrb	r2, [r7, #6]
 8003fe6:	4909      	ldr	r1, [pc, #36]	@ (800400c <scheduler_run+0xbc>)
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	601a      	str	r2, [r3, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8003ff8:	79bb      	ldrb	r3, [r7, #6]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	71bb      	strb	r3, [r7, #6]
 8003ffe:	4b03      	ldr	r3, [pc, #12]	@ (800400c <scheduler_run+0xbc>)
 8004000:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004004:	79ba      	ldrb	r2, [r7, #6]
 8004006:	429a      	cmp	r2, r3
 8004008:	d3cd      	bcc.n	8003fa6 <scheduler_run+0x56>
		for ( uint8_t i = 0; i < schedulerVars.nrOfRunOnceTasks; i += 1 )
 800400a:	e7a6      	b.n	8003f5a <scheduler_run+0xa>
 800400c:	20000138 	.word	0x20000138

08004010 <memset>:
 8004010:	4402      	add	r2, r0
 8004012:	4603      	mov	r3, r0
 8004014:	4293      	cmp	r3, r2
 8004016:	d100      	bne.n	800401a <memset+0xa>
 8004018:	4770      	bx	lr
 800401a:	f803 1b01 	strb.w	r1, [r3], #1
 800401e:	e7f9      	b.n	8004014 <memset+0x4>

08004020 <__libc_init_array>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	4d0d      	ldr	r5, [pc, #52]	@ (8004058 <__libc_init_array+0x38>)
 8004024:	4c0d      	ldr	r4, [pc, #52]	@ (800405c <__libc_init_array+0x3c>)
 8004026:	1b64      	subs	r4, r4, r5
 8004028:	10a4      	asrs	r4, r4, #2
 800402a:	2600      	movs	r6, #0
 800402c:	42a6      	cmp	r6, r4
 800402e:	d109      	bne.n	8004044 <__libc_init_array+0x24>
 8004030:	4d0b      	ldr	r5, [pc, #44]	@ (8004060 <__libc_init_array+0x40>)
 8004032:	4c0c      	ldr	r4, [pc, #48]	@ (8004064 <__libc_init_array+0x44>)
 8004034:	f000 f818 	bl	8004068 <_init>
 8004038:	1b64      	subs	r4, r4, r5
 800403a:	10a4      	asrs	r4, r4, #2
 800403c:	2600      	movs	r6, #0
 800403e:	42a6      	cmp	r6, r4
 8004040:	d105      	bne.n	800404e <__libc_init_array+0x2e>
 8004042:	bd70      	pop	{r4, r5, r6, pc}
 8004044:	f855 3b04 	ldr.w	r3, [r5], #4
 8004048:	4798      	blx	r3
 800404a:	3601      	adds	r6, #1
 800404c:	e7ee      	b.n	800402c <__libc_init_array+0xc>
 800404e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004052:	4798      	blx	r3
 8004054:	3601      	adds	r6, #1
 8004056:	e7f2      	b.n	800403e <__libc_init_array+0x1e>
 8004058:	080040b8 	.word	0x080040b8
 800405c:	080040b8 	.word	0x080040b8
 8004060:	080040b8 	.word	0x080040b8
 8004064:	080040bc 	.word	0x080040bc

08004068 <_init>:
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406a:	bf00      	nop
 800406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406e:	bc08      	pop	{r3}
 8004070:	469e      	mov	lr, r3
 8004072:	4770      	bx	lr

08004074 <_fini>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	bf00      	nop
 8004078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407a:	bc08      	pop	{r3}
 800407c:	469e      	mov	lr, r3
 800407e:	4770      	bx	lr

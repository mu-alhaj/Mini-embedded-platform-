
Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eac  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004040  08004040  00005040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004078  08004078  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004078  08004078  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004078  08004078  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004078  08004078  00005078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800407c  0800407c  0000507c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004080  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000144  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b0ef  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f02  00000000  00000000  0001112b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  00013030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000610  00000000  00000000  00013838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020084  00000000  00000000  00013e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd2e  00000000  00000000  00033ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfacd  00000000  00000000  00040bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001006c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e64  00000000  00000000  0010070c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00102570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004028 	.word	0x08004028

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004028 	.word	0x08004028

080001d4 <circularBuffer_init>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_init( tCircularBuffer* pBuffer, uint8_t* pData, uint16_t size )
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	4613      	mov	r3, r2
 80001e0:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if ( pBuffer == NULL || pData == NULL || size == 0 )
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d005      	beq.n	80001f4 <circularBuffer_init+0x20>
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d002      	beq.n	80001f4 <circularBuffer_init+0x20>
 80001ee:	88fb      	ldrh	r3, [r7, #6]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d101      	bne.n	80001f8 <circularBuffer_init+0x24>
	{
		return 1;
 80001f4:	2301      	movs	r3, #1
 80001f6:	e014      	b.n	8000222 <circularBuffer_init+0x4e>
	}

	// initialize the buffer
	pBuffer->size 		= size;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	88fa      	ldrh	r2, [r7, #6]
 80001fc:	801a      	strh	r2, [r3, #0]
	pBuffer->start 	= 0;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	2200      	movs	r2, #0
 8000202:	809a      	strh	r2, [r3, #4]
	pBuffer->end   	= 0;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	2200      	movs	r2, #0
 8000208:	805a      	strh	r2, [r3, #2]
	pBuffer->pBuffer 	= pData;
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	68ba      	ldr	r2, [r7, #8]
 800020e:	609a      	str	r2, [r3, #8]
	memset( pBuffer->pBuffer, 0, pBuffer->size );
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	6898      	ldr	r0, [r3, #8]
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	881b      	ldrh	r3, [r3, #0]
 8000218:	461a      	mov	r2, r3
 800021a:	2100      	movs	r1, #0
 800021c:	f003 fec9 	bl	8003fb2 <memset>

	return 0;
 8000220:	2300      	movs	r3, #0
}
 8000222:	4618      	mov	r0, r3
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}

0800022a <circularBuffer_push>:
/************************************
 * Function
 * **********************************
 */
uint8_t circularBuffer_push( tCircularBuffer* pBuffer, uint8_t* pInData, uint16_t size )
{
 800022a:	b580      	push	{r7, lr}
 800022c:	b086      	sub	sp, #24
 800022e:	af00      	add	r7, sp, #0
 8000230:	60f8      	str	r0, [r7, #12]
 8000232:	60b9      	str	r1, [r7, #8]
 8000234:	4613      	mov	r3, r2
 8000236:	80fb      	strh	r3, [r7, #6]
	// sanity check in parameters.
	if( pBuffer == NULL || pInData == NULL || pBuffer->size < size )
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d007      	beq.n	800024e <circularBuffer_push+0x24>
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d004      	beq.n	800024e <circularBuffer_push+0x24>
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	88fa      	ldrh	r2, [r7, #6]
 800024a:	429a      	cmp	r2, r3
 800024c:	d901      	bls.n	8000252 <circularBuffer_push+0x28>
	{
		return 1;
 800024e:	2301      	movs	r3, #1
 8000250:	e049      	b.n	80002e6 <circularBuffer_push+0xbc>
	}

	// check if there is enough place for the incoming data remaining in the buffer.
	if ( get_availabe( pBuffer ) < size )
 8000252:	68f8      	ldr	r0, [r7, #12]
 8000254:	f000 f84b 	bl	80002ee <get_availabe>
 8000258:	4603      	mov	r3, r0
 800025a:	461a      	mov	r2, r3
 800025c:	88fb      	ldrh	r3, [r7, #6]
 800025e:	4293      	cmp	r3, r2
 8000260:	d901      	bls.n	8000266 <circularBuffer_push+0x3c>
	{
		// not enough
		return 1;
 8000262:	2301      	movs	r3, #1
 8000264:	e03f      	b.n	80002e6 <circularBuffer_push+0xbc>
	 *    n n s d d d d e n n
	 *    d d d e n n n s d d
	 * */

	// do we need to loop over the buffer?
	uint16_t toTheEnd = pBuffer->size - pBuffer->end;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	881a      	ldrh	r2, [r3, #0]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	885b      	ldrh	r3, [r3, #2]
 800026e:	1ad3      	subs	r3, r2, r3
 8000270:	82fb      	strh	r3, [r7, #22]
	if ( toTheEnd < size )
 8000272:	8afa      	ldrh	r2, [r7, #22]
 8000274:	88fb      	ldrh	r3, [r7, #6]
 8000276:	429a      	cmp	r2, r3
 8000278:	d219      	bcs.n	80002ae <circularBuffer_push+0x84>
	{
		// first copy from the end of the existing data to the end of the buffer
		memcpy( pBuffer->pBuffer[pBuffer->end], pInData, toTheEnd );
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	68fa      	ldr	r2, [r7, #12]
 8000280:	8852      	ldrh	r2, [r2, #2]
 8000282:	4413      	add	r3, r2
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	4618      	mov	r0, r3
 8000288:	8afb      	ldrh	r3, [r7, #22]
 800028a:	461a      	mov	r2, r3
 800028c:	68b9      	ldr	r1, [r7, #8]
 800028e:	f003 febd 	bl	800400c <memcpy>
		// copy the reset of the inData from the beginning of the buffer.
		memcpy( pBuffer->pBuffer[0], pInData[toTheEnd], toTheEnd );
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	4618      	mov	r0, r3
 800029a:	8afb      	ldrh	r3, [r7, #22]
 800029c:	68ba      	ldr	r2, [r7, #8]
 800029e:	4413      	add	r3, r2
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	4619      	mov	r1, r3
 80002a4:	8afb      	ldrh	r3, [r7, #22]
 80002a6:	461a      	mov	r2, r3
 80002a8:	f003 feb0 	bl	800400c <memcpy>
 80002ac:	e00b      	b.n	80002c6 <circularBuffer_push+0x9c>
	}
	else
	{
		memcpy( pBuffer->pBuffer[pBuffer->end], pInData, size );
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	8852      	ldrh	r2, [r2, #2]
 80002b6:	4413      	add	r3, r2
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	88fb      	ldrh	r3, [r7, #6]
 80002be:	461a      	mov	r2, r3
 80002c0:	68b9      	ldr	r1, [r7, #8]
 80002c2:	f003 fea3 	bl	800400c <memcpy>
	}

	pBuffer->end = ( pBuffer->end + size ) % pBuffer->size;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	885b      	ldrh	r3, [r3, #2]
 80002ca:	461a      	mov	r2, r3
 80002cc:	88fb      	ldrh	r3, [r7, #6]
 80002ce:	4413      	add	r3, r2
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	8812      	ldrh	r2, [r2, #0]
 80002d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80002d8:	fb01 f202 	mul.w	r2, r1, r2
 80002dc:	1a9b      	subs	r3, r3, r2
 80002de:	b29a      	uxth	r2, r3
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	805a      	strh	r2, [r3, #2]

	return 0;
 80002e4:	2300      	movs	r3, #0
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3718      	adds	r7, #24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <get_availabe>:
/************************************
 * Function
 * **********************************
 */
uint16_t get_availabe( tCircularBuffer* pBuffer )
{
 80002ee:	b480      	push	{r7}
 80002f0:	b085      	sub	sp, #20
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
	 *    n n s d d d d e n n			available = ( 10 + 7 - 2 ) % 10 = 5
	 *    d d d e n n n s d d			available = ( 10 + 3 - 7 ) % 10 = 6
	 * */

	// if start and end are both on 0 the whole buffer size if available
	if( pBuffer->start == 0 && pBuffer->end == 0 )
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	889b      	ldrh	r3, [r3, #4]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d106      	bne.n	800030c <get_availabe+0x1e>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	885b      	ldrh	r3, [r3, #2]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d102      	bne.n	800030c <get_availabe+0x1e>
	{
		return pBuffer->size;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	e011      	b.n	8000330 <get_availabe+0x42>
	}

	// added size in the beginning to avoid negative modulus.
	uint16_t available = ( pBuffer->size + pBuffer->end - pBuffer->start ) % pBuffer->size;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	461a      	mov	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	885b      	ldrh	r3, [r3, #2]
 8000316:	4413      	add	r3, r2
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	8892      	ldrh	r2, [r2, #4]
 800031c:	1a9b      	subs	r3, r3, r2
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	8812      	ldrh	r2, [r2, #0]
 8000322:	fb93 f1f2 	sdiv	r1, r3, r2
 8000326:	fb01 f202 	mul.w	r2, r1, r2
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	81fb      	strh	r3, [r7, #14]
	return available;
 800032e:	89fb      	ldrh	r3, [r7, #14]
}
 8000330:	4618      	mov	r0, r3
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000342:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <MX_DMA_Init+0x38>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a0b      	ldr	r2, [pc, #44]	@ (8000374 <MX_DMA_Init+0x38>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6153      	str	r3, [r2, #20]
 800034e:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <MX_DMA_Init+0x38>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	2100      	movs	r1, #0
 800035e:	2010      	movs	r0, #16
 8000360:	f000 fbed 	bl	8000b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000364:	2010      	movs	r0, #16
 8000366:	f000 fc06 	bl	8000b76 <HAL_NVIC_EnableIRQ>

}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000

08000378 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b08a      	sub	sp, #40	@ 0x28
 800037c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	f107 0314 	add.w	r3, r7, #20
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038e:	4b4b      	ldr	r3, [pc, #300]	@ (80004bc <MX_GPIO_Init+0x144>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a4a      	ldr	r2, [pc, #296]	@ (80004bc <MX_GPIO_Init+0x144>)
 8000394:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b48      	ldr	r3, [pc, #288]	@ (80004bc <MX_GPIO_Init+0x144>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80003a2:	613b      	str	r3, [r7, #16]
 80003a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003a6:	4b45      	ldr	r3, [pc, #276]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a44      	ldr	r2, [pc, #272]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b42      	ldr	r3, [pc, #264]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003be:	4b3f      	ldr	r3, [pc, #252]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a3e      	ldr	r2, [pc, #248]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b3c      	ldr	r3, [pc, #240]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d6:	4b39      	ldr	r3, [pc, #228]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a38      	ldr	r2, [pc, #224]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ee:	4b33      	ldr	r3, [pc, #204]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a32      	ldr	r2, [pc, #200]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b30      	ldr	r3, [pc, #192]	@ (80004bc <MX_GPIO_Init+0x144>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2120      	movs	r1, #32
 800040a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800040e:	f000 ff85 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000412:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000418:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800041c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000422:	f107 0314 	add.w	r3, r7, #20
 8000426:	4619      	mov	r1, r3
 8000428:	4825      	ldr	r0, [pc, #148]	@ (80004c0 <MX_GPIO_Init+0x148>)
 800042a:	f000 fded 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800042e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000432:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000434:	2303      	movs	r3, #3
 8000436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	4619      	mov	r1, r3
 8000442:	481f      	ldr	r0, [pc, #124]	@ (80004c0 <MX_GPIO_Init+0x148>)
 8000444:	f000 fde0 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8000448:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 800044c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800044e:	2303      	movs	r3, #3
 8000450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000456:	f107 0314 	add.w	r3, r7, #20
 800045a:	4619      	mov	r1, r3
 800045c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000460:	f000 fdd2 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000464:	2320      	movs	r3, #32
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	2301      	movs	r3, #1
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2300      	movs	r3, #0
 8000472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	4619      	mov	r1, r3
 800047a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800047e:	f000 fdc3 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000482:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8000486:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000488:	2303      	movs	r3, #3
 800048a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	4619      	mov	r1, r3
 8000496:	480b      	ldr	r0, [pc, #44]	@ (80004c4 <MX_GPIO_Init+0x14c>)
 8000498:	f000 fdb6 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800049c:	2304      	movs	r3, #4
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a0:	2303      	movs	r3, #3
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	4619      	mov	r1, r3
 80004ae:	4806      	ldr	r0, [pc, #24]	@ (80004c8 <MX_GPIO_Init+0x150>)
 80004b0:	f000 fdaa 	bl	8001008 <HAL_GPIO_Init>

}
 80004b4:	bf00      	nop
 80004b6:	3728      	adds	r7, #40	@ 0x28
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	48000800 	.word	0x48000800
 80004c4:	48000400 	.word	0x48000400
 80004c8:	48000c00 	.word	0x48000c00

080004cc <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	807b      	strh	r3, [r7, #2]
	if ( huart->Instance == USART2 )
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a08      	ldr	r2, [pc, #32]	@ (8000500 <HAL_UARTEx_RxEventCallback+0x34>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d10a      	bne.n	80004f8 <HAL_UARTEx_RxEventCallback+0x2c>
	{
		// copy data to circular buffer;
		circularBuffer_push( &cbuffer, uart_dma_rxBuf, Size );
 80004e2:	887b      	ldrh	r3, [r7, #2]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4907      	ldr	r1, [pc, #28]	@ (8000504 <HAL_UARTEx_RxEventCallback+0x38>)
 80004e8:	4807      	ldr	r0, [pc, #28]	@ (8000508 <HAL_UARTEx_RxEventCallback+0x3c>)
 80004ea:	f7ff fe9e 	bl	800022a <circularBuffer_push>

		// restart receiving data.
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart_dma_rxBuf, RX_BUF_SIZE);
 80004ee:	2240      	movs	r2, #64	@ 0x40
 80004f0:	4904      	ldr	r1, [pc, #16]	@ (8000504 <HAL_UARTEx_RxEventCallback+0x38>)
 80004f2:	4806      	ldr	r0, [pc, #24]	@ (800050c <HAL_UARTEx_RxEventCallback+0x40>)
 80004f4:	f003 fd09 	bl	8003f0a <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40004400 	.word	0x40004400
 8000504:	20000028 	.word	0x20000028
 8000508:	20000074 	.word	0x20000074
 800050c:	20000080 	.word	0x20000080

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 f9d2 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f824 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f7ff ff2c 	bl	8000378 <MX_GPIO_Init>
  MX_DMA_Init();
 8000520:	f7ff ff0c 	bl	800033c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f8fc 	bl	8000720 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  circularBuffer_init( &cbuffer, cData , BUF_SIZE );
 8000528:	220a      	movs	r2, #10
 800052a:	490a      	ldr	r1, [pc, #40]	@ (8000554 <main+0x44>)
 800052c:	480a      	ldr	r0, [pc, #40]	@ (8000558 <main+0x48>)
 800052e:	f7ff fe51 	bl	80001d4 <circularBuffer_init>

  HAL_UARTEx_ReceiveToIdle_DMA( &huart2, uart_dma_rxBuf, RX_BUF_SIZE );
 8000532:	2240      	movs	r2, #64	@ 0x40
 8000534:	4909      	ldr	r1, [pc, #36]	@ (800055c <main+0x4c>)
 8000536:	480a      	ldr	r0, [pc, #40]	@ (8000560 <main+0x50>)
 8000538:	f003 fce7 	bl	8003f0a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT( huart2.hdmarx, DMA_IT_HT );	// not interested of half transfer interrupt.
 800053c:	4b08      	ldr	r3, [pc, #32]	@ (8000560 <main+0x50>)
 800053e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <main+0x50>)
 8000546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f022 0204 	bic.w	r2, r2, #4
 800054e:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <main+0x40>
 8000554:	20000068 	.word	0x20000068
 8000558:	20000074 	.word	0x20000074
 800055c:	20000028 	.word	0x20000028
 8000560:	20000080 	.word	0x20000080

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b0a6      	sub	sp, #152	@ 0x98
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800056e:	2228      	movs	r2, #40	@ 0x28
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fd1d 	bl	8003fb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2258      	movs	r2, #88	@ 0x58
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fd0f 	bl	8003fb2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005b0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fec2 	bl	800134c <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005ce:	f000 f827 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005ec:	2102      	movs	r1, #2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 ff00 	bl	80023f4 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fa:	f000 f811 	bl	8000620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005fe:	2302      	movs	r3, #2
 8000600:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4618      	mov	r0, r3
 800060a:	f002 f913 	bl	8002834 <HAL_RCCEx_PeriphCLKConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000614:	f000 f804 	bl	8000620 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3798      	adds	r7, #152	@ 0x98
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <Error_Handler+0x8>

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <HAL_MspInit+0x44>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a0e      	ldr	r2, [pc, #56]	@ (8000670 <HAL_MspInit+0x44>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <HAL_MspInit+0x44>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <HAL_MspInit+0x44>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a08      	ldr	r2, [pc, #32]	@ (8000670 <HAL_MspInit+0x44>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <HAL_MspInit+0x44>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000662:	2007      	movs	r0, #7
 8000664:	f000 fa60 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <NMI_Handler+0x4>

0800067c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <HardFault_Handler+0x4>

08000684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <MemManage_Handler+0x4>

0800068c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <BusFault_Handler+0x4>

08000694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <UsageFault_Handler+0x4>

0800069c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ca:	f000 f93d 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006d8:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <DMA1_Channel6_IRQHandler+0x10>)
 80006da:	f000 fb88 	bl	8000dee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000108 	.word	0x20000108

080006e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006ec:	4802      	ldr	r0, [pc, #8]	@ (80006f8 <USART2_IRQHandler+0x10>)
 80006ee:	f002 fb0d 	bl	8002d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000080 	.word	0x20000080

080006fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <SystemInit+0x20>)
 8000702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <SystemInit+0x20>)
 8000708:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800070c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000726:	4a15      	ldr	r2, [pc, #84]	@ (800077c <MX_USART2_UART_Init+0x5c>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART2_UART_Init+0x58>)
 8000764:	f002 fa84 	bl	8002c70 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800076e:	f7ff ff57 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000080 	.word	0x20000080
 800077c:	40004400 	.word	0x40004400

08000780 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a2e      	ldr	r2, [pc, #184]	@ (8000858 <HAL_UART_MspInit+0xd8>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d156      	bne.n	8000850 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a2:	4b2e      	ldr	r3, [pc, #184]	@ (800085c <HAL_UART_MspInit+0xdc>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a2d      	ldr	r2, [pc, #180]	@ (800085c <HAL_UART_MspInit+0xdc>)
 80007a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b2b      	ldr	r3, [pc, #172]	@ (800085c <HAL_UART_MspInit+0xdc>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b28      	ldr	r3, [pc, #160]	@ (800085c <HAL_UART_MspInit+0xdc>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a27      	ldr	r2, [pc, #156]	@ (800085c <HAL_UART_MspInit+0xdc>)
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b25      	ldr	r3, [pc, #148]	@ (800085c <HAL_UART_MspInit+0xdc>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d2:	230c      	movs	r3, #12
 80007d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e2:	2307      	movs	r3, #7
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f0:	f000 fc0a 	bl	8001008 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <HAL_UART_MspInit+0xe0>)
 80007f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000864 <HAL_UART_MspInit+0xe4>)
 80007f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <HAL_UART_MspInit+0xe0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000800:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <HAL_UART_MspInit+0xe0>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <HAL_UART_MspInit+0xe0>)
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <HAL_UART_MspInit+0xe0>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <HAL_UART_MspInit+0xe0>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <HAL_UART_MspInit+0xe0>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800081e:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <HAL_UART_MspInit+0xe0>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000824:	480e      	ldr	r0, [pc, #56]	@ (8000860 <HAL_UART_MspInit+0xe0>)
 8000826:	f000 f9c0 	bl	8000baa <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000830:	f7ff fef6 	bl	8000620 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <HAL_UART_MspInit+0xe0>)
 8000838:	675a      	str	r2, [r3, #116]	@ 0x74
 800083a:	4a09      	ldr	r2, [pc, #36]	@ (8000860 <HAL_UART_MspInit+0xe0>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	2026      	movs	r0, #38	@ 0x26
 8000846:	f000 f97a 	bl	8000b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800084a:	2026      	movs	r0, #38	@ 0x26
 800084c:	f000 f993 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	@ 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40004400 	.word	0x40004400
 800085c:	40021000 	.word	0x40021000
 8000860:	20000108 	.word	0x20000108
 8000864:	4002006c 	.word	0x4002006c

08000868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008a0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800086c:	f7ff ff46 	bl	80006fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000872:	490d      	ldr	r1, [pc, #52]	@ (80008a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000874:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <LoopForever+0xe>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000888:	4c0a      	ldr	r4, [pc, #40]	@ (80008b4 <LoopForever+0x16>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000896:	f003 fb95 	bl	8003fc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800089a:	f7ff fe39 	bl	8000510 <main>

0800089e <LoopForever>:

LoopForever:
    b LoopForever
 800089e:	e7fe      	b.n	800089e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008ac:	08004080 	.word	0x08004080
  ldr r2, =_sbss
 80008b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008b4:	20000150 	.word	0x20000150

080008b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC1_2_IRQHandler>
	...

080008bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <HAL_Init+0x28>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	@ (80008e4 <HAL_Init+0x28>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f92b 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f808 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff fea8 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40022000 	.word	0x40022000

080008e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <HAL_InitTick+0x54>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <HAL_InitTick+0x58>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f943 	bl	8000b92 <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e00e      	b.n	8000934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d80a      	bhi.n	8000932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f000 f90b 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000928:	4a06      	ldr	r2, [pc, #24]	@ (8000944 <HAL_InitTick+0x5c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000000 	.word	0x20000000
 8000940:	20000008 	.word	0x20000008
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_IncTick+0x20>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_IncTick+0x24>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a04      	ldr	r2, [pc, #16]	@ (800096c <HAL_IncTick+0x24>)
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000008 	.word	0x20000008
 800096c:	2000014c 	.word	0x2000014c

08000970 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return uwTick;  
 8000974:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <HAL_GetTick+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	2000014c 	.word	0x2000014c

08000988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	db0b      	blt.n	8000a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f003 021f 	and.w	r2, r3, #31
 8000a04:	4907      	ldr	r1, [pc, #28]	@ (8000a24 <__NVIC_EnableIRQ+0x38>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	095b      	lsrs	r3, r3, #5
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	@ (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	@ (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	@ 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	@ 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff8e 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff29 	bl	8000988 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff3e 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff8e 	bl	8000a7c <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5d 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff31 	bl	80009ec <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffa2 	bl	8000ae4 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d101      	bne.n	8000bc0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e037      	b.n	8000c30 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000bd6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000bda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 f9bc 	bl	8000f90 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d101      	bne.n	8000c58 <HAL_DMA_Start_IT+0x20>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e04a      	b.n	8000cee <HAL_DMA_Start_IT+0xb6>
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d13a      	bne.n	8000ce0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2200      	movs	r2, #0
 8000c76:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f022 0201 	bic.w	r2, r2, #1
 8000c86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f000 f950 	bl	8000f34 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d008      	beq.n	8000cae <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f042 020e 	orr.w	r2, r2, #14
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e00f      	b.n	8000cce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f042 020a 	orr.w	r2, r2, #10
 8000cbc:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f022 0204 	bic.w	r2, r2, #4
 8000ccc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f042 0201 	orr.w	r2, r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e005      	b.n	8000cec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e02e      	b.n	8000d66 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d008      	beq.n	8000d24 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2204      	movs	r2, #4
 8000d16:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e020      	b.n	8000d66 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 020e 	bic.w	r2, r2, #14
 8000d32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0201 	bic.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d005      	beq.n	8000d94 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e027      	b.n	8000de4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 020e 	bic.w	r2, r2, #14
 8000da2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	4798      	blx	r3
    }
  }
  return status;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d024      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x72>
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d01f      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0320 	and.w	r3, r3, #32
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0204 	bic.w	r2, r2, #4
 8000e3c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e46:	2104      	movs	r1, #4
 8000e48:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d06a      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e5e:	e065      	b.n	8000f2c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	2202      	movs	r2, #2
 8000e66:	409a      	lsls	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d02c      	beq.n	8000eca <HAL_DMA_IRQHandler+0xdc>
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d027      	beq.n	8000eca <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0320 	and.w	r3, r3, #32
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10b      	bne.n	8000ea0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 020a 	bic.w	r2, r2, #10
 8000e96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d035      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ec8:	e030      	b.n	8000f2c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	2208      	movs	r2, #8
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d028      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x13e>
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d023      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 020e 	bic.w	r2, r2, #14
 8000ef2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000efc:	2101      	movs	r1, #1
 8000efe:	fa01 f202 	lsl.w	r2, r1, r2
 8000f02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d004      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	4798      	blx	r3
    }
  }
}
 8000f2a:	e7ff      	b.n	8000f2c <HAL_DMA_IRQHandler+0x13e>
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b10      	cmp	r3, #16
 8000f60:	d108      	bne.n	8000f74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f72:	e007      	b.n	8000f84 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	60da      	str	r2, [r3, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <DMA_CalcBaseAndBitshift+0x60>)
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d80f      	bhi.n	8000fc4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <DMA_CalcBaseAndBitshift+0x64>)
 8000fac:	4413      	add	r3, r2
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <DMA_CalcBaseAndBitshift+0x68>)
 8000fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	009a      	lsls	r2, r3, #2
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000ffc <DMA_CalcBaseAndBitshift+0x6c>)
 8000fc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000fc2:	e00e      	b.n	8000fe2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <DMA_CalcBaseAndBitshift+0x70>)
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <DMA_CalcBaseAndBitshift+0x68>)
 8000fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	009a      	lsls	r2, r3, #2
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a09      	ldr	r2, [pc, #36]	@ (8001004 <DMA_CalcBaseAndBitshift+0x74>)
 8000fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40020407 	.word	0x40020407
 8000ff4:	bffdfff8 	.word	0xbffdfff8
 8000ff8:	cccccccd 	.word	0xcccccccd
 8000ffc:	40020000 	.word	0x40020000
 8001000:	bffdfbf8 	.word	0xbffdfbf8
 8001004:	40020400 	.word	0x40020400

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001016:	e160      	b.n	80012da <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8152 	beq.w	80012d4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b01      	cmp	r3, #1
 800103a:	d005      	beq.n	8001048 <HAL_GPIO_Init+0x40>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d130      	bne.n	80010aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107e:	2201      	movs	r2, #1
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	f003 0201 	and.w	r2, r3, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d017      	beq.n	80010e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d123      	bne.n	800113a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0203 	and.w	r2, r3, #3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80ac 	beq.w	80012d4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117c:	4b5e      	ldr	r3, [pc, #376]	@ (80012f8 <HAL_GPIO_Init+0x2f0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a5d      	ldr	r2, [pc, #372]	@ (80012f8 <HAL_GPIO_Init+0x2f0>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b5b      	ldr	r3, [pc, #364]	@ (80012f8 <HAL_GPIO_Init+0x2f0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001194:	4a59      	ldr	r2, [pc, #356]	@ (80012fc <HAL_GPIO_Init+0x2f4>)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011be:	d025      	beq.n	800120c <HAL_GPIO_Init+0x204>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a4f      	ldr	r2, [pc, #316]	@ (8001300 <HAL_GPIO_Init+0x2f8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d01f      	beq.n	8001208 <HAL_GPIO_Init+0x200>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001304 <HAL_GPIO_Init+0x2fc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d019      	beq.n	8001204 <HAL_GPIO_Init+0x1fc>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001308 <HAL_GPIO_Init+0x300>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d013      	beq.n	8001200 <HAL_GPIO_Init+0x1f8>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a4c      	ldr	r2, [pc, #304]	@ (800130c <HAL_GPIO_Init+0x304>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d00d      	beq.n	80011fc <HAL_GPIO_Init+0x1f4>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001310 <HAL_GPIO_Init+0x308>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d007      	beq.n	80011f8 <HAL_GPIO_Init+0x1f0>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001314 <HAL_GPIO_Init+0x30c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d101      	bne.n	80011f4 <HAL_GPIO_Init+0x1ec>
 80011f0:	2306      	movs	r3, #6
 80011f2:	e00c      	b.n	800120e <HAL_GPIO_Init+0x206>
 80011f4:	2307      	movs	r3, #7
 80011f6:	e00a      	b.n	800120e <HAL_GPIO_Init+0x206>
 80011f8:	2305      	movs	r3, #5
 80011fa:	e008      	b.n	800120e <HAL_GPIO_Init+0x206>
 80011fc:	2304      	movs	r3, #4
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x206>
 8001200:	2303      	movs	r3, #3
 8001202:	e004      	b.n	800120e <HAL_GPIO_Init+0x206>
 8001204:	2302      	movs	r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x206>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_GPIO_Init+0x206>
 800120c:	2300      	movs	r3, #0
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	f002 0203 	and.w	r2, r2, #3
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	4093      	lsls	r3, r2
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800121e:	4937      	ldr	r1, [pc, #220]	@ (80012fc <HAL_GPIO_Init+0x2f4>)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122c:	4b3a      	ldr	r3, [pc, #232]	@ (8001318 <HAL_GPIO_Init+0x310>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001250:	4a31      	ldr	r2, [pc, #196]	@ (8001318 <HAL_GPIO_Init+0x310>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001256:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <HAL_GPIO_Init+0x310>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800127a:	4a27      	ldr	r2, [pc, #156]	@ (8001318 <HAL_GPIO_Init+0x310>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001280:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <HAL_GPIO_Init+0x310>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001318 <HAL_GPIO_Init+0x310>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <HAL_GPIO_Init+0x310>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <HAL_GPIO_Init+0x310>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f47f ae97 	bne.w	8001018 <HAL_GPIO_Init+0x10>
  }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	48001000 	.word	0x48001000
 8001310:	48001400 	.word	0x48001400
 8001314:	48001800 	.word	0x48001800
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001338:	e002      	b.n	8001340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001352:	af00      	add	r7, sp, #0
 8001354:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001358:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800135c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800135e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001362:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	f001 b83a 	b.w	80023e6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001372:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001376:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 816f 	beq.w	8001666 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001388:	4bb5      	ldr	r3, [pc, #724]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b04      	cmp	r3, #4
 8001392:	d00c      	beq.n	80013ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001394:	4bb2      	ldr	r3, [pc, #712]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b08      	cmp	r3, #8
 800139e:	d15c      	bne.n	800145a <HAL_RCC_OscConfig+0x10e>
 80013a0:	4baf      	ldr	r3, [pc, #700]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80013a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ac:	d155      	bne.n	800145a <HAL_RCC_OscConfig+0x10e>
 80013ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013b2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013c2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c6:	fab3 f383 	clz	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	095b      	lsrs	r3, r3, #5
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d102      	bne.n	80013e0 <HAL_RCC_OscConfig+0x94>
 80013da:	4ba1      	ldr	r3, [pc, #644]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	e015      	b.n	800140c <HAL_RCC_OscConfig+0xc0>
 80013e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013e4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80013ec:	fa93 f3a3 	rbit	r3, r3
 80013f0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80013f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013f8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80013fc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001400:	fa93 f3a3 	rbit	r3, r3
 8001404:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001408:	4b95      	ldr	r3, [pc, #596]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 800140a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001410:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001414:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001418:	fa92 f2a2 	rbit	r2, r2
 800141c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001420:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001424:	fab2 f282 	clz	r2, r2
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	f042 0220 	orr.w	r2, r2, #32
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	f002 021f 	and.w	r2, r2, #31
 8001434:	2101      	movs	r1, #1
 8001436:	fa01 f202 	lsl.w	r2, r1, r2
 800143a:	4013      	ands	r3, r2
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8111 	beq.w	8001664 <HAL_RCC_OscConfig+0x318>
 8001442:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001446:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 8108 	bne.w	8001664 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	f000 bfc6 	b.w	80023e6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x12e>
 800146c:	4b7c      	ldr	r3, [pc, #496]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a7b      	ldr	r2, [pc, #492]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 8001472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e036      	b.n	80014e8 <HAL_RCC_OscConfig+0x19c>
 800147a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800147e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x158>
 800148a:	4b75      	ldr	r3, [pc, #468]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a74      	ldr	r2, [pc, #464]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 8001490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b72      	ldr	r3, [pc, #456]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a71      	ldr	r2, [pc, #452]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 800149c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e021      	b.n	80014e8 <HAL_RCC_OscConfig+0x19c>
 80014a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x184>
 80014b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a69      	ldr	r2, [pc, #420]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b67      	ldr	r3, [pc, #412]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a66      	ldr	r2, [pc, #408]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0x19c>
 80014d0:	4b63      	ldr	r3, [pc, #396]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a62      	ldr	r2, [pc, #392]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b60      	ldr	r3, [pc, #384]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a5f      	ldr	r2, [pc, #380]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d059      	beq.n	80015ac <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fa3a 	bl	8000970 <HAL_GetTick>
 80014fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001500:	e00a      	b.n	8001518 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001502:	f7ff fa35 	bl	8000970 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	@ 0x64
 8001510:	d902      	bls.n	8001518 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	f000 bf67 	b.w	80023e6 <HAL_RCC_OscConfig+0x109a>
 8001518:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800151c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800152c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <HAL_RCC_OscConfig+0x1fe>
 8001544:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	e015      	b.n	8001576 <HAL_RCC_OscConfig+0x22a>
 800154a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800154e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001556:	fa93 f3a3 	rbit	r3, r3
 800155a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800155e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001562:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001566:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001572:	4b3b      	ldr	r3, [pc, #236]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800157a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800157e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001582:	fa92 f2a2 	rbit	r2, r2
 8001586:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800158a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800158e:	fab2 f282 	clz	r2, r2
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	f042 0220 	orr.w	r2, r2, #32
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	f002 021f 	and.w	r2, r2, #31
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0ab      	beq.n	8001502 <HAL_RCC_OscConfig+0x1b6>
 80015aa:	e05c      	b.n	8001666 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff f9e0 	bl	8000970 <HAL_GetTick>
 80015b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b6:	f7ff f9db 	bl	8000970 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d902      	bls.n	80015cc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	f000 bf0d 	b.w	80023e6 <HAL_RCC_OscConfig+0x109a>
 80015cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015d0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80015e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e4:	fab3 f383 	clz	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d102      	bne.n	80015fe <HAL_RCC_OscConfig+0x2b2>
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	e015      	b.n	800162a <HAL_RCC_OscConfig+0x2de>
 80015fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001602:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001606:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800160a:	fa93 f3a3 	rbit	r3, r3
 800160e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001612:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001616:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800161a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800161e:	fa93 f3a3 	rbit	r3, r3
 8001622:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_RCC_OscConfig+0x314>)
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800162e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001632:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001636:	fa92 f2a2 	rbit	r2, r2
 800163a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800163e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001642:	fab2 f282 	clz	r2, r2
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	f042 0220 	orr.w	r2, r2, #32
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	f002 021f 	and.w	r2, r2, #31
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1ab      	bne.n	80015b6 <HAL_RCC_OscConfig+0x26a>
 800165e:	e002      	b.n	8001666 <HAL_RCC_OscConfig+0x31a>
 8001660:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 817f 	beq.w	800197a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800167c:	4ba7      	ldr	r3, [pc, #668]	@ (800191c <HAL_RCC_OscConfig+0x5d0>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001688:	4ba4      	ldr	r3, [pc, #656]	@ (800191c <HAL_RCC_OscConfig+0x5d0>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d173      	bne.n	800177c <HAL_RCC_OscConfig+0x430>
 8001694:	4ba1      	ldr	r3, [pc, #644]	@ (800191c <HAL_RCC_OscConfig+0x5d0>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800169c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016a0:	d16c      	bne.n	800177c <HAL_RCC_OscConfig+0x430>
 80016a2:	2302      	movs	r3, #2
 80016a4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80016ac:	fa93 f3a3 	rbit	r3, r3
 80016b0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80016b4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b8:	fab3 f383 	clz	r3, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d102      	bne.n	80016d2 <HAL_RCC_OscConfig+0x386>
 80016cc:	4b93      	ldr	r3, [pc, #588]	@ (800191c <HAL_RCC_OscConfig+0x5d0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	e013      	b.n	80016fa <HAL_RCC_OscConfig+0x3ae>
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80016e4:	2302      	movs	r3, #2
 80016e6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80016ea:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80016f6:	4b89      	ldr	r3, [pc, #548]	@ (800191c <HAL_RCC_OscConfig+0x5d0>)
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	2202      	movs	r2, #2
 80016fc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001700:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001704:	fa92 f2a2 	rbit	r2, r2
 8001708:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800170c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001710:	fab2 f282 	clz	r2, r2
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	f042 0220 	orr.w	r2, r2, #32
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	f002 021f 	and.w	r2, r2, #31
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f202 	lsl.w	r2, r1, r2
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00a      	beq.n	8001742 <HAL_RCC_OscConfig+0x3f6>
 800172c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001730:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d002      	beq.n	8001742 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	f000 be52 	b.w	80023e6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b76      	ldr	r3, [pc, #472]	@ (800191c <HAL_RCC_OscConfig+0x5d0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800174a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800174e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	21f8      	movs	r1, #248	@ 0xf8
 8001758:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001760:	fa91 f1a1 	rbit	r1, r1
 8001764:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001768:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800176c:	fab1 f181 	clz	r1, r1
 8001770:	b2c9      	uxtb	r1, r1
 8001772:	408b      	lsls	r3, r1
 8001774:	4969      	ldr	r1, [pc, #420]	@ (800191c <HAL_RCC_OscConfig+0x5d0>)
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	e0fe      	b.n	800197a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800177c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001780:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 8088 	beq.w	800189e <HAL_RCC_OscConfig+0x552>
 800178e:	2301      	movs	r3, #1
 8001790:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001794:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80017a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80017ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	461a      	mov	r2, r3
 80017b6:	2301      	movs	r3, #1
 80017b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff f8d9 	bl	8000970 <HAL_GetTick>
 80017be:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	e00a      	b.n	80017da <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c4:	f7ff f8d4 	bl	8000970 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d902      	bls.n	80017da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	f000 be06 	b.w	80023e6 <HAL_RCC_OscConfig+0x109a>
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80017e4:	fa93 f3a3 	rbit	r3, r3
 80017e8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80017ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d102      	bne.n	800180a <HAL_RCC_OscConfig+0x4be>
 8001804:	4b45      	ldr	r3, [pc, #276]	@ (800191c <HAL_RCC_OscConfig+0x5d0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	e013      	b.n	8001832 <HAL_RCC_OscConfig+0x4e6>
 800180a:	2302      	movs	r3, #2
 800180c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800181c:	2302      	movs	r3, #2
 800181e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001822:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800182e:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <HAL_RCC_OscConfig+0x5d0>)
 8001830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001832:	2202      	movs	r2, #2
 8001834:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001838:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800183c:	fa92 f2a2 	rbit	r2, r2
 8001840:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001844:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001848:	fab2 f282 	clz	r2, r2
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	f042 0220 	orr.w	r2, r2, #32
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	f002 021f 	and.w	r2, r2, #31
 8001858:	2101      	movs	r1, #1
 800185a:	fa01 f202 	lsl.w	r2, r1, r2
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0af      	beq.n	80017c4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001864:	4b2d      	ldr	r3, [pc, #180]	@ (800191c <HAL_RCC_OscConfig+0x5d0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800186c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001870:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	21f8      	movs	r1, #248	@ 0xf8
 800187a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001882:	fa91 f1a1 	rbit	r1, r1
 8001886:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800188a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800188e:	fab1 f181 	clz	r1, r1
 8001892:	b2c9      	uxtb	r1, r1
 8001894:	408b      	lsls	r3, r1
 8001896:	4921      	ldr	r1, [pc, #132]	@ (800191c <HAL_RCC_OscConfig+0x5d0>)
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
 800189c:	e06d      	b.n	800197a <HAL_RCC_OscConfig+0x62e>
 800189e:	2301      	movs	r3, #1
 80018a0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80018b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018be:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	461a      	mov	r2, r3
 80018c6:	2300      	movs	r3, #0
 80018c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff f851 	bl	8000970 <HAL_GetTick>
 80018ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d4:	f7ff f84c 	bl	8000970 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d902      	bls.n	80018ea <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f000 bd7e 	b.w	80023e6 <HAL_RCC_OscConfig+0x109a>
 80018ea:	2302      	movs	r3, #2
 80018ec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80018fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0x5d4>
 8001914:	4b01      	ldr	r3, [pc, #4]	@ (800191c <HAL_RCC_OscConfig+0x5d0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e016      	b.n	8001948 <HAL_RCC_OscConfig+0x5fc>
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	2302      	movs	r3, #2
 8001922:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001932:	2302      	movs	r3, #2
 8001934:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001938:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001944:	4bbf      	ldr	r3, [pc, #764]	@ (8001c44 <HAL_RCC_OscConfig+0x8f8>)
 8001946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001948:	2202      	movs	r2, #2
 800194a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800194e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001952:	fa92 f2a2 	rbit	r2, r2
 8001956:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800195a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800195e:	fab2 f282 	clz	r2, r2
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	f042 0220 	orr.w	r2, r2, #32
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	f002 021f 	and.w	r2, r2, #31
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f202 	lsl.w	r2, r1, r2
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1ac      	bne.n	80018d4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 8113 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001990:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001994:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d07c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x74e>
 80019a0:	2301      	movs	r3, #1
 80019a2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80019b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	4ba2      	ldr	r3, [pc, #648]	@ (8001c48 <HAL_RCC_OscConfig+0x8fc>)
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	461a      	mov	r2, r3
 80019c6:	2301      	movs	r3, #1
 80019c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7fe ffd1 	bl	8000970 <HAL_GetTick>
 80019ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d4:	f7fe ffcc 	bl	8000970 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d902      	bls.n	80019ea <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	f000 bcfe 	b.w	80023e6 <HAL_RCC_OscConfig+0x109a>
 80019ea:	2302      	movs	r3, #2
 80019ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80019f4:	fa93 f2a3 	rbit	r2, r3
 80019f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fa93 f2a3 	rbit	r2, r3
 8001a1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a2e:	2202      	movs	r2, #2
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fa93 f2a3 	rbit	r2, r3
 8001a40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	4b7e      	ldr	r3, [pc, #504]	@ (8001c44 <HAL_RCC_OscConfig+0x8f8>)
 8001a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a52:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a56:	2102      	movs	r1, #2
 8001a58:	6019      	str	r1, [r3, #0]
 8001a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f1a3 	rbit	r1, r3
 8001a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a70:	6019      	str	r1, [r3, #0]
  return result;
 8001a72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a76:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f003 031f 	and.w	r3, r3, #31
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d09d      	beq.n	80019d4 <HAL_RCC_OscConfig+0x688>
 8001a98:	e08d      	b.n	8001bb6 <HAL_RCC_OscConfig+0x86a>
 8001a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aaa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	fa93 f2a3 	rbit	r2, r3
 8001ab4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001abc:	601a      	str	r2, [r3, #0]
  return result;
 8001abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ac6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b5d      	ldr	r3, [pc, #372]	@ (8001c48 <HAL_RCC_OscConfig+0x8fc>)
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7fe ff48 	bl	8000970 <HAL_GetTick>
 8001ae0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7fe ff43 	bl	8000970 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d902      	bls.n	8001afc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	f000 bc75 	b.w	80023e6 <HAL_RCC_OscConfig+0x109a>
 8001afc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b00:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b04:	2202      	movs	r2, #2
 8001b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	fa93 f2a3 	rbit	r2, r3
 8001b16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b28:	2202      	movs	r2, #2
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b54:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b62:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001b66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b68:	4b36      	ldr	r3, [pc, #216]	@ (8001c44 <HAL_RCC_OscConfig+0x8f8>)
 8001b6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b74:	2102      	movs	r1, #2
 8001b76:	6019      	str	r1, [r3, #0]
 8001b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	fa93 f1a3 	rbit	r1, r3
 8001b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b8e:	6019      	str	r1, [r3, #0]
  return result;
 8001b90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b94:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	2101      	movs	r1, #1
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d197      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 81a5 	beq.w	8001f16 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <HAL_RCC_OscConfig+0x8f8>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_RCC_OscConfig+0x8f8>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a18      	ldr	r2, [pc, #96]	@ (8001c44 <HAL_RCC_OscConfig+0x8f8>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	61d3      	str	r3, [r2, #28]
 8001bea:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <HAL_RCC_OscConfig+0x8f8>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c04:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <HAL_RCC_OscConfig+0x900>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d121      	bne.n	8001c5c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <HAL_RCC_OscConfig+0x900>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c4c <HAL_RCC_OscConfig+0x900>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c22:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c24:	f7fe fea4 	bl	8000970 <HAL_GetTick>
 8001c28:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	e010      	b.n	8001c50 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7fe fe9f 	bl	8000970 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	@ 0x64
 8001c3c:	d908      	bls.n	8001c50 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e3d1      	b.n	80023e6 <HAL_RCC_OscConfig+0x109a>
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	10908120 	.word	0x10908120
 8001c4c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	4b8d      	ldr	r3, [pc, #564]	@ (8001e88 <HAL_RCC_OscConfig+0xb3c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0e8      	beq.n	8001c2e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x92e>
 8001c6c:	4b87      	ldr	r3, [pc, #540]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4a86      	ldr	r2, [pc, #536]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6213      	str	r3, [r2, #32]
 8001c78:	e035      	b.n	8001ce6 <HAL_RCC_OscConfig+0x99a>
 8001c7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x958>
 8001c8a:	4b80      	ldr	r3, [pc, #512]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a7f      	ldr	r2, [pc, #508]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	6213      	str	r3, [r2, #32]
 8001c96:	4b7d      	ldr	r3, [pc, #500]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4a7c      	ldr	r2, [pc, #496]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001c9c:	f023 0304 	bic.w	r3, r3, #4
 8001ca0:	6213      	str	r3, [r2, #32]
 8001ca2:	e020      	b.n	8001ce6 <HAL_RCC_OscConfig+0x99a>
 8001ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d10c      	bne.n	8001cce <HAL_RCC_OscConfig+0x982>
 8001cb4:	4b75      	ldr	r3, [pc, #468]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4a74      	ldr	r2, [pc, #464]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6213      	str	r3, [r2, #32]
 8001cc0:	4b72      	ldr	r3, [pc, #456]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a71      	ldr	r2, [pc, #452]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	e00b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x99a>
 8001cce:	4b6f      	ldr	r3, [pc, #444]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	4b6c      	ldr	r3, [pc, #432]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a6b      	ldr	r2, [pc, #428]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8081 	beq.w	8001dfa <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf8:	f7fe fe3a 	bl	8000970 <HAL_GetTick>
 8001cfc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	e00b      	b.n	8001d1a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7fe fe35 	bl	8000970 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e365      	b.n	80023e6 <HAL_RCC_OscConfig+0x109a>
 8001d1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d1e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d22:	2202      	movs	r2, #2
 8001d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d38:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d42:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d46:	2202      	movs	r2, #2
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fa93 f2a3 	rbit	r2, r3
 8001d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d60:	601a      	str	r2, [r3, #0]
  return result;
 8001d62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d66:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d102      	bne.n	8001d86 <HAL_RCC_OscConfig+0xa3a>
 8001d80:	4b42      	ldr	r3, [pc, #264]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	e013      	b.n	8001dae <HAL_RCC_OscConfig+0xa62>
 8001d86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d8a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d8e:	2202      	movs	r2, #2
 8001d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d96:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	fa93 f2a3 	rbit	r2, r3
 8001da0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	4b38      	ldr	r3, [pc, #224]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001db2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001db6:	2102      	movs	r1, #2
 8001db8:	6011      	str	r1, [r2, #0]
 8001dba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dbe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	fa92 f1a2 	rbit	r1, r2
 8001dc8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dcc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001dd0:	6011      	str	r1, [r2, #0]
  return result;
 8001dd2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dd6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	fab2 f282 	clz	r2, r2
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f002 021f 	and.w	r2, r2, #31
 8001dec:	2101      	movs	r1, #1
 8001dee:	fa01 f202 	lsl.w	r2, r1, r2
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d084      	beq.n	8001d02 <HAL_RCC_OscConfig+0x9b6>
 8001df8:	e083      	b.n	8001f02 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7fe fdb9 	bl	8000970 <HAL_GetTick>
 8001dfe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e04:	f7fe fdb4 	bl	8000970 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e2e4      	b.n	80023e6 <HAL_RCC_OscConfig+0x109a>
 8001e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e20:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e24:	2202      	movs	r2, #2
 8001e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	fa93 f2a3 	rbit	r2, r3
 8001e36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e44:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e48:	2202      	movs	r2, #2
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	fa93 f2a3 	rbit	r2, r3
 8001e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e5e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e62:	601a      	str	r2, [r3, #0]
  return result;
 8001e64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e68:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e6c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d106      	bne.n	8001e90 <HAL_RCC_OscConfig+0xb44>
 8001e82:	4b02      	ldr	r3, [pc, #8]	@ (8001e8c <HAL_RCC_OscConfig+0xb40>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	e017      	b.n	8001eb8 <HAL_RCC_OscConfig+0xb6c>
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e94:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e98:	2202      	movs	r2, #2
 8001e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	fa93 f2a3 	rbit	r2, r3
 8001eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eae:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	4bb3      	ldr	r3, [pc, #716]	@ (8002184 <HAL_RCC_OscConfig+0xe38>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ebc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	6011      	str	r1, [r2, #0]
 8001ec4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ec8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	fa92 f1a2 	rbit	r1, r2
 8001ed2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ed6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001eda:	6011      	str	r1, [r2, #0]
  return result;
 8001edc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ee0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	fab2 f282 	clz	r2, r2
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f002 021f 	and.w	r2, r2, #31
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d180      	bne.n	8001e04 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f02:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d105      	bne.n	8001f16 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0a:	4b9e      	ldr	r3, [pc, #632]	@ (8002184 <HAL_RCC_OscConfig+0xe38>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a9d      	ldr	r2, [pc, #628]	@ (8002184 <HAL_RCC_OscConfig+0xe38>)
 8001f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 825e 	beq.w	80023e4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f28:	4b96      	ldr	r3, [pc, #600]	@ (8002184 <HAL_RCC_OscConfig+0xe38>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	f000 821f 	beq.w	8002374 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	f040 8170 	bne.w	8002228 <HAL_RCC_OscConfig+0xedc>
 8001f48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f68:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f6c:	601a      	str	r2, [r3, #0]
  return result;
 8001f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f72:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f76:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f82:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fcef 	bl	8000970 <HAL_GetTick>
 8001f92:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	e009      	b.n	8001fac <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe fcea 	bl	8000970 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e21c      	b.n	80023e6 <HAL_RCC_OscConfig+0x109a>
 8001fac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001fb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fbe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fa93 f2a3 	rbit	r2, r3
 8001fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fcc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001fd0:	601a      	str	r2, [r3, #0]
  return result;
 8001fd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001fda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d102      	bne.n	8001ff6 <HAL_RCC_OscConfig+0xcaa>
 8001ff0:	4b64      	ldr	r3, [pc, #400]	@ (8002184 <HAL_RCC_OscConfig+0xe38>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	e027      	b.n	8002046 <HAL_RCC_OscConfig+0xcfa>
 8001ff6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ffa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001ffe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002008:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fa93 f2a3 	rbit	r2, r3
 8002012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002016:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002020:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002024:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	fa93 f2a3 	rbit	r2, r3
 8002038:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800203c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	4b50      	ldr	r3, [pc, #320]	@ (8002184 <HAL_RCC_OscConfig+0xe38>)
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800204a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800204e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002052:	6011      	str	r1, [r2, #0]
 8002054:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002058:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	fa92 f1a2 	rbit	r1, r2
 8002062:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002066:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800206a:	6011      	str	r1, [r2, #0]
  return result;
 800206c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002070:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	fab2 f282 	clz	r2, r2
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	f042 0220 	orr.w	r2, r2, #32
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	f002 021f 	and.w	r2, r2, #31
 8002086:	2101      	movs	r1, #1
 8002088:	fa01 f202 	lsl.w	r2, r1, r2
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d182      	bne.n	8001f98 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002092:	4b3c      	ldr	r3, [pc, #240]	@ (8002184 <HAL_RCC_OscConfig+0xe38>)
 8002094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002096:	f023 020f 	bic.w	r2, r3, #15
 800209a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800209e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	4937      	ldr	r1, [pc, #220]	@ (8002184 <HAL_RCC_OscConfig+0xe38>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80020ac:	4b35      	ldr	r3, [pc, #212]	@ (8002184 <HAL_RCC_OscConfig+0xe38>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80020b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a19      	ldr	r1, [r3, #32]
 80020c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	492d      	ldr	r1, [pc, #180]	@ (8002184 <HAL_RCC_OscConfig+0xe38>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
 80020d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80020dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	fa93 f2a3 	rbit	r2, r3
 80020f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020f8:	601a      	str	r2, [r3, #0]
  return result;
 80020fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020fe:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002102:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800210e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	461a      	mov	r2, r3
 8002116:	2301      	movs	r3, #1
 8002118:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7fe fc29 	bl	8000970 <HAL_GetTick>
 800211e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002122:	e009      	b.n	8002138 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002124:	f7fe fc24 	bl	8000970 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e156      	b.n	80023e6 <HAL_RCC_OscConfig+0x109a>
 8002138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002140:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	fa93 f2a3 	rbit	r2, r3
 8002154:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002158:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800215c:	601a      	str	r2, [r3, #0]
  return result;
 800215e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002162:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002166:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <HAL_RCC_OscConfig+0xe3c>
 800217c:	4b01      	ldr	r3, [pc, #4]	@ (8002184 <HAL_RCC_OscConfig+0xe38>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	e02a      	b.n	80021d8 <HAL_RCC_OscConfig+0xe8c>
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002190:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	fa93 f2a3 	rbit	r2, r3
 80021a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80021b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ce:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	4b86      	ldr	r3, [pc, #536]	@ (80023f0 <HAL_RCC_OscConfig+0x10a4>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021dc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021e4:	6011      	str	r1, [r2, #0]
 80021e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021ea:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	fa92 f1a2 	rbit	r1, r2
 80021f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021f8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80021fc:	6011      	str	r1, [r2, #0]
  return result;
 80021fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002202:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	fab2 f282 	clz	r2, r2
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	f042 0220 	orr.w	r2, r2, #32
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f002 021f 	and.w	r2, r2, #31
 8002218:	2101      	movs	r1, #1
 800221a:	fa01 f202 	lsl.w	r2, r1, r2
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	f43f af7f 	beq.w	8002124 <HAL_RCC_OscConfig+0xdd8>
 8002226:	e0dd      	b.n	80023e4 <HAL_RCC_OscConfig+0x1098>
 8002228:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002230:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002248:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800224c:	601a      	str	r2, [r3, #0]
  return result;
 800224e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002252:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002256:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002262:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	461a      	mov	r2, r3
 800226a:	2300      	movs	r3, #0
 800226c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7fe fb7f 	bl	8000970 <HAL_GetTick>
 8002272:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002276:	e009      	b.n	800228c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe fb7a 	bl	8000970 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0ac      	b.n	80023e6 <HAL_RCC_OscConfig+0x109a>
 800228c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002290:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002294:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800229e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fa93 f2a3 	rbit	r2, r3
 80022a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ac:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80022b0:	601a      	str	r2, [r3, #0]
  return result;
 80022b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80022ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <HAL_RCC_OscConfig+0xf8a>
 80022d0:	4b47      	ldr	r3, [pc, #284]	@ (80023f0 <HAL_RCC_OscConfig+0x10a4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	e027      	b.n	8002326 <HAL_RCC_OscConfig+0xfda>
 80022d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022da:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80022de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	fa93 f2a3 	rbit	r2, r3
 80022f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002300:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002304:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	fa93 f2a3 	rbit	r2, r3
 8002318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	4b33      	ldr	r3, [pc, #204]	@ (80023f0 <HAL_RCC_OscConfig+0x10a4>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800232a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800232e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002332:	6011      	str	r1, [r2, #0]
 8002334:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002338:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	fa92 f1a2 	rbit	r1, r2
 8002342:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002346:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800234a:	6011      	str	r1, [r2, #0]
  return result;
 800234c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002350:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	fab2 f282 	clz	r2, r2
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	f042 0220 	orr.w	r2, r2, #32
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	f002 021f 	and.w	r2, r2, #31
 8002366:	2101      	movs	r1, #1
 8002368:	fa01 f202 	lsl.w	r2, r1, r2
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d182      	bne.n	8002278 <HAL_RCC_OscConfig+0xf2c>
 8002372:	e037      	b.n	80023e4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002378:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e02e      	b.n	80023e6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002388:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <HAL_RCC_OscConfig+0x10a4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002390:	4b17      	ldr	r3, [pc, #92]	@ (80023f0 <HAL_RCC_OscConfig+0x10a4>)
 8002392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002394:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002398:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800239c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80023a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d117      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80023b4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d10b      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80023c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023cc:	f003 020f 	and.w	r2, r3, #15
 80023d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000

080023f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b09e      	sub	sp, #120	@ 0x78
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e162      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b90      	ldr	r3, [pc, #576]	@ (8002650 <HAL_RCC_ClockConfig+0x25c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d910      	bls.n	800243c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b8d      	ldr	r3, [pc, #564]	@ (8002650 <HAL_RCC_ClockConfig+0x25c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0207 	bic.w	r2, r3, #7
 8002422:	498b      	ldr	r1, [pc, #556]	@ (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b89      	ldr	r3, [pc, #548]	@ (8002650 <HAL_RCC_ClockConfig+0x25c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e14a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b82      	ldr	r3, [pc, #520]	@ (8002654 <HAL_RCC_ClockConfig+0x260>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	497f      	ldr	r1, [pc, #508]	@ (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80dc 	beq.w	8002620 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d13c      	bne.n	80024ea <HAL_RCC_ClockConfig+0xf6>
 8002470:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002474:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800247e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d102      	bne.n	800249a <HAL_RCC_ClockConfig+0xa6>
 8002494:	4b6f      	ldr	r3, [pc, #444]	@ (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	e00f      	b.n	80024ba <HAL_RCC_ClockConfig+0xc6>
 800249a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800249e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80024a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80024ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024b6:	4b67      	ldr	r3, [pc, #412]	@ (8002654 <HAL_RCC_ClockConfig+0x260>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024be:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024c2:	fa92 f2a2 	rbit	r2, r2
 80024c6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80024c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80024ca:	fab2 f282 	clz	r2, r2
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	f042 0220 	orr.w	r2, r2, #32
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f002 021f 	and.w	r2, r2, #31
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f202 	lsl.w	r2, r1, r2
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d17b      	bne.n	80025de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0f3      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d13c      	bne.n	800256c <HAL_RCC_ClockConfig+0x178>
 80024f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d102      	bne.n	800251c <HAL_RCC_ClockConfig+0x128>
 8002516:	4b4f      	ldr	r3, [pc, #316]	@ (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	e00f      	b.n	800253c <HAL_RCC_ClockConfig+0x148>
 800251c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002520:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	647b      	str	r3, [r7, #68]	@ 0x44
 800252a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800252e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002538:	4b46      	ldr	r3, [pc, #280]	@ (8002654 <HAL_RCC_ClockConfig+0x260>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002540:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002542:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002544:	fa92 f2a2 	rbit	r2, r2
 8002548:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800254a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800254c:	fab2 f282 	clz	r2, r2
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f042 0220 	orr.w	r2, r2, #32
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f002 021f 	and.w	r2, r2, #31
 800255c:	2101      	movs	r1, #1
 800255e:	fa01 f202 	lsl.w	r2, r1, r2
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d13a      	bne.n	80025de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b2      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
 800256c:	2302      	movs	r3, #2
 800256e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_RCC_ClockConfig+0x1a0>
 800258e:	4b31      	ldr	r3, [pc, #196]	@ (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e00d      	b.n	80025b0 <HAL_RCC_ClockConfig+0x1bc>
 8002594:	2302      	movs	r3, #2
 8002596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a0:	2302      	movs	r3, #2
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	4b29      	ldr	r3, [pc, #164]	@ (8002654 <HAL_RCC_ClockConfig+0x260>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	2202      	movs	r2, #2
 80025b2:	61ba      	str	r2, [r7, #24]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	fa92 f2a2 	rbit	r2, r2
 80025ba:	617a      	str	r2, [r7, #20]
  return result;
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	fab2 f282 	clz	r2, r2
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	f042 0220 	orr.w	r2, r2, #32
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f002 021f 	and.w	r2, r2, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e079      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025de:	4b1d      	ldr	r3, [pc, #116]	@ (8002654 <HAL_RCC_ClockConfig+0x260>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f023 0203 	bic.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	491a      	ldr	r1, [pc, #104]	@ (8002654 <HAL_RCC_ClockConfig+0x260>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f0:	f7fe f9be 	bl	8000970 <HAL_GetTick>
 80025f4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	e00a      	b.n	800260e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f8:	f7fe f9ba 	bl	8000970 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e061      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 020c 	and.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	429a      	cmp	r2, r3
 800261e:	d1eb      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002620:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d214      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 0207 	bic.w	r2, r3, #7
 8002636:	4906      	ldr	r1, [pc, #24]	@ (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e040      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
 8002650:	40022000 	.word	0x40022000
 8002654:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b1d      	ldr	r3, [pc, #116]	@ (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	491a      	ldr	r1, [pc, #104]	@ (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002682:	4b16      	ldr	r3, [pc, #88]	@ (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4912      	ldr	r1, [pc, #72]	@ (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002696:	f000 f829 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 800269a:	4601      	mov	r1, r0
 800269c:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026a4:	22f0      	movs	r2, #240	@ 0xf0
 80026a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	fa92 f2a2 	rbit	r2, r2
 80026ae:	60fa      	str	r2, [r7, #12]
  return result;
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	fab2 f282 	clz	r2, r2
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	40d3      	lsrs	r3, r2
 80026ba:	4a09      	ldr	r2, [pc, #36]	@ (80026e0 <HAL_RCC_ClockConfig+0x2ec>)
 80026bc:	5cd3      	ldrb	r3, [r2, r3]
 80026be:	fa21 f303 	lsr.w	r3, r1, r3
 80026c2:	4a08      	ldr	r2, [pc, #32]	@ (80026e4 <HAL_RCC_ClockConfig+0x2f0>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026c6:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <HAL_RCC_ClockConfig+0x2f4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe f90c 	bl	80008e8 <HAL_InitTick>
  
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3778      	adds	r7, #120	@ 0x78
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08004040 	.word	0x08004040
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002706:	4b1f      	ldr	r3, [pc, #124]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x98>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b04      	cmp	r3, #4
 8002714:	d002      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x30>
 8002716:	2b08      	cmp	r3, #8
 8002718:	d003      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0x36>
 800271a:	e029      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800271c:	4b1a      	ldr	r3, [pc, #104]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800271e:	613b      	str	r3, [r7, #16]
      break;
 8002720:	e029      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	0c9b      	lsrs	r3, r3, #18
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	4a18      	ldr	r2, [pc, #96]	@ (800278c <HAL_RCC_GetSysClockFreq+0xa0>)
 800272c:	5cd3      	ldrb	r3, [r2, r3]
 800272e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002730:	4b14      	ldr	r3, [pc, #80]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x98>)
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	4a15      	ldr	r2, [pc, #84]	@ (8002790 <HAL_RCC_GetSysClockFreq+0xa4>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002748:	4a0f      	ldr	r2, [pc, #60]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	e007      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800275a:	4a0b      	ldr	r2, [pc, #44]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	fb02 f303 	mul.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	613b      	str	r3, [r7, #16]
      break;
 800276e:	e002      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002770:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002772:	613b      	str	r3, [r7, #16]
      break;
 8002774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002776:	693b      	ldr	r3, [r7, #16]
}
 8002778:	4618      	mov	r0, r3
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40021000 	.word	0x40021000
 8002788:	007a1200 	.word	0x007a1200
 800278c:	08004058 	.word	0x08004058
 8002790:	08004068 	.word	0x08004068

08002794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002798:	4b03      	ldr	r3, [pc, #12]	@ (80027a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000000 	.word	0x20000000

080027ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027b2:	f7ff ffef 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 80027b6:	4601      	mov	r1, r0
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027c0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80027c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	fa92 f2a2 	rbit	r2, r2
 80027cc:	603a      	str	r2, [r7, #0]
  return result;
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	fab2 f282 	clz	r2, r2
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	40d3      	lsrs	r3, r2
 80027d8:	4a04      	ldr	r2, [pc, #16]	@ (80027ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	08004050 	.word	0x08004050

080027f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027f6:	f7ff ffcd 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 80027fa:	4601      	mov	r1, r0
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002804:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002808:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	fa92 f2a2 	rbit	r2, r2
 8002810:	603a      	str	r2, [r7, #0]
  return result;
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	fab2 f282 	clz	r2, r2
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	40d3      	lsrs	r3, r2
 800281c:	4a04      	ldr	r2, [pc, #16]	@ (8002830 <HAL_RCC_GetPCLK2Freq+0x40>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	08004050 	.word	0x08004050

08002834 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b092      	sub	sp, #72	@ 0x48
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002844:	2300      	movs	r3, #0
 8002846:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80d4 	beq.w	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002858:	4b4e      	ldr	r3, [pc, #312]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10e      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002864:	4b4b      	ldr	r3, [pc, #300]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	4a4a      	ldr	r2, [pc, #296]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286e:	61d3      	str	r3, [r2, #28]
 8002870:	4b48      	ldr	r3, [pc, #288]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287c:	2301      	movs	r3, #1
 800287e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	4b45      	ldr	r3, [pc, #276]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d118      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288e:	4b42      	ldr	r3, [pc, #264]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a41      	ldr	r2, [pc, #260]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002898:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289a:	f7fe f869 	bl	8000970 <HAL_GetTick>
 800289e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	e008      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a2:	f7fe f865 	bl	8000970 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b64      	cmp	r3, #100	@ 0x64
 80028ae:	d901      	bls.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1d6      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	4b38      	ldr	r3, [pc, #224]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028c0:	4b34      	ldr	r3, [pc, #208]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8084 	beq.w	80029da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028dc:	429a      	cmp	r2, r3
 80028de:	d07c      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	4b26      	ldr	r3, [pc, #152]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	461a      	mov	r2, r3
 800290a:	2301      	movs	r3, #1
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002912:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800291c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4b1d      	ldr	r3, [pc, #116]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	461a      	mov	r2, r3
 800292e:	2300      	movs	r3, #0
 8002930:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002932:	4a18      	ldr	r2, [pc, #96]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002936:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04b      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7fe f815 	bl	8000970 <HAL_GetTick>
 8002946:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe f811 	bl	8000970 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e180      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002960:	2302      	movs	r3, #2
 8002962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
 800296c:	2302      	movs	r3, #2
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	61fb      	str	r3, [r7, #28]
  return result;
 8002978:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d108      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800298e:	4b01      	ldr	r3, [pc, #4]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	e00d      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
 800299c:	10908100 	.word	0x10908100
 80029a0:	2302      	movs	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	4b9a      	ldr	r3, [pc, #616]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	2202      	movs	r2, #2
 80029b2:	613a      	str	r2, [r7, #16]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	fa92 f2a2 	rbit	r2, r2
 80029ba:	60fa      	str	r2, [r7, #12]
  return result;
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	fab2 f282 	clz	r2, r2
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f002 021f 	and.w	r2, r2, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f202 	lsl.w	r2, r1, r2
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0b7      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029da:	4b8f      	ldr	r3, [pc, #572]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	498c      	ldr	r1, [pc, #560]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d105      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f4:	4b88      	ldr	r3, [pc, #544]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	4a87      	ldr	r2, [pc, #540]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a0c:	4b82      	ldr	r3, [pc, #520]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	f023 0203 	bic.w	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	497f      	ldr	r1, [pc, #508]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4978      	ldr	r1, [pc, #480]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a48:	4b73      	ldr	r3, [pc, #460]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	4970      	ldr	r1, [pc, #448]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a66:	4b6c      	ldr	r3, [pc, #432]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f023 0210 	bic.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4969      	ldr	r1, [pc, #420]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a84:	4b64      	ldr	r3, [pc, #400]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a90:	4961      	ldr	r1, [pc, #388]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f023 0220 	bic.w	r2, r3, #32
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	495a      	ldr	r1, [pc, #360]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ac0:	4b55      	ldr	r3, [pc, #340]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	4952      	ldr	r1, [pc, #328]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ade:	4b4e      	ldr	r3, [pc, #312]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	494b      	ldr	r1, [pc, #300]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002afc:	4b46      	ldr	r3, [pc, #280]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b00:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	4943      	ldr	r1, [pc, #268]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	493c      	ldr	r1, [pc, #240]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b38:	4b37      	ldr	r3, [pc, #220]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b44:	4934      	ldr	r1, [pc, #208]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b56:	4b30      	ldr	r3, [pc, #192]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b62:	492d      	ldr	r1, [pc, #180]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b74:	4b28      	ldr	r3, [pc, #160]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b80:	4925      	ldr	r1, [pc, #148]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d008      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b92:	4b21      	ldr	r3, [pc, #132]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	491e      	ldr	r1, [pc, #120]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002bb0:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bbc:	4916      	ldr	r1, [pc, #88]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002bce:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bda:	490f      	ldr	r1, [pc, #60]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bec:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf8:	4907      	ldr	r1, [pc, #28]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002c0a:	4b03      	ldr	r3, [pc, #12]	@ (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	e002      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c1e:	4913      	ldr	r1, [pc, #76]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c30:	4b0e      	ldr	r3, [pc, #56]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3c:	490b      	ldr	r1, [pc, #44]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c4e:	4b07      	ldr	r3, [pc, #28]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c5a:	4904      	ldr	r1, [pc, #16]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3748      	adds	r7, #72	@ 0x48
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000

08002c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e040      	b.n	8002d04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fd fd74 	bl	8000780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	@ 0x24
 8002c9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fd0a 	bl	80036d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fb33 	bl	8003328 <UART_SetConfig>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e01b      	b.n	8002d04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fd89 	bl	8003814 <UART_CheckIdleState>
 8002d02:	4603      	mov	r3, r0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b0ba      	sub	sp, #232	@ 0xe8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002d36:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002d40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d115      	bne.n	8002d74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00f      	beq.n	8002d74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d009      	beq.n	8002d74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 82ab 	beq.w	80032c0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
      }
      return;
 8002d72:	e2a5      	b.n	80032c0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8117 	beq.w	8002fac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002d8e:	4b85      	ldr	r3, [pc, #532]	@ (8002fa4 <HAL_UART_IRQHandler+0x298>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 810a 	beq.w	8002fac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d011      	beq.n	8002dc8 <HAL_UART_IRQHandler+0xbc>
 8002da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00b      	beq.n	8002dc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2201      	movs	r2, #1
 8002db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d011      	beq.n	8002df8 <HAL_UART_IRQHandler+0xec>
 8002dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2202      	movs	r2, #2
 8002de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dee:	f043 0204 	orr.w	r2, r3, #4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d011      	beq.n	8002e28 <HAL_UART_IRQHandler+0x11c>
 8002e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2204      	movs	r2, #4
 8002e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e1e:	f043 0202 	orr.w	r2, r3, #2
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d017      	beq.n	8002e64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2208      	movs	r2, #8
 8002e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e5a:	f043 0208 	orr.w	r2, r3, #8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d012      	beq.n	8002e96 <HAL_UART_IRQHandler+0x18a>
 8002e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8211 	beq.w	80032c4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ede:	2b40      	cmp	r3, #64	@ 0x40
 8002ee0:	d005      	beq.n	8002eee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ee6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d04f      	beq.n	8002f8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fe6c 	bl	8003bcc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efe:	2b40      	cmp	r3, #64	@ 0x40
 8002f00:	d141      	bne.n	8002f86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3308      	adds	r3, #8
 8002f08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3308      	adds	r3, #8
 8002f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1d9      	bne.n	8002f02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d013      	beq.n	8002f7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f5a:	4a13      	ldr	r2, [pc, #76]	@ (8002fa8 <HAL_UART_IRQHandler+0x29c>)
 8002f5c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd ff05 	bl	8000d72 <HAL_DMA_Abort_IT>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d017      	beq.n	8002f9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f7c:	e00f      	b.n	8002f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f9c8 	bl	8003314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f84:	e00b      	b.n	8002f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f9c4 	bl	8003314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8c:	e007      	b.n	8002f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f9c0 	bl	8003314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002f9c:	e192      	b.n	80032c4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9e:	bf00      	nop
    return;
 8002fa0:	e190      	b.n	80032c4 <HAL_UART_IRQHandler+0x5b8>
 8002fa2:	bf00      	nop
 8002fa4:	04000120 	.word	0x04000120
 8002fa8:	08003e77 	.word	0x08003e77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	f040 814b 	bne.w	800324c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8144 	beq.w	800324c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 813d 	beq.w	800324c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe4:	2b40      	cmp	r3, #64	@ 0x40
 8002fe6:	f040 80b5 	bne.w	8003154 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ff6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8164 	beq.w	80032c8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800300a:	429a      	cmp	r2, r3
 800300c:	f080 815c 	bcs.w	80032c8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003016:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b20      	cmp	r3, #32
 8003022:	f000 8086 	beq.w	8003132 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800303a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800303e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003042:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003050:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003054:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800305c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003068:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1da      	bne.n	8003026 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3308      	adds	r3, #8
 8003076:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003078:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003080:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3308      	adds	r3, #8
 8003090:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003094:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003098:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800309c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e1      	bne.n	8003070 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3308      	adds	r3, #8
 80030b2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80030bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3308      	adds	r3, #8
 80030cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e3      	bne.n	80030ac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003102:	f023 0310 	bic.w	r3, r3, #16
 8003106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003114:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003116:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800311a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e4      	bne.n	80030f2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd fde2 	bl	8000cf6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003144:	b29b      	uxth	r3, r3
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	b29b      	uxth	r3, r3
 800314a:	4619      	mov	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7fd f9bd 	bl	80004cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003152:	e0b9      	b.n	80032c8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003160:	b29b      	uxth	r3, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80ab 	beq.w	80032cc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003176:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80a6 	beq.w	80032cc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003188:	e853 3f00 	ldrex	r3, [r3]
 800318c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800318e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003190:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003194:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80031a4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e4      	bne.n	8003180 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3308      	adds	r3, #8
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	e853 3f00 	ldrex	r3, [r3]
 80031c4:	623b      	str	r3, [r7, #32]
   return(result);
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3308      	adds	r3, #8
 80031d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031da:	633a      	str	r2, [r7, #48]	@ 0x30
 80031dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e3      	bne.n	80031b6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0310 	bic.w	r3, r3, #16
 8003216:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003228:	69b9      	ldr	r1, [r7, #24]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	e841 2300 	strex	r3, r2, [r1]
 8003230:	617b      	str	r3, [r7, #20]
   return(result);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e4      	bne.n	8003202 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800323e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003242:	4619      	mov	r1, r3
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7fd f941 	bl	80004cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800324a:	e03f      	b.n	80032cc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800324c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003250:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00e      	beq.n	8003276 <HAL_UART_IRQHandler+0x56a>
 8003258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800325c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800326c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fe41 	bl	8003ef6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003274:	e02d      	b.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800327a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00e      	beq.n	80032a0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01c      	beq.n	80032d0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
    }
    return;
 800329e:	e017      	b.n	80032d0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d012      	beq.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
 80032ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00c      	beq.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fdf2 	bl	8003ea2 <UART_EndTransmit_IT>
    return;
 80032be:	e008      	b.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80032c0:	bf00      	nop
 80032c2:	e006      	b.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80032c4:	bf00      	nop
 80032c6:	e004      	b.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80032c8:	bf00      	nop
 80032ca:	e002      	b.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80032cc:	bf00      	nop
 80032ce:	e000      	b.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80032d0:	bf00      	nop
  }

}
 80032d2:	37e8      	adds	r7, #232	@ 0xe8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b92      	ldr	r3, [pc, #584]	@ (800359c <UART_SetConfig+0x274>)
 8003354:	4013      	ands	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	6979      	ldr	r1, [r7, #20]
 800335c:	430b      	orrs	r3, r1
 800335e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	430a      	orrs	r2, r1
 8003398:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a80      	ldr	r2, [pc, #512]	@ (80035a0 <UART_SetConfig+0x278>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d120      	bne.n	80033e6 <UART_SetConfig+0xbe>
 80033a4:	4b7f      	ldr	r3, [pc, #508]	@ (80035a4 <UART_SetConfig+0x27c>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d817      	bhi.n	80033e0 <UART_SetConfig+0xb8>
 80033b0:	a201      	add	r2, pc, #4	@ (adr r2, 80033b8 <UART_SetConfig+0x90>)
 80033b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	080033c9 	.word	0x080033c9
 80033bc:	080033d5 	.word	0x080033d5
 80033c0:	080033db 	.word	0x080033db
 80033c4:	080033cf 	.word	0x080033cf
 80033c8:	2301      	movs	r3, #1
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e0b5      	b.n	800353a <UART_SetConfig+0x212>
 80033ce:	2302      	movs	r3, #2
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e0b2      	b.n	800353a <UART_SetConfig+0x212>
 80033d4:	2304      	movs	r3, #4
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e0af      	b.n	800353a <UART_SetConfig+0x212>
 80033da:	2308      	movs	r3, #8
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e0ac      	b.n	800353a <UART_SetConfig+0x212>
 80033e0:	2310      	movs	r3, #16
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e0a9      	b.n	800353a <UART_SetConfig+0x212>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a6f      	ldr	r2, [pc, #444]	@ (80035a8 <UART_SetConfig+0x280>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d124      	bne.n	800343a <UART_SetConfig+0x112>
 80033f0:	4b6c      	ldr	r3, [pc, #432]	@ (80035a4 <UART_SetConfig+0x27c>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033fc:	d011      	beq.n	8003422 <UART_SetConfig+0xfa>
 80033fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003402:	d817      	bhi.n	8003434 <UART_SetConfig+0x10c>
 8003404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003408:	d011      	beq.n	800342e <UART_SetConfig+0x106>
 800340a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800340e:	d811      	bhi.n	8003434 <UART_SetConfig+0x10c>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <UART_SetConfig+0xf4>
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003418:	d006      	beq.n	8003428 <UART_SetConfig+0x100>
 800341a:	e00b      	b.n	8003434 <UART_SetConfig+0x10c>
 800341c:	2300      	movs	r3, #0
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e08b      	b.n	800353a <UART_SetConfig+0x212>
 8003422:	2302      	movs	r3, #2
 8003424:	77fb      	strb	r3, [r7, #31]
 8003426:	e088      	b.n	800353a <UART_SetConfig+0x212>
 8003428:	2304      	movs	r3, #4
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e085      	b.n	800353a <UART_SetConfig+0x212>
 800342e:	2308      	movs	r3, #8
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	e082      	b.n	800353a <UART_SetConfig+0x212>
 8003434:	2310      	movs	r3, #16
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e07f      	b.n	800353a <UART_SetConfig+0x212>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a5b      	ldr	r2, [pc, #364]	@ (80035ac <UART_SetConfig+0x284>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d124      	bne.n	800348e <UART_SetConfig+0x166>
 8003444:	4b57      	ldr	r3, [pc, #348]	@ (80035a4 <UART_SetConfig+0x27c>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800344c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003450:	d011      	beq.n	8003476 <UART_SetConfig+0x14e>
 8003452:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003456:	d817      	bhi.n	8003488 <UART_SetConfig+0x160>
 8003458:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800345c:	d011      	beq.n	8003482 <UART_SetConfig+0x15a>
 800345e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003462:	d811      	bhi.n	8003488 <UART_SetConfig+0x160>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <UART_SetConfig+0x148>
 8003468:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800346c:	d006      	beq.n	800347c <UART_SetConfig+0x154>
 800346e:	e00b      	b.n	8003488 <UART_SetConfig+0x160>
 8003470:	2300      	movs	r3, #0
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	e061      	b.n	800353a <UART_SetConfig+0x212>
 8003476:	2302      	movs	r3, #2
 8003478:	77fb      	strb	r3, [r7, #31]
 800347a:	e05e      	b.n	800353a <UART_SetConfig+0x212>
 800347c:	2304      	movs	r3, #4
 800347e:	77fb      	strb	r3, [r7, #31]
 8003480:	e05b      	b.n	800353a <UART_SetConfig+0x212>
 8003482:	2308      	movs	r3, #8
 8003484:	77fb      	strb	r3, [r7, #31]
 8003486:	e058      	b.n	800353a <UART_SetConfig+0x212>
 8003488:	2310      	movs	r3, #16
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e055      	b.n	800353a <UART_SetConfig+0x212>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a47      	ldr	r2, [pc, #284]	@ (80035b0 <UART_SetConfig+0x288>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d124      	bne.n	80034e2 <UART_SetConfig+0x1ba>
 8003498:	4b42      	ldr	r3, [pc, #264]	@ (80035a4 <UART_SetConfig+0x27c>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80034a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034a4:	d011      	beq.n	80034ca <UART_SetConfig+0x1a2>
 80034a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034aa:	d817      	bhi.n	80034dc <UART_SetConfig+0x1b4>
 80034ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034b0:	d011      	beq.n	80034d6 <UART_SetConfig+0x1ae>
 80034b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034b6:	d811      	bhi.n	80034dc <UART_SetConfig+0x1b4>
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <UART_SetConfig+0x19c>
 80034bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034c0:	d006      	beq.n	80034d0 <UART_SetConfig+0x1a8>
 80034c2:	e00b      	b.n	80034dc <UART_SetConfig+0x1b4>
 80034c4:	2300      	movs	r3, #0
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	e037      	b.n	800353a <UART_SetConfig+0x212>
 80034ca:	2302      	movs	r3, #2
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e034      	b.n	800353a <UART_SetConfig+0x212>
 80034d0:	2304      	movs	r3, #4
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e031      	b.n	800353a <UART_SetConfig+0x212>
 80034d6:	2308      	movs	r3, #8
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e02e      	b.n	800353a <UART_SetConfig+0x212>
 80034dc:	2310      	movs	r3, #16
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e02b      	b.n	800353a <UART_SetConfig+0x212>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a33      	ldr	r2, [pc, #204]	@ (80035b4 <UART_SetConfig+0x28c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d124      	bne.n	8003536 <UART_SetConfig+0x20e>
 80034ec:	4b2d      	ldr	r3, [pc, #180]	@ (80035a4 <UART_SetConfig+0x27c>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80034f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034f8:	d011      	beq.n	800351e <UART_SetConfig+0x1f6>
 80034fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034fe:	d817      	bhi.n	8003530 <UART_SetConfig+0x208>
 8003500:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003504:	d011      	beq.n	800352a <UART_SetConfig+0x202>
 8003506:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800350a:	d811      	bhi.n	8003530 <UART_SetConfig+0x208>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <UART_SetConfig+0x1f0>
 8003510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003514:	d006      	beq.n	8003524 <UART_SetConfig+0x1fc>
 8003516:	e00b      	b.n	8003530 <UART_SetConfig+0x208>
 8003518:	2300      	movs	r3, #0
 800351a:	77fb      	strb	r3, [r7, #31]
 800351c:	e00d      	b.n	800353a <UART_SetConfig+0x212>
 800351e:	2302      	movs	r3, #2
 8003520:	77fb      	strb	r3, [r7, #31]
 8003522:	e00a      	b.n	800353a <UART_SetConfig+0x212>
 8003524:	2304      	movs	r3, #4
 8003526:	77fb      	strb	r3, [r7, #31]
 8003528:	e007      	b.n	800353a <UART_SetConfig+0x212>
 800352a:	2308      	movs	r3, #8
 800352c:	77fb      	strb	r3, [r7, #31]
 800352e:	e004      	b.n	800353a <UART_SetConfig+0x212>
 8003530:	2310      	movs	r3, #16
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e001      	b.n	800353a <UART_SetConfig+0x212>
 8003536:	2310      	movs	r3, #16
 8003538:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003542:	d16b      	bne.n	800361c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003544:	7ffb      	ldrb	r3, [r7, #31]
 8003546:	2b08      	cmp	r3, #8
 8003548:	d838      	bhi.n	80035bc <UART_SetConfig+0x294>
 800354a:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <UART_SetConfig+0x228>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003575 	.word	0x08003575
 8003554:	0800357d 	.word	0x0800357d
 8003558:	08003585 	.word	0x08003585
 800355c:	080035bd 	.word	0x080035bd
 8003560:	0800358b 	.word	0x0800358b
 8003564:	080035bd 	.word	0x080035bd
 8003568:	080035bd 	.word	0x080035bd
 800356c:	080035bd 	.word	0x080035bd
 8003570:	08003593 	.word	0x08003593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003574:	f7ff f91a 	bl	80027ac <HAL_RCC_GetPCLK1Freq>
 8003578:	61b8      	str	r0, [r7, #24]
        break;
 800357a:	e024      	b.n	80035c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800357c:	f7ff f938 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8003580:	61b8      	str	r0, [r7, #24]
        break;
 8003582:	e020      	b.n	80035c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003584:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <UART_SetConfig+0x290>)
 8003586:	61bb      	str	r3, [r7, #24]
        break;
 8003588:	e01d      	b.n	80035c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358a:	f7ff f8af 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 800358e:	61b8      	str	r0, [r7, #24]
        break;
 8003590:	e019      	b.n	80035c6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003596:	61bb      	str	r3, [r7, #24]
        break;
 8003598:	e015      	b.n	80035c6 <UART_SetConfig+0x29e>
 800359a:	bf00      	nop
 800359c:	efff69f3 	.word	0xefff69f3
 80035a0:	40013800 	.word	0x40013800
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40004400 	.word	0x40004400
 80035ac:	40004800 	.word	0x40004800
 80035b0:	40004c00 	.word	0x40004c00
 80035b4:	40005000 	.word	0x40005000
 80035b8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	77bb      	strb	r3, [r7, #30]
        break;
 80035c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d073      	beq.n	80036b4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	005a      	lsls	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	441a      	add	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b0f      	cmp	r3, #15
 80035e6:	d916      	bls.n	8003616 <UART_SetConfig+0x2ee>
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ee:	d212      	bcs.n	8003616 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f023 030f 	bic.w	r3, r3, #15
 80035f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	b29a      	uxth	r2, r3
 8003606:	89fb      	ldrh	r3, [r7, #14]
 8003608:	4313      	orrs	r3, r2
 800360a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	89fa      	ldrh	r2, [r7, #14]
 8003612:	60da      	str	r2, [r3, #12]
 8003614:	e04e      	b.n	80036b4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	77bb      	strb	r3, [r7, #30]
 800361a:	e04b      	b.n	80036b4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800361c:	7ffb      	ldrb	r3, [r7, #31]
 800361e:	2b08      	cmp	r3, #8
 8003620:	d827      	bhi.n	8003672 <UART_SetConfig+0x34a>
 8003622:	a201      	add	r2, pc, #4	@ (adr r2, 8003628 <UART_SetConfig+0x300>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	0800364d 	.word	0x0800364d
 800362c:	08003655 	.word	0x08003655
 8003630:	0800365d 	.word	0x0800365d
 8003634:	08003673 	.word	0x08003673
 8003638:	08003663 	.word	0x08003663
 800363c:	08003673 	.word	0x08003673
 8003640:	08003673 	.word	0x08003673
 8003644:	08003673 	.word	0x08003673
 8003648:	0800366b 	.word	0x0800366b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800364c:	f7ff f8ae 	bl	80027ac <HAL_RCC_GetPCLK1Freq>
 8003650:	61b8      	str	r0, [r7, #24]
        break;
 8003652:	e013      	b.n	800367c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003654:	f7ff f8cc 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8003658:	61b8      	str	r0, [r7, #24]
        break;
 800365a:	e00f      	b.n	800367c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800365c:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <UART_SetConfig+0x3a4>)
 800365e:	61bb      	str	r3, [r7, #24]
        break;
 8003660:	e00c      	b.n	800367c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003662:	f7ff f843 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8003666:	61b8      	str	r0, [r7, #24]
        break;
 8003668:	e008      	b.n	800367c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800366a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800366e:	61bb      	str	r3, [r7, #24]
        break;
 8003670:	e004      	b.n	800367c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	77bb      	strb	r3, [r7, #30]
        break;
 800367a:	bf00      	nop
    }

    if (pclk != 0U)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d018      	beq.n	80036b4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	085a      	lsrs	r2, r3, #1
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	441a      	add	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b0f      	cmp	r3, #15
 800369a:	d909      	bls.n	80036b0 <UART_SetConfig+0x388>
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a2:	d205      	bcs.n	80036b0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	e001      	b.n	80036b4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	007a1200 	.word	0x007a1200

080036d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01a      	beq.n	80037e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ce:	d10a      	bne.n	80037e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b098      	sub	sp, #96	@ 0x60
 8003818:	af02      	add	r7, sp, #8
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003824:	f7fd f8a4 	bl	8000970 <HAL_GetTick>
 8003828:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b08      	cmp	r3, #8
 8003836:	d12e      	bne.n	8003896 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003838:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	2200      	movs	r2, #0
 8003842:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f88c 	bl	8003964 <UART_WaitOnFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d021      	beq.n	8003896 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003866:	653b      	str	r3, [r7, #80]	@ 0x50
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003870:	647b      	str	r3, [r7, #68]	@ 0x44
 8003872:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003878:	e841 2300 	strex	r3, r2, [r1]
 800387c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800387e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e6      	bne.n	8003852 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e062      	b.n	800395c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d149      	bne.n	8003938 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ac:	2200      	movs	r2, #0
 80038ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f856 	bl	8003964 <UART_WaitOnFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d03c      	beq.n	8003938 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	623b      	str	r3, [r7, #32]
   return(result);
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e6      	bne.n	80038be <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3308      	adds	r3, #8
 80038f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3308      	adds	r3, #8
 800390e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003910:	61fa      	str	r2, [r7, #28]
 8003912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	69b9      	ldr	r1, [r7, #24]
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	617b      	str	r3, [r7, #20]
   return(result);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e5      	bne.n	80038f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e011      	b.n	800395c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3758      	adds	r7, #88	@ 0x58
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003974:	e04f      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d04b      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397e:	f7fc fff7 	bl	8000970 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	429a      	cmp	r2, r3
 800398c:	d302      	bcc.n	8003994 <UART_WaitOnFlagUntilTimeout+0x30>
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e04e      	b.n	8003a36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d037      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xb2>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b80      	cmp	r3, #128	@ 0x80
 80039aa:	d034      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xb2>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b40      	cmp	r3, #64	@ 0x40
 80039b0:	d031      	beq.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d110      	bne.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2208      	movs	r2, #8
 80039c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f8ff 	bl	8003bcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2208      	movs	r2, #8
 80039d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e029      	b.n	8003a36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f0:	d111      	bne.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f8e5 	bl	8003bcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e00f      	b.n	8003a36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	bf0c      	ite	eq
 8003a26:	2301      	moveq	r3, #1
 8003a28:	2300      	movne	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d0a0      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b096      	sub	sp, #88	@ 0x58
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	88fa      	ldrh	r2, [r7, #6]
 8003a58:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2222      	movs	r2, #34	@ 0x22
 8003a68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d028      	beq.n	8003ac6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a78:	4a3e      	ldr	r2, [pc, #248]	@ (8003b74 <UART_Start_Receive_DMA+0x134>)
 8003a7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a80:	4a3d      	ldr	r2, [pc, #244]	@ (8003b78 <UART_Start_Receive_DMA+0x138>)
 8003a82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a88:	4a3c      	ldr	r2, [pc, #240]	@ (8003b7c <UART_Start_Receive_DMA+0x13c>)
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a90:	2200      	movs	r2, #0
 8003a92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3324      	adds	r3, #36	@ 0x24
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	f7fd f8c6 	bl	8000c38 <HAL_DMA_Start_IT>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d009      	beq.n	8003ac6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e051      	b.n	8003b6a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d018      	beq.n	8003b00 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aee:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003af2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e6      	bne.n	8003ace <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3308      	adds	r3, #8
 8003b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003b20:	637a      	str	r2, [r7, #52]	@ 0x34
 8003b22:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e5      	bne.n	8003b00 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3308      	adds	r3, #8
 8003b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	613b      	str	r3, [r7, #16]
   return(result);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3308      	adds	r3, #8
 8003b52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b54:	623a      	str	r2, [r7, #32]
 8003b56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	69f9      	ldr	r1, [r7, #28]
 8003b5a:	6a3a      	ldr	r2, [r7, #32]
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e5      	bne.n	8003b34 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3758      	adds	r7, #88	@ 0x58
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	08003c95 	.word	0x08003c95
 8003b78:	08003dbb 	.word	0x08003dbb
 8003b7c:	08003df9 	.word	0x08003df9

08003b80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	@ 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	6979      	ldr	r1, [r7, #20]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e6      	bne.n	8003b88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003bc0:	bf00      	nop
 8003bc2:	3724      	adds	r7, #36	@ 0x24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b095      	sub	sp, #84	@ 0x54
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bf2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e6      	bne.n	8003bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3308      	adds	r3, #8
 8003c24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e5      	bne.n	8003c06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d118      	bne.n	8003c74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	e853 3f00 	ldrex	r3, [r3]
 8003c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f023 0310 	bic.w	r3, r3, #16
 8003c56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	6979      	ldr	r1, [r7, #20]
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e6      	bne.n	8003c42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c88:	bf00      	nop
 8003c8a:	3754      	adds	r7, #84	@ 0x54
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b09c      	sub	sp, #112	@ 0x70
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d071      	beq.n	8003d8e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cba:	e853 3f00 	ldrex	r3, [r3]
 8003cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cd2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e6      	bne.n	8003cb2 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3308      	adds	r3, #8
 8003d02:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003d04:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d06:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e5      	bne.n	8003ce4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	623b      	str	r3, [r7, #32]
   return(result);
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d38:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e5      	bne.n	8003d18 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d118      	bne.n	8003d8e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f023 0310 	bic.w	r3, r3, #16
 8003d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	69b9      	ldr	r1, [r7, #24]
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	617b      	str	r3, [r7, #20]
   return(result);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e6      	bne.n	8003d5c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d90:	2200      	movs	r2, #0
 8003d92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d107      	bne.n	8003dac <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003da2:	4619      	mov	r1, r3
 8003da4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003da6:	f7fc fb91 	bl	80004cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003daa:	e002      	b.n	8003db2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003dac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003dae:	f7ff fa9d 	bl	80032ec <HAL_UART_RxCpltCallback>
}
 8003db2:	bf00      	nop
 8003db4:	3770      	adds	r7, #112	@ 0x70
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d109      	bne.n	8003dea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	4619      	mov	r1, r3
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f7fc fb72 	bl	80004cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003de8:	e002      	b.n	8003df0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff fa88 	bl	8003300 <HAL_UART_RxHalfCpltCallback>
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e0a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1e:	2b80      	cmp	r3, #128	@ 0x80
 8003e20:	d109      	bne.n	8003e36 <UART_DMAError+0x3e>
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b21      	cmp	r3, #33	@ 0x21
 8003e26:	d106      	bne.n	8003e36 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8003e30:	6978      	ldr	r0, [r7, #20]
 8003e32:	f7ff fea5 	bl	8003b80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e40:	2b40      	cmp	r3, #64	@ 0x40
 8003e42:	d109      	bne.n	8003e58 <UART_DMAError+0x60>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b22      	cmp	r3, #34	@ 0x22
 8003e48:	d106      	bne.n	8003e58 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8003e52:	6978      	ldr	r0, [r7, #20]
 8003e54:	f7ff feba 	bl	8003bcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e5e:	f043 0210 	orr.w	r2, r3, #16
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e68:	6978      	ldr	r0, [r7, #20]
 8003e6a:	f7ff fa53 	bl	8003314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e6e:	bf00      	nop
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f7ff fa3d 	bl	8003314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b088      	sub	sp, #32
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6979      	ldr	r1, [r7, #20]
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e6      	bne.n	8003eaa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff f9f5 	bl	80032d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eee:	bf00      	nop
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b08c      	sub	sp, #48	@ 0x30
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	4613      	mov	r3, r2
 8003f16:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d142      	bne.n	8003fa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e03b      	b.n	8003faa <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	461a      	mov	r2, r3
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff fd7b 	bl	8003a40 <UART_Start_Receive_DMA>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003f50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d124      	bne.n	8003fa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d11d      	bne.n	8003f9c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2210      	movs	r2, #16
 8003f66:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	617b      	str	r3, [r7, #20]
   return(result);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f043 0310 	orr.w	r3, r3, #16
 8003f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f88:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	6a39      	ldr	r1, [r7, #32]
 8003f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e6      	bne.n	8003f68 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8003f9a:	e002      	b.n	8003fa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fa6:	e000      	b.n	8003faa <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003fa8:	2302      	movs	r3, #2
  }
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3730      	adds	r7, #48	@ 0x30
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <memset>:
 8003fb2:	4402      	add	r2, r0
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d100      	bne.n	8003fbc <memset+0xa>
 8003fba:	4770      	bx	lr
 8003fbc:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc0:	e7f9      	b.n	8003fb6 <memset+0x4>
	...

08003fc4 <__libc_init_array>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8003ffc <__libc_init_array+0x38>)
 8003fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8004000 <__libc_init_array+0x3c>)
 8003fca:	1b64      	subs	r4, r4, r5
 8003fcc:	10a4      	asrs	r4, r4, #2
 8003fce:	2600      	movs	r6, #0
 8003fd0:	42a6      	cmp	r6, r4
 8003fd2:	d109      	bne.n	8003fe8 <__libc_init_array+0x24>
 8003fd4:	4d0b      	ldr	r5, [pc, #44]	@ (8004004 <__libc_init_array+0x40>)
 8003fd6:	4c0c      	ldr	r4, [pc, #48]	@ (8004008 <__libc_init_array+0x44>)
 8003fd8:	f000 f826 	bl	8004028 <_init>
 8003fdc:	1b64      	subs	r4, r4, r5
 8003fde:	10a4      	asrs	r4, r4, #2
 8003fe0:	2600      	movs	r6, #0
 8003fe2:	42a6      	cmp	r6, r4
 8003fe4:	d105      	bne.n	8003ff2 <__libc_init_array+0x2e>
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
 8003fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fec:	4798      	blx	r3
 8003fee:	3601      	adds	r6, #1
 8003ff0:	e7ee      	b.n	8003fd0 <__libc_init_array+0xc>
 8003ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff6:	4798      	blx	r3
 8003ff8:	3601      	adds	r6, #1
 8003ffa:	e7f2      	b.n	8003fe2 <__libc_init_array+0x1e>
 8003ffc:	08004078 	.word	0x08004078
 8004000:	08004078 	.word	0x08004078
 8004004:	08004078 	.word	0x08004078
 8004008:	0800407c 	.word	0x0800407c

0800400c <memcpy>:
 800400c:	440a      	add	r2, r1
 800400e:	4291      	cmp	r1, r2
 8004010:	f100 33ff 	add.w	r3, r0, #4294967295
 8004014:	d100      	bne.n	8004018 <memcpy+0xc>
 8004016:	4770      	bx	lr
 8004018:	b510      	push	{r4, lr}
 800401a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800401e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004022:	4291      	cmp	r1, r2
 8004024:	d1f9      	bne.n	800401a <memcpy+0xe>
 8004026:	bd10      	pop	{r4, pc}

08004028 <_init>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	bf00      	nop
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr

08004034 <_fini>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	bf00      	nop
 8004038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403a:	bc08      	pop	{r3}
 800403c:	469e      	mov	lr, r3
 800403e:	4770      	bx	lr

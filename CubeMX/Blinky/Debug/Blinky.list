
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08005940  08005940  00006940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b50  08005b50  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b50  08005b50  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b50  08005b50  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b50  08005b50  00006b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b54  08005b54  00006b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005b58  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          0000210c  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002118  20002118  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000109d0  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b4d  00000000  00000000  00017a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  0001a560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6c  00000000  00000000  0001b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fca  00000000  00000000  0001bf9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015191  00000000  00000000  0003df66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc21f  00000000  00000000  000530f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f316  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ffc  00000000  00000000  0011f35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00123358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005928 	.word	0x08005928

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005928 	.word	0x08005928

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_DAC1_Init+0x4c>)
 8000b26:	4a0f      	ldr	r2, [pc, #60]	@ (8000b64 <MX_DAC1_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b2a:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <MX_DAC1_Init+0x4c>)
 8000b2c:	f000 fe25 	bl	800177a <HAL_DAC_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000b36:	f000 fa71 	bl	800101c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <MX_DAC1_Init+0x4c>)
 8000b4a:	f000 ff13 	bl	8001974 <HAL_DAC_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000b54:	f000 fa62 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000028 	.word	0x20000028
 8000b64:	40007400 	.word	0x40007400

08000b68 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a2c      	ldr	r2, [pc, #176]	@ (8000c38 <HAL_DAC_MspInit+0xd0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d152      	bne.n	8000c30 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c3c <HAL_DAC_MspInit+0xd4>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8000c3c <HAL_DAC_MspInit+0xd4>)
 8000b90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b29      	ldr	r3, [pc, #164]	@ (8000c3c <HAL_DAC_MspInit+0xd4>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b26      	ldr	r3, [pc, #152]	@ (8000c3c <HAL_DAC_MspInit+0xd4>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	4a25      	ldr	r2, [pc, #148]	@ (8000c3c <HAL_DAC_MspInit+0xd4>)
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bac:	6153      	str	r3, [r2, #20]
 8000bae:	4b23      	ldr	r3, [pc, #140]	@ (8000c3c <HAL_DAC_MspInit+0xd4>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd0:	f001 f95a 	bl	8001e88 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <HAL_DAC_MspInit+0xd8>)
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c44 <HAL_DAC_MspInit+0xdc>)
 8000bd8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bda:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <HAL_DAC_MspInit+0xd8>)
 8000bdc:	2210      	movs	r2, #16
 8000bde:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be0:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <HAL_DAC_MspInit+0xd8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000be6:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <HAL_DAC_MspInit+0xd8>)
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bec:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <HAL_DAC_MspInit+0xd8>)
 8000bee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <HAL_DAC_MspInit+0xd8>)
 8000bf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bfa:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <HAL_DAC_MspInit+0xd8>)
 8000bfe:	2220      	movs	r2, #32
 8000c00:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <HAL_DAC_MspInit+0xd8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c08:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <HAL_DAC_MspInit+0xd8>)
 8000c0a:	f000 ff8a 	bl	8001b22 <HAL_DMA_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8000c14:	f000 fa02 	bl	800101c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000c18:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <HAL_DAC_MspInit+0xe0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <HAL_DAC_MspInit+0xe0>)
 8000c1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c22:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a06      	ldr	r2, [pc, #24]	@ (8000c40 <HAL_DAC_MspInit+0xd8>)
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <HAL_DAC_MspInit+0xd8>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	@ 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40007400 	.word	0x40007400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	2000003c 	.word	0x2000003c
 8000c44:	40020030 	.word	0x40020030
 8000c48:	40010000 	.word	0x40010000

08000c4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_DMA_Init+0x38>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4a0b      	ldr	r2, [pc, #44]	@ (8000c84 <MX_DMA_Init+0x38>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6153      	str	r3, [r2, #20]
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_DMA_Init+0x38>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	200d      	movs	r0, #13
 8000c70:	f000 fd4d 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c74:	200d      	movs	r0, #13
 8000c76:	f000 fd66 	bl	8001746 <HAL_NVIC_EnableIRQ>

}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000

08000c88 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	@ 0x28
 8000c8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a4a      	ldr	r2, [pc, #296]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000ca4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b48      	ldr	r3, [pc, #288]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cb6:	4b45      	ldr	r3, [pc, #276]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4a44      	ldr	r2, [pc, #272]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000cbc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cc0:	6153      	str	r3, [r2, #20]
 8000cc2:	4b42      	ldr	r3, [pc, #264]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b3f      	ldr	r3, [pc, #252]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a3e      	ldr	r2, [pc, #248]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b3c      	ldr	r3, [pc, #240]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b39      	ldr	r3, [pc, #228]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	4a38      	ldr	r2, [pc, #224]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf0:	6153      	str	r3, [r2, #20]
 8000cf2:	4b36      	ldr	r3, [pc, #216]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b33      	ldr	r3, [pc, #204]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	4a32      	ldr	r2, [pc, #200]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000d04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d08:	6153      	str	r3, [r2, #20]
 8000d0a:	4b30      	ldr	r3, [pc, #192]	@ (8000dcc <MX_GPIO_Init+0x144>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2120      	movs	r1, #32
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1e:	f001 fa3d 	bl	800219c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4825      	ldr	r0, [pc, #148]	@ (8000dd0 <MX_GPIO_Init+0x148>)
 8000d3a:	f001 f8a5 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d3e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000d42:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d44:	2303      	movs	r3, #3
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	481f      	ldr	r0, [pc, #124]	@ (8000dd0 <MX_GPIO_Init+0x148>)
 8000d54:	f001 f898 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7
 8000d58:	f649 73c3 	movw	r3, #40899	@ 0x9fc3
 8000d5c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d70:	f001 f88a 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d74:	2320      	movs	r3, #32
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8e:	f001 f87b 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d92:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 8000d96:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <MX_GPIO_Init+0x14c>)
 8000da8:	f001 f86e 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dac:	2304      	movs	r3, #4
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db0:	2303      	movs	r3, #3
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <MX_GPIO_Init+0x150>)
 8000dc0:	f001 f862 	bl	8001e88 <HAL_GPIO_Init>

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	@ 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000800 	.word	0x48000800
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	48000c00 	.word	0x48000c00
 8000ddc:	00000000 	.word	0x00000000

08000de0 <getSineValues>:
{
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}

void getSineValues()
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	for ( int i = 0; i < MAX_SAMPLES; i += 1 )
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	e044      	b.n	8000e76 <getSineValues+0x96>
	{
		sine_values[i] = ( ( sin( i * 2 * PI / MAX_SAMPLES ) +1  ) ) * RES_12B / 2;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fb43 	bl	800047c <__aeabi_i2d>
 8000df6:	a328      	add	r3, pc, #160	@ (adr r3, 8000e98 <getSineValues+0xb8>)
 8000df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfc:	f7ff fba8 	bl	8000550 <__aeabi_dmul>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <getSineValues+0xa8>)
 8000e0e:	f7ff fcc9 	bl	80007a4 <__aeabi_ddiv>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	ec43 2b17 	vmov	d7, r2, r3
 8000e1a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e1e:	eef0 0a67 	vmov.f32	s1, s15
 8000e22:	f003 fd51 	bl	80048c8 <sin>
 8000e26:	ec51 0b10 	vmov	r0, r1, d0
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <getSineValues+0xac>)
 8000e30:	f7ff f9d8 	bl	80001e4 <__adddf3>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <getSineValues+0xb0>)
 8000e42:	f7ff fb85 	bl	8000550 <__aeabi_dmul>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e56:	f7ff fca5 	bl	80007a4 <__aeabi_ddiv>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff fe37 	bl	8000ad4 <__aeabi_d2uiz>
 8000e66:	4602      	mov	r2, r0
 8000e68:	490a      	ldr	r1, [pc, #40]	@ (8000e94 <getSineValues+0xb4>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for ( int i = 0; i < MAX_SAMPLES; i += 1 )
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3301      	adds	r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e7c:	dbb6      	blt.n	8000dec <getSineValues+0xc>
	}
}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	408f4000 	.word	0x408f4000
 8000e8c:	3ff00000 	.word	0x3ff00000
 8000e90:	40b00000 	.word	0x40b00000
 8000e94:	20000080 	.word	0x20000080
 8000e98:	d2412aee 	.word	0xd2412aee
 8000e9c:	400921e9 	.word	0x400921e9

08000ea0 <arrUp>:

void arrUp()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	static i = 0;
	uartStream_sendU32( arr[i] );
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <arrUp+0x34>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed8 <arrUp+0x38>)
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fa36 	bl	8001320 <uartStream_sendU32>
	if ( i < 1000 )
 8000eb4:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <arrUp+0x34>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ebc:	da05      	bge.n	8000eca <arrUp+0x2a>
		i ++;
 8000ebe:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <arrUp+0x34>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	4a03      	ldr	r2, [pc, #12]	@ (8000ed4 <arrUp+0x34>)
 8000ec6:	6013      	str	r3, [r2, #0]
	else i = 0;
}
 8000ec8:	e002      	b.n	8000ed0 <arrUp+0x30>
	else i = 0;
 8000eca:	4b02      	ldr	r3, [pc, #8]	@ (8000ed4 <arrUp+0x34>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20001fc0 	.word	0x20001fc0
 8000ed8:	20001020 	.word	0x20001020

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f000 fad3 	bl	800148c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f83b 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f7ff fecd 	bl	8000c88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eee:	f7ff fead 	bl	8000c4c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ef2:	f000 fa2f 	bl	8001354 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000ef6:	f7ff fe0d 	bl	8000b14 <MX_DAC1_Init>
  MX_TIM7_Init();
 8000efa:	f000 f9b9 	bl	8001270 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  getSineValues();
 8000efe:	f7ff ff6f 	bl	8000de0 <getSineValues>
  HAL_TIM_Base_Start( &htim7 );
 8000f02:	4812      	ldr	r0, [pc, #72]	@ (8000f4c <main+0x70>)
 8000f04:	f002 fe4c 	bl	8003ba0 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA( &hdac1, DAC1_CHANNEL_1, sine_values, MAX_SAMPLES, DAC_ALIGN_12B_R);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f10:	4a0f      	ldr	r2, [pc, #60]	@ (8000f50 <main+0x74>)
 8000f12:	2100      	movs	r1, #0
 8000f14:	480f      	ldr	r0, [pc, #60]	@ (8000f54 <main+0x78>)
 8000f16:	f000 fc71 	bl	80017fc <HAL_DAC_Start_DMA>


  for ( int i = 0; i < 1000; i ++ )
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	e007      	b.n	8000f30 <main+0x54>
	  arr[i] = i;
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	490d      	ldr	r1, [pc, #52]	@ (8000f58 <main+0x7c>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for ( int i = 0; i < 1000; i ++ )
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f36:	dbf3      	blt.n	8000f20 <main+0x44>



  scheduler_init();
 8000f38:	f000 f876 	bl	8001028 <scheduler_init>

  // add tasks to scheduler:
  scheduler_addTask(1, arrUp);
 8000f3c:	4907      	ldr	r1, [pc, #28]	@ (8000f5c <main+0x80>)
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f000 f8a8 	bl	8001094 <scheduler_addTask>

  scheduler_run();
 8000f44:	f000 f8e4 	bl	8001110 <scheduler_run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <main+0x6c>
 8000f4c:	20002040 	.word	0x20002040
 8000f50:	20000080 	.word	0x20000080
 8000f54:	20000028 	.word	0x20000028
 8000f58:	20001020 	.word	0x20001020
 8000f5c:	08000ea1 	.word	0x08000ea1

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0a6      	sub	sp, #152	@ 0x98
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f6a:	2228      	movs	r2, #40	@ 0x28
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fc7b 	bl	800486a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2258      	movs	r2, #88	@ 0x58
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 fc6d 	bl	800486a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f90:	2302      	movs	r3, #2
 8000f92:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f94:	2301      	movs	r3, #1
 8000f96:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fac:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fba:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 f904 	bl	80021cc <HAL_RCC_OscConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fca:	f000 f827 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	230f      	movs	r3, #15
 8000fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fde:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 f942 	bl	8003274 <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ff6:	f000 f811 	bl	800101c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fb55 	bl	80036b4 <HAL_RCCEx_PeriphCLKConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001010:	f000 f804 	bl	800101c <Error_Handler>
  }
}
 8001014:	bf00      	nop
 8001016:	3798      	adds	r7, #152	@ 0x98
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <Error_Handler+0x8>

08001028 <scheduler_init>:
/*
 * function
 * */

void scheduler_init( void )
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
	schedulerVars.nrOfTasks = 0;
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <scheduler_init+0x68>)
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	e01f      	b.n	800107c <scheduler_init+0x54>
	{
		schedulerVars.taskList[i].pTask = NULL;
 800103c:	79fa      	ldrb	r2, [r7, #7]
 800103e:	4914      	ldr	r1, [pc, #80]	@ (8001090 <scheduler_init+0x68>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].delay = 0;
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	490f      	ldr	r1, [pc, #60]	@ (8001090 <scheduler_init+0x68>)
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3304      	adds	r3, #4
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
		schedulerVars.taskList[i].lastExecutionTime = 0;
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	490a      	ldr	r1, [pc, #40]	@ (8001090 <scheduler_init+0x68>)
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3308      	adds	r3, #8
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	3301      	adds	r3, #1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	2b09      	cmp	r3, #9
 8001080:	d9dc      	bls.n	800103c <scheduler_init+0x14>
	}
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20001fc4 	.word	0x20001fc4

08001094 <scheduler_addTask>:

/*
 * function
 * */
uint8_t scheduler_addTask( uint32_t delay, void (*pTask)(void) )
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e029      	b.n	80010f8 <scheduler_addTask+0x64>
	{
		// search for available task.
		if ( schedulerVars.taskList[i].pTask == NULL )
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	4919      	ldr	r1, [pc, #100]	@ (800110c <scheduler_addTask+0x78>)
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d11c      	bne.n	80010f2 <scheduler_addTask+0x5e>
		{
			schedulerVars.taskList[i].pTask = pTask;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	4914      	ldr	r1, [pc, #80]	@ (800110c <scheduler_addTask+0x78>)
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	601a      	str	r2, [r3, #0]
			schedulerVars.taskList[i].delay = delay;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	490f      	ldr	r1, [pc, #60]	@ (800110c <scheduler_addTask+0x78>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	3304      	adds	r3, #4
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
			schedulerVars.nrOfTasks += 1;
 80010de:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <scheduler_addTask+0x78>)
 80010e0:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80010e4:	3301      	adds	r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <scheduler_addTask+0x78>)
 80010ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
			return 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e006      	b.n	8001100 <scheduler_addTask+0x6c>
	for ( uint8_t i = 0; i < SCHEDULER_MAX_NR_TASKS; i += 1 )
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2b09      	cmp	r3, #9
 80010fc:	d9d2      	bls.n	80010a4 <scheduler_addTask+0x10>
		}
	}
	// no available task was found
	return 0;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	20001fc4 	.word	0x20001fc4

08001110 <scheduler_run>:

/*
 * function
 * */
void scheduler_run( void )
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	uint32_t now = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
	while( 1 )
	{
		now = HAL_GetTick();
 800111a:	f000 fa11 	bl	8001540 <HAL_GetTick>
 800111e:	6038      	str	r0, [r7, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8001120:	2300      	movs	r3, #0
 8001122:	71fb      	strb	r3, [r7, #7]
 8001124:	e02b      	b.n	800117e <scheduler_run+0x6e>
		{
			if ( now - schedulerVars.taskList[i].lastExecutionTime  >= schedulerVars.taskList[i].delay )
 8001126:	79fa      	ldrb	r2, [r7, #7]
 8001128:	4918      	ldr	r1, [pc, #96]	@ (800118c <scheduler_run+0x7c>)
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	3308      	adds	r3, #8
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	1ad1      	subs	r1, r2, r3
 800113c:	79fa      	ldrb	r2, [r7, #7]
 800113e:	4813      	ldr	r0, [pc, #76]	@ (800118c <scheduler_run+0x7c>)
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4403      	add	r3, r0
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4299      	cmp	r1, r3
 8001150:	d312      	bcc.n	8001178 <scheduler_run+0x68>
			{
				// execute task
				schedulerVars.taskList[i].pTask();
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	490d      	ldr	r1, [pc, #52]	@ (800118c <scheduler_run+0x7c>)
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4798      	blx	r3
				schedulerVars.taskList[i].lastExecutionTime = now;
 8001164:	79fa      	ldrb	r2, [r7, #7]
 8001166:	4909      	ldr	r1, [pc, #36]	@ (800118c <scheduler_run+0x7c>)
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	3308      	adds	r3, #8
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	601a      	str	r2, [r3, #0]
		for ( uint8_t i = 0; i < schedulerVars.nrOfTasks; i += 1 )
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	3301      	adds	r3, #1
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	4b03      	ldr	r3, [pc, #12]	@ (800118c <scheduler_run+0x7c>)
 8001180:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001184:	79fa      	ldrb	r2, [r7, #7]
 8001186:	429a      	cmp	r2, r3
 8001188:	d3cd      	bcc.n	8001126 <scheduler_run+0x16>
		now = HAL_GetTick();
 800118a:	e7c6      	b.n	800111a <scheduler_run+0xa>
 800118c:	20001fc4 	.word	0x20001fc4

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <HAL_MspInit+0x44>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a0e      	ldr	r2, [pc, #56]	@ (80011d4 <HAL_MspInit+0x44>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6193      	str	r3, [r2, #24]
 80011a2:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <HAL_MspInit+0x44>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <HAL_MspInit+0x44>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a08      	ldr	r2, [pc, #32]	@ (80011d4 <HAL_MspInit+0x44>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b8:	61d3      	str	r3, [r2, #28]
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_MspInit+0x44>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011c6:	2007      	movs	r0, #7
 80011c8:	f000 fa96 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <NMI_Handler+0x4>

080011e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <MemManage_Handler+0x4>

080011f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <UsageFault_Handler+0x4>

08001200 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122e:	f000 f973 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <DMA1_Channel3_IRQHandler+0x10>)
 800123e:	f000 fd16 	bl	8001c6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000003c 	.word	0x2000003c

0800124c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <SystemInit+0x20>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001256:	4a05      	ldr	r2, [pc, #20]	@ (800126c <SystemInit+0x20>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001280:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <MX_TIM7_Init+0x68>)
 8001282:	4a16      	ldr	r2, [pc, #88]	@ (80012dc <MX_TIM7_Init+0x6c>)
 8001284:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 360-1;
 8001286:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_TIM7_Init+0x68>)
 8001288:	f240 1267 	movw	r2, #359	@ 0x167
 800128c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <MX_TIM7_Init+0x68>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <MX_TIM7_Init+0x68>)
 8001296:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800129a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_TIM7_Init+0x68>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012a2:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <MX_TIM7_Init+0x68>)
 80012a4:	f002 fc24 	bl	8003af0 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80012ae:	f7ff feb5 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012b2:	2320      	movs	r3, #32
 80012b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	@ (80012d8 <MX_TIM7_Init+0x68>)
 80012c0:	f002 fd80 	bl	8003dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80012ca:	f7ff fea7 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20002040 	.word	0x20002040
 80012dc:	40001400 	.word	0x40001400

080012e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <HAL_TIM_Base_MspInit+0x38>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10b      	bne.n	800130a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <HAL_TIM_Base_MspInit+0x3c>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a09      	ldr	r2, [pc, #36]	@ (800131c <HAL_TIM_Base_MspInit+0x3c>)
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <HAL_TIM_Base_MspInit+0x3c>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40001400 	.word	0x40001400
 800131c:	40021000 	.word	0x40021000

08001320 <uartStream_sendU32>:
{
	// Initiate uart here if not initiated in main.c
}

uint8_t uartStream_sendU32( uint32_t nr )
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	uint8_t out[6];	// start byte , nr, nr, nr, nr, end byte.
	out[0] = 's'; // start indicator
 8001328:	2373      	movs	r3, #115	@ 0x73
 800132a:	723b      	strb	r3, [r7, #8]
	memcpy( &out[1], &nr, 4 );
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8c7 3009 	str.w	r3, [r7, #9]
	out[5] = 'e'; // end indicator
 8001332:	2365      	movs	r3, #101	@ 0x65
 8001334:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart2, out, 6, 10);
 8001336:	f107 0108 	add.w	r1, r7, #8
 800133a:	230a      	movs	r3, #10
 800133c:	2206      	movs	r2, #6
 800133e:	4804      	ldr	r0, [pc, #16]	@ (8001350 <uartStream_sendU32+0x30>)
 8001340:	f002 fe1a 	bl	8003f78 <HAL_UART_Transmit>
	return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000208c 	.word	0x2000208c

08001354 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 800135a:	4a15      	ldr	r2, [pc, #84]	@ (80013b0 <MX_USART2_UART_Init+0x5c>)
 800135c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800135e:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001360:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_USART2_UART_Init+0x58>)
 8001398:	f002 fda0 	bl	8003edc <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013a2:	f7ff fe3b 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000208c 	.word	0x2000208c
 80013b0:	40004400 	.word	0x40004400

080013b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <HAL_UART_MspInit+0x7c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d128      	bne.n	8001428 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d6:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <HAL_UART_MspInit+0x80>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a16      	ldr	r2, [pc, #88]	@ (8001434 <HAL_UART_MspInit+0x80>)
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <HAL_UART_MspInit+0x80>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <HAL_UART_MspInit+0x80>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	4a10      	ldr	r2, [pc, #64]	@ (8001434 <HAL_UART_MspInit+0x80>)
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f8:	6153      	str	r3, [r2, #20]
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <HAL_UART_MspInit+0x80>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001406:	230c      	movs	r3, #12
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001416:	2307      	movs	r3, #7
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001424:	f000 fd30 	bl	8001e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	@ 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40004400 	.word	0x40004400
 8001434:	40021000 	.word	0x40021000

08001438 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001470 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800143c:	f7ff ff06 	bl	800124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001440:	480c      	ldr	r0, [pc, #48]	@ (8001474 <LoopForever+0x6>)
  ldr r1, =_edata
 8001442:	490d      	ldr	r1, [pc, #52]	@ (8001478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001444:	4a0d      	ldr	r2, [pc, #52]	@ (800147c <LoopForever+0xe>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001458:	4c0a      	ldr	r4, [pc, #40]	@ (8001484 <LoopForever+0x16>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001466:	f003 fa09 	bl	800487c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800146a:	f7ff fd37 	bl	8000edc <main>

0800146e <LoopForever>:

LoopForever:
    b LoopForever
 800146e:	e7fe      	b.n	800146e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001470:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001478:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800147c:	08005b58 	.word	0x08005b58
  ldr r2, =_sbss
 8001480:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001484:	20002118 	.word	0x20002118

08001488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC1_2_IRQHandler>
	...

0800148c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_Init+0x28>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <HAL_Init+0x28>)
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f92b 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff fe72 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40022000 	.word	0x40022000

080014b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f943 	bl	8001762 <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f90b 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000008 	.word	0x20000008
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008
 800153c:	20002114 	.word	0x20002114

08001540 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;  
 8001544:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20002114 	.word	0x20002114

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	@ (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	@ 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff29 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff3e 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff8e 	bl	800164c <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff31 	bl	80015bc <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e014      	b.n	80017b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	791b      	ldrb	r3, [r3, #4]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d105      	bne.n	80017a2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff f9e3 	bl	8000b68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2202      	movs	r2, #2
 80017a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	795b      	ldrb	r3, [r3, #5]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_DAC_Start_DMA+0x1e>
 8001816:	2302      	movs	r3, #2
 8001818:	e09b      	b.n	8001952 <HAL_DAC_Start_DMA+0x156>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2202      	movs	r2, #2
 8001824:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d12f      	bne.n	800188c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a4a      	ldr	r2, [pc, #296]	@ (800195c <HAL_DAC_Start_DMA+0x160>)
 8001832:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a49      	ldr	r2, [pc, #292]	@ (8001960 <HAL_DAC_Start_DMA+0x164>)
 800183a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a48      	ldr	r2, [pc, #288]	@ (8001964 <HAL_DAC_Start_DMA+0x168>)
 8001842:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001852:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	2b08      	cmp	r3, #8
 8001858:	d013      	beq.n	8001882 <HAL_DAC_Start_DMA+0x86>
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	2b08      	cmp	r3, #8
 800185e:	d845      	bhi.n	80018ec <HAL_DAC_Start_DMA+0xf0>
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_DAC_Start_DMA+0x72>
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	2b04      	cmp	r3, #4
 800186a:	d005      	beq.n	8001878 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800186c:	e03e      	b.n	80018ec <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3308      	adds	r3, #8
 8001874:	617b      	str	r3, [r7, #20]
        break;
 8001876:	e03c      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	330c      	adds	r3, #12
 800187e:	617b      	str	r3, [r7, #20]
        break;
 8001880:	e037      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3310      	adds	r3, #16
 8001888:	617b      	str	r3, [r7, #20]
        break;
 800188a:	e032      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4a35      	ldr	r2, [pc, #212]	@ (8001968 <HAL_DAC_Start_DMA+0x16c>)
 8001892:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4a34      	ldr	r2, [pc, #208]	@ (800196c <HAL_DAC_Start_DMA+0x170>)
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4a33      	ldr	r2, [pc, #204]	@ (8001970 <HAL_DAC_Start_DMA+0x174>)
 80018a2:	631a      	str	r2, [r3, #48]	@ 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80018b2:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d013      	beq.n	80018e2 <HAL_DAC_Start_DMA+0xe6>
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d817      	bhi.n	80018f0 <HAL_DAC_Start_DMA+0xf4>
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_DAC_Start_DMA+0xd2>
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d005      	beq.n	80018d8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80018cc:	e010      	b.n	80018f0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3314      	adds	r3, #20
 80018d4:	617b      	str	r3, [r7, #20]
        break;
 80018d6:	e00c      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3318      	adds	r3, #24
 80018de:	617b      	str	r3, [r7, #20]
        break;
 80018e0:	e007      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	331c      	adds	r3, #28
 80018e8:	617b      	str	r3, [r7, #20]
        break;
 80018ea:	e002      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80018ec:	bf00      	nop
 80018ee:	e000      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80018f0:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10f      	bne.n	8001918 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001906:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6898      	ldr	r0, [r3, #8]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	f000 f94d 	bl	8001bb0 <HAL_DMA_Start_IT>
 8001916:	e00e      	b.n	8001936 <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001926:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	68d8      	ldr	r0, [r3, #12]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	f000 f93d 	bl	8001bb0 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6819      	ldr	r1, [r3, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	409a      	lsls	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	08001a4b 	.word	0x08001a4b
 8001960:	08001a6d 	.word	0x08001a6d
 8001964:	08001a89 	.word	0x08001a89
 8001968:	08001ab7 	.word	0x08001ab7
 800196c:	08001ad9 	.word	0x08001ad9
 8001970:	08001af5 	.word	0x08001af5

08001974 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	795b      	ldrb	r3, [r3, #5]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_DAC_ConfigChannel+0x20>
 8001990:	2302      	movs	r3, #2
 8001992:	e036      	b.n	8001a02 <HAL_DAC_ConfigChannel+0x8e>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2201      	movs	r2, #1
 8001998:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2202      	movs	r2, #2
 800199e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80019a8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4013      	ands	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6819      	ldr	r1, [r3, #0]
 80019e2:	22c0      	movs	r2, #192	@ 0xc0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	400a      	ands	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2201      	movs	r2, #1
 80019f8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7ff feb0 	bl	80017be <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	711a      	strb	r2, [r3, #4]
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f7ff fea9 	bl	80017d2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a94:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f043 0204 	orr.w	r2, r3, #4
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7ff fe9f 	bl	80017e6 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	711a      	strb	r2, [r3, #4]
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac2:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7ff ffa2 	bl	8001a0e <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	711a      	strb	r2, [r3, #4]
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7ff ff9b 	bl	8001a22 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	f043 0204 	orr.w	r2, r3, #4
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff ff91 	bl	8001a36 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2201      	movs	r2, #1
 8001b18:	711a      	strb	r2, [r3, #4]
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e037      	b.n	8001ba8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b4e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001b52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f940 	bl	8001e10 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_DMA_Start_IT+0x20>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e04a      	b.n	8001c66 <HAL_DMA_Start_IT+0xb6>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d13a      	bne.n	8001c58 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2202      	movs	r2, #2
 8001be6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f8d4 	bl	8001db4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d008      	beq.n	8001c26 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 020e 	orr.w	r2, r2, #14
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e00f      	b.n	8001c46 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 020a 	orr.w	r2, r2, #10
 8001c34:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0204 	bic.w	r2, r2, #4
 8001c44:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0201 	orr.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e005      	b.n	8001c64 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c60:	2302      	movs	r3, #2
 8001c62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d024      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x72>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01f      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d107      	bne.n	8001cbe <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0204 	bic.w	r2, r2, #4
 8001cbc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc6:	2104      	movs	r1, #4
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d06a      	beq.n	8001dac <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001cde:	e065      	b.n	8001dac <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d02c      	beq.n	8001d4a <HAL_DMA_IRQHandler+0xdc>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d027      	beq.n	8001d4a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10b      	bne.n	8001d20 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 020a 	bic.w	r2, r2, #10
 8001d16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d28:	2102      	movs	r1, #2
 8001d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d035      	beq.n	8001dac <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d48:	e030      	b.n	8001dac <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	2208      	movs	r2, #8
 8001d50:	409a      	lsls	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d028      	beq.n	8001dac <HAL_DMA_IRQHandler+0x13e>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d023      	beq.n	8001dac <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 020e 	bic.w	r2, r2, #14
 8001d72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	4798      	blx	r3
    }
  }
}
 8001daa:	e7ff      	b.n	8001dac <HAL_DMA_IRQHandler+0x13e>
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b10      	cmp	r3, #16
 8001de0:	d108      	bne.n	8001df4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001df2:	e007      	b.n	8001e04 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	60da      	str	r2, [r3, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <DMA_CalcBaseAndBitshift+0x60>)
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d80f      	bhi.n	8001e44 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <DMA_CalcBaseAndBitshift+0x64>)
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a12      	ldr	r2, [pc, #72]	@ (8001e78 <DMA_CalcBaseAndBitshift+0x68>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	009a      	lsls	r2, r3, #2
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e7c <DMA_CalcBaseAndBitshift+0x6c>)
 8001e40:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001e42:	e00e      	b.n	8001e62 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <DMA_CalcBaseAndBitshift+0x70>)
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <DMA_CalcBaseAndBitshift+0x68>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	009a      	lsls	r2, r3, #2
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <DMA_CalcBaseAndBitshift+0x74>)
 8001e60:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40020407 	.word	0x40020407
 8001e74:	bffdfff8 	.word	0xbffdfff8
 8001e78:	cccccccd 	.word	0xcccccccd
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	bffdfbf8 	.word	0xbffdfbf8
 8001e84:	40020400 	.word	0x40020400

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e160      	b.n	800215a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8152 	beq.w	8002154 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d005      	beq.n	8001ec8 <HAL_GPIO_Init+0x40>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d130      	bne.n	8001f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efe:	2201      	movs	r2, #1
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	f003 0201 	and.w	r2, r3, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d017      	beq.n	8001f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2203      	movs	r2, #3
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d123      	bne.n	8001fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	6939      	ldr	r1, [r7, #16]
 8001fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0203 	and.w	r2, r3, #3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80ac 	beq.w	8002154 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffc:	4b5e      	ldr	r3, [pc, #376]	@ (8002178 <HAL_GPIO_Init+0x2f0>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a5d      	ldr	r2, [pc, #372]	@ (8002178 <HAL_GPIO_Init+0x2f0>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b5b      	ldr	r3, [pc, #364]	@ (8002178 <HAL_GPIO_Init+0x2f0>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002014:	4a59      	ldr	r2, [pc, #356]	@ (800217c <HAL_GPIO_Init+0x2f4>)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800203e:	d025      	beq.n	800208c <HAL_GPIO_Init+0x204>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a4f      	ldr	r2, [pc, #316]	@ (8002180 <HAL_GPIO_Init+0x2f8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d01f      	beq.n	8002088 <HAL_GPIO_Init+0x200>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a4e      	ldr	r2, [pc, #312]	@ (8002184 <HAL_GPIO_Init+0x2fc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d019      	beq.n	8002084 <HAL_GPIO_Init+0x1fc>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a4d      	ldr	r2, [pc, #308]	@ (8002188 <HAL_GPIO_Init+0x300>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <HAL_GPIO_Init+0x1f8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a4c      	ldr	r2, [pc, #304]	@ (800218c <HAL_GPIO_Init+0x304>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00d      	beq.n	800207c <HAL_GPIO_Init+0x1f4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a4b      	ldr	r2, [pc, #300]	@ (8002190 <HAL_GPIO_Init+0x308>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <HAL_GPIO_Init+0x1f0>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a4a      	ldr	r2, [pc, #296]	@ (8002194 <HAL_GPIO_Init+0x30c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d101      	bne.n	8002074 <HAL_GPIO_Init+0x1ec>
 8002070:	2306      	movs	r3, #6
 8002072:	e00c      	b.n	800208e <HAL_GPIO_Init+0x206>
 8002074:	2307      	movs	r3, #7
 8002076:	e00a      	b.n	800208e <HAL_GPIO_Init+0x206>
 8002078:	2305      	movs	r3, #5
 800207a:	e008      	b.n	800208e <HAL_GPIO_Init+0x206>
 800207c:	2304      	movs	r3, #4
 800207e:	e006      	b.n	800208e <HAL_GPIO_Init+0x206>
 8002080:	2303      	movs	r3, #3
 8002082:	e004      	b.n	800208e <HAL_GPIO_Init+0x206>
 8002084:	2302      	movs	r3, #2
 8002086:	e002      	b.n	800208e <HAL_GPIO_Init+0x206>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_GPIO_Init+0x206>
 800208c:	2300      	movs	r3, #0
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	f002 0203 	and.w	r2, r2, #3
 8002094:	0092      	lsls	r2, r2, #2
 8002096:	4093      	lsls	r3, r2
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800209e:	4937      	ldr	r1, [pc, #220]	@ (800217c <HAL_GPIO_Init+0x2f4>)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002198 <HAL_GPIO_Init+0x310>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020d0:	4a31      	ldr	r2, [pc, #196]	@ (8002198 <HAL_GPIO_Init+0x310>)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d6:	4b30      	ldr	r3, [pc, #192]	@ (8002198 <HAL_GPIO_Init+0x310>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020fa:	4a27      	ldr	r2, [pc, #156]	@ (8002198 <HAL_GPIO_Init+0x310>)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002100:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <HAL_GPIO_Init+0x310>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002124:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <HAL_GPIO_Init+0x310>)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800212a:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <HAL_GPIO_Init+0x310>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800214e:	4a12      	ldr	r2, [pc, #72]	@ (8002198 <HAL_GPIO_Init+0x310>)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	3301      	adds	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	f47f ae97 	bne.w	8001e98 <HAL_GPIO_Init+0x10>
  }
}
 800216a:	bf00      	nop
 800216c:	bf00      	nop
 800216e:	371c      	adds	r7, #28
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40021000 	.word	0x40021000
 800217c:	40010000 	.word	0x40010000
 8002180:	48000400 	.word	0x48000400
 8002184:	48000800 	.word	0x48000800
 8002188:	48000c00 	.word	0x48000c00
 800218c:	48001000 	.word	0x48001000
 8002190:	48001400 	.word	0x48001400
 8002194:	48001800 	.word	0x48001800
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021dc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f001 b83a 	b.w	8003266 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 816f 	beq.w	80024e6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002208:	4bb5      	ldr	r3, [pc, #724]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b04      	cmp	r3, #4
 8002212:	d00c      	beq.n	800222e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002214:	4bb2      	ldr	r3, [pc, #712]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	d15c      	bne.n	80022da <HAL_RCC_OscConfig+0x10e>
 8002220:	4baf      	ldr	r3, [pc, #700]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800222c:	d155      	bne.n	80022da <HAL_RCC_OscConfig+0x10e>
 800222e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002232:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002242:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_RCC_OscConfig+0x94>
 800225a:	4ba1      	ldr	r3, [pc, #644]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	e015      	b.n	800228c <HAL_RCC_OscConfig+0xc0>
 8002260:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002264:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002274:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002278:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800227c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002288:	4b95      	ldr	r3, [pc, #596]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002290:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002294:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002298:	fa92 f2a2 	rbit	r2, r2
 800229c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80022a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80022a4:	fab2 f282 	clz	r2, r2
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	f042 0220 	orr.w	r2, r2, #32
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	f002 021f 	and.w	r2, r2, #31
 80022b4:	2101      	movs	r1, #1
 80022b6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8111 	beq.w	80024e4 <HAL_RCC_OscConfig+0x318>
 80022c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 8108 	bne.w	80024e4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	f000 bfc6 	b.w	8003266 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x12e>
 80022ec:	4b7c      	ldr	r3, [pc, #496]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a7b      	ldr	r2, [pc, #492]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	e036      	b.n	8002368 <HAL_RCC_OscConfig+0x19c>
 80022fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x158>
 800230a:	4b75      	ldr	r3, [pc, #468]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a74      	ldr	r2, [pc, #464]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 8002310:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b72      	ldr	r3, [pc, #456]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a71      	ldr	r2, [pc, #452]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 800231c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e021      	b.n	8002368 <HAL_RCC_OscConfig+0x19c>
 8002324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002328:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x184>
 8002336:	4b6a      	ldr	r3, [pc, #424]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a69      	ldr	r2, [pc, #420]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 800233c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b67      	ldr	r3, [pc, #412]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a66      	ldr	r2, [pc, #408]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e00b      	b.n	8002368 <HAL_RCC_OscConfig+0x19c>
 8002350:	4b63      	ldr	r3, [pc, #396]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a62      	ldr	r2, [pc, #392]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 8002356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b60      	ldr	r3, [pc, #384]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a5f      	ldr	r2, [pc, #380]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 8002362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002366:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002368:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d059      	beq.n	800242c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff f8e2 	bl	8001540 <HAL_GetTick>
 800237c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002382:	f7ff f8dd 	bl	8001540 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	@ 0x64
 8002390:	d902      	bls.n	8002398 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	f000 bf67 	b.w	8003266 <HAL_RCC_OscConfig+0x109a>
 8002398:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800239c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80023ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d102      	bne.n	80023ca <HAL_RCC_OscConfig+0x1fe>
 80023c4:	4b46      	ldr	r3, [pc, #280]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	e015      	b.n	80023f6 <HAL_RCC_OscConfig+0x22a>
 80023ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023ce:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80023de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023e2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80023e6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80023f2:	4b3b      	ldr	r3, [pc, #236]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023fa:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80023fe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002402:	fa92 f2a2 	rbit	r2, r2
 8002406:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800240a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800240e:	fab2 f282 	clz	r2, r2
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	f042 0220 	orr.w	r2, r2, #32
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f002 021f 	and.w	r2, r2, #31
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f202 	lsl.w	r2, r1, r2
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0ab      	beq.n	8002382 <HAL_RCC_OscConfig+0x1b6>
 800242a:	e05c      	b.n	80024e6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff f888 	bl	8001540 <HAL_GetTick>
 8002430:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002436:	f7ff f883 	bl	8001540 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	@ 0x64
 8002444:	d902      	bls.n	800244c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	f000 bf0d 	b.w	8003266 <HAL_RCC_OscConfig+0x109a>
 800244c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002450:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002460:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d102      	bne.n	800247e <HAL_RCC_OscConfig+0x2b2>
 8002478:	4b19      	ldr	r3, [pc, #100]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	e015      	b.n	80024aa <HAL_RCC_OscConfig+0x2de>
 800247e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002482:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002492:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002496:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800249a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80024a6:	4b0e      	ldr	r3, [pc, #56]	@ (80024e0 <HAL_RCC_OscConfig+0x314>)
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024ae:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80024b2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80024b6:	fa92 f2a2 	rbit	r2, r2
 80024ba:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80024be:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80024c2:	fab2 f282 	clz	r2, r2
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f042 0220 	orr.w	r2, r2, #32
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	f002 021f 	and.w	r2, r2, #31
 80024d2:	2101      	movs	r1, #1
 80024d4:	fa01 f202 	lsl.w	r2, r1, r2
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1ab      	bne.n	8002436 <HAL_RCC_OscConfig+0x26a>
 80024de:	e002      	b.n	80024e6 <HAL_RCC_OscConfig+0x31a>
 80024e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 817f 	beq.w	80027fa <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024fc:	4ba7      	ldr	r3, [pc, #668]	@ (800279c <HAL_RCC_OscConfig+0x5d0>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00c      	beq.n	8002522 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002508:	4ba4      	ldr	r3, [pc, #656]	@ (800279c <HAL_RCC_OscConfig+0x5d0>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d173      	bne.n	80025fc <HAL_RCC_OscConfig+0x430>
 8002514:	4ba1      	ldr	r3, [pc, #644]	@ (800279c <HAL_RCC_OscConfig+0x5d0>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800251c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002520:	d16c      	bne.n	80025fc <HAL_RCC_OscConfig+0x430>
 8002522:	2302      	movs	r3, #2
 8002524:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002534:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d102      	bne.n	8002552 <HAL_RCC_OscConfig+0x386>
 800254c:	4b93      	ldr	r3, [pc, #588]	@ (800279c <HAL_RCC_OscConfig+0x5d0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	e013      	b.n	800257a <HAL_RCC_OscConfig+0x3ae>
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002564:	2302      	movs	r3, #2
 8002566:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800256a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002576:	4b89      	ldr	r3, [pc, #548]	@ (800279c <HAL_RCC_OscConfig+0x5d0>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	2202      	movs	r2, #2
 800257c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002580:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002584:	fa92 f2a2 	rbit	r2, r2
 8002588:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800258c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002590:	fab2 f282 	clz	r2, r2
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	f042 0220 	orr.w	r2, r2, #32
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f002 021f 	and.w	r2, r2, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f202 	lsl.w	r2, r1, r2
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCC_OscConfig+0x3f6>
 80025ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d002      	beq.n	80025c2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	f000 be52 	b.w	8003266 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b76      	ldr	r3, [pc, #472]	@ (800279c <HAL_RCC_OscConfig+0x5d0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	21f8      	movs	r1, #248	@ 0xf8
 80025d8:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80025e0:	fa91 f1a1 	rbit	r1, r1
 80025e4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80025e8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80025ec:	fab1 f181 	clz	r1, r1
 80025f0:	b2c9      	uxtb	r1, r1
 80025f2:	408b      	lsls	r3, r1
 80025f4:	4969      	ldr	r1, [pc, #420]	@ (800279c <HAL_RCC_OscConfig+0x5d0>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e0fe      	b.n	80027fa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002600:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8088 	beq.w	800271e <HAL_RCC_OscConfig+0x552>
 800260e:	2301      	movs	r3, #1
 8002610:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002620:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800262e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	461a      	mov	r2, r3
 8002636:	2301      	movs	r3, #1
 8002638:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe ff81 	bl	8001540 <HAL_GetTick>
 800263e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002644:	f7fe ff7c 	bl	8001540 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d902      	bls.n	800265a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	f000 be06 	b.w	8003266 <HAL_RCC_OscConfig+0x109a>
 800265a:	2302      	movs	r3, #2
 800265c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800266c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d102      	bne.n	800268a <HAL_RCC_OscConfig+0x4be>
 8002684:	4b45      	ldr	r3, [pc, #276]	@ (800279c <HAL_RCC_OscConfig+0x5d0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	e013      	b.n	80026b2 <HAL_RCC_OscConfig+0x4e6>
 800268a:	2302      	movs	r3, #2
 800268c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800269c:	2302      	movs	r3, #2
 800269e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80026a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80026ae:	4b3b      	ldr	r3, [pc, #236]	@ (800279c <HAL_RCC_OscConfig+0x5d0>)
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	2202      	movs	r2, #2
 80026b4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80026b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80026bc:	fa92 f2a2 	rbit	r2, r2
 80026c0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80026c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80026c8:	fab2 f282 	clz	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f042 0220 	orr.w	r2, r2, #32
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f002 021f 	and.w	r2, r2, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f202 	lsl.w	r2, r1, r2
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0af      	beq.n	8002644 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b2d      	ldr	r3, [pc, #180]	@ (800279c <HAL_RCC_OscConfig+0x5d0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	21f8      	movs	r1, #248	@ 0xf8
 80026fa:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002702:	fa91 f1a1 	rbit	r1, r1
 8002706:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800270a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800270e:	fab1 f181 	clz	r1, r1
 8002712:	b2c9      	uxtb	r1, r1
 8002714:	408b      	lsls	r3, r1
 8002716:	4921      	ldr	r1, [pc, #132]	@ (800279c <HAL_RCC_OscConfig+0x5d0>)
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]
 800271c:	e06d      	b.n	80027fa <HAL_RCC_OscConfig+0x62e>
 800271e:	2301      	movs	r3, #1
 8002720:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002730:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800273e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	461a      	mov	r2, r3
 8002746:	2300      	movs	r3, #0
 8002748:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fef9 	bl	8001540 <HAL_GetTick>
 800274e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002754:	f7fe fef4 	bl	8001540 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d902      	bls.n	800276a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	f000 bd7e 	b.w	8003266 <HAL_RCC_OscConfig+0x109a>
 800276a:	2302      	movs	r3, #2
 800276c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800277c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <HAL_RCC_OscConfig+0x5d4>
 8002794:	4b01      	ldr	r3, [pc, #4]	@ (800279c <HAL_RCC_OscConfig+0x5d0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	e016      	b.n	80027c8 <HAL_RCC_OscConfig+0x5fc>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	2302      	movs	r3, #2
 80027a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80027b2:	2302      	movs	r3, #2
 80027b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80027b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80027c4:	4bbf      	ldr	r3, [pc, #764]	@ (8002ac4 <HAL_RCC_OscConfig+0x8f8>)
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	2202      	movs	r2, #2
 80027ca:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80027ce:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80027d2:	fa92 f2a2 	rbit	r2, r2
 80027d6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80027da:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80027de:	fab2 f282 	clz	r2, r2
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f042 0220 	orr.w	r2, r2, #32
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f002 021f 	and.w	r2, r2, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f202 	lsl.w	r2, r1, r2
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1ac      	bne.n	8002754 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8113 	beq.w	8002a36 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002810:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002814:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d07c      	beq.n	800291a <HAL_RCC_OscConfig+0x74e>
 8002820:	2301      	movs	r3, #1
 8002822:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002832:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	4ba2      	ldr	r3, [pc, #648]	@ (8002ac8 <HAL_RCC_OscConfig+0x8fc>)
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	461a      	mov	r2, r3
 8002846:	2301      	movs	r3, #1
 8002848:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7fe fe79 	bl	8001540 <HAL_GetTick>
 800284e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002854:	f7fe fe74 	bl	8001540 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d902      	bls.n	800286a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	f000 bcfe 	b.w	8003266 <HAL_RCC_OscConfig+0x109a>
 800286a:	2302      	movs	r3, #2
 800286c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002874:	fa93 f2a3 	rbit	r2, r3
 8002878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800287c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002886:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800288a:	2202      	movs	r2, #2
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	fa93 f2a3 	rbit	r2, r3
 800289c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028ae:	2202      	movs	r2, #2
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	4b7e      	ldr	r3, [pc, #504]	@ (8002ac4 <HAL_RCC_OscConfig+0x8f8>)
 80028cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028d6:	2102      	movs	r1, #2
 80028d8:	6019      	str	r1, [r3, #0]
 80028da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f1a3 	rbit	r1, r3
 80028e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80028f0:	6019      	str	r1, [r3, #0]
  return result;
 80028f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d09d      	beq.n	8002854 <HAL_RCC_OscConfig+0x688>
 8002918:	e08d      	b.n	8002a36 <HAL_RCC_OscConfig+0x86a>
 800291a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800291e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800292a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	fa93 f2a3 	rbit	r2, r3
 8002934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002938:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800293c:	601a      	str	r2, [r3, #0]
  return result;
 800293e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002942:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002946:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac8 <HAL_RCC_OscConfig+0x8fc>)
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	461a      	mov	r2, r3
 8002958:	2300      	movs	r3, #0
 800295a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295c:	f7fe fdf0 	bl	8001540 <HAL_GetTick>
 8002960:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002966:	f7fe fdeb 	bl	8001540 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d902      	bls.n	800297c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	f000 bc75 	b.w	8003266 <HAL_RCC_OscConfig+0x109a>
 800297c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002980:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002984:	2202      	movs	r2, #2
 8002986:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800298c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	fa93 f2a3 	rbit	r2, r3
 8002996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800299a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80029a8:	2202      	movs	r2, #2
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	fa93 f2a3 	rbit	r2, r3
 80029ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029cc:	2202      	movs	r2, #2
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	fa93 f2a3 	rbit	r2, r3
 80029de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80029e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	4b36      	ldr	r3, [pc, #216]	@ (8002ac4 <HAL_RCC_OscConfig+0x8f8>)
 80029ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029f4:	2102      	movs	r1, #2
 80029f6:	6019      	str	r1, [r3, #0]
 80029f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f1a3 	rbit	r1, r3
 8002a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a0a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a0e:	6019      	str	r1, [r3, #0]
  return result;
 8002a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a14:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d197      	bne.n	8002966 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 81a5 	beq.w	8002d96 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a52:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <HAL_RCC_OscConfig+0x8f8>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d116      	bne.n	8002a8c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <HAL_RCC_OscConfig+0x8f8>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4a18      	ldr	r2, [pc, #96]	@ (8002ac4 <HAL_RCC_OscConfig+0x8f8>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a68:	61d3      	str	r3, [r2, #28]
 8002a6a:	4b16      	ldr	r3, [pc, #88]	@ (8002ac4 <HAL_RCC_OscConfig+0x8f8>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002a72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a84:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <HAL_RCC_OscConfig+0x900>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d121      	bne.n	8002adc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a98:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <HAL_RCC_OscConfig+0x900>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002acc <HAL_RCC_OscConfig+0x900>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa4:	f7fe fd4c 	bl	8001540 <HAL_GetTick>
 8002aa8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	e010      	b.n	8002ad0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aae:	f7fe fd47 	bl	8001540 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	@ 0x64
 8002abc:	d908      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e3d1      	b.n	8003266 <HAL_RCC_OscConfig+0x109a>
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	10908120 	.word	0x10908120
 8002acc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b8d      	ldr	r3, [pc, #564]	@ (8002d08 <HAL_RCC_OscConfig+0xb3c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0e8      	beq.n	8002aae <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002adc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x92e>
 8002aec:	4b87      	ldr	r3, [pc, #540]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4a86      	ldr	r2, [pc, #536]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6213      	str	r3, [r2, #32]
 8002af8:	e035      	b.n	8002b66 <HAL_RCC_OscConfig+0x99a>
 8002afa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002afe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x958>
 8002b0a:	4b80      	ldr	r3, [pc, #512]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	4a7f      	ldr	r2, [pc, #508]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6213      	str	r3, [r2, #32]
 8002b16:	4b7d      	ldr	r3, [pc, #500]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	6213      	str	r3, [r2, #32]
 8002b22:	e020      	b.n	8002b66 <HAL_RCC_OscConfig+0x99a>
 8002b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d10c      	bne.n	8002b4e <HAL_RCC_OscConfig+0x982>
 8002b34:	4b75      	ldr	r3, [pc, #468]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4a74      	ldr	r2, [pc, #464]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6213      	str	r3, [r2, #32]
 8002b40:	4b72      	ldr	r3, [pc, #456]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a71      	ldr	r2, [pc, #452]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6213      	str	r3, [r2, #32]
 8002b4c:	e00b      	b.n	8002b66 <HAL_RCC_OscConfig+0x99a>
 8002b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a6e      	ldr	r2, [pc, #440]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4a6b      	ldr	r2, [pc, #428]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 8081 	beq.w	8002c7a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b78:	f7fe fce2 	bl	8001540 <HAL_GetTick>
 8002b7c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b80:	e00b      	b.n	8002b9a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7fe fcdd 	bl	8001540 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e365      	b.n	8003266 <HAL_RCC_OscConfig+0x109a>
 8002b9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b9e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002baa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	fa93 f2a3 	rbit	r2, r3
 8002bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bce:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	fa93 f2a3 	rbit	r2, r3
 8002bd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bdc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002be0:	601a      	str	r2, [r3, #0]
  return result;
 8002be2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002bea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f043 0302 	orr.w	r3, r3, #2
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d102      	bne.n	8002c06 <HAL_RCC_OscConfig+0xa3a>
 8002c00:	4b42      	ldr	r3, [pc, #264]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	e013      	b.n	8002c2e <HAL_RCC_OscConfig+0xa62>
 8002c06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c0a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002c0e:	2202      	movs	r2, #2
 8002c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c16:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	fa93 f2a3 	rbit	r2, r3
 8002c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c24:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	4b38      	ldr	r3, [pc, #224]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c32:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c36:	2102      	movs	r1, #2
 8002c38:	6011      	str	r1, [r2, #0]
 8002c3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c3e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	fa92 f1a2 	rbit	r1, r2
 8002c48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c4c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002c50:	6011      	str	r1, [r2, #0]
  return result;
 8002c52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c56:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	fab2 f282 	clz	r2, r2
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	f002 021f 	and.w	r2, r2, #31
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d084      	beq.n	8002b82 <HAL_RCC_OscConfig+0x9b6>
 8002c78:	e083      	b.n	8002d82 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fc61 	bl	8001540 <HAL_GetTick>
 8002c7e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7fe fc5c 	bl	8001540 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e2e4      	b.n	8003266 <HAL_RCC_OscConfig+0x109a>
 8002c9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cac:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	fa93 f2a3 	rbit	r2, r3
 8002cb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cc8:	2202      	movs	r2, #2
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cd0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	fa93 f2a3 	rbit	r2, r3
 8002cda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cde:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ce2:	601a      	str	r2, [r3, #0]
  return result;
 8002ce4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002cec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d106      	bne.n	8002d10 <HAL_RCC_OscConfig+0xb44>
 8002d02:	4b02      	ldr	r3, [pc, #8]	@ (8002d0c <HAL_RCC_OscConfig+0xb40>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	e017      	b.n	8002d38 <HAL_RCC_OscConfig+0xb6c>
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d14:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002d18:	2202      	movs	r2, #2
 8002d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d20:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	fa93 f2a3 	rbit	r2, r3
 8002d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d2e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	4bb3      	ldr	r3, [pc, #716]	@ (8003004 <HAL_RCC_OscConfig+0xe38>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d3c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d40:	2102      	movs	r1, #2
 8002d42:	6011      	str	r1, [r2, #0]
 8002d44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d48:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	fa92 f1a2 	rbit	r1, r2
 8002d52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d56:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002d5a:	6011      	str	r1, [r2, #0]
  return result;
 8002d5c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d60:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	fab2 f282 	clz	r2, r2
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	f002 021f 	and.w	r2, r2, #31
 8002d76:	2101      	movs	r1, #1
 8002d78:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d180      	bne.n	8002c84 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d82:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d105      	bne.n	8002d96 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8a:	4b9e      	ldr	r3, [pc, #632]	@ (8003004 <HAL_RCC_OscConfig+0xe38>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	4a9d      	ldr	r2, [pc, #628]	@ (8003004 <HAL_RCC_OscConfig+0xe38>)
 8002d90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d94:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 825e 	beq.w	8003264 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da8:	4b96      	ldr	r3, [pc, #600]	@ (8003004 <HAL_RCC_OscConfig+0xe38>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	f000 821f 	beq.w	80031f4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	f040 8170 	bne.w	80030a8 <HAL_RCC_OscConfig+0xedc>
 8002dc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dcc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002dd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dda:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fa93 f2a3 	rbit	r2, r3
 8002de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002dec:	601a      	str	r2, [r3, #0]
  return result;
 8002dee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002df6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df8:	fab3 f383 	clz	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e02:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fb97 	bl	8001540 <HAL_GetTick>
 8002e12:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e16:	e009      	b.n	8002e2c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fe fb92 	bl	8001540 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e21c      	b.n	8003266 <HAL_RCC_OscConfig+0x109a>
 8002e2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e30:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e3e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fa93 f2a3 	rbit	r2, r3
 8002e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e4c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e50:	601a      	str	r2, [r3, #0]
  return result;
 8002e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e56:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d102      	bne.n	8002e76 <HAL_RCC_OscConfig+0xcaa>
 8002e70:	4b64      	ldr	r3, [pc, #400]	@ (8003004 <HAL_RCC_OscConfig+0xe38>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	e027      	b.n	8002ec6 <HAL_RCC_OscConfig+0xcfa>
 8002e76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e7a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e88:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e96:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ea0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002ea4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	fa93 f2a3 	rbit	r2, r3
 8002eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ebc:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	4b50      	ldr	r3, [pc, #320]	@ (8003004 <HAL_RCC_OscConfig+0xe38>)
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002eca:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ece:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ed2:	6011      	str	r1, [r2, #0]
 8002ed4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ed8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	fa92 f1a2 	rbit	r1, r2
 8002ee2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ee6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002eea:	6011      	str	r1, [r2, #0]
  return result;
 8002eec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ef0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	fab2 f282 	clz	r2, r2
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	f042 0220 	orr.w	r2, r2, #32
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	f002 021f 	and.w	r2, r2, #31
 8002f06:	2101      	movs	r1, #1
 8002f08:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d182      	bne.n	8002e18 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f12:	4b3c      	ldr	r3, [pc, #240]	@ (8003004 <HAL_RCC_OscConfig+0xe38>)
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	f023 020f 	bic.w	r2, r3, #15
 8002f1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	4937      	ldr	r1, [pc, #220]	@ (8003004 <HAL_RCC_OscConfig+0xe38>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002f2c:	4b35      	ldr	r3, [pc, #212]	@ (8003004 <HAL_RCC_OscConfig+0xe38>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002f34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6a19      	ldr	r1, [r3, #32]
 8002f40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	492d      	ldr	r1, [pc, #180]	@ (8003004 <HAL_RCC_OscConfig+0xe38>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
 8002f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f58:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f66:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	fa93 f2a3 	rbit	r2, r3
 8002f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f74:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f78:	601a      	str	r2, [r3, #0]
  return result;
 8002f7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f7e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f82:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f8e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	461a      	mov	r2, r3
 8002f96:	2301      	movs	r3, #1
 8002f98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fad1 	bl	8001540 <HAL_GetTick>
 8002f9e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa2:	e009      	b.n	8002fb8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fe facc 	bl	8001540 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e156      	b.n	8003266 <HAL_RCC_OscConfig+0x109a>
 8002fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fbc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002fc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fa93 f2a3 	rbit	r2, r3
 8002fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fdc:	601a      	str	r2, [r3, #0]
  return result;
 8002fde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fe6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <HAL_RCC_OscConfig+0xe3c>
 8002ffc:	4b01      	ldr	r3, [pc, #4]	@ (8003004 <HAL_RCC_OscConfig+0xe38>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	e02a      	b.n	8003058 <HAL_RCC_OscConfig+0xe8c>
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800300c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003010:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800301a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fa93 f2a3 	rbit	r2, r3
 8003024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003028:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003032:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003036:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003040:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fa93 f2a3 	rbit	r2, r3
 800304a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800304e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	4b86      	ldr	r3, [pc, #536]	@ (8003270 <HAL_RCC_OscConfig+0x10a4>)
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800305c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003060:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003064:	6011      	str	r1, [r2, #0]
 8003066:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800306a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	fa92 f1a2 	rbit	r1, r2
 8003074:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003078:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800307c:	6011      	str	r1, [r2, #0]
  return result;
 800307e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003082:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	fab2 f282 	clz	r2, r2
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	f042 0220 	orr.w	r2, r2, #32
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f002 021f 	and.w	r2, r2, #31
 8003098:	2101      	movs	r1, #1
 800309a:	fa01 f202 	lsl.w	r2, r1, r2
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f43f af7f 	beq.w	8002fa4 <HAL_RCC_OscConfig+0xdd8>
 80030a6:	e0dd      	b.n	8003264 <HAL_RCC_OscConfig+0x1098>
 80030a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ac:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ba:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	fa93 f2a3 	rbit	r2, r3
 80030c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030cc:	601a      	str	r2, [r3, #0]
  return result;
 80030ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030d2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030d6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	461a      	mov	r2, r3
 80030ea:	2300      	movs	r3, #0
 80030ec:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fe fa27 	bl	8001540 <HAL_GetTick>
 80030f2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f6:	e009      	b.n	800310c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe fa22 	bl	8001540 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e0ac      	b.n	8003266 <HAL_RCC_OscConfig+0x109a>
 800310c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003110:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003114:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003118:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800311e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fa93 f2a3 	rbit	r2, r3
 8003128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800312c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003130:	601a      	str	r2, [r3, #0]
  return result;
 8003132:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003136:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800313a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d102      	bne.n	8003156 <HAL_RCC_OscConfig+0xf8a>
 8003150:	4b47      	ldr	r3, [pc, #284]	@ (8003270 <HAL_RCC_OscConfig+0x10a4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	e027      	b.n	80031a6 <HAL_RCC_OscConfig+0xfda>
 8003156:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800315a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800315e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003168:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003176:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003180:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003184:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800318e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	fa93 f2a3 	rbit	r2, r3
 8003198:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800319c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	4b33      	ldr	r3, [pc, #204]	@ (8003270 <HAL_RCC_OscConfig+0x10a4>)
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031aa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80031ae:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031b2:	6011      	str	r1, [r2, #0]
 80031b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031b8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	fa92 f1a2 	rbit	r1, r2
 80031c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031c6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80031ca:	6011      	str	r1, [r2, #0]
  return result;
 80031cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80031d0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	fab2 f282 	clz	r2, r2
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	f042 0220 	orr.w	r2, r2, #32
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	f002 021f 	and.w	r2, r2, #31
 80031e6:	2101      	movs	r1, #1
 80031e8:	fa01 f202 	lsl.w	r2, r1, r2
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d182      	bne.n	80030f8 <HAL_RCC_OscConfig+0xf2c>
 80031f2:	e037      	b.n	8003264 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e02e      	b.n	8003266 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003208:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <HAL_RCC_OscConfig+0x10a4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003210:	4b17      	ldr	r3, [pc, #92]	@ (8003270 <HAL_RCC_OscConfig+0x10a4>)
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003218:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800321c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003220:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003224:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	429a      	cmp	r2, r3
 800322e:	d117      	bne.n	8003260 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003230:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003234:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003238:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800323c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003244:	429a      	cmp	r2, r3
 8003246:	d10b      	bne.n	8003260 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003248:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003254:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000

08003274 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b09e      	sub	sp, #120	@ 0x78
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e162      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b90      	ldr	r3, [pc, #576]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d910      	bls.n	80032bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b8d      	ldr	r3, [pc, #564]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 0207 	bic.w	r2, r3, #7
 80032a2:	498b      	ldr	r1, [pc, #556]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b89      	ldr	r3, [pc, #548]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e14a      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b82      	ldr	r3, [pc, #520]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	497f      	ldr	r1, [pc, #508]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80dc 	beq.w	80034a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d13c      	bne.n	800336a <HAL_RCC_ClockConfig+0xf6>
 80032f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80032fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d102      	bne.n	800331a <HAL_RCC_ClockConfig+0xa6>
 8003314:	4b6f      	ldr	r3, [pc, #444]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	e00f      	b.n	800333a <HAL_RCC_ClockConfig+0xc6>
 800331a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800331e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	667b      	str	r3, [r7, #100]	@ 0x64
 8003328:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800332c:	663b      	str	r3, [r7, #96]	@ 0x60
 800332e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003336:	4b67      	ldr	r3, [pc, #412]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800333e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003340:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003342:	fa92 f2a2 	rbit	r2, r2
 8003346:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003348:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800334a:	fab2 f282 	clz	r2, r2
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	f042 0220 	orr.w	r2, r2, #32
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	f002 021f 	and.w	r2, r2, #31
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d17b      	bne.n	800345e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e0f3      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d13c      	bne.n	80033ec <HAL_RCC_ClockConfig+0x178>
 8003372:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003376:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d102      	bne.n	800339c <HAL_RCC_ClockConfig+0x128>
 8003396:	4b4f      	ldr	r3, [pc, #316]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	e00f      	b.n	80033bc <HAL_RCC_ClockConfig+0x148>
 800339c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80033b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033b8:	4b46      	ldr	r3, [pc, #280]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033c0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80033c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033c4:	fa92 f2a2 	rbit	r2, r2
 80033c8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80033ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	f042 0220 	orr.w	r2, r2, #32
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	f002 021f 	and.w	r2, r2, #31
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f202 	lsl.w	r2, r1, r2
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d13a      	bne.n	800345e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b2      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
 80033ec:	2302      	movs	r3, #2
 80033ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80033f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d102      	bne.n	8003414 <HAL_RCC_ClockConfig+0x1a0>
 800340e:	4b31      	ldr	r3, [pc, #196]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	e00d      	b.n	8003430 <HAL_RCC_ClockConfig+0x1bc>
 8003414:	2302      	movs	r3, #2
 8003416:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003420:	2302      	movs	r3, #2
 8003422:	623b      	str	r3, [r7, #32]
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	4b29      	ldr	r3, [pc, #164]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	2202      	movs	r2, #2
 8003432:	61ba      	str	r2, [r7, #24]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	fa92 f2a2 	rbit	r2, r2
 800343a:	617a      	str	r2, [r7, #20]
  return result;
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	fab2 f282 	clz	r2, r2
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	f042 0220 	orr.w	r2, r2, #32
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	f002 021f 	and.w	r2, r2, #31
 800344e:	2101      	movs	r1, #1
 8003450:	fa01 f202 	lsl.w	r2, r1, r2
 8003454:	4013      	ands	r3, r2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e079      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345e:	4b1d      	ldr	r3, [pc, #116]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f023 0203 	bic.w	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	491a      	ldr	r1, [pc, #104]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003470:	f7fe f866 	bl	8001540 <HAL_GetTick>
 8003474:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	e00a      	b.n	800348e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003478:	f7fe f862 	bl	8001540 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e061      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 020c 	and.w	r2, r3, #12
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	429a      	cmp	r2, r3
 800349e:	d1eb      	bne.n	8003478 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a0:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d214      	bcs.n	80034d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b08      	ldr	r3, [pc, #32]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 0207 	bic.w	r2, r3, #7
 80034b6:	4906      	ldr	r1, [pc, #24]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b04      	ldr	r3, [pc, #16]	@ (80034d0 <HAL_RCC_ClockConfig+0x25c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e040      	b.n	8003552 <HAL_RCC_ClockConfig+0x2de>
 80034d0:	40022000 	.word	0x40022000
 80034d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e4:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <HAL_RCC_ClockConfig+0x2e8>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	491a      	ldr	r1, [pc, #104]	@ (800355c <HAL_RCC_ClockConfig+0x2e8>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003502:	4b16      	ldr	r3, [pc, #88]	@ (800355c <HAL_RCC_ClockConfig+0x2e8>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4912      	ldr	r1, [pc, #72]	@ (800355c <HAL_RCC_ClockConfig+0x2e8>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003516:	f000 f829 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800351a:	4601      	mov	r1, r0
 800351c:	4b0f      	ldr	r3, [pc, #60]	@ (800355c <HAL_RCC_ClockConfig+0x2e8>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003524:	22f0      	movs	r2, #240	@ 0xf0
 8003526:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	fa92 f2a2 	rbit	r2, r2
 800352e:	60fa      	str	r2, [r7, #12]
  return result;
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	fab2 f282 	clz	r2, r2
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	40d3      	lsrs	r3, r2
 800353a:	4a09      	ldr	r2, [pc, #36]	@ (8003560 <HAL_RCC_ClockConfig+0x2ec>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	fa21 f303 	lsr.w	r3, r1, r3
 8003542:	4a08      	ldr	r2, [pc, #32]	@ (8003564 <HAL_RCC_ClockConfig+0x2f0>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003546:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <HAL_RCC_ClockConfig+0x2f4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd ffb4 	bl	80014b8 <HAL_InitTick>
  
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3778      	adds	r7, #120	@ 0x78
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	08005940 	.word	0x08005940
 8003564:	20000000 	.word	0x20000000
 8003568:	20000004 	.word	0x20000004

0800356c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003586:	4b1f      	ldr	r3, [pc, #124]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x98>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b04      	cmp	r3, #4
 8003594:	d002      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x30>
 8003596:	2b08      	cmp	r3, #8
 8003598:	d003      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x36>
 800359a:	e029      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800359c:	4b1a      	ldr	r3, [pc, #104]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x9c>)
 800359e:	613b      	str	r3, [r7, #16]
      break;
 80035a0:	e029      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	0c9b      	lsrs	r3, r3, #18
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	4a18      	ldr	r2, [pc, #96]	@ (800360c <HAL_RCC_GetSysClockFreq+0xa0>)
 80035ac:	5cd3      	ldrb	r3, [r2, r3]
 80035ae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80035b0:	4b14      	ldr	r3, [pc, #80]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x98>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	4a15      	ldr	r2, [pc, #84]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035ba:	5cd3      	ldrb	r3, [r2, r3]
 80035bc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	e007      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035da:	4a0b      	ldr	r2, [pc, #44]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	fb02 f303 	mul.w	r3, r2, r3
 80035e8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	613b      	str	r3, [r7, #16]
      break;
 80035ee:	e002      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035f0:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035f2:	613b      	str	r3, [r7, #16]
      break;
 80035f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f6:	693b      	ldr	r3, [r7, #16]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40021000 	.word	0x40021000
 8003608:	007a1200 	.word	0x007a1200
 800360c:	08005958 	.word	0x08005958
 8003610:	08005968 	.word	0x08005968

08003614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003618:	4b03      	ldr	r3, [pc, #12]	@ (8003628 <HAL_RCC_GetHCLKFreq+0x14>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20000000 	.word	0x20000000

0800362c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003632:	f7ff ffef 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 8003636:	4601      	mov	r1, r0
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003640:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003644:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	fa92 f2a2 	rbit	r2, r2
 800364c:	603a      	str	r2, [r7, #0]
  return result;
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	fab2 f282 	clz	r2, r2
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	40d3      	lsrs	r3, r2
 8003658:	4a04      	ldr	r2, [pc, #16]	@ (800366c <HAL_RCC_GetPCLK1Freq+0x40>)
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	08005950 	.word	0x08005950

08003670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003676:	f7ff ffcd 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 800367a:	4601      	mov	r1, r0
 800367c:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003684:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003688:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	fa92 f2a2 	rbit	r2, r2
 8003690:	603a      	str	r2, [r7, #0]
  return result;
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	fab2 f282 	clz	r2, r2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	40d3      	lsrs	r3, r2
 800369c:	4a04      	ldr	r2, [pc, #16]	@ (80036b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800369e:	5cd3      	ldrb	r3, [r2, r3]
 80036a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	08005950 	.word	0x08005950

080036b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b092      	sub	sp, #72	@ 0x48
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80d4 	beq.w	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10e      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ee:	61d3      	str	r3, [r2, #28]
 80036f0:	4b48      	ldr	r3, [pc, #288]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	4b45      	ldr	r3, [pc, #276]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d118      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370e:	4b42      	ldr	r3, [pc, #264]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a41      	ldr	r2, [pc, #260]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003718:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371a:	f7fd ff11 	bl	8001540 <HAL_GetTick>
 800371e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	e008      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003722:	f7fd ff0d 	bl	8001540 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b64      	cmp	r3, #100	@ 0x64
 800372e:	d901      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e1d6      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	4b38      	ldr	r3, [pc, #224]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003740:	4b34      	ldr	r3, [pc, #208]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003748:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800374a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8084 	beq.w	800385a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800375a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800375c:	429a      	cmp	r2, r3
 800375e:	d07c      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003760:	4b2c      	ldr	r3, [pc, #176]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800376a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	fa93 f3a3 	rbit	r3, r3
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	4b26      	ldr	r3, [pc, #152]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	461a      	mov	r2, r3
 800378a:	2301      	movs	r3, #1
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003792:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800379c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b1d      	ldr	r3, [pc, #116]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	461a      	mov	r2, r3
 80037ae:	2300      	movs	r3, #0
 80037b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037b2:	4a18      	ldr	r2, [pc, #96]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d04b      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c2:	f7fd febd 	bl	8001540 <HAL_GetTick>
 80037c6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ca:	f7fd feb9 	bl	8001540 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e180      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80037e0:	2302      	movs	r3, #2
 80037e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ec:	2302      	movs	r3, #2
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	61fb      	str	r3, [r7, #28]
  return result;
 80037f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d108      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800380e:	4b01      	ldr	r3, [pc, #4]	@ (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	e00d      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003814:	40021000 	.word	0x40021000
 8003818:	40007000 	.word	0x40007000
 800381c:	10908100 	.word	0x10908100
 8003820:	2302      	movs	r3, #2
 8003822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	4b9a      	ldr	r3, [pc, #616]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	2202      	movs	r2, #2
 8003832:	613a      	str	r2, [r7, #16]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	fa92 f2a2 	rbit	r2, r2
 800383a:	60fa      	str	r2, [r7, #12]
  return result;
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	fab2 f282 	clz	r2, r2
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	f002 021f 	and.w	r2, r2, #31
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f202 	lsl.w	r2, r1, r2
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0b7      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800385a:	4b8f      	ldr	r3, [pc, #572]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	498c      	ldr	r1, [pc, #560]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003868:	4313      	orrs	r3, r2
 800386a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800386c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003874:	4b88      	ldr	r3, [pc, #544]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	4a87      	ldr	r2, [pc, #540]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800387a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800387e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800388c:	4b82      	ldr	r3, [pc, #520]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003890:	f023 0203 	bic.w	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	497f      	ldr	r1, [pc, #508]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038aa:	4b7b      	ldr	r3, [pc, #492]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	4978      	ldr	r1, [pc, #480]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038c8:	4b73      	ldr	r3, [pc, #460]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	4970      	ldr	r1, [pc, #448]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038e6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	f023 0210 	bic.w	r2, r3, #16
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	4969      	ldr	r1, [pc, #420]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003904:	4b64      	ldr	r3, [pc, #400]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003910:	4961      	ldr	r1, [pc, #388]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003922:	4b5d      	ldr	r3, [pc, #372]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003926:	f023 0220 	bic.w	r2, r3, #32
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	495a      	ldr	r1, [pc, #360]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003930:	4313      	orrs	r3, r2
 8003932:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003940:	4b55      	ldr	r3, [pc, #340]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	4952      	ldr	r1, [pc, #328]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800395e:	4b4e      	ldr	r3, [pc, #312]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003962:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	494b      	ldr	r1, [pc, #300]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800397c:	4b46      	ldr	r3, [pc, #280]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	4943      	ldr	r1, [pc, #268]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800399a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a6:	493c      	ldr	r1, [pc, #240]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039b8:	4b37      	ldr	r3, [pc, #220]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c4:	4934      	ldr	r1, [pc, #208]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80039d6:	4b30      	ldr	r3, [pc, #192]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039da:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e2:	492d      	ldr	r1, [pc, #180]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80039f4:	4b28      	ldr	r3, [pc, #160]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a00:	4925      	ldr	r1, [pc, #148]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003a12:	4b21      	ldr	r3, [pc, #132]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a16:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	491e      	ldr	r1, [pc, #120]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003a30:	4b19      	ldr	r3, [pc, #100]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	4916      	ldr	r1, [pc, #88]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003a4e:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5a:	490f      	ldr	r1, [pc, #60]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a70:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a78:	4907      	ldr	r1, [pc, #28]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00c      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003a8a:	4b03      	ldr	r3, [pc, #12]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	e002      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9e:	4913      	ldr	r1, [pc, #76]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abc:	490b      	ldr	r1, [pc, #44]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003ace:	4b07      	ldr	r3, [pc, #28]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ada:	4904      	ldr	r1, [pc, #16]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3748      	adds	r7, #72	@ 0x48
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000

08003af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e049      	b.n	8003b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fd fbe2 	bl	80012e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f000 f89e 	bl	8003c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d001      	beq.n	8003bb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e047      	b.n	8003c48 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a23      	ldr	r2, [pc, #140]	@ (8003c54 <HAL_TIM_Base_Start+0xb4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01d      	beq.n	8003c06 <HAL_TIM_Base_Start+0x66>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd2:	d018      	beq.n	8003c06 <HAL_TIM_Base_Start+0x66>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c58 <HAL_TIM_Base_Start+0xb8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_TIM_Base_Start+0x66>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1e      	ldr	r2, [pc, #120]	@ (8003c5c <HAL_TIM_Base_Start+0xbc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_TIM_Base_Start+0x66>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1c      	ldr	r2, [pc, #112]	@ (8003c60 <HAL_TIM_Base_Start+0xc0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_TIM_Base_Start+0x66>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c64 <HAL_TIM_Base_Start+0xc4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_TIM_Base_Start+0x66>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a19      	ldr	r2, [pc, #100]	@ (8003c68 <HAL_TIM_Base_Start+0xc8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d115      	bne.n	8003c32 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	4b17      	ldr	r3, [pc, #92]	@ (8003c6c <HAL_TIM_Base_Start+0xcc>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b06      	cmp	r3, #6
 8003c16:	d015      	beq.n	8003c44 <HAL_TIM_Base_Start+0xa4>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c1e:	d011      	beq.n	8003c44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c30:	e008      	b.n	8003c44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e000      	b.n	8003c46 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800
 8003c60:	40013400 	.word	0x40013400
 8003c64:	40014000 	.word	0x40014000
 8003c68:	40015000 	.word	0x40015000
 8003c6c:	00010007 	.word	0x00010007

08003c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a48      	ldr	r2, [pc, #288]	@ (8003da4 <TIM_Base_SetConfig+0x134>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d013      	beq.n	8003cb0 <TIM_Base_SetConfig+0x40>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8e:	d00f      	beq.n	8003cb0 <TIM_Base_SetConfig+0x40>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a45      	ldr	r2, [pc, #276]	@ (8003da8 <TIM_Base_SetConfig+0x138>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00b      	beq.n	8003cb0 <TIM_Base_SetConfig+0x40>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a44      	ldr	r2, [pc, #272]	@ (8003dac <TIM_Base_SetConfig+0x13c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d007      	beq.n	8003cb0 <TIM_Base_SetConfig+0x40>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a43      	ldr	r2, [pc, #268]	@ (8003db0 <TIM_Base_SetConfig+0x140>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_Base_SetConfig+0x40>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a42      	ldr	r2, [pc, #264]	@ (8003db4 <TIM_Base_SetConfig+0x144>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d108      	bne.n	8003cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a37      	ldr	r2, [pc, #220]	@ (8003da4 <TIM_Base_SetConfig+0x134>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01f      	beq.n	8003d0a <TIM_Base_SetConfig+0x9a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd0:	d01b      	beq.n	8003d0a <TIM_Base_SetConfig+0x9a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a34      	ldr	r2, [pc, #208]	@ (8003da8 <TIM_Base_SetConfig+0x138>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d017      	beq.n	8003d0a <TIM_Base_SetConfig+0x9a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a33      	ldr	r2, [pc, #204]	@ (8003dac <TIM_Base_SetConfig+0x13c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <TIM_Base_SetConfig+0x9a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a32      	ldr	r2, [pc, #200]	@ (8003db0 <TIM_Base_SetConfig+0x140>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00f      	beq.n	8003d0a <TIM_Base_SetConfig+0x9a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a32      	ldr	r2, [pc, #200]	@ (8003db8 <TIM_Base_SetConfig+0x148>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <TIM_Base_SetConfig+0x9a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a31      	ldr	r2, [pc, #196]	@ (8003dbc <TIM_Base_SetConfig+0x14c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_Base_SetConfig+0x9a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a30      	ldr	r2, [pc, #192]	@ (8003dc0 <TIM_Base_SetConfig+0x150>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_Base_SetConfig+0x9a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2b      	ldr	r2, [pc, #172]	@ (8003db4 <TIM_Base_SetConfig+0x144>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d108      	bne.n	8003d1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a18      	ldr	r2, [pc, #96]	@ (8003da4 <TIM_Base_SetConfig+0x134>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <TIM_Base_SetConfig+0x100>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a19      	ldr	r2, [pc, #100]	@ (8003db0 <TIM_Base_SetConfig+0x140>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00f      	beq.n	8003d70 <TIM_Base_SetConfig+0x100>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a19      	ldr	r2, [pc, #100]	@ (8003db8 <TIM_Base_SetConfig+0x148>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_Base_SetConfig+0x100>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a18      	ldr	r2, [pc, #96]	@ (8003dbc <TIM_Base_SetConfig+0x14c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_Base_SetConfig+0x100>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a17      	ldr	r2, [pc, #92]	@ (8003dc0 <TIM_Base_SetConfig+0x150>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_Base_SetConfig+0x100>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a12      	ldr	r2, [pc, #72]	@ (8003db4 <TIM_Base_SetConfig+0x144>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d103      	bne.n	8003d78 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d105      	bne.n	8003d96 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f023 0201 	bic.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	611a      	str	r2, [r3, #16]
  }
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40013400 	.word	0x40013400
 8003db4:	40015000 	.word	0x40015000
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800

08003dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e06d      	b.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a30      	ldr	r2, [pc, #192]	@ (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a2d      	ldr	r2, [pc, #180]	@ (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d01d      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e58:	d018      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1a      	ldr	r2, [pc, #104]	@ (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a15      	ldr	r2, [pc, #84]	@ (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a16      	ldr	r2, [pc, #88]	@ (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a11      	ldr	r2, [pc, #68]	@ (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	40013400 	.word	0x40013400
 8003ecc:	40015000 	.word	0x40015000
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40000800 	.word	0x40000800
 8003ed8:	40014000 	.word	0x40014000

08003edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e040      	b.n	8003f70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fd fa58 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2224      	movs	r2, #36	@ 0x24
 8003f08:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fa86 	bl	8004434 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f8af 	bl	800408c <UART_SetConfig>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e01b      	b.n	8003f70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fb05 	bl	8004578 <UART_CheckIdleState>
 8003f6e:	4603      	mov	r3, r0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	@ 0x28
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	4613      	mov	r3, r2
 8003f86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d177      	bne.n	8004080 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_UART_Transmit+0x24>
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e070      	b.n	8004082 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2221      	movs	r2, #33	@ 0x21
 8003fac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fae:	f7fd fac7 	bl	8001540 <HAL_GetTick>
 8003fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	88fa      	ldrh	r2, [r7, #6]
 8003fc0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fcc:	d108      	bne.n	8003fe0 <HAL_UART_Transmit+0x68>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	e003      	b.n	8003fe8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fe8:	e02f      	b.n	800404a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2180      	movs	r1, #128	@ 0x80
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fb67 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e03b      	b.n	8004082 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	881a      	ldrh	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800401c:	b292      	uxth	r2, r2
 800401e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	3302      	adds	r3, #2
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	e007      	b.n	8004038 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	3301      	adds	r3, #1
 8004036:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1c9      	bne.n	8003fea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2200      	movs	r2, #0
 800405e:	2140      	movs	r1, #64	@ 0x40
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fb31 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d004      	beq.n	8004076 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e005      	b.n	8004082 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2220      	movs	r2, #32
 800407a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4b92      	ldr	r3, [pc, #584]	@ (8004300 <UART_SetConfig+0x274>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	6979      	ldr	r1, [r7, #20]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a80      	ldr	r2, [pc, #512]	@ (8004304 <UART_SetConfig+0x278>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d120      	bne.n	800414a <UART_SetConfig+0xbe>
 8004108:	4b7f      	ldr	r3, [pc, #508]	@ (8004308 <UART_SetConfig+0x27c>)
 800410a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	2b03      	cmp	r3, #3
 8004112:	d817      	bhi.n	8004144 <UART_SetConfig+0xb8>
 8004114:	a201      	add	r2, pc, #4	@ (adr r2, 800411c <UART_SetConfig+0x90>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	0800412d 	.word	0x0800412d
 8004120:	08004139 	.word	0x08004139
 8004124:	0800413f 	.word	0x0800413f
 8004128:	08004133 	.word	0x08004133
 800412c:	2301      	movs	r3, #1
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e0b5      	b.n	800429e <UART_SetConfig+0x212>
 8004132:	2302      	movs	r3, #2
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e0b2      	b.n	800429e <UART_SetConfig+0x212>
 8004138:	2304      	movs	r3, #4
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e0af      	b.n	800429e <UART_SetConfig+0x212>
 800413e:	2308      	movs	r3, #8
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e0ac      	b.n	800429e <UART_SetConfig+0x212>
 8004144:	2310      	movs	r3, #16
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e0a9      	b.n	800429e <UART_SetConfig+0x212>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a6f      	ldr	r2, [pc, #444]	@ (800430c <UART_SetConfig+0x280>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d124      	bne.n	800419e <UART_SetConfig+0x112>
 8004154:	4b6c      	ldr	r3, [pc, #432]	@ (8004308 <UART_SetConfig+0x27c>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004158:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800415c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004160:	d011      	beq.n	8004186 <UART_SetConfig+0xfa>
 8004162:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004166:	d817      	bhi.n	8004198 <UART_SetConfig+0x10c>
 8004168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800416c:	d011      	beq.n	8004192 <UART_SetConfig+0x106>
 800416e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004172:	d811      	bhi.n	8004198 <UART_SetConfig+0x10c>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <UART_SetConfig+0xf4>
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800417c:	d006      	beq.n	800418c <UART_SetConfig+0x100>
 800417e:	e00b      	b.n	8004198 <UART_SetConfig+0x10c>
 8004180:	2300      	movs	r3, #0
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e08b      	b.n	800429e <UART_SetConfig+0x212>
 8004186:	2302      	movs	r3, #2
 8004188:	77fb      	strb	r3, [r7, #31]
 800418a:	e088      	b.n	800429e <UART_SetConfig+0x212>
 800418c:	2304      	movs	r3, #4
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e085      	b.n	800429e <UART_SetConfig+0x212>
 8004192:	2308      	movs	r3, #8
 8004194:	77fb      	strb	r3, [r7, #31]
 8004196:	e082      	b.n	800429e <UART_SetConfig+0x212>
 8004198:	2310      	movs	r3, #16
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e07f      	b.n	800429e <UART_SetConfig+0x212>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004310 <UART_SetConfig+0x284>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d124      	bne.n	80041f2 <UART_SetConfig+0x166>
 80041a8:	4b57      	ldr	r3, [pc, #348]	@ (8004308 <UART_SetConfig+0x27c>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ac:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80041b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041b4:	d011      	beq.n	80041da <UART_SetConfig+0x14e>
 80041b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041ba:	d817      	bhi.n	80041ec <UART_SetConfig+0x160>
 80041bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041c0:	d011      	beq.n	80041e6 <UART_SetConfig+0x15a>
 80041c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041c6:	d811      	bhi.n	80041ec <UART_SetConfig+0x160>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <UART_SetConfig+0x148>
 80041cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041d0:	d006      	beq.n	80041e0 <UART_SetConfig+0x154>
 80041d2:	e00b      	b.n	80041ec <UART_SetConfig+0x160>
 80041d4:	2300      	movs	r3, #0
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e061      	b.n	800429e <UART_SetConfig+0x212>
 80041da:	2302      	movs	r3, #2
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e05e      	b.n	800429e <UART_SetConfig+0x212>
 80041e0:	2304      	movs	r3, #4
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e05b      	b.n	800429e <UART_SetConfig+0x212>
 80041e6:	2308      	movs	r3, #8
 80041e8:	77fb      	strb	r3, [r7, #31]
 80041ea:	e058      	b.n	800429e <UART_SetConfig+0x212>
 80041ec:	2310      	movs	r3, #16
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e055      	b.n	800429e <UART_SetConfig+0x212>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a47      	ldr	r2, [pc, #284]	@ (8004314 <UART_SetConfig+0x288>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d124      	bne.n	8004246 <UART_SetConfig+0x1ba>
 80041fc:	4b42      	ldr	r3, [pc, #264]	@ (8004308 <UART_SetConfig+0x27c>)
 80041fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004200:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004204:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004208:	d011      	beq.n	800422e <UART_SetConfig+0x1a2>
 800420a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800420e:	d817      	bhi.n	8004240 <UART_SetConfig+0x1b4>
 8004210:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004214:	d011      	beq.n	800423a <UART_SetConfig+0x1ae>
 8004216:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800421a:	d811      	bhi.n	8004240 <UART_SetConfig+0x1b4>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <UART_SetConfig+0x19c>
 8004220:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004224:	d006      	beq.n	8004234 <UART_SetConfig+0x1a8>
 8004226:	e00b      	b.n	8004240 <UART_SetConfig+0x1b4>
 8004228:	2300      	movs	r3, #0
 800422a:	77fb      	strb	r3, [r7, #31]
 800422c:	e037      	b.n	800429e <UART_SetConfig+0x212>
 800422e:	2302      	movs	r3, #2
 8004230:	77fb      	strb	r3, [r7, #31]
 8004232:	e034      	b.n	800429e <UART_SetConfig+0x212>
 8004234:	2304      	movs	r3, #4
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e031      	b.n	800429e <UART_SetConfig+0x212>
 800423a:	2308      	movs	r3, #8
 800423c:	77fb      	strb	r3, [r7, #31]
 800423e:	e02e      	b.n	800429e <UART_SetConfig+0x212>
 8004240:	2310      	movs	r3, #16
 8004242:	77fb      	strb	r3, [r7, #31]
 8004244:	e02b      	b.n	800429e <UART_SetConfig+0x212>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a33      	ldr	r2, [pc, #204]	@ (8004318 <UART_SetConfig+0x28c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d124      	bne.n	800429a <UART_SetConfig+0x20e>
 8004250:	4b2d      	ldr	r3, [pc, #180]	@ (8004308 <UART_SetConfig+0x27c>)
 8004252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004254:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004258:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800425c:	d011      	beq.n	8004282 <UART_SetConfig+0x1f6>
 800425e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004262:	d817      	bhi.n	8004294 <UART_SetConfig+0x208>
 8004264:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004268:	d011      	beq.n	800428e <UART_SetConfig+0x202>
 800426a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800426e:	d811      	bhi.n	8004294 <UART_SetConfig+0x208>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <UART_SetConfig+0x1f0>
 8004274:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004278:	d006      	beq.n	8004288 <UART_SetConfig+0x1fc>
 800427a:	e00b      	b.n	8004294 <UART_SetConfig+0x208>
 800427c:	2300      	movs	r3, #0
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e00d      	b.n	800429e <UART_SetConfig+0x212>
 8004282:	2302      	movs	r3, #2
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e00a      	b.n	800429e <UART_SetConfig+0x212>
 8004288:	2304      	movs	r3, #4
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e007      	b.n	800429e <UART_SetConfig+0x212>
 800428e:	2308      	movs	r3, #8
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e004      	b.n	800429e <UART_SetConfig+0x212>
 8004294:	2310      	movs	r3, #16
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e001      	b.n	800429e <UART_SetConfig+0x212>
 800429a:	2310      	movs	r3, #16
 800429c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a6:	d16b      	bne.n	8004380 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80042a8:	7ffb      	ldrb	r3, [r7, #31]
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d838      	bhi.n	8004320 <UART_SetConfig+0x294>
 80042ae:	a201      	add	r2, pc, #4	@ (adr r2, 80042b4 <UART_SetConfig+0x228>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080042e1 	.word	0x080042e1
 80042bc:	080042e9 	.word	0x080042e9
 80042c0:	08004321 	.word	0x08004321
 80042c4:	080042ef 	.word	0x080042ef
 80042c8:	08004321 	.word	0x08004321
 80042cc:	08004321 	.word	0x08004321
 80042d0:	08004321 	.word	0x08004321
 80042d4:	080042f7 	.word	0x080042f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d8:	f7ff f9a8 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 80042dc:	61b8      	str	r0, [r7, #24]
        break;
 80042de:	e024      	b.n	800432a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7ff f9c6 	bl	8003670 <HAL_RCC_GetPCLK2Freq>
 80042e4:	61b8      	str	r0, [r7, #24]
        break;
 80042e6:	e020      	b.n	800432a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e8:	4b0c      	ldr	r3, [pc, #48]	@ (800431c <UART_SetConfig+0x290>)
 80042ea:	61bb      	str	r3, [r7, #24]
        break;
 80042ec:	e01d      	b.n	800432a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ee:	f7ff f93d 	bl	800356c <HAL_RCC_GetSysClockFreq>
 80042f2:	61b8      	str	r0, [r7, #24]
        break;
 80042f4:	e019      	b.n	800432a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042fa:	61bb      	str	r3, [r7, #24]
        break;
 80042fc:	e015      	b.n	800432a <UART_SetConfig+0x29e>
 80042fe:	bf00      	nop
 8004300:	efff69f3 	.word	0xefff69f3
 8004304:	40013800 	.word	0x40013800
 8004308:	40021000 	.word	0x40021000
 800430c:	40004400 	.word	0x40004400
 8004310:	40004800 	.word	0x40004800
 8004314:	40004c00 	.word	0x40004c00
 8004318:	40005000 	.word	0x40005000
 800431c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	77bb      	strb	r3, [r7, #30]
        break;
 8004328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d073      	beq.n	8004418 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	005a      	lsls	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	441a      	add	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b0f      	cmp	r3, #15
 800434a:	d916      	bls.n	800437a <UART_SetConfig+0x2ee>
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004352:	d212      	bcs.n	800437a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f023 030f 	bic.w	r3, r3, #15
 800435c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	b29b      	uxth	r3, r3
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	b29a      	uxth	r2, r3
 800436a:	89fb      	ldrh	r3, [r7, #14]
 800436c:	4313      	orrs	r3, r2
 800436e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	89fa      	ldrh	r2, [r7, #14]
 8004376:	60da      	str	r2, [r3, #12]
 8004378:	e04e      	b.n	8004418 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	77bb      	strb	r3, [r7, #30]
 800437e:	e04b      	b.n	8004418 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004380:	7ffb      	ldrb	r3, [r7, #31]
 8004382:	2b08      	cmp	r3, #8
 8004384:	d827      	bhi.n	80043d6 <UART_SetConfig+0x34a>
 8004386:	a201      	add	r2, pc, #4	@ (adr r2, 800438c <UART_SetConfig+0x300>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043d7 	.word	0x080043d7
 800439c:	080043c7 	.word	0x080043c7
 80043a0:	080043d7 	.word	0x080043d7
 80043a4:	080043d7 	.word	0x080043d7
 80043a8:	080043d7 	.word	0x080043d7
 80043ac:	080043cf 	.word	0x080043cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7ff f93c 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 80043b4:	61b8      	str	r0, [r7, #24]
        break;
 80043b6:	e013      	b.n	80043e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7ff f95a 	bl	8003670 <HAL_RCC_GetPCLK2Freq>
 80043bc:	61b8      	str	r0, [r7, #24]
        break;
 80043be:	e00f      	b.n	80043e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <UART_SetConfig+0x3a4>)
 80043c2:	61bb      	str	r3, [r7, #24]
        break;
 80043c4:	e00c      	b.n	80043e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c6:	f7ff f8d1 	bl	800356c <HAL_RCC_GetSysClockFreq>
 80043ca:	61b8      	str	r0, [r7, #24]
        break;
 80043cc:	e008      	b.n	80043e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043d2:	61bb      	str	r3, [r7, #24]
        break;
 80043d4:	e004      	b.n	80043e0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	77bb      	strb	r3, [r7, #30]
        break;
 80043de:	bf00      	nop
    }

    if (pclk != 0U)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d018      	beq.n	8004418 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	085a      	lsrs	r2, r3, #1
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	441a      	add	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b0f      	cmp	r3, #15
 80043fe:	d909      	bls.n	8004414 <UART_SetConfig+0x388>
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004406:	d205      	bcs.n	8004414 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	b29a      	uxth	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	e001      	b.n	8004418 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004424:	7fbb      	ldrb	r3, [r7, #30]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	007a1200 	.word	0x007a1200

08004434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01a      	beq.n	800454a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004532:	d10a      	bne.n	800454a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b098      	sub	sp, #96	@ 0x60
 800457c:	af02      	add	r7, sp, #8
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004588:	f7fc ffda 	bl	8001540 <HAL_GetTick>
 800458c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b08      	cmp	r3, #8
 800459a:	d12e      	bne.n	80045fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800459c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a4:	2200      	movs	r2, #0
 80045a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f88c 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d021      	beq.n	80045fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e6      	bne.n	80045b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e062      	b.n	80046c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b04      	cmp	r3, #4
 8004606:	d149      	bne.n	800469c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004608:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004610:	2200      	movs	r2, #0
 8004612:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f856 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d03c      	beq.n	800469c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	623b      	str	r3, [r7, #32]
   return(result);
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004640:	633b      	str	r3, [r7, #48]	@ 0x30
 8004642:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e6      	bne.n	8004622 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	60fb      	str	r3, [r7, #12]
   return(result);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004674:	61fa      	str	r2, [r7, #28]
 8004676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	69b9      	ldr	r1, [r7, #24]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	617b      	str	r3, [r7, #20]
   return(result);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e5      	bne.n	8004654 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e011      	b.n	80046c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3758      	adds	r7, #88	@ 0x58
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d8:	e04f      	b.n	800477a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d04b      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e2:	f7fc ff2d 	bl	8001540 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d302      	bcc.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e04e      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d037      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0xb2>
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b80      	cmp	r3, #128	@ 0x80
 800470e:	d034      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b40      	cmp	r3, #64	@ 0x40
 8004714:	d031      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b08      	cmp	r3, #8
 8004722:	d110      	bne.n	8004746 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2208      	movs	r2, #8
 800472a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f838 	bl	80047a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2208      	movs	r2, #8
 8004736:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e029      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004754:	d111      	bne.n	800477a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800475e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f81e 	bl	80047a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e00f      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4013      	ands	r3, r2
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	429a      	cmp	r2, r3
 8004796:	d0a0      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b095      	sub	sp, #84	@ 0x54
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80047ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e6      	bne.n	80047aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3308      	adds	r3, #8
 80047e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f023 0301 	bic.w	r3, r3, #1
 80047f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3308      	adds	r3, #8
 80047fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e5      	bne.n	80047dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004814:	2b01      	cmp	r3, #1
 8004816:	d118      	bne.n	800484a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	60bb      	str	r3, [r7, #8]
   return(result);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f023 0310 	bic.w	r3, r3, #16
 800482c:	647b      	str	r3, [r7, #68]	@ 0x44
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6979      	ldr	r1, [r7, #20]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	613b      	str	r3, [r7, #16]
   return(result);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e6      	bne.n	8004818 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800485e:	bf00      	nop
 8004860:	3754      	adds	r7, #84	@ 0x54
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <memset>:
 800486a:	4402      	add	r2, r0
 800486c:	4603      	mov	r3, r0
 800486e:	4293      	cmp	r3, r2
 8004870:	d100      	bne.n	8004874 <memset+0xa>
 8004872:	4770      	bx	lr
 8004874:	f803 1b01 	strb.w	r1, [r3], #1
 8004878:	e7f9      	b.n	800486e <memset+0x4>
	...

0800487c <__libc_init_array>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	4d0d      	ldr	r5, [pc, #52]	@ (80048b4 <__libc_init_array+0x38>)
 8004880:	4c0d      	ldr	r4, [pc, #52]	@ (80048b8 <__libc_init_array+0x3c>)
 8004882:	1b64      	subs	r4, r4, r5
 8004884:	10a4      	asrs	r4, r4, #2
 8004886:	2600      	movs	r6, #0
 8004888:	42a6      	cmp	r6, r4
 800488a:	d109      	bne.n	80048a0 <__libc_init_array+0x24>
 800488c:	4d0b      	ldr	r5, [pc, #44]	@ (80048bc <__libc_init_array+0x40>)
 800488e:	4c0c      	ldr	r4, [pc, #48]	@ (80048c0 <__libc_init_array+0x44>)
 8004890:	f001 f84a 	bl	8005928 <_init>
 8004894:	1b64      	subs	r4, r4, r5
 8004896:	10a4      	asrs	r4, r4, #2
 8004898:	2600      	movs	r6, #0
 800489a:	42a6      	cmp	r6, r4
 800489c:	d105      	bne.n	80048aa <__libc_init_array+0x2e>
 800489e:	bd70      	pop	{r4, r5, r6, pc}
 80048a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a4:	4798      	blx	r3
 80048a6:	3601      	adds	r6, #1
 80048a8:	e7ee      	b.n	8004888 <__libc_init_array+0xc>
 80048aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ae:	4798      	blx	r3
 80048b0:	3601      	adds	r6, #1
 80048b2:	e7f2      	b.n	800489a <__libc_init_array+0x1e>
 80048b4:	08005b50 	.word	0x08005b50
 80048b8:	08005b50 	.word	0x08005b50
 80048bc:	08005b50 	.word	0x08005b50
 80048c0:	08005b54 	.word	0x08005b54
 80048c4:	00000000 	.word	0x00000000

080048c8 <sin>:
 80048c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80048ca:	ec53 2b10 	vmov	r2, r3, d0
 80048ce:	4826      	ldr	r0, [pc, #152]	@ (8004968 <sin+0xa0>)
 80048d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80048d4:	4281      	cmp	r1, r0
 80048d6:	d807      	bhi.n	80048e8 <sin+0x20>
 80048d8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004960 <sin+0x98>
 80048dc:	2000      	movs	r0, #0
 80048de:	b005      	add	sp, #20
 80048e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e4:	f000 b90c 	b.w	8004b00 <__kernel_sin>
 80048e8:	4820      	ldr	r0, [pc, #128]	@ (800496c <sin+0xa4>)
 80048ea:	4281      	cmp	r1, r0
 80048ec:	d908      	bls.n	8004900 <sin+0x38>
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	f7fb fc75 	bl	80001e0 <__aeabi_dsub>
 80048f6:	ec41 0b10 	vmov	d0, r0, r1
 80048fa:	b005      	add	sp, #20
 80048fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004900:	4668      	mov	r0, sp
 8004902:	f000 f9b9 	bl	8004c78 <__ieee754_rem_pio2>
 8004906:	f000 0003 	and.w	r0, r0, #3
 800490a:	2801      	cmp	r0, #1
 800490c:	d00c      	beq.n	8004928 <sin+0x60>
 800490e:	2802      	cmp	r0, #2
 8004910:	d011      	beq.n	8004936 <sin+0x6e>
 8004912:	b9e8      	cbnz	r0, 8004950 <sin+0x88>
 8004914:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004918:	ed9d 0b00 	vldr	d0, [sp]
 800491c:	2001      	movs	r0, #1
 800491e:	f000 f8ef 	bl	8004b00 <__kernel_sin>
 8004922:	ec51 0b10 	vmov	r0, r1, d0
 8004926:	e7e6      	b.n	80048f6 <sin+0x2e>
 8004928:	ed9d 1b02 	vldr	d1, [sp, #8]
 800492c:	ed9d 0b00 	vldr	d0, [sp]
 8004930:	f000 f81e 	bl	8004970 <__kernel_cos>
 8004934:	e7f5      	b.n	8004922 <sin+0x5a>
 8004936:	ed9d 1b02 	vldr	d1, [sp, #8]
 800493a:	ed9d 0b00 	vldr	d0, [sp]
 800493e:	2001      	movs	r0, #1
 8004940:	f000 f8de 	bl	8004b00 <__kernel_sin>
 8004944:	ec53 2b10 	vmov	r2, r3, d0
 8004948:	4610      	mov	r0, r2
 800494a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800494e:	e7d2      	b.n	80048f6 <sin+0x2e>
 8004950:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004954:	ed9d 0b00 	vldr	d0, [sp]
 8004958:	f000 f80a 	bl	8004970 <__kernel_cos>
 800495c:	e7f2      	b.n	8004944 <sin+0x7c>
 800495e:	bf00      	nop
	...
 8004968:	3fe921fb 	.word	0x3fe921fb
 800496c:	7fefffff 	.word	0x7fefffff

08004970 <__kernel_cos>:
 8004970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004974:	ec57 6b10 	vmov	r6, r7, d0
 8004978:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800497c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004980:	ed8d 1b00 	vstr	d1, [sp]
 8004984:	d206      	bcs.n	8004994 <__kernel_cos+0x24>
 8004986:	4630      	mov	r0, r6
 8004988:	4639      	mov	r1, r7
 800498a:	f7fc f87b 	bl	8000a84 <__aeabi_d2iz>
 800498e:	2800      	cmp	r0, #0
 8004990:	f000 8088 	beq.w	8004aa4 <__kernel_cos+0x134>
 8004994:	4632      	mov	r2, r6
 8004996:	463b      	mov	r3, r7
 8004998:	4630      	mov	r0, r6
 800499a:	4639      	mov	r1, r7
 800499c:	f7fb fdd8 	bl	8000550 <__aeabi_dmul>
 80049a0:	4b51      	ldr	r3, [pc, #324]	@ (8004ae8 <__kernel_cos+0x178>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	4604      	mov	r4, r0
 80049a6:	460d      	mov	r5, r1
 80049a8:	f7fb fdd2 	bl	8000550 <__aeabi_dmul>
 80049ac:	a340      	add	r3, pc, #256	@ (adr r3, 8004ab0 <__kernel_cos+0x140>)
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	4682      	mov	sl, r0
 80049b4:	468b      	mov	fp, r1
 80049b6:	4620      	mov	r0, r4
 80049b8:	4629      	mov	r1, r5
 80049ba:	f7fb fdc9 	bl	8000550 <__aeabi_dmul>
 80049be:	a33e      	add	r3, pc, #248	@ (adr r3, 8004ab8 <__kernel_cos+0x148>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f7fb fc0e 	bl	80001e4 <__adddf3>
 80049c8:	4622      	mov	r2, r4
 80049ca:	462b      	mov	r3, r5
 80049cc:	f7fb fdc0 	bl	8000550 <__aeabi_dmul>
 80049d0:	a33b      	add	r3, pc, #236	@ (adr r3, 8004ac0 <__kernel_cos+0x150>)
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f7fb fc03 	bl	80001e0 <__aeabi_dsub>
 80049da:	4622      	mov	r2, r4
 80049dc:	462b      	mov	r3, r5
 80049de:	f7fb fdb7 	bl	8000550 <__aeabi_dmul>
 80049e2:	a339      	add	r3, pc, #228	@ (adr r3, 8004ac8 <__kernel_cos+0x158>)
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f7fb fbfc 	bl	80001e4 <__adddf3>
 80049ec:	4622      	mov	r2, r4
 80049ee:	462b      	mov	r3, r5
 80049f0:	f7fb fdae 	bl	8000550 <__aeabi_dmul>
 80049f4:	a336      	add	r3, pc, #216	@ (adr r3, 8004ad0 <__kernel_cos+0x160>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	f7fb fbf1 	bl	80001e0 <__aeabi_dsub>
 80049fe:	4622      	mov	r2, r4
 8004a00:	462b      	mov	r3, r5
 8004a02:	f7fb fda5 	bl	8000550 <__aeabi_dmul>
 8004a06:	a334      	add	r3, pc, #208	@ (adr r3, 8004ad8 <__kernel_cos+0x168>)
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f7fb fbea 	bl	80001e4 <__adddf3>
 8004a10:	4622      	mov	r2, r4
 8004a12:	462b      	mov	r3, r5
 8004a14:	f7fb fd9c 	bl	8000550 <__aeabi_dmul>
 8004a18:	4622      	mov	r2, r4
 8004a1a:	462b      	mov	r3, r5
 8004a1c:	f7fb fd98 	bl	8000550 <__aeabi_dmul>
 8004a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a24:	4604      	mov	r4, r0
 8004a26:	460d      	mov	r5, r1
 8004a28:	4630      	mov	r0, r6
 8004a2a:	4639      	mov	r1, r7
 8004a2c:	f7fb fd90 	bl	8000550 <__aeabi_dmul>
 8004a30:	460b      	mov	r3, r1
 8004a32:	4602      	mov	r2, r0
 8004a34:	4629      	mov	r1, r5
 8004a36:	4620      	mov	r0, r4
 8004a38:	f7fb fbd2 	bl	80001e0 <__aeabi_dsub>
 8004a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004aec <__kernel_cos+0x17c>)
 8004a3e:	4598      	cmp	r8, r3
 8004a40:	4606      	mov	r6, r0
 8004a42:	460f      	mov	r7, r1
 8004a44:	d810      	bhi.n	8004a68 <__kernel_cos+0xf8>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4650      	mov	r0, sl
 8004a4c:	4659      	mov	r1, fp
 8004a4e:	f7fb fbc7 	bl	80001e0 <__aeabi_dsub>
 8004a52:	460b      	mov	r3, r1
 8004a54:	4926      	ldr	r1, [pc, #152]	@ (8004af0 <__kernel_cos+0x180>)
 8004a56:	4602      	mov	r2, r0
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f7fb fbc1 	bl	80001e0 <__aeabi_dsub>
 8004a5e:	ec41 0b10 	vmov	d0, r0, r1
 8004a62:	b003      	add	sp, #12
 8004a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a68:	4b22      	ldr	r3, [pc, #136]	@ (8004af4 <__kernel_cos+0x184>)
 8004a6a:	4921      	ldr	r1, [pc, #132]	@ (8004af0 <__kernel_cos+0x180>)
 8004a6c:	4598      	cmp	r8, r3
 8004a6e:	bf8c      	ite	hi
 8004a70:	4d21      	ldrhi	r5, [pc, #132]	@ (8004af8 <__kernel_cos+0x188>)
 8004a72:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8004a76:	2400      	movs	r4, #0
 8004a78:	4622      	mov	r2, r4
 8004a7a:	462b      	mov	r3, r5
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	f7fb fbaf 	bl	80001e0 <__aeabi_dsub>
 8004a82:	4622      	mov	r2, r4
 8004a84:	4680      	mov	r8, r0
 8004a86:	4689      	mov	r9, r1
 8004a88:	462b      	mov	r3, r5
 8004a8a:	4650      	mov	r0, sl
 8004a8c:	4659      	mov	r1, fp
 8004a8e:	f7fb fba7 	bl	80001e0 <__aeabi_dsub>
 8004a92:	4632      	mov	r2, r6
 8004a94:	463b      	mov	r3, r7
 8004a96:	f7fb fba3 	bl	80001e0 <__aeabi_dsub>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	e7da      	b.n	8004a5a <__kernel_cos+0xea>
 8004aa4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004ae0 <__kernel_cos+0x170>
 8004aa8:	e7db      	b.n	8004a62 <__kernel_cos+0xf2>
 8004aaa:	bf00      	nop
 8004aac:	f3af 8000 	nop.w
 8004ab0:	be8838d4 	.word	0xbe8838d4
 8004ab4:	bda8fae9 	.word	0xbda8fae9
 8004ab8:	bdb4b1c4 	.word	0xbdb4b1c4
 8004abc:	3e21ee9e 	.word	0x3e21ee9e
 8004ac0:	809c52ad 	.word	0x809c52ad
 8004ac4:	3e927e4f 	.word	0x3e927e4f
 8004ac8:	19cb1590 	.word	0x19cb1590
 8004acc:	3efa01a0 	.word	0x3efa01a0
 8004ad0:	16c15177 	.word	0x16c15177
 8004ad4:	3f56c16c 	.word	0x3f56c16c
 8004ad8:	5555554c 	.word	0x5555554c
 8004adc:	3fa55555 	.word	0x3fa55555
 8004ae0:	00000000 	.word	0x00000000
 8004ae4:	3ff00000 	.word	0x3ff00000
 8004ae8:	3fe00000 	.word	0x3fe00000
 8004aec:	3fd33332 	.word	0x3fd33332
 8004af0:	3ff00000 	.word	0x3ff00000
 8004af4:	3fe90000 	.word	0x3fe90000
 8004af8:	3fd20000 	.word	0x3fd20000
 8004afc:	00000000 	.word	0x00000000

08004b00 <__kernel_sin>:
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	ec55 4b10 	vmov	r4, r5, d0
 8004b08:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004b0c:	b085      	sub	sp, #20
 8004b0e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004b12:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004b16:	4680      	mov	r8, r0
 8004b18:	d205      	bcs.n	8004b26 <__kernel_sin+0x26>
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	f7fb ffb1 	bl	8000a84 <__aeabi_d2iz>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d052      	beq.n	8004bcc <__kernel_sin+0xcc>
 8004b26:	4622      	mov	r2, r4
 8004b28:	462b      	mov	r3, r5
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	f7fb fd0f 	bl	8000550 <__aeabi_dmul>
 8004b32:	4682      	mov	sl, r0
 8004b34:	468b      	mov	fp, r1
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	f7fb fd07 	bl	8000550 <__aeabi_dmul>
 8004b42:	a342      	add	r3, pc, #264	@ (adr r3, 8004c4c <__kernel_sin+0x14c>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	e9cd 0100 	strd	r0, r1, [sp]
 8004b4c:	4650      	mov	r0, sl
 8004b4e:	4659      	mov	r1, fp
 8004b50:	f7fb fcfe 	bl	8000550 <__aeabi_dmul>
 8004b54:	a33f      	add	r3, pc, #252	@ (adr r3, 8004c54 <__kernel_sin+0x154>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f7fb fb41 	bl	80001e0 <__aeabi_dsub>
 8004b5e:	4652      	mov	r2, sl
 8004b60:	465b      	mov	r3, fp
 8004b62:	f7fb fcf5 	bl	8000550 <__aeabi_dmul>
 8004b66:	a33d      	add	r3, pc, #244	@ (adr r3, 8004c5c <__kernel_sin+0x15c>)
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f7fb fb3a 	bl	80001e4 <__adddf3>
 8004b70:	4652      	mov	r2, sl
 8004b72:	465b      	mov	r3, fp
 8004b74:	f7fb fcec 	bl	8000550 <__aeabi_dmul>
 8004b78:	a33a      	add	r3, pc, #232	@ (adr r3, 8004c64 <__kernel_sin+0x164>)
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	f7fb fb2f 	bl	80001e0 <__aeabi_dsub>
 8004b82:	4652      	mov	r2, sl
 8004b84:	465b      	mov	r3, fp
 8004b86:	f7fb fce3 	bl	8000550 <__aeabi_dmul>
 8004b8a:	a338      	add	r3, pc, #224	@ (adr r3, 8004c6c <__kernel_sin+0x16c>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f7fb fb28 	bl	80001e4 <__adddf3>
 8004b94:	4606      	mov	r6, r0
 8004b96:	460f      	mov	r7, r1
 8004b98:	f1b8 0f00 	cmp.w	r8, #0
 8004b9c:	d11b      	bne.n	8004bd6 <__kernel_sin+0xd6>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4650      	mov	r0, sl
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	f7fb fcd3 	bl	8000550 <__aeabi_dmul>
 8004baa:	a325      	add	r3, pc, #148	@ (adr r3, 8004c40 <__kernel_sin+0x140>)
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f7fb fb16 	bl	80001e0 <__aeabi_dsub>
 8004bb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bb8:	f7fb fcca 	bl	8000550 <__aeabi_dmul>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	f7fb fb0e 	bl	80001e4 <__adddf3>
 8004bc8:	4604      	mov	r4, r0
 8004bca:	460d      	mov	r5, r1
 8004bcc:	ec45 4b10 	vmov	d0, r4, r5
 8004bd0:	b005      	add	sp, #20
 8004bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bda:	4b1b      	ldr	r3, [pc, #108]	@ (8004c48 <__kernel_sin+0x148>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f7fb fcb7 	bl	8000550 <__aeabi_dmul>
 8004be2:	4632      	mov	r2, r6
 8004be4:	4680      	mov	r8, r0
 8004be6:	4689      	mov	r9, r1
 8004be8:	463b      	mov	r3, r7
 8004bea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bee:	f7fb fcaf 	bl	8000550 <__aeabi_dmul>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	f7fb faf1 	bl	80001e0 <__aeabi_dsub>
 8004bfe:	4652      	mov	r2, sl
 8004c00:	465b      	mov	r3, fp
 8004c02:	f7fb fca5 	bl	8000550 <__aeabi_dmul>
 8004c06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c0a:	f7fb fae9 	bl	80001e0 <__aeabi_dsub>
 8004c0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8004c40 <__kernel_sin+0x140>)
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	4606      	mov	r6, r0
 8004c16:	460f      	mov	r7, r1
 8004c18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c1c:	f7fb fc98 	bl	8000550 <__aeabi_dmul>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4630      	mov	r0, r6
 8004c26:	4639      	mov	r1, r7
 8004c28:	f7fb fadc 	bl	80001e4 <__adddf3>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4620      	mov	r0, r4
 8004c32:	4629      	mov	r1, r5
 8004c34:	f7fb fad4 	bl	80001e0 <__aeabi_dsub>
 8004c38:	e7c6      	b.n	8004bc8 <__kernel_sin+0xc8>
 8004c3a:	bf00      	nop
 8004c3c:	f3af 8000 	nop.w
 8004c40:	55555549 	.word	0x55555549
 8004c44:	3fc55555 	.word	0x3fc55555
 8004c48:	3fe00000 	.word	0x3fe00000
 8004c4c:	5acfd57c 	.word	0x5acfd57c
 8004c50:	3de5d93a 	.word	0x3de5d93a
 8004c54:	8a2b9ceb 	.word	0x8a2b9ceb
 8004c58:	3e5ae5e6 	.word	0x3e5ae5e6
 8004c5c:	57b1fe7d 	.word	0x57b1fe7d
 8004c60:	3ec71de3 	.word	0x3ec71de3
 8004c64:	19c161d5 	.word	0x19c161d5
 8004c68:	3f2a01a0 	.word	0x3f2a01a0
 8004c6c:	1110f8a6 	.word	0x1110f8a6
 8004c70:	3f811111 	.word	0x3f811111
 8004c74:	00000000 	.word	0x00000000

08004c78 <__ieee754_rem_pio2>:
 8004c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	ec57 6b10 	vmov	r6, r7, d0
 8004c80:	4bc5      	ldr	r3, [pc, #788]	@ (8004f98 <__ieee754_rem_pio2+0x320>)
 8004c82:	b08d      	sub	sp, #52	@ 0x34
 8004c84:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004c88:	4598      	cmp	r8, r3
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	9704      	str	r7, [sp, #16]
 8004c8e:	d807      	bhi.n	8004ca0 <__ieee754_rem_pio2+0x28>
 8004c90:	2200      	movs	r2, #0
 8004c92:	2300      	movs	r3, #0
 8004c94:	ed80 0b00 	vstr	d0, [r0]
 8004c98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004c9c:	2500      	movs	r5, #0
 8004c9e:	e028      	b.n	8004cf2 <__ieee754_rem_pio2+0x7a>
 8004ca0:	4bbe      	ldr	r3, [pc, #760]	@ (8004f9c <__ieee754_rem_pio2+0x324>)
 8004ca2:	4598      	cmp	r8, r3
 8004ca4:	d878      	bhi.n	8004d98 <__ieee754_rem_pio2+0x120>
 8004ca6:	9b04      	ldr	r3, [sp, #16]
 8004ca8:	4dbd      	ldr	r5, [pc, #756]	@ (8004fa0 <__ieee754_rem_pio2+0x328>)
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	4630      	mov	r0, r6
 8004cae:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004f60 <__ieee754_rem_pio2+0x2e8>)
 8004cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb4:	4639      	mov	r1, r7
 8004cb6:	dd38      	ble.n	8004d2a <__ieee754_rem_pio2+0xb2>
 8004cb8:	f7fb fa92 	bl	80001e0 <__aeabi_dsub>
 8004cbc:	45a8      	cmp	r8, r5
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	460f      	mov	r7, r1
 8004cc2:	d01a      	beq.n	8004cfa <__ieee754_rem_pio2+0x82>
 8004cc4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004f68 <__ieee754_rem_pio2+0x2f0>)
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	f7fb fa89 	bl	80001e0 <__aeabi_dsub>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4680      	mov	r8, r0
 8004cd4:	4689      	mov	r9, r1
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	4639      	mov	r1, r7
 8004cda:	f7fb fa81 	bl	80001e0 <__aeabi_dsub>
 8004cde:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004f68 <__ieee754_rem_pio2+0x2f0>)
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f7fb fa7c 	bl	80001e0 <__aeabi_dsub>
 8004ce8:	e9c4 8900 	strd	r8, r9, [r4]
 8004cec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004cf0:	2501      	movs	r5, #1
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	b00d      	add	sp, #52	@ 0x34
 8004cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfa:	a39d      	add	r3, pc, #628	@ (adr r3, 8004f70 <__ieee754_rem_pio2+0x2f8>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f7fb fa6e 	bl	80001e0 <__aeabi_dsub>
 8004d04:	a39c      	add	r3, pc, #624	@ (adr r3, 8004f78 <__ieee754_rem_pio2+0x300>)
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	460f      	mov	r7, r1
 8004d0e:	f7fb fa67 	bl	80001e0 <__aeabi_dsub>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4680      	mov	r8, r0
 8004d18:	4689      	mov	r9, r1
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	4639      	mov	r1, r7
 8004d1e:	f7fb fa5f 	bl	80001e0 <__aeabi_dsub>
 8004d22:	a395      	add	r3, pc, #596	@ (adr r3, 8004f78 <__ieee754_rem_pio2+0x300>)
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	e7dc      	b.n	8004ce4 <__ieee754_rem_pio2+0x6c>
 8004d2a:	f7fb fa5b 	bl	80001e4 <__adddf3>
 8004d2e:	45a8      	cmp	r8, r5
 8004d30:	4606      	mov	r6, r0
 8004d32:	460f      	mov	r7, r1
 8004d34:	d018      	beq.n	8004d68 <__ieee754_rem_pio2+0xf0>
 8004d36:	a38c      	add	r3, pc, #560	@ (adr r3, 8004f68 <__ieee754_rem_pio2+0x2f0>)
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	f7fb fa52 	bl	80001e4 <__adddf3>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4680      	mov	r8, r0
 8004d46:	4689      	mov	r9, r1
 8004d48:	4630      	mov	r0, r6
 8004d4a:	4639      	mov	r1, r7
 8004d4c:	f7fb fa48 	bl	80001e0 <__aeabi_dsub>
 8004d50:	a385      	add	r3, pc, #532	@ (adr r3, 8004f68 <__ieee754_rem_pio2+0x2f0>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f7fb fa45 	bl	80001e4 <__adddf3>
 8004d5a:	f04f 35ff 	mov.w	r5, #4294967295
 8004d5e:	e9c4 8900 	strd	r8, r9, [r4]
 8004d62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d66:	e7c4      	b.n	8004cf2 <__ieee754_rem_pio2+0x7a>
 8004d68:	a381      	add	r3, pc, #516	@ (adr r3, 8004f70 <__ieee754_rem_pio2+0x2f8>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f7fb fa39 	bl	80001e4 <__adddf3>
 8004d72:	a381      	add	r3, pc, #516	@ (adr r3, 8004f78 <__ieee754_rem_pio2+0x300>)
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	4606      	mov	r6, r0
 8004d7a:	460f      	mov	r7, r1
 8004d7c:	f7fb fa32 	bl	80001e4 <__adddf3>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4680      	mov	r8, r0
 8004d86:	4689      	mov	r9, r1
 8004d88:	4630      	mov	r0, r6
 8004d8a:	4639      	mov	r1, r7
 8004d8c:	f7fb fa28 	bl	80001e0 <__aeabi_dsub>
 8004d90:	a379      	add	r3, pc, #484	@ (adr r3, 8004f78 <__ieee754_rem_pio2+0x300>)
 8004d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d96:	e7de      	b.n	8004d56 <__ieee754_rem_pio2+0xde>
 8004d98:	4b82      	ldr	r3, [pc, #520]	@ (8004fa4 <__ieee754_rem_pio2+0x32c>)
 8004d9a:	4598      	cmp	r8, r3
 8004d9c:	f200 80d1 	bhi.w	8004f42 <__ieee754_rem_pio2+0x2ca>
 8004da0:	f000 f966 	bl	8005070 <fabs>
 8004da4:	ec57 6b10 	vmov	r6, r7, d0
 8004da8:	a375      	add	r3, pc, #468	@ (adr r3, 8004f80 <__ieee754_rem_pio2+0x308>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	4630      	mov	r0, r6
 8004db0:	4639      	mov	r1, r7
 8004db2:	f7fb fbcd 	bl	8000550 <__aeabi_dmul>
 8004db6:	4b7c      	ldr	r3, [pc, #496]	@ (8004fa8 <__ieee754_rem_pio2+0x330>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	f7fb fa13 	bl	80001e4 <__adddf3>
 8004dbe:	f7fb fe61 	bl	8000a84 <__aeabi_d2iz>
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	f7fb fb5a 	bl	800047c <__aeabi_i2d>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004dd0:	a363      	add	r3, pc, #396	@ (adr r3, 8004f60 <__ieee754_rem_pio2+0x2e8>)
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	f7fb fbbb 	bl	8000550 <__aeabi_dmul>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4630      	mov	r0, r6
 8004de0:	4639      	mov	r1, r7
 8004de2:	f7fb f9fd 	bl	80001e0 <__aeabi_dsub>
 8004de6:	a360      	add	r3, pc, #384	@ (adr r3, 8004f68 <__ieee754_rem_pio2+0x2f0>)
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	4682      	mov	sl, r0
 8004dee:	468b      	mov	fp, r1
 8004df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004df4:	f7fb fbac 	bl	8000550 <__aeabi_dmul>
 8004df8:	2d1f      	cmp	r5, #31
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	460f      	mov	r7, r1
 8004dfe:	dc0c      	bgt.n	8004e1a <__ieee754_rem_pio2+0x1a2>
 8004e00:	4b6a      	ldr	r3, [pc, #424]	@ (8004fac <__ieee754_rem_pio2+0x334>)
 8004e02:	1e6a      	subs	r2, r5, #1
 8004e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e08:	4543      	cmp	r3, r8
 8004e0a:	d006      	beq.n	8004e1a <__ieee754_rem_pio2+0x1a2>
 8004e0c:	4632      	mov	r2, r6
 8004e0e:	463b      	mov	r3, r7
 8004e10:	4650      	mov	r0, sl
 8004e12:	4659      	mov	r1, fp
 8004e14:	f7fb f9e4 	bl	80001e0 <__aeabi_dsub>
 8004e18:	e00e      	b.n	8004e38 <__ieee754_rem_pio2+0x1c0>
 8004e1a:	463b      	mov	r3, r7
 8004e1c:	4632      	mov	r2, r6
 8004e1e:	4650      	mov	r0, sl
 8004e20:	4659      	mov	r1, fp
 8004e22:	f7fb f9dd 	bl	80001e0 <__aeabi_dsub>
 8004e26:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e2a:	9305      	str	r3, [sp, #20]
 8004e2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e30:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	dc02      	bgt.n	8004e3e <__ieee754_rem_pio2+0x1c6>
 8004e38:	e9c4 0100 	strd	r0, r1, [r4]
 8004e3c:	e039      	b.n	8004eb2 <__ieee754_rem_pio2+0x23a>
 8004e3e:	a34c      	add	r3, pc, #304	@ (adr r3, 8004f70 <__ieee754_rem_pio2+0x2f8>)
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e48:	f7fb fb82 	bl	8000550 <__aeabi_dmul>
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	460f      	mov	r7, r1
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4650      	mov	r0, sl
 8004e56:	4659      	mov	r1, fp
 8004e58:	f7fb f9c2 	bl	80001e0 <__aeabi_dsub>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4680      	mov	r8, r0
 8004e62:	4689      	mov	r9, r1
 8004e64:	4650      	mov	r0, sl
 8004e66:	4659      	mov	r1, fp
 8004e68:	f7fb f9ba 	bl	80001e0 <__aeabi_dsub>
 8004e6c:	4632      	mov	r2, r6
 8004e6e:	463b      	mov	r3, r7
 8004e70:	f7fb f9b6 	bl	80001e0 <__aeabi_dsub>
 8004e74:	a340      	add	r3, pc, #256	@ (adr r3, 8004f78 <__ieee754_rem_pio2+0x300>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	460f      	mov	r7, r1
 8004e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e82:	f7fb fb65 	bl	8000550 <__aeabi_dmul>
 8004e86:	4632      	mov	r2, r6
 8004e88:	463b      	mov	r3, r7
 8004e8a:	f7fb f9a9 	bl	80001e0 <__aeabi_dsub>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4606      	mov	r6, r0
 8004e94:	460f      	mov	r7, r1
 8004e96:	4640      	mov	r0, r8
 8004e98:	4649      	mov	r1, r9
 8004e9a:	f7fb f9a1 	bl	80001e0 <__aeabi_dsub>
 8004e9e:	9a05      	ldr	r2, [sp, #20]
 8004ea0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b31      	cmp	r3, #49	@ 0x31
 8004ea8:	dc20      	bgt.n	8004eec <__ieee754_rem_pio2+0x274>
 8004eaa:	e9c4 0100 	strd	r0, r1, [r4]
 8004eae:	46c2      	mov	sl, r8
 8004eb0:	46cb      	mov	fp, r9
 8004eb2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004eb6:	4650      	mov	r0, sl
 8004eb8:	4642      	mov	r2, r8
 8004eba:	464b      	mov	r3, r9
 8004ebc:	4659      	mov	r1, fp
 8004ebe:	f7fb f98f 	bl	80001e0 <__aeabi_dsub>
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	f7fb f98b 	bl	80001e0 <__aeabi_dsub>
 8004eca:	9b04      	ldr	r3, [sp, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ed2:	f6bf af0e 	bge.w	8004cf2 <__ieee754_rem_pio2+0x7a>
 8004ed6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004eda:	6063      	str	r3, [r4, #4]
 8004edc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ee0:	f8c4 8000 	str.w	r8, [r4]
 8004ee4:	60a0      	str	r0, [r4, #8]
 8004ee6:	60e3      	str	r3, [r4, #12]
 8004ee8:	426d      	negs	r5, r5
 8004eea:	e702      	b.n	8004cf2 <__ieee754_rem_pio2+0x7a>
 8004eec:	a326      	add	r3, pc, #152	@ (adr r3, 8004f88 <__ieee754_rem_pio2+0x310>)
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef6:	f7fb fb2b 	bl	8000550 <__aeabi_dmul>
 8004efa:	4606      	mov	r6, r0
 8004efc:	460f      	mov	r7, r1
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4640      	mov	r0, r8
 8004f04:	4649      	mov	r1, r9
 8004f06:	f7fb f96b 	bl	80001e0 <__aeabi_dsub>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4682      	mov	sl, r0
 8004f10:	468b      	mov	fp, r1
 8004f12:	4640      	mov	r0, r8
 8004f14:	4649      	mov	r1, r9
 8004f16:	f7fb f963 	bl	80001e0 <__aeabi_dsub>
 8004f1a:	4632      	mov	r2, r6
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	f7fb f95f 	bl	80001e0 <__aeabi_dsub>
 8004f22:	a31b      	add	r3, pc, #108	@ (adr r3, 8004f90 <__ieee754_rem_pio2+0x318>)
 8004f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f28:	4606      	mov	r6, r0
 8004f2a:	460f      	mov	r7, r1
 8004f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f30:	f7fb fb0e 	bl	8000550 <__aeabi_dmul>
 8004f34:	4632      	mov	r2, r6
 8004f36:	463b      	mov	r3, r7
 8004f38:	f7fb f952 	bl	80001e0 <__aeabi_dsub>
 8004f3c:	4606      	mov	r6, r0
 8004f3e:	460f      	mov	r7, r1
 8004f40:	e764      	b.n	8004e0c <__ieee754_rem_pio2+0x194>
 8004f42:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb0 <__ieee754_rem_pio2+0x338>)
 8004f44:	4598      	cmp	r8, r3
 8004f46:	d935      	bls.n	8004fb4 <__ieee754_rem_pio2+0x33c>
 8004f48:	4632      	mov	r2, r6
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	4639      	mov	r1, r7
 8004f50:	f7fb f946 	bl	80001e0 <__aeabi_dsub>
 8004f54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f58:	e9c4 0100 	strd	r0, r1, [r4]
 8004f5c:	e69e      	b.n	8004c9c <__ieee754_rem_pio2+0x24>
 8004f5e:	bf00      	nop
 8004f60:	54400000 	.word	0x54400000
 8004f64:	3ff921fb 	.word	0x3ff921fb
 8004f68:	1a626331 	.word	0x1a626331
 8004f6c:	3dd0b461 	.word	0x3dd0b461
 8004f70:	1a600000 	.word	0x1a600000
 8004f74:	3dd0b461 	.word	0x3dd0b461
 8004f78:	2e037073 	.word	0x2e037073
 8004f7c:	3ba3198a 	.word	0x3ba3198a
 8004f80:	6dc9c883 	.word	0x6dc9c883
 8004f84:	3fe45f30 	.word	0x3fe45f30
 8004f88:	2e000000 	.word	0x2e000000
 8004f8c:	3ba3198a 	.word	0x3ba3198a
 8004f90:	252049c1 	.word	0x252049c1
 8004f94:	397b839a 	.word	0x397b839a
 8004f98:	3fe921fb 	.word	0x3fe921fb
 8004f9c:	4002d97b 	.word	0x4002d97b
 8004fa0:	3ff921fb 	.word	0x3ff921fb
 8004fa4:	413921fb 	.word	0x413921fb
 8004fa8:	3fe00000 	.word	0x3fe00000
 8004fac:	08005978 	.word	0x08005978
 8004fb0:	7fefffff 	.word	0x7fefffff
 8004fb4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004fb8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004fbc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	460f      	mov	r7, r1
 8004fc4:	f7fb fd5e 	bl	8000a84 <__aeabi_d2iz>
 8004fc8:	f7fb fa58 	bl	800047c <__aeabi_i2d>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004fd8:	f7fb f902 	bl	80001e0 <__aeabi_dsub>
 8004fdc:	4b22      	ldr	r3, [pc, #136]	@ (8005068 <__ieee754_rem_pio2+0x3f0>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f7fb fab6 	bl	8000550 <__aeabi_dmul>
 8004fe4:	460f      	mov	r7, r1
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	f7fb fd4c 	bl	8000a84 <__aeabi_d2iz>
 8004fec:	f7fb fa46 	bl	800047c <__aeabi_i2d>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ffc:	f7fb f8f0 	bl	80001e0 <__aeabi_dsub>
 8005000:	4b19      	ldr	r3, [pc, #100]	@ (8005068 <__ieee754_rem_pio2+0x3f0>)
 8005002:	2200      	movs	r2, #0
 8005004:	f7fb faa4 	bl	8000550 <__aeabi_dmul>
 8005008:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800500c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005010:	f04f 0803 	mov.w	r8, #3
 8005014:	2600      	movs	r6, #0
 8005016:	2700      	movs	r7, #0
 8005018:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800501c:	4632      	mov	r2, r6
 800501e:	463b      	mov	r3, r7
 8005020:	46c2      	mov	sl, r8
 8005022:	f108 38ff 	add.w	r8, r8, #4294967295
 8005026:	f7fb fcfb 	bl	8000a20 <__aeabi_dcmpeq>
 800502a:	2800      	cmp	r0, #0
 800502c:	d1f4      	bne.n	8005018 <__ieee754_rem_pio2+0x3a0>
 800502e:	4b0f      	ldr	r3, [pc, #60]	@ (800506c <__ieee754_rem_pio2+0x3f4>)
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	2302      	movs	r3, #2
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	462a      	mov	r2, r5
 8005038:	4653      	mov	r3, sl
 800503a:	4621      	mov	r1, r4
 800503c:	a806      	add	r0, sp, #24
 800503e:	f000 f81f 	bl	8005080 <__kernel_rem_pio2>
 8005042:	9b04      	ldr	r3, [sp, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	4605      	mov	r5, r0
 8005048:	f6bf ae53 	bge.w	8004cf2 <__ieee754_rem_pio2+0x7a>
 800504c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005050:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005054:	e9c4 2300 	strd	r2, r3, [r4]
 8005058:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800505c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005060:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005064:	e740      	b.n	8004ee8 <__ieee754_rem_pio2+0x270>
 8005066:	bf00      	nop
 8005068:	41700000 	.word	0x41700000
 800506c:	080059f8 	.word	0x080059f8

08005070 <fabs>:
 8005070:	ec51 0b10 	vmov	r0, r1, d0
 8005074:	4602      	mov	r2, r0
 8005076:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800507a:	ec43 2b10 	vmov	d0, r2, r3
 800507e:	4770      	bx	lr

08005080 <__kernel_rem_pio2>:
 8005080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005084:	ed2d 8b02 	vpush	{d8}
 8005088:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800508c:	f112 0f14 	cmn.w	r2, #20
 8005090:	9306      	str	r3, [sp, #24]
 8005092:	9104      	str	r1, [sp, #16]
 8005094:	4bbe      	ldr	r3, [pc, #760]	@ (8005390 <__kernel_rem_pio2+0x310>)
 8005096:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005098:	9008      	str	r0, [sp, #32]
 800509a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	9b06      	ldr	r3, [sp, #24]
 80050a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80050a6:	bfa8      	it	ge
 80050a8:	1ed4      	subge	r4, r2, #3
 80050aa:	9305      	str	r3, [sp, #20]
 80050ac:	bfb2      	itee	lt
 80050ae:	2400      	movlt	r4, #0
 80050b0:	2318      	movge	r3, #24
 80050b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80050b6:	f06f 0317 	mvn.w	r3, #23
 80050ba:	fb04 3303 	mla	r3, r4, r3, r3
 80050be:	eb03 0b02 	add.w	fp, r3, r2
 80050c2:	9b00      	ldr	r3, [sp, #0]
 80050c4:	9a05      	ldr	r2, [sp, #20]
 80050c6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005380 <__kernel_rem_pio2+0x300>
 80050ca:	eb03 0802 	add.w	r8, r3, r2
 80050ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80050d0:	1aa7      	subs	r7, r4, r2
 80050d2:	ae20      	add	r6, sp, #128	@ 0x80
 80050d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80050d8:	2500      	movs	r5, #0
 80050da:	4545      	cmp	r5, r8
 80050dc:	dd13      	ble.n	8005106 <__kernel_rem_pio2+0x86>
 80050de:	9b06      	ldr	r3, [sp, #24]
 80050e0:	aa20      	add	r2, sp, #128	@ 0x80
 80050e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80050e6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80050ea:	f04f 0800 	mov.w	r8, #0
 80050ee:	9b00      	ldr	r3, [sp, #0]
 80050f0:	4598      	cmp	r8, r3
 80050f2:	dc31      	bgt.n	8005158 <__kernel_rem_pio2+0xd8>
 80050f4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005380 <__kernel_rem_pio2+0x300>
 80050f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005100:	462f      	mov	r7, r5
 8005102:	2600      	movs	r6, #0
 8005104:	e01b      	b.n	800513e <__kernel_rem_pio2+0xbe>
 8005106:	42ef      	cmn	r7, r5
 8005108:	d407      	bmi.n	800511a <__kernel_rem_pio2+0x9a>
 800510a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800510e:	f7fb f9b5 	bl	800047c <__aeabi_i2d>
 8005112:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005116:	3501      	adds	r5, #1
 8005118:	e7df      	b.n	80050da <__kernel_rem_pio2+0x5a>
 800511a:	ec51 0b18 	vmov	r0, r1, d8
 800511e:	e7f8      	b.n	8005112 <__kernel_rem_pio2+0x92>
 8005120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005124:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005128:	f7fb fa12 	bl	8000550 <__aeabi_dmul>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005134:	f7fb f856 	bl	80001e4 <__adddf3>
 8005138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800513c:	3601      	adds	r6, #1
 800513e:	9b05      	ldr	r3, [sp, #20]
 8005140:	429e      	cmp	r6, r3
 8005142:	f1a7 0708 	sub.w	r7, r7, #8
 8005146:	ddeb      	ble.n	8005120 <__kernel_rem_pio2+0xa0>
 8005148:	ed9d 7b02 	vldr	d7, [sp, #8]
 800514c:	f108 0801 	add.w	r8, r8, #1
 8005150:	ecaa 7b02 	vstmia	sl!, {d7}
 8005154:	3508      	adds	r5, #8
 8005156:	e7ca      	b.n	80050ee <__kernel_rem_pio2+0x6e>
 8005158:	9b00      	ldr	r3, [sp, #0]
 800515a:	f8dd 8000 	ldr.w	r8, [sp]
 800515e:	aa0c      	add	r2, sp, #48	@ 0x30
 8005160:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005164:	930a      	str	r3, [sp, #40]	@ 0x28
 8005166:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005168:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800516c:	9309      	str	r3, [sp, #36]	@ 0x24
 800516e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005172:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005174:	ab98      	add	r3, sp, #608	@ 0x260
 8005176:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800517a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800517e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005182:	ac0c      	add	r4, sp, #48	@ 0x30
 8005184:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005186:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800518a:	46a1      	mov	r9, r4
 800518c:	46c2      	mov	sl, r8
 800518e:	f1ba 0f00 	cmp.w	sl, #0
 8005192:	f1a5 0508 	sub.w	r5, r5, #8
 8005196:	dc77      	bgt.n	8005288 <__kernel_rem_pio2+0x208>
 8005198:	4658      	mov	r0, fp
 800519a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800519e:	f000 fac7 	bl	8005730 <scalbn>
 80051a2:	ec57 6b10 	vmov	r6, r7, d0
 80051a6:	2200      	movs	r2, #0
 80051a8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80051ac:	4630      	mov	r0, r6
 80051ae:	4639      	mov	r1, r7
 80051b0:	f7fb f9ce 	bl	8000550 <__aeabi_dmul>
 80051b4:	ec41 0b10 	vmov	d0, r0, r1
 80051b8:	f000 fb3a 	bl	8005830 <floor>
 80051bc:	4b75      	ldr	r3, [pc, #468]	@ (8005394 <__kernel_rem_pio2+0x314>)
 80051be:	ec51 0b10 	vmov	r0, r1, d0
 80051c2:	2200      	movs	r2, #0
 80051c4:	f7fb f9c4 	bl	8000550 <__aeabi_dmul>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4630      	mov	r0, r6
 80051ce:	4639      	mov	r1, r7
 80051d0:	f7fb f806 	bl	80001e0 <__aeabi_dsub>
 80051d4:	460f      	mov	r7, r1
 80051d6:	4606      	mov	r6, r0
 80051d8:	f7fb fc54 	bl	8000a84 <__aeabi_d2iz>
 80051dc:	9002      	str	r0, [sp, #8]
 80051de:	f7fb f94d 	bl	800047c <__aeabi_i2d>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4630      	mov	r0, r6
 80051e8:	4639      	mov	r1, r7
 80051ea:	f7fa fff9 	bl	80001e0 <__aeabi_dsub>
 80051ee:	f1bb 0f00 	cmp.w	fp, #0
 80051f2:	4606      	mov	r6, r0
 80051f4:	460f      	mov	r7, r1
 80051f6:	dd6c      	ble.n	80052d2 <__kernel_rem_pio2+0x252>
 80051f8:	f108 31ff 	add.w	r1, r8, #4294967295
 80051fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80051fe:	9d02      	ldr	r5, [sp, #8]
 8005200:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005204:	f1cb 0018 	rsb	r0, fp, #24
 8005208:	fa43 f200 	asr.w	r2, r3, r0
 800520c:	4415      	add	r5, r2
 800520e:	4082      	lsls	r2, r0
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	aa0c      	add	r2, sp, #48	@ 0x30
 8005214:	9502      	str	r5, [sp, #8]
 8005216:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800521a:	f1cb 0217 	rsb	r2, fp, #23
 800521e:	fa43 f902 	asr.w	r9, r3, r2
 8005222:	f1b9 0f00 	cmp.w	r9, #0
 8005226:	dd64      	ble.n	80052f2 <__kernel_rem_pio2+0x272>
 8005228:	9b02      	ldr	r3, [sp, #8]
 800522a:	2200      	movs	r2, #0
 800522c:	3301      	adds	r3, #1
 800522e:	9302      	str	r3, [sp, #8]
 8005230:	4615      	mov	r5, r2
 8005232:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005236:	4590      	cmp	r8, r2
 8005238:	f300 80b8 	bgt.w	80053ac <__kernel_rem_pio2+0x32c>
 800523c:	f1bb 0f00 	cmp.w	fp, #0
 8005240:	dd07      	ble.n	8005252 <__kernel_rem_pio2+0x1d2>
 8005242:	f1bb 0f01 	cmp.w	fp, #1
 8005246:	f000 80bf 	beq.w	80053c8 <__kernel_rem_pio2+0x348>
 800524a:	f1bb 0f02 	cmp.w	fp, #2
 800524e:	f000 80c6 	beq.w	80053de <__kernel_rem_pio2+0x35e>
 8005252:	f1b9 0f02 	cmp.w	r9, #2
 8005256:	d14c      	bne.n	80052f2 <__kernel_rem_pio2+0x272>
 8005258:	4632      	mov	r2, r6
 800525a:	463b      	mov	r3, r7
 800525c:	494e      	ldr	r1, [pc, #312]	@ (8005398 <__kernel_rem_pio2+0x318>)
 800525e:	2000      	movs	r0, #0
 8005260:	f7fa ffbe 	bl	80001e0 <__aeabi_dsub>
 8005264:	4606      	mov	r6, r0
 8005266:	460f      	mov	r7, r1
 8005268:	2d00      	cmp	r5, #0
 800526a:	d042      	beq.n	80052f2 <__kernel_rem_pio2+0x272>
 800526c:	4658      	mov	r0, fp
 800526e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005388 <__kernel_rem_pio2+0x308>
 8005272:	f000 fa5d 	bl	8005730 <scalbn>
 8005276:	4630      	mov	r0, r6
 8005278:	4639      	mov	r1, r7
 800527a:	ec53 2b10 	vmov	r2, r3, d0
 800527e:	f7fa ffaf 	bl	80001e0 <__aeabi_dsub>
 8005282:	4606      	mov	r6, r0
 8005284:	460f      	mov	r7, r1
 8005286:	e034      	b.n	80052f2 <__kernel_rem_pio2+0x272>
 8005288:	4b44      	ldr	r3, [pc, #272]	@ (800539c <__kernel_rem_pio2+0x31c>)
 800528a:	2200      	movs	r2, #0
 800528c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005290:	f7fb f95e 	bl	8000550 <__aeabi_dmul>
 8005294:	f7fb fbf6 	bl	8000a84 <__aeabi_d2iz>
 8005298:	f7fb f8f0 	bl	800047c <__aeabi_i2d>
 800529c:	4b40      	ldr	r3, [pc, #256]	@ (80053a0 <__kernel_rem_pio2+0x320>)
 800529e:	2200      	movs	r2, #0
 80052a0:	4606      	mov	r6, r0
 80052a2:	460f      	mov	r7, r1
 80052a4:	f7fb f954 	bl	8000550 <__aeabi_dmul>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052b0:	f7fa ff96 	bl	80001e0 <__aeabi_dsub>
 80052b4:	f7fb fbe6 	bl	8000a84 <__aeabi_d2iz>
 80052b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052bc:	f849 0b04 	str.w	r0, [r9], #4
 80052c0:	4639      	mov	r1, r7
 80052c2:	4630      	mov	r0, r6
 80052c4:	f7fa ff8e 	bl	80001e4 <__adddf3>
 80052c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d0:	e75d      	b.n	800518e <__kernel_rem_pio2+0x10e>
 80052d2:	d107      	bne.n	80052e4 <__kernel_rem_pio2+0x264>
 80052d4:	f108 33ff 	add.w	r3, r8, #4294967295
 80052d8:	aa0c      	add	r2, sp, #48	@ 0x30
 80052da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052de:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80052e2:	e79e      	b.n	8005222 <__kernel_rem_pio2+0x1a2>
 80052e4:	4b2f      	ldr	r3, [pc, #188]	@ (80053a4 <__kernel_rem_pio2+0x324>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	f7fb fbb8 	bl	8000a5c <__aeabi_dcmpge>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d143      	bne.n	8005378 <__kernel_rem_pio2+0x2f8>
 80052f0:	4681      	mov	r9, r0
 80052f2:	2200      	movs	r2, #0
 80052f4:	2300      	movs	r3, #0
 80052f6:	4630      	mov	r0, r6
 80052f8:	4639      	mov	r1, r7
 80052fa:	f7fb fb91 	bl	8000a20 <__aeabi_dcmpeq>
 80052fe:	2800      	cmp	r0, #0
 8005300:	f000 80bf 	beq.w	8005482 <__kernel_rem_pio2+0x402>
 8005304:	f108 33ff 	add.w	r3, r8, #4294967295
 8005308:	2200      	movs	r2, #0
 800530a:	9900      	ldr	r1, [sp, #0]
 800530c:	428b      	cmp	r3, r1
 800530e:	da6e      	bge.n	80053ee <__kernel_rem_pio2+0x36e>
 8005310:	2a00      	cmp	r2, #0
 8005312:	f000 8089 	beq.w	8005428 <__kernel_rem_pio2+0x3a8>
 8005316:	f108 38ff 	add.w	r8, r8, #4294967295
 800531a:	ab0c      	add	r3, sp, #48	@ 0x30
 800531c:	f1ab 0b18 	sub.w	fp, fp, #24
 8005320:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f6      	beq.n	8005316 <__kernel_rem_pio2+0x296>
 8005328:	4658      	mov	r0, fp
 800532a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005388 <__kernel_rem_pio2+0x308>
 800532e:	f000 f9ff 	bl	8005730 <scalbn>
 8005332:	f108 0301 	add.w	r3, r8, #1
 8005336:	00da      	lsls	r2, r3, #3
 8005338:	9205      	str	r2, [sp, #20]
 800533a:	ec55 4b10 	vmov	r4, r5, d0
 800533e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005340:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800539c <__kernel_rem_pio2+0x31c>
 8005344:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005348:	4646      	mov	r6, r8
 800534a:	f04f 0a00 	mov.w	sl, #0
 800534e:	2e00      	cmp	r6, #0
 8005350:	f280 80cf 	bge.w	80054f2 <__kernel_rem_pio2+0x472>
 8005354:	4644      	mov	r4, r8
 8005356:	2c00      	cmp	r4, #0
 8005358:	f2c0 80fd 	blt.w	8005556 <__kernel_rem_pio2+0x4d6>
 800535c:	4b12      	ldr	r3, [pc, #72]	@ (80053a8 <__kernel_rem_pio2+0x328>)
 800535e:	461f      	mov	r7, r3
 8005360:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005362:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005366:	9306      	str	r3, [sp, #24]
 8005368:	f04f 0a00 	mov.w	sl, #0
 800536c:	f04f 0b00 	mov.w	fp, #0
 8005370:	2600      	movs	r6, #0
 8005372:	eba8 0504 	sub.w	r5, r8, r4
 8005376:	e0e2      	b.n	800553e <__kernel_rem_pio2+0x4be>
 8005378:	f04f 0902 	mov.w	r9, #2
 800537c:	e754      	b.n	8005228 <__kernel_rem_pio2+0x1a8>
 800537e:	bf00      	nop
	...
 800538c:	3ff00000 	.word	0x3ff00000
 8005390:	08005b40 	.word	0x08005b40
 8005394:	40200000 	.word	0x40200000
 8005398:	3ff00000 	.word	0x3ff00000
 800539c:	3e700000 	.word	0x3e700000
 80053a0:	41700000 	.word	0x41700000
 80053a4:	3fe00000 	.word	0x3fe00000
 80053a8:	08005b00 	.word	0x08005b00
 80053ac:	f854 3b04 	ldr.w	r3, [r4], #4
 80053b0:	b945      	cbnz	r5, 80053c4 <__kernel_rem_pio2+0x344>
 80053b2:	b123      	cbz	r3, 80053be <__kernel_rem_pio2+0x33e>
 80053b4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80053b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80053bc:	2301      	movs	r3, #1
 80053be:	3201      	adds	r2, #1
 80053c0:	461d      	mov	r5, r3
 80053c2:	e738      	b.n	8005236 <__kernel_rem_pio2+0x1b6>
 80053c4:	1acb      	subs	r3, r1, r3
 80053c6:	e7f7      	b.n	80053b8 <__kernel_rem_pio2+0x338>
 80053c8:	f108 32ff 	add.w	r2, r8, #4294967295
 80053cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80053ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80053d6:	a90c      	add	r1, sp, #48	@ 0x30
 80053d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80053dc:	e739      	b.n	8005252 <__kernel_rem_pio2+0x1d2>
 80053de:	f108 32ff 	add.w	r2, r8, #4294967295
 80053e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80053e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80053ec:	e7f3      	b.n	80053d6 <__kernel_rem_pio2+0x356>
 80053ee:	a90c      	add	r1, sp, #48	@ 0x30
 80053f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	430a      	orrs	r2, r1
 80053f8:	e787      	b.n	800530a <__kernel_rem_pio2+0x28a>
 80053fa:	3401      	adds	r4, #1
 80053fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005400:	2a00      	cmp	r2, #0
 8005402:	d0fa      	beq.n	80053fa <__kernel_rem_pio2+0x37a>
 8005404:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005406:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800540a:	eb0d 0503 	add.w	r5, sp, r3
 800540e:	9b06      	ldr	r3, [sp, #24]
 8005410:	aa20      	add	r2, sp, #128	@ 0x80
 8005412:	4443      	add	r3, r8
 8005414:	f108 0701 	add.w	r7, r8, #1
 8005418:	3d98      	subs	r5, #152	@ 0x98
 800541a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800541e:	4444      	add	r4, r8
 8005420:	42bc      	cmp	r4, r7
 8005422:	da04      	bge.n	800542e <__kernel_rem_pio2+0x3ae>
 8005424:	46a0      	mov	r8, r4
 8005426:	e6a2      	b.n	800516e <__kernel_rem_pio2+0xee>
 8005428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800542a:	2401      	movs	r4, #1
 800542c:	e7e6      	b.n	80053fc <__kernel_rem_pio2+0x37c>
 800542e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005430:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005434:	f7fb f822 	bl	800047c <__aeabi_i2d>
 8005438:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005700 <__kernel_rem_pio2+0x680>
 800543c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005440:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005448:	46b2      	mov	sl, r6
 800544a:	f04f 0800 	mov.w	r8, #0
 800544e:	9b05      	ldr	r3, [sp, #20]
 8005450:	4598      	cmp	r8, r3
 8005452:	dd05      	ble.n	8005460 <__kernel_rem_pio2+0x3e0>
 8005454:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005458:	3701      	adds	r7, #1
 800545a:	eca5 7b02 	vstmia	r5!, {d7}
 800545e:	e7df      	b.n	8005420 <__kernel_rem_pio2+0x3a0>
 8005460:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005464:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005468:	f7fb f872 	bl	8000550 <__aeabi_dmul>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005474:	f7fa feb6 	bl	80001e4 <__adddf3>
 8005478:	f108 0801 	add.w	r8, r8, #1
 800547c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005480:	e7e5      	b.n	800544e <__kernel_rem_pio2+0x3ce>
 8005482:	f1cb 0000 	rsb	r0, fp, #0
 8005486:	ec47 6b10 	vmov	d0, r6, r7
 800548a:	f000 f951 	bl	8005730 <scalbn>
 800548e:	ec55 4b10 	vmov	r4, r5, d0
 8005492:	4b9d      	ldr	r3, [pc, #628]	@ (8005708 <__kernel_rem_pio2+0x688>)
 8005494:	2200      	movs	r2, #0
 8005496:	4620      	mov	r0, r4
 8005498:	4629      	mov	r1, r5
 800549a:	f7fb fadf 	bl	8000a5c <__aeabi_dcmpge>
 800549e:	b300      	cbz	r0, 80054e2 <__kernel_rem_pio2+0x462>
 80054a0:	4b9a      	ldr	r3, [pc, #616]	@ (800570c <__kernel_rem_pio2+0x68c>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	4620      	mov	r0, r4
 80054a6:	4629      	mov	r1, r5
 80054a8:	f7fb f852 	bl	8000550 <__aeabi_dmul>
 80054ac:	f7fb faea 	bl	8000a84 <__aeabi_d2iz>
 80054b0:	4606      	mov	r6, r0
 80054b2:	f7fa ffe3 	bl	800047c <__aeabi_i2d>
 80054b6:	4b94      	ldr	r3, [pc, #592]	@ (8005708 <__kernel_rem_pio2+0x688>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	f7fb f849 	bl	8000550 <__aeabi_dmul>
 80054be:	460b      	mov	r3, r1
 80054c0:	4602      	mov	r2, r0
 80054c2:	4629      	mov	r1, r5
 80054c4:	4620      	mov	r0, r4
 80054c6:	f7fa fe8b 	bl	80001e0 <__aeabi_dsub>
 80054ca:	f7fb fadb 	bl	8000a84 <__aeabi_d2iz>
 80054ce:	ab0c      	add	r3, sp, #48	@ 0x30
 80054d0:	f10b 0b18 	add.w	fp, fp, #24
 80054d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80054d8:	f108 0801 	add.w	r8, r8, #1
 80054dc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80054e0:	e722      	b.n	8005328 <__kernel_rem_pio2+0x2a8>
 80054e2:	4620      	mov	r0, r4
 80054e4:	4629      	mov	r1, r5
 80054e6:	f7fb facd 	bl	8000a84 <__aeabi_d2iz>
 80054ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80054ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80054f0:	e71a      	b.n	8005328 <__kernel_rem_pio2+0x2a8>
 80054f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80054f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80054f8:	f7fa ffc0 	bl	800047c <__aeabi_i2d>
 80054fc:	4622      	mov	r2, r4
 80054fe:	462b      	mov	r3, r5
 8005500:	f7fb f826 	bl	8000550 <__aeabi_dmul>
 8005504:	4652      	mov	r2, sl
 8005506:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800550a:	465b      	mov	r3, fp
 800550c:	4620      	mov	r0, r4
 800550e:	4629      	mov	r1, r5
 8005510:	f7fb f81e 	bl	8000550 <__aeabi_dmul>
 8005514:	3e01      	subs	r6, #1
 8005516:	4604      	mov	r4, r0
 8005518:	460d      	mov	r5, r1
 800551a:	e718      	b.n	800534e <__kernel_rem_pio2+0x2ce>
 800551c:	9906      	ldr	r1, [sp, #24]
 800551e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005522:	9106      	str	r1, [sp, #24]
 8005524:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005528:	f7fb f812 	bl	8000550 <__aeabi_dmul>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4650      	mov	r0, sl
 8005532:	4659      	mov	r1, fp
 8005534:	f7fa fe56 	bl	80001e4 <__adddf3>
 8005538:	3601      	adds	r6, #1
 800553a:	4682      	mov	sl, r0
 800553c:	468b      	mov	fp, r1
 800553e:	9b00      	ldr	r3, [sp, #0]
 8005540:	429e      	cmp	r6, r3
 8005542:	dc01      	bgt.n	8005548 <__kernel_rem_pio2+0x4c8>
 8005544:	42b5      	cmp	r5, r6
 8005546:	dae9      	bge.n	800551c <__kernel_rem_pio2+0x49c>
 8005548:	ab48      	add	r3, sp, #288	@ 0x120
 800554a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800554e:	e9c5 ab00 	strd	sl, fp, [r5]
 8005552:	3c01      	subs	r4, #1
 8005554:	e6ff      	b.n	8005356 <__kernel_rem_pio2+0x2d6>
 8005556:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005558:	2b02      	cmp	r3, #2
 800555a:	dc0b      	bgt.n	8005574 <__kernel_rem_pio2+0x4f4>
 800555c:	2b00      	cmp	r3, #0
 800555e:	dc39      	bgt.n	80055d4 <__kernel_rem_pio2+0x554>
 8005560:	d05d      	beq.n	800561e <__kernel_rem_pio2+0x59e>
 8005562:	9b02      	ldr	r3, [sp, #8]
 8005564:	f003 0007 	and.w	r0, r3, #7
 8005568:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800556c:	ecbd 8b02 	vpop	{d8}
 8005570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005574:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005576:	2b03      	cmp	r3, #3
 8005578:	d1f3      	bne.n	8005562 <__kernel_rem_pio2+0x4e2>
 800557a:	9b05      	ldr	r3, [sp, #20]
 800557c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005580:	eb0d 0403 	add.w	r4, sp, r3
 8005584:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005588:	4625      	mov	r5, r4
 800558a:	46c2      	mov	sl, r8
 800558c:	f1ba 0f00 	cmp.w	sl, #0
 8005590:	f1a5 0508 	sub.w	r5, r5, #8
 8005594:	dc6b      	bgt.n	800566e <__kernel_rem_pio2+0x5ee>
 8005596:	4645      	mov	r5, r8
 8005598:	2d01      	cmp	r5, #1
 800559a:	f1a4 0408 	sub.w	r4, r4, #8
 800559e:	f300 8087 	bgt.w	80056b0 <__kernel_rem_pio2+0x630>
 80055a2:	9c05      	ldr	r4, [sp, #20]
 80055a4:	ab48      	add	r3, sp, #288	@ 0x120
 80055a6:	441c      	add	r4, r3
 80055a8:	2000      	movs	r0, #0
 80055aa:	2100      	movs	r1, #0
 80055ac:	f1b8 0f01 	cmp.w	r8, #1
 80055b0:	f300 809c 	bgt.w	80056ec <__kernel_rem_pio2+0x66c>
 80055b4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80055b8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80055bc:	f1b9 0f00 	cmp.w	r9, #0
 80055c0:	f040 80a6 	bne.w	8005710 <__kernel_rem_pio2+0x690>
 80055c4:	9b04      	ldr	r3, [sp, #16]
 80055c6:	e9c3 7800 	strd	r7, r8, [r3]
 80055ca:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80055ce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80055d2:	e7c6      	b.n	8005562 <__kernel_rem_pio2+0x4e2>
 80055d4:	9d05      	ldr	r5, [sp, #20]
 80055d6:	ab48      	add	r3, sp, #288	@ 0x120
 80055d8:	441d      	add	r5, r3
 80055da:	4644      	mov	r4, r8
 80055dc:	2000      	movs	r0, #0
 80055de:	2100      	movs	r1, #0
 80055e0:	2c00      	cmp	r4, #0
 80055e2:	da35      	bge.n	8005650 <__kernel_rem_pio2+0x5d0>
 80055e4:	f1b9 0f00 	cmp.w	r9, #0
 80055e8:	d038      	beq.n	800565c <__kernel_rem_pio2+0x5dc>
 80055ea:	4602      	mov	r2, r0
 80055ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055f0:	9c04      	ldr	r4, [sp, #16]
 80055f2:	e9c4 2300 	strd	r2, r3, [r4]
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80055fe:	f7fa fdef 	bl	80001e0 <__aeabi_dsub>
 8005602:	ad4a      	add	r5, sp, #296	@ 0x128
 8005604:	2401      	movs	r4, #1
 8005606:	45a0      	cmp	r8, r4
 8005608:	da2b      	bge.n	8005662 <__kernel_rem_pio2+0x5e2>
 800560a:	f1b9 0f00 	cmp.w	r9, #0
 800560e:	d002      	beq.n	8005616 <__kernel_rem_pio2+0x596>
 8005610:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005614:	4619      	mov	r1, r3
 8005616:	9b04      	ldr	r3, [sp, #16]
 8005618:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800561c:	e7a1      	b.n	8005562 <__kernel_rem_pio2+0x4e2>
 800561e:	9c05      	ldr	r4, [sp, #20]
 8005620:	ab48      	add	r3, sp, #288	@ 0x120
 8005622:	441c      	add	r4, r3
 8005624:	2000      	movs	r0, #0
 8005626:	2100      	movs	r1, #0
 8005628:	f1b8 0f00 	cmp.w	r8, #0
 800562c:	da09      	bge.n	8005642 <__kernel_rem_pio2+0x5c2>
 800562e:	f1b9 0f00 	cmp.w	r9, #0
 8005632:	d002      	beq.n	800563a <__kernel_rem_pio2+0x5ba>
 8005634:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005638:	4619      	mov	r1, r3
 800563a:	9b04      	ldr	r3, [sp, #16]
 800563c:	e9c3 0100 	strd	r0, r1, [r3]
 8005640:	e78f      	b.n	8005562 <__kernel_rem_pio2+0x4e2>
 8005642:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005646:	f7fa fdcd 	bl	80001e4 <__adddf3>
 800564a:	f108 38ff 	add.w	r8, r8, #4294967295
 800564e:	e7eb      	b.n	8005628 <__kernel_rem_pio2+0x5a8>
 8005650:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005654:	f7fa fdc6 	bl	80001e4 <__adddf3>
 8005658:	3c01      	subs	r4, #1
 800565a:	e7c1      	b.n	80055e0 <__kernel_rem_pio2+0x560>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	e7c6      	b.n	80055f0 <__kernel_rem_pio2+0x570>
 8005662:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005666:	f7fa fdbd 	bl	80001e4 <__adddf3>
 800566a:	3401      	adds	r4, #1
 800566c:	e7cb      	b.n	8005606 <__kernel_rem_pio2+0x586>
 800566e:	ed95 7b00 	vldr	d7, [r5]
 8005672:	ed8d 7b00 	vstr	d7, [sp]
 8005676:	ed95 7b02 	vldr	d7, [r5, #8]
 800567a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800567e:	ec53 2b17 	vmov	r2, r3, d7
 8005682:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005686:	f7fa fdad 	bl	80001e4 <__adddf3>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4606      	mov	r6, r0
 8005690:	460f      	mov	r7, r1
 8005692:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005696:	f7fa fda3 	bl	80001e0 <__aeabi_dsub>
 800569a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800569e:	f7fa fda1 	bl	80001e4 <__adddf3>
 80056a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056a6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80056aa:	e9c5 6700 	strd	r6, r7, [r5]
 80056ae:	e76d      	b.n	800558c <__kernel_rem_pio2+0x50c>
 80056b0:	ed94 7b00 	vldr	d7, [r4]
 80056b4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80056b8:	ec51 0b17 	vmov	r0, r1, d7
 80056bc:	4652      	mov	r2, sl
 80056be:	465b      	mov	r3, fp
 80056c0:	ed8d 7b00 	vstr	d7, [sp]
 80056c4:	f7fa fd8e 	bl	80001e4 <__adddf3>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4606      	mov	r6, r0
 80056ce:	460f      	mov	r7, r1
 80056d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056d4:	f7fa fd84 	bl	80001e0 <__aeabi_dsub>
 80056d8:	4652      	mov	r2, sl
 80056da:	465b      	mov	r3, fp
 80056dc:	f7fa fd82 	bl	80001e4 <__adddf3>
 80056e0:	3d01      	subs	r5, #1
 80056e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056e6:	e9c4 6700 	strd	r6, r7, [r4]
 80056ea:	e755      	b.n	8005598 <__kernel_rem_pio2+0x518>
 80056ec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80056f0:	f7fa fd78 	bl	80001e4 <__adddf3>
 80056f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80056f8:	e758      	b.n	80055ac <__kernel_rem_pio2+0x52c>
 80056fa:	bf00      	nop
 80056fc:	f3af 8000 	nop.w
	...
 8005708:	41700000 	.word	0x41700000
 800570c:	3e700000 	.word	0x3e700000
 8005710:	9b04      	ldr	r3, [sp, #16]
 8005712:	9a04      	ldr	r2, [sp, #16]
 8005714:	601f      	str	r7, [r3, #0]
 8005716:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800571a:	605c      	str	r4, [r3, #4]
 800571c:	609d      	str	r5, [r3, #8]
 800571e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005722:	60d3      	str	r3, [r2, #12]
 8005724:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005728:	6110      	str	r0, [r2, #16]
 800572a:	6153      	str	r3, [r2, #20]
 800572c:	e719      	b.n	8005562 <__kernel_rem_pio2+0x4e2>
 800572e:	bf00      	nop

08005730 <scalbn>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	ec55 4b10 	vmov	r4, r5, d0
 8005736:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800573a:	4606      	mov	r6, r0
 800573c:	462b      	mov	r3, r5
 800573e:	b991      	cbnz	r1, 8005766 <scalbn+0x36>
 8005740:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005744:	4323      	orrs	r3, r4
 8005746:	d03d      	beq.n	80057c4 <scalbn+0x94>
 8005748:	4b35      	ldr	r3, [pc, #212]	@ (8005820 <scalbn+0xf0>)
 800574a:	4620      	mov	r0, r4
 800574c:	4629      	mov	r1, r5
 800574e:	2200      	movs	r2, #0
 8005750:	f7fa fefe 	bl	8000550 <__aeabi_dmul>
 8005754:	4b33      	ldr	r3, [pc, #204]	@ (8005824 <scalbn+0xf4>)
 8005756:	429e      	cmp	r6, r3
 8005758:	4604      	mov	r4, r0
 800575a:	460d      	mov	r5, r1
 800575c:	da0f      	bge.n	800577e <scalbn+0x4e>
 800575e:	a328      	add	r3, pc, #160	@ (adr r3, 8005800 <scalbn+0xd0>)
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	e01e      	b.n	80057a4 <scalbn+0x74>
 8005766:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800576a:	4291      	cmp	r1, r2
 800576c:	d10b      	bne.n	8005786 <scalbn+0x56>
 800576e:	4622      	mov	r2, r4
 8005770:	4620      	mov	r0, r4
 8005772:	4629      	mov	r1, r5
 8005774:	f7fa fd36 	bl	80001e4 <__adddf3>
 8005778:	4604      	mov	r4, r0
 800577a:	460d      	mov	r5, r1
 800577c:	e022      	b.n	80057c4 <scalbn+0x94>
 800577e:	460b      	mov	r3, r1
 8005780:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005784:	3936      	subs	r1, #54	@ 0x36
 8005786:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800578a:	4296      	cmp	r6, r2
 800578c:	dd0d      	ble.n	80057aa <scalbn+0x7a>
 800578e:	2d00      	cmp	r5, #0
 8005790:	a11d      	add	r1, pc, #116	@ (adr r1, 8005808 <scalbn+0xd8>)
 8005792:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005796:	da02      	bge.n	800579e <scalbn+0x6e>
 8005798:	a11d      	add	r1, pc, #116	@ (adr r1, 8005810 <scalbn+0xe0>)
 800579a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800579e:	a31a      	add	r3, pc, #104	@ (adr r3, 8005808 <scalbn+0xd8>)
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	f7fa fed4 	bl	8000550 <__aeabi_dmul>
 80057a8:	e7e6      	b.n	8005778 <scalbn+0x48>
 80057aa:	1872      	adds	r2, r6, r1
 80057ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80057b0:	428a      	cmp	r2, r1
 80057b2:	dcec      	bgt.n	800578e <scalbn+0x5e>
 80057b4:	2a00      	cmp	r2, #0
 80057b6:	dd08      	ble.n	80057ca <scalbn+0x9a>
 80057b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80057bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80057c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80057c4:	ec45 4b10 	vmov	d0, r4, r5
 80057c8:	bd70      	pop	{r4, r5, r6, pc}
 80057ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80057ce:	da08      	bge.n	80057e2 <scalbn+0xb2>
 80057d0:	2d00      	cmp	r5, #0
 80057d2:	a10b      	add	r1, pc, #44	@ (adr r1, 8005800 <scalbn+0xd0>)
 80057d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057d8:	dac1      	bge.n	800575e <scalbn+0x2e>
 80057da:	a10f      	add	r1, pc, #60	@ (adr r1, 8005818 <scalbn+0xe8>)
 80057dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057e0:	e7bd      	b.n	800575e <scalbn+0x2e>
 80057e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80057e6:	3236      	adds	r2, #54	@ 0x36
 80057e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80057ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80057f0:	4620      	mov	r0, r4
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <scalbn+0xf8>)
 80057f4:	4629      	mov	r1, r5
 80057f6:	2200      	movs	r2, #0
 80057f8:	e7d4      	b.n	80057a4 <scalbn+0x74>
 80057fa:	bf00      	nop
 80057fc:	f3af 8000 	nop.w
 8005800:	c2f8f359 	.word	0xc2f8f359
 8005804:	01a56e1f 	.word	0x01a56e1f
 8005808:	8800759c 	.word	0x8800759c
 800580c:	7e37e43c 	.word	0x7e37e43c
 8005810:	8800759c 	.word	0x8800759c
 8005814:	fe37e43c 	.word	0xfe37e43c
 8005818:	c2f8f359 	.word	0xc2f8f359
 800581c:	81a56e1f 	.word	0x81a56e1f
 8005820:	43500000 	.word	0x43500000
 8005824:	ffff3cb0 	.word	0xffff3cb0
 8005828:	3c900000 	.word	0x3c900000
 800582c:	00000000 	.word	0x00000000

08005830 <floor>:
 8005830:	ec51 0b10 	vmov	r0, r1, d0
 8005834:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800583c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005840:	2e13      	cmp	r6, #19
 8005842:	460c      	mov	r4, r1
 8005844:	4605      	mov	r5, r0
 8005846:	4680      	mov	r8, r0
 8005848:	dc34      	bgt.n	80058b4 <floor+0x84>
 800584a:	2e00      	cmp	r6, #0
 800584c:	da17      	bge.n	800587e <floor+0x4e>
 800584e:	a332      	add	r3, pc, #200	@ (adr r3, 8005918 <floor+0xe8>)
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f7fa fcc6 	bl	80001e4 <__adddf3>
 8005858:	2200      	movs	r2, #0
 800585a:	2300      	movs	r3, #0
 800585c:	f7fb f908 	bl	8000a70 <__aeabi_dcmpgt>
 8005860:	b150      	cbz	r0, 8005878 <floor+0x48>
 8005862:	2c00      	cmp	r4, #0
 8005864:	da55      	bge.n	8005912 <floor+0xe2>
 8005866:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800586a:	432c      	orrs	r4, r5
 800586c:	2500      	movs	r5, #0
 800586e:	42ac      	cmp	r4, r5
 8005870:	4c2b      	ldr	r4, [pc, #172]	@ (8005920 <floor+0xf0>)
 8005872:	bf08      	it	eq
 8005874:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005878:	4621      	mov	r1, r4
 800587a:	4628      	mov	r0, r5
 800587c:	e023      	b.n	80058c6 <floor+0x96>
 800587e:	4f29      	ldr	r7, [pc, #164]	@ (8005924 <floor+0xf4>)
 8005880:	4137      	asrs	r7, r6
 8005882:	ea01 0307 	and.w	r3, r1, r7
 8005886:	4303      	orrs	r3, r0
 8005888:	d01d      	beq.n	80058c6 <floor+0x96>
 800588a:	a323      	add	r3, pc, #140	@ (adr r3, 8005918 <floor+0xe8>)
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f7fa fca8 	bl	80001e4 <__adddf3>
 8005894:	2200      	movs	r2, #0
 8005896:	2300      	movs	r3, #0
 8005898:	f7fb f8ea 	bl	8000a70 <__aeabi_dcmpgt>
 800589c:	2800      	cmp	r0, #0
 800589e:	d0eb      	beq.n	8005878 <floor+0x48>
 80058a0:	2c00      	cmp	r4, #0
 80058a2:	bfbe      	ittt	lt
 80058a4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80058a8:	4133      	asrlt	r3, r6
 80058aa:	18e4      	addlt	r4, r4, r3
 80058ac:	ea24 0407 	bic.w	r4, r4, r7
 80058b0:	2500      	movs	r5, #0
 80058b2:	e7e1      	b.n	8005878 <floor+0x48>
 80058b4:	2e33      	cmp	r6, #51	@ 0x33
 80058b6:	dd0a      	ble.n	80058ce <floor+0x9e>
 80058b8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80058bc:	d103      	bne.n	80058c6 <floor+0x96>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	f7fa fc8f 	bl	80001e4 <__adddf3>
 80058c6:	ec41 0b10 	vmov	d0, r0, r1
 80058ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80058d2:	f04f 37ff 	mov.w	r7, #4294967295
 80058d6:	40df      	lsrs	r7, r3
 80058d8:	4207      	tst	r7, r0
 80058da:	d0f4      	beq.n	80058c6 <floor+0x96>
 80058dc:	a30e      	add	r3, pc, #56	@ (adr r3, 8005918 <floor+0xe8>)
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	f7fa fc7f 	bl	80001e4 <__adddf3>
 80058e6:	2200      	movs	r2, #0
 80058e8:	2300      	movs	r3, #0
 80058ea:	f7fb f8c1 	bl	8000a70 <__aeabi_dcmpgt>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d0c2      	beq.n	8005878 <floor+0x48>
 80058f2:	2c00      	cmp	r4, #0
 80058f4:	da0a      	bge.n	800590c <floor+0xdc>
 80058f6:	2e14      	cmp	r6, #20
 80058f8:	d101      	bne.n	80058fe <floor+0xce>
 80058fa:	3401      	adds	r4, #1
 80058fc:	e006      	b.n	800590c <floor+0xdc>
 80058fe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005902:	2301      	movs	r3, #1
 8005904:	40b3      	lsls	r3, r6
 8005906:	441d      	add	r5, r3
 8005908:	4545      	cmp	r5, r8
 800590a:	d3f6      	bcc.n	80058fa <floor+0xca>
 800590c:	ea25 0507 	bic.w	r5, r5, r7
 8005910:	e7b2      	b.n	8005878 <floor+0x48>
 8005912:	2500      	movs	r5, #0
 8005914:	462c      	mov	r4, r5
 8005916:	e7af      	b.n	8005878 <floor+0x48>
 8005918:	8800759c 	.word	0x8800759c
 800591c:	7e37e43c 	.word	0x7e37e43c
 8005920:	bff00000 	.word	0xbff00000
 8005924:	000fffff 	.word	0x000fffff

08005928 <_init>:
 8005928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592a:	bf00      	nop
 800592c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592e:	bc08      	pop	{r3}
 8005930:	469e      	mov	lr, r3
 8005932:	4770      	bx	lr

08005934 <_fini>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	bf00      	nop
 8005938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593a:	bc08      	pop	{r3}
 800593c:	469e      	mov	lr, r3
 800593e:	4770      	bx	lr
